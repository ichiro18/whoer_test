!function(n){var e={};function t(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return n[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:o})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)t.d(o,r,function(e){return n[e]}.bind(null,r));return o},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="/whoer_test/",t(t.s=101)}([function(n,e,t){n.exports=t(27)},function(n,e,t){"use strict";var o=t(15),r=t(28),a=Object.prototype.toString;function i(n){return"[object Array]"===a.call(n)}function f(n){return null!==n&&"object"==typeof n}function c(n){return"[object Function]"===a.call(n)}function s(n,e){if(null!=n)if("object"!=typeof n&&(n=[n]),i(n))for(var t=0,o=n.length;t<o;t++)e.call(null,n[t],t,n);else for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&e.call(null,n[r],r,n)}n.exports={isArray:i,isArrayBuffer:function(n){return"[object ArrayBuffer]"===a.call(n)},isBuffer:r,isFormData:function(n){return"undefined"!=typeof FormData&&n instanceof FormData},isArrayBufferView:function(n){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(n):n&&n.buffer&&n.buffer instanceof ArrayBuffer},isString:function(n){return"string"==typeof n},isNumber:function(n){return"number"==typeof n},isObject:f,isUndefined:function(n){return void 0===n},isDate:function(n){return"[object Date]"===a.call(n)},isFile:function(n){return"[object File]"===a.call(n)},isBlob:function(n){return"[object Blob]"===a.call(n)},isFunction:c,isStream:function(n){return f(n)&&c(n.pipe)},isURLSearchParams:function(n){return"undefined"!=typeof URLSearchParams&&n instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:s,merge:function n(){var e={};function t(t,o){"object"==typeof e[o]&&"object"==typeof t?e[o]=n(e[o],t):e[o]=t}for(var o=0,r=arguments.length;o<r;o++)s(arguments[o],t);return e},deepMerge:function n(){var e={};function t(t,o){"object"==typeof e[o]&&"object"==typeof t?e[o]=n(e[o],t):e[o]="object"==typeof t?n({},t):t}for(var o=0,r=arguments.length;o<r;o++)s(arguments[o],t);return e},extend:function(n,e,t){return s(e,function(e,r){n[r]=t&&"function"==typeof e?o(e,t):e}),n},trim:function(n){return n.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(n,e,t){"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map(function(e){var t=function(n,e){var t=n[1]||"",o=n[3];if(!o)return t;if(e&&"function"==typeof btoa){var r=(i=o,f=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(f),"/*# ".concat(c," */")),a=o.sources.map(function(n){return"/*# sourceURL=".concat(o.sourceRoot).concat(n," */")});return[t].concat(a).concat([r]).join("\n")}var i,f,c;return[t].join("\n")}(e,n);return e[2]?"@media ".concat(e[2],"{").concat(t,"}"):t}).join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var o={},r=0;r<this.length;r++){var a=this[r][0];null!=a&&(o[a]=!0)}for(var i=0;i<n.length;i++){var f=n[i];null!=f[0]&&o[f[0]]||(t&&!f[2]?f[2]=t:t&&(f[2]="(".concat(f[2],") and (").concat(t,")")),e.push(f))}},e}},function(n,e,t){"use strict";function o(n,e){for(var t=[],o={},r=0;r<e.length;r++){var a=e[r],i=a[0],f={id:n+":"+r,css:a[1],media:a[2],sourceMap:a[3]};o[i]?o[i].parts.push(f):t.push(o[i]={id:i,parts:[f]})}return t}t.r(e),t.d(e,"default",function(){return b});var r="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!r)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var a={},i=r&&(document.head||document.getElementsByTagName("head")[0]),f=null,c=0,s=!1,l=function(){},u=null,d="data-vue-ssr-id",p="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function b(n,e,t,r){s=t,u=r||{};var i=o(n,e);return h(i),function(e){for(var t=[],r=0;r<i.length;r++){var f=i[r];(c=a[f.id]).refs--,t.push(c)}e?h(i=o(n,e)):i=[];for(r=0;r<t.length;r++){var c;if(0===(c=t[r]).refs){for(var s=0;s<c.parts.length;s++)c.parts[s]();delete a[c.id]}}}}function h(n){for(var e=0;e<n.length;e++){var t=n[e],o=a[t.id];if(o){o.refs++;for(var r=0;r<o.parts.length;r++)o.parts[r](t.parts[r]);for(;r<t.parts.length;r++)o.parts.push(v(t.parts[r]));o.parts.length>t.parts.length&&(o.parts.length=t.parts.length)}else{var i=[];for(r=0;r<t.parts.length;r++)i.push(v(t.parts[r]));a[t.id]={id:t.id,refs:1,parts:i}}}}function m(){var n=document.createElement("style");return n.type="text/css",i.appendChild(n),n}function v(n){var e,t,o=document.querySelector("style["+d+'~="'+n.id+'"]');if(o){if(s)return l;o.parentNode.removeChild(o)}if(p){var r=c++;o=f||(f=m()),e=_.bind(null,o,r,!1),t=_.bind(null,o,r,!0)}else o=m(),e=function(n,e){var t=e.css,o=e.media,r=e.sourceMap;o&&n.setAttribute("media",o);u.ssrId&&n.setAttribute(d,e.id);r&&(t+="\n/*# sourceURL="+r.sources[0]+" */",t+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}.bind(null,o),t=function(){o.parentNode.removeChild(o)};return e(n),function(o){if(o){if(o.css===n.css&&o.media===n.media&&o.sourceMap===n.sourceMap)return;e(n=o)}else t()}}var g,y=(g=[],function(n,e){return g[n]=e,g.filter(Boolean).join("\n")});function _(n,e,t,o){var r=t?"":o.css;if(n.styleSheet)n.styleSheet.cssText=y(e,r);else{var a=document.createTextNode(r),i=n.childNodes;i[e]&&n.removeChild(i[e]),i.length?n.insertBefore(a,i[e]):n.appendChild(a)}}},function(n,e,t){"use strict";(function(n,t){
/*!
 * Vue.js v2.6.10
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */
var o=Object.freeze({});function r(n){return null==n}function a(n){return null!=n}function i(n){return!0===n}function f(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function c(n){return null!==n&&"object"==typeof n}var s=Object.prototype.toString;function l(n){return"[object Object]"===s.call(n)}function u(n){return"[object RegExp]"===s.call(n)}function d(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function p(n){return a(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function b(n){return null==n?"":Array.isArray(n)||l(n)&&n.toString===s?JSON.stringify(n,null,2):String(n)}function h(n){var e=parseFloat(n);return isNaN(e)?n:e}function m(n,e){for(var t=Object.create(null),o=n.split(","),r=0;r<o.length;r++)t[o[r]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}m("slot,component",!0);var v=m("key,ref,slot,slot-scope,is");function g(n,e){if(n.length){var t=n.indexOf(e);if(t>-1)return n.splice(t,1)}}var y=Object.prototype.hasOwnProperty;function _(n,e){return y.call(n,e)}function w(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var x=/-(\w)/g,k=w(function(n){return n.replace(x,function(n,e){return e?e.toUpperCase():""})}),C=w(function(n){return n.charAt(0).toUpperCase()+n.slice(1)}),$=/\B([A-Z])/g,A=w(function(n){return n.replace($,"-$1").toLowerCase()});var S=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var o=arguments.length;return o?o>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function E(n,e){e=e||0;for(var t=n.length-e,o=new Array(t);t--;)o[t]=n[t+e];return o}function O(n,e){for(var t in e)n[t]=e[t];return n}function T(n){for(var e={},t=0;t<n.length;t++)n[t]&&O(e,n[t]);return e}function j(n,e,t){}var I=function(n,e,t){return!1},L=function(n){return n};function M(n,e){if(n===e)return!0;var t=c(n),o=c(e);if(!t||!o)return!t&&!o&&String(n)===String(e);try{var r=Array.isArray(n),a=Array.isArray(e);if(r&&a)return n.length===e.length&&n.every(function(n,t){return M(n,e[t])});if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(r||a)return!1;var i=Object.keys(n),f=Object.keys(e);return i.length===f.length&&i.every(function(t){return M(n[t],e[t])})}catch(n){return!1}}function F(n,e){for(var t=0;t<n.length;t++)if(M(n[t],e))return t;return-1}function N(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}var R="data-server-rendered",z=["component","directive","filter"],D=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],P={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:I,isReservedAttr:I,isUnknownElement:I,getTagNamespace:j,parsePlatformTagName:L,mustUseProp:I,async:!0,_lifecycleHooks:D},q=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function U(n,e,t,o){Object.defineProperty(n,e,{value:t,enumerable:!!o,writable:!0,configurable:!0})}var B=new RegExp("[^"+q.source+".$_\\d]");var H,V="__proto__"in{},W="undefined"!=typeof window,G="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,X=G&&WXEnvironment.platform.toLowerCase(),K=W&&window.navigator.userAgent.toLowerCase(),Y=K&&/msie|trident/.test(K),J=K&&K.indexOf("msie 9.0")>0,Z=K&&K.indexOf("edge/")>0,Q=(K&&K.indexOf("android"),K&&/iphone|ipad|ipod|ios/.test(K)||"ios"===X),nn=(K&&/chrome\/\d+/.test(K),K&&/phantomjs/.test(K),K&&K.match(/firefox\/(\d+)/)),en={}.watch,tn=!1;if(W)try{var on={};Object.defineProperty(on,"passive",{get:function(){tn=!0}}),window.addEventListener("test-passive",null,on)}catch(n){}var rn=function(){return void 0===H&&(H=!W&&!G&&void 0!==n&&(n.process&&"server"===n.process.env.VUE_ENV)),H},an=W&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function fn(n){return"function"==typeof n&&/native code/.test(n.toString())}var cn,sn="undefined"!=typeof Symbol&&fn(Symbol)&&"undefined"!=typeof Reflect&&fn(Reflect.ownKeys);cn="undefined"!=typeof Set&&fn(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var ln=j,un=0,dn=function(){this.id=un++,this.subs=[]};dn.prototype.addSub=function(n){this.subs.push(n)},dn.prototype.removeSub=function(n){g(this.subs,n)},dn.prototype.depend=function(){dn.target&&dn.target.addDep(this)},dn.prototype.notify=function(){var n=this.subs.slice();for(var e=0,t=n.length;e<t;e++)n[e].update()},dn.target=null;var pn=[];function bn(n){pn.push(n),dn.target=n}function hn(){pn.pop(),dn.target=pn[pn.length-1]}var mn=function(n,e,t,o,r,a,i,f){this.tag=n,this.data=e,this.children=t,this.text=o,this.elm=r,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=f,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},vn={child:{configurable:!0}};vn.child.get=function(){return this.componentInstance},Object.defineProperties(mn.prototype,vn);var gn=function(n){void 0===n&&(n="");var e=new mn;return e.text=n,e.isComment=!0,e};function yn(n){return new mn(void 0,void 0,void 0,String(n))}function _n(n){var e=new mn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var wn=Array.prototype,xn=Object.create(wn);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(n){var e=wn[n];U(xn,n,function(){for(var t=[],o=arguments.length;o--;)t[o]=arguments[o];var r,a=e.apply(this,t),i=this.__ob__;switch(n){case"push":case"unshift":r=t;break;case"splice":r=t.slice(2)}return r&&i.observeArray(r),i.dep.notify(),a})});var kn=Object.getOwnPropertyNames(xn),Cn=!0;function $n(n){Cn=n}var An=function(n){this.value=n,this.dep=new dn,this.vmCount=0,U(n,"__ob__",this),Array.isArray(n)?(V?function(n,e){n.__proto__=e}(n,xn):function(n,e,t){for(var o=0,r=t.length;o<r;o++){var a=t[o];U(n,a,e[a])}}(n,xn,kn),this.observeArray(n)):this.walk(n)};function Sn(n,e){var t;if(c(n)&&!(n instanceof mn))return _(n,"__ob__")&&n.__ob__ instanceof An?t=n.__ob__:Cn&&!rn()&&(Array.isArray(n)||l(n))&&Object.isExtensible(n)&&!n._isVue&&(t=new An(n)),e&&t&&t.vmCount++,t}function En(n,e,t,o,r){var a=new dn,i=Object.getOwnPropertyDescriptor(n,e);if(!i||!1!==i.configurable){var f=i&&i.get,c=i&&i.set;f&&!c||2!==arguments.length||(t=n[e]);var s=!r&&Sn(t);Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=f?f.call(n):t;return dn.target&&(a.depend(),s&&(s.dep.depend(),Array.isArray(e)&&function n(e){for(var t=void 0,o=0,r=e.length;o<r;o++)(t=e[o])&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&n(t)}(e))),e},set:function(e){var o=f?f.call(n):t;e===o||e!=e&&o!=o||f&&!c||(c?c.call(n,e):t=e,s=!r&&Sn(e),a.notify())}})}}function On(n,e,t){if(Array.isArray(n)&&d(e))return n.length=Math.max(n.length,e),n.splice(e,1,t),t;if(e in n&&!(e in Object.prototype))return n[e]=t,t;var o=n.__ob__;return n._isVue||o&&o.vmCount?t:o?(En(o.value,e,t),o.dep.notify(),t):(n[e]=t,t)}function Tn(n,e){if(Array.isArray(n)&&d(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||_(n,e)&&(delete n[e],t&&t.dep.notify())}}An.prototype.walk=function(n){for(var e=Object.keys(n),t=0;t<e.length;t++)En(n,e[t])},An.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)Sn(n[e])};var jn=P.optionMergeStrategies;function In(n,e){if(!e)return n;for(var t,o,r,a=sn?Reflect.ownKeys(e):Object.keys(e),i=0;i<a.length;i++)"__ob__"!==(t=a[i])&&(o=n[t],r=e[t],_(n,t)?o!==r&&l(o)&&l(r)&&In(o,r):On(n,t,r));return n}function Ln(n,e,t){return t?function(){var o="function"==typeof e?e.call(t,t):e,r="function"==typeof n?n.call(t,t):n;return o?In(o,r):r}:e?n?function(){return In("function"==typeof e?e.call(this,this):e,"function"==typeof n?n.call(this,this):n)}:e:n}function Mn(n,e){var t=e?n?n.concat(e):Array.isArray(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function Fn(n,e,t,o){var r=Object.create(n||null);return e?O(r,e):r}jn.data=function(n,e,t){return t?Ln(n,e,t):e&&"function"!=typeof e?n:Ln(n,e)},D.forEach(function(n){jn[n]=Mn}),z.forEach(function(n){jn[n+"s"]=Fn}),jn.watch=function(n,e,t,o){if(n===en&&(n=void 0),e===en&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var r={};for(var a in O(r,n),e){var i=r[a],f=e[a];i&&!Array.isArray(i)&&(i=[i]),r[a]=i?i.concat(f):Array.isArray(f)?f:[f]}return r},jn.props=jn.methods=jn.inject=jn.computed=function(n,e,t,o){if(!n)return e;var r=Object.create(null);return O(r,n),e&&O(r,e),r},jn.provide=Ln;var Nn=function(n,e){return void 0===e?n:e};function Rn(n,e,t){if("function"==typeof e&&(e=e.options),function(n,e){var t=n.props;if(t){var o,r,a={};if(Array.isArray(t))for(o=t.length;o--;)"string"==typeof(r=t[o])&&(a[k(r)]={type:null});else if(l(t))for(var i in t)r=t[i],a[k(i)]=l(r)?r:{type:r};n.props=a}}(e),function(n,e){var t=n.inject;if(t){var o=n.inject={};if(Array.isArray(t))for(var r=0;r<t.length;r++)o[t[r]]={from:t[r]};else if(l(t))for(var a in t){var i=t[a];o[a]=l(i)?O({from:a},i):{from:i}}}}(e),function(n){var e=n.directives;if(e)for(var t in e){var o=e[t];"function"==typeof o&&(e[t]={bind:o,update:o})}}(e),!e._base&&(e.extends&&(n=Rn(n,e.extends,t)),e.mixins))for(var o=0,r=e.mixins.length;o<r;o++)n=Rn(n,e.mixins[o],t);var a,i={};for(a in n)f(a);for(a in e)_(n,a)||f(a);function f(o){var r=jn[o]||Nn;i[o]=r(n[o],e[o],t,o)}return i}function zn(n,e,t,o){if("string"==typeof t){var r=n[e];if(_(r,t))return r[t];var a=k(t);if(_(r,a))return r[a];var i=C(a);return _(r,i)?r[i]:r[t]||r[a]||r[i]}}function Dn(n,e,t,o){var r=e[n],a=!_(t,n),i=t[n],f=Un(Boolean,r.type);if(f>-1)if(a&&!_(r,"default"))i=!1;else if(""===i||i===A(n)){var c=Un(String,r.type);(c<0||f<c)&&(i=!0)}if(void 0===i){i=function(n,e,t){if(!_(e,"default"))return;var o=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return"function"==typeof o&&"Function"!==Pn(e.type)?o.call(n):o}(o,r,n);var s=Cn;$n(!0),Sn(i),$n(s)}return i}function Pn(n){var e=n&&n.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function qn(n,e){return Pn(n)===Pn(e)}function Un(n,e){if(!Array.isArray(e))return qn(e,n)?0:-1;for(var t=0,o=e.length;t<o;t++)if(qn(e[t],n))return t;return-1}function Bn(n,e,t){bn();try{if(e)for(var o=e;o=o.$parent;){var r=o.$options.errorCaptured;if(r)for(var a=0;a<r.length;a++)try{if(!1===r[a].call(o,n,e,t))return}catch(n){Vn(n,o,"errorCaptured hook")}}Vn(n,e,t)}finally{hn()}}function Hn(n,e,t,o,r){var a;try{(a=t?n.apply(e,t):n.call(e))&&!a._isVue&&p(a)&&!a._handled&&(a.catch(function(n){return Bn(n,o,r+" (Promise/async)")}),a._handled=!0)}catch(n){Bn(n,o,r)}return a}function Vn(n,e,t){if(P.errorHandler)try{return P.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Wn(e,null,"config.errorHandler")}Wn(n,e,t)}function Wn(n,e,t){if(!W&&!G||"undefined"==typeof console)throw n;console.error(n)}var Gn,Xn=!1,Kn=[],Yn=!1;function Jn(){Yn=!1;var n=Kn.slice(0);Kn.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&fn(Promise)){var Zn=Promise.resolve();Gn=function(){Zn.then(Jn),Q&&setTimeout(j)},Xn=!0}else if(Y||"undefined"==typeof MutationObserver||!fn(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Gn=void 0!==t&&fn(t)?function(){t(Jn)}:function(){setTimeout(Jn,0)};else{var Qn=1,ne=new MutationObserver(Jn),ee=document.createTextNode(String(Qn));ne.observe(ee,{characterData:!0}),Gn=function(){Qn=(Qn+1)%2,ee.data=String(Qn)},Xn=!0}function te(n,e){var t;if(Kn.push(function(){if(n)try{n.call(e)}catch(n){Bn(n,e,"nextTick")}else t&&t(e)}),Yn||(Yn=!0,Gn()),!n&&"undefined"!=typeof Promise)return new Promise(function(n){t=n})}var oe=new cn;function re(n){!function n(e,t){var o,r;var a=Array.isArray(e);if(!a&&!c(e)||Object.isFrozen(e)||e instanceof mn)return;if(e.__ob__){var i=e.__ob__.dep.id;if(t.has(i))return;t.add(i)}if(a)for(o=e.length;o--;)n(e[o],t);else for(r=Object.keys(e),o=r.length;o--;)n(e[r[o]],t)}(n,oe),oe.clear()}var ae=w(function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),o="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=o?n.slice(1):n,once:t,capture:o,passive:e}});function ie(n,e){function t(){var n=arguments,o=t.fns;if(!Array.isArray(o))return Hn(o,null,arguments,e,"v-on handler");for(var r=o.slice(),a=0;a<r.length;a++)Hn(r[a],null,n,e,"v-on handler")}return t.fns=n,t}function fe(n,e,t,o,a,f){var c,s,l,u;for(c in n)s=n[c],l=e[c],u=ae(c),r(s)||(r(l)?(r(s.fns)&&(s=n[c]=ie(s,f)),i(u.once)&&(s=n[c]=a(u.name,s,u.capture)),t(u.name,s,u.capture,u.passive,u.params)):s!==l&&(l.fns=s,n[c]=l));for(c in e)r(n[c])&&o((u=ae(c)).name,e[c],u.capture)}function ce(n,e,t){var o;n instanceof mn&&(n=n.data.hook||(n.data.hook={}));var f=n[e];function c(){t.apply(this,arguments),g(o.fns,c)}r(f)?o=ie([c]):a(f.fns)&&i(f.merged)?(o=f).fns.push(c):o=ie([f,c]),o.merged=!0,n[e]=o}function se(n,e,t,o,r){if(a(e)){if(_(e,t))return n[t]=e[t],r||delete e[t],!0;if(_(e,o))return n[t]=e[o],r||delete e[o],!0}return!1}function le(n){return f(n)?[yn(n)]:Array.isArray(n)?function n(e,t){var o=[];var c,s,l,u;for(c=0;c<e.length;c++)r(s=e[c])||"boolean"==typeof s||(l=o.length-1,u=o[l],Array.isArray(s)?s.length>0&&(ue((s=n(s,(t||"")+"_"+c))[0])&&ue(u)&&(o[l]=yn(u.text+s[0].text),s.shift()),o.push.apply(o,s)):f(s)?ue(u)?o[l]=yn(u.text+s):""!==s&&o.push(yn(s)):ue(s)&&ue(u)?o[l]=yn(u.text+s.text):(i(e._isVList)&&a(s.tag)&&r(s.key)&&a(t)&&(s.key="__vlist"+t+"_"+c+"__"),o.push(s)));return o}(n):void 0}function ue(n){return a(n)&&a(n.text)&&!1===n.isComment}function de(n,e){if(n){for(var t=Object.create(null),o=sn?Reflect.ownKeys(n):Object.keys(n),r=0;r<o.length;r++){var a=o[r];if("__ob__"!==a){for(var i=n[a].from,f=e;f;){if(f._provided&&_(f._provided,i)){t[a]=f._provided[i];break}f=f.$parent}if(!f)if("default"in n[a]){var c=n[a].default;t[a]="function"==typeof c?c.call(e):c}else 0}}return t}}function pe(n,e){if(!n||!n.length)return{};for(var t={},o=0,r=n.length;o<r;o++){var a=n[o],i=a.data;if(i&&i.attrs&&i.attrs.slot&&delete i.attrs.slot,a.context!==e&&a.fnContext!==e||!i||null==i.slot)(t.default||(t.default=[])).push(a);else{var f=i.slot,c=t[f]||(t[f]=[]);"template"===a.tag?c.push.apply(c,a.children||[]):c.push(a)}}for(var s in t)t[s].every(be)&&delete t[s];return t}function be(n){return n.isComment&&!n.asyncFactory||" "===n.text}function he(n,e,t){var r,a=Object.keys(e).length>0,i=n?!!n.$stable:!a,f=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(i&&t&&t!==o&&f===t.$key&&!a&&!t.$hasNormal)return t;for(var c in r={},n)n[c]&&"$"!==c[0]&&(r[c]=me(e,c,n[c]))}else r={};for(var s in e)s in r||(r[s]=ve(e,s));return n&&Object.isExtensible(n)&&(n._normalized=r),U(r,"$stable",i),U(r,"$key",f),U(r,"$hasNormal",a),r}function me(n,e,t){var o=function(){var n=arguments.length?t.apply(null,arguments):t({});return(n=n&&"object"==typeof n&&!Array.isArray(n)?[n]:le(n))&&(0===n.length||1===n.length&&n[0].isComment)?void 0:n};return t.proxy&&Object.defineProperty(n,e,{get:o,enumerable:!0,configurable:!0}),o}function ve(n,e){return function(){return n[e]}}function ge(n,e){var t,o,r,i,f;if(Array.isArray(n)||"string"==typeof n)for(t=new Array(n.length),o=0,r=n.length;o<r;o++)t[o]=e(n[o],o);else if("number"==typeof n)for(t=new Array(n),o=0;o<n;o++)t[o]=e(o+1,o);else if(c(n))if(sn&&n[Symbol.iterator]){t=[];for(var s=n[Symbol.iterator](),l=s.next();!l.done;)t.push(e(l.value,t.length)),l=s.next()}else for(i=Object.keys(n),t=new Array(i.length),o=0,r=i.length;o<r;o++)f=i[o],t[o]=e(n[f],f,o);return a(t)||(t=[]),t._isVList=!0,t}function ye(n,e,t,o){var r,a=this.$scopedSlots[n];a?(t=t||{},o&&(t=O(O({},o),t)),r=a(t)||e):r=this.$slots[n]||e;var i=t&&t.slot;return i?this.$createElement("template",{slot:i},r):r}function _e(n){return zn(this.$options,"filters",n)||L}function we(n,e){return Array.isArray(n)?-1===n.indexOf(e):n!==e}function xe(n,e,t,o,r){var a=P.keyCodes[e]||t;return r&&o&&!P.keyCodes[e]?we(r,o):a?we(a,n):o?A(o)!==e:void 0}function ke(n,e,t,o,r){if(t)if(c(t)){var a;Array.isArray(t)&&(t=T(t));var i=function(i){if("class"===i||"style"===i||v(i))a=n;else{var f=n.attrs&&n.attrs.type;a=o||P.mustUseProp(e,f,i)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var c=k(i),s=A(i);c in a||s in a||(a[i]=t[i],r&&((n.on||(n.on={}))["update:"+i]=function(n){t[i]=n}))};for(var f in t)i(f)}else;return n}function Ce(n,e){var t=this._staticTrees||(this._staticTrees=[]),o=t[n];return o&&!e?o:(Ae(o=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,null,this),"__static__"+n,!1),o)}function $e(n,e,t){return Ae(n,"__once__"+e+(t?"_"+t:""),!0),n}function Ae(n,e,t){if(Array.isArray(n))for(var o=0;o<n.length;o++)n[o]&&"string"!=typeof n[o]&&Se(n[o],e+"_"+o,t);else Se(n,e,t)}function Se(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function Ee(n,e){if(e)if(l(e)){var t=n.on=n.on?O({},n.on):{};for(var o in e){var r=t[o],a=e[o];t[o]=r?[].concat(r,a):a}}else;return n}function Oe(n,e,t,o){e=e||{$stable:!t};for(var r=0;r<n.length;r++){var a=n[r];Array.isArray(a)?Oe(a,e,t):a&&(a.proxy&&(a.fn.proxy=!0),e[a.key]=a.fn)}return o&&(e.$key=o),e}function Te(n,e){for(var t=0;t<e.length;t+=2){var o=e[t];"string"==typeof o&&o&&(n[e[t]]=e[t+1])}return n}function je(n,e){return"string"==typeof n?e+n:n}function Ie(n){n._o=$e,n._n=h,n._s=b,n._l=ge,n._t=ye,n._q=M,n._i=F,n._m=Ce,n._f=_e,n._k=xe,n._b=ke,n._v=yn,n._e=gn,n._u=Oe,n._g=Ee,n._d=Te,n._p=je}function Le(n,e,t,r,a){var f,c=this,s=a.options;_(r,"_uid")?(f=Object.create(r))._original=r:(f=r,r=r._original);var l=i(s._compiled),u=!l;this.data=n,this.props=e,this.children=t,this.parent=r,this.listeners=n.on||o,this.injections=de(s.inject,r),this.slots=function(){return c.$slots||he(n.scopedSlots,c.$slots=pe(t,r)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return he(n.scopedSlots,this.slots())}}),l&&(this.$options=s,this.$slots=this.slots(),this.$scopedSlots=he(n.scopedSlots,this.$slots)),s._scopeId?this._c=function(n,e,t,o){var a=Ue(f,n,e,t,o,u);return a&&!Array.isArray(a)&&(a.fnScopeId=s._scopeId,a.fnContext=r),a}:this._c=function(n,e,t,o){return Ue(f,n,e,t,o,u)}}function Me(n,e,t,o,r){var a=_n(n);return a.fnContext=t,a.fnOptions=o,e.slot&&((a.data||(a.data={})).slot=e.slot),a}function Fe(n,e){for(var t in e)n[k(t)]=e[t]}Ie(Le.prototype);var Ne={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;Ne.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},o=n.data.inlineTemplate;a(o)&&(t.render=o.render,t.staticRenderFns=o.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Ze)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,r,a){0;var i=r.data.scopedSlots,f=n.$scopedSlots,c=!!(i&&!i.$stable||f!==o&&!f.$stable||i&&n.$scopedSlots.$key!==i.$key),s=!!(a||n.$options._renderChildren||c);n.$options._parentVnode=r,n.$vnode=r,n._vnode&&(n._vnode.parent=r);if(n.$options._renderChildren=a,n.$attrs=r.data.attrs||o,n.$listeners=t||o,e&&n.$options.props){$n(!1);for(var l=n._props,u=n.$options._propKeys||[],d=0;d<u.length;d++){var p=u[d],b=n.$options.props;l[p]=Dn(p,b,e,n)}$n(!0),n.$options.propsData=e}t=t||o;var h=n.$options._parentListeners;n.$options._parentListeners=t,Je(n,t,h),s&&(n.$slots=pe(a,r.context),n.$forceUpdate());0}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,o=n.componentInstance;o._isMounted||(o._isMounted=!0,tt(o,"mounted")),n.data.keepAlive&&(t._isMounted?((e=o)._inactive=!1,rt.push(e)):et(o,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(t&&(e._directInactive=!0,nt(e)))return;if(!e._inactive){e._inactive=!0;for(var o=0;o<e.$children.length;o++)n(e.$children[o]);tt(e,"deactivated")}}(e,!0):e.$destroy())}},Re=Object.keys(Ne);function ze(n,e,t,f,s){if(!r(n)){var l=t.$options._base;if(c(n)&&(n=l.extend(n)),"function"==typeof n){var u;if(r(n.cid)&&void 0===(n=function(n,e){if(i(n.error)&&a(n.errorComp))return n.errorComp;if(a(n.resolved))return n.resolved;var t=He;t&&a(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t);if(i(n.loading)&&a(n.loadingComp))return n.loadingComp;if(t&&!a(n.owners)){var o=n.owners=[t],f=!0,s=null,l=null;t.$on("hook:destroyed",function(){return g(o,t)});var u=function(n){for(var e=0,t=o.length;e<t;e++)o[e].$forceUpdate();n&&(o.length=0,null!==s&&(clearTimeout(s),s=null),null!==l&&(clearTimeout(l),l=null))},d=N(function(t){n.resolved=Ve(t,e),f?o.length=0:u(!0)}),b=N(function(e){a(n.errorComp)&&(n.error=!0,u(!0))}),h=n(d,b);return c(h)&&(p(h)?r(n.resolved)&&h.then(d,b):p(h.component)&&(h.component.then(d,b),a(h.error)&&(n.errorComp=Ve(h.error,e)),a(h.loading)&&(n.loadingComp=Ve(h.loading,e),0===h.delay?n.loading=!0:s=setTimeout(function(){s=null,r(n.resolved)&&r(n.error)&&(n.loading=!0,u(!1))},h.delay||200)),a(h.timeout)&&(l=setTimeout(function(){l=null,r(n.resolved)&&b(null)},h.timeout)))),f=!1,n.loading?n.loadingComp:n.resolved}}(u=n,l)))return function(n,e,t,o,r){var a=gn();return a.asyncFactory=n,a.asyncMeta={data:e,context:t,children:o,tag:r},a}(u,e,t,f,s);e=e||{},Ct(n),a(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",o=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var r=e.on||(e.on={}),i=r[o],f=e.model.callback;a(i)?(Array.isArray(i)?-1===i.indexOf(f):i!==f)&&(r[o]=[f].concat(i)):r[o]=f}(n.options,e);var d=function(n,e,t){var o=e.options.props;if(!r(o)){var i={},f=n.attrs,c=n.props;if(a(f)||a(c))for(var s in o){var l=A(s);se(i,c,s,l,!0)||se(i,f,s,l,!1)}return i}}(e,n);if(i(n.options.functional))return function(n,e,t,r,i){var f=n.options,c={},s=f.props;if(a(s))for(var l in s)c[l]=Dn(l,s,e||o);else a(t.attrs)&&Fe(c,t.attrs),a(t.props)&&Fe(c,t.props);var u=new Le(t,c,i,r,n),d=f.render.call(null,u._c,u);if(d instanceof mn)return Me(d,t,u.parent,f);if(Array.isArray(d)){for(var p=le(d)||[],b=new Array(p.length),h=0;h<p.length;h++)b[h]=Me(p[h],t,u.parent,f);return b}}(n,d,e,t,f);var b=e.on;if(e.on=e.nativeOn,i(n.options.abstract)){var h=e.slot;e={},h&&(e.slot=h)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<Re.length;t++){var o=Re[t],r=e[o],a=Ne[o];r===a||r&&r._merged||(e[o]=r?De(a,r):a)}}(e);var m=n.options.name||s;return new mn("vue-component-"+n.cid+(m?"-"+m:""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:d,listeners:b,tag:s,children:f},u)}}}function De(n,e){var t=function(t,o){n(t,o),e(t,o)};return t._merged=!0,t}var Pe=1,qe=2;function Ue(n,e,t,o,s,l){return(Array.isArray(t)||f(t))&&(s=o,o=t,t=void 0),i(l)&&(s=qe),function(n,e,t,o,f){if(a(t)&&a(t.__ob__))return gn();a(t)&&a(t.is)&&(e=t.is);if(!e)return gn();0;Array.isArray(o)&&"function"==typeof o[0]&&((t=t||{}).scopedSlots={default:o[0]},o.length=0);f===qe?o=le(o):f===Pe&&(o=function(n){for(var e=0;e<n.length;e++)if(Array.isArray(n[e]))return Array.prototype.concat.apply([],n);return n}(o));var s,l;if("string"==typeof e){var u;l=n.$vnode&&n.$vnode.ns||P.getTagNamespace(e),s=P.isReservedTag(e)?new mn(P.parsePlatformTagName(e),t,o,void 0,void 0,n):t&&t.pre||!a(u=zn(n.$options,"components",e))?new mn(e,t,o,void 0,void 0,n):ze(u,t,n,o,e)}else s=ze(e,t,n,o);return Array.isArray(s)?s:a(s)?(a(l)&&function n(e,t,o){e.ns=t;"foreignObject"===e.tag&&(t=void 0,o=!0);if(a(e.children))for(var f=0,c=e.children.length;f<c;f++){var s=e.children[f];a(s.tag)&&(r(s.ns)||i(o)&&"svg"!==s.tag)&&n(s,t,o)}}(s,l),a(t)&&function(n){c(n.style)&&re(n.style);c(n.class)&&re(n.class)}(t),s):gn()}(n,e,t,o,s)}var Be,He=null;function Ve(n,e){return(n.__esModule||sn&&"Module"===n[Symbol.toStringTag])&&(n=n.default),c(n)?e.extend(n):n}function We(n){return n.isComment&&n.asyncFactory}function Ge(n){if(Array.isArray(n))for(var e=0;e<n.length;e++){var t=n[e];if(a(t)&&(a(t.componentOptions)||We(t)))return t}}function Xe(n,e){Be.$on(n,e)}function Ke(n,e){Be.$off(n,e)}function Ye(n,e){var t=Be;return function o(){var r=e.apply(null,arguments);null!==r&&t.$off(n,o)}}function Je(n,e,t){Be=n,fe(e,t||{},Xe,Ke,Ye,n),Be=void 0}var Ze=null;function Qe(n){var e=Ze;return Ze=n,function(){Ze=e}}function nt(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function et(n,e){if(e){if(n._directInactive=!1,nt(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)et(n.$children[t]);tt(n,"activated")}}function tt(n,e){bn();var t=n.$options[e],o=e+" hook";if(t)for(var r=0,a=t.length;r<a;r++)Hn(t[r],n,null,n,o);n._hasHookEvent&&n.$emit("hook:"+e),hn()}var ot=[],rt=[],at={},it=!1,ft=!1,ct=0;var st=0,lt=Date.now;if(W&&!Y){var ut=window.performance;ut&&"function"==typeof ut.now&&lt()>document.createEvent("Event").timeStamp&&(lt=function(){return ut.now()})}function dt(){var n,e;for(st=lt(),ft=!0,ot.sort(function(n,e){return n.id-e.id}),ct=0;ct<ot.length;ct++)(n=ot[ct]).before&&n.before(),e=n.id,at[e]=null,n.run();var t=rt.slice(),o=ot.slice();ct=ot.length=rt.length=0,at={},it=ft=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,et(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],o=t.vm;o._watcher===t&&o._isMounted&&!o._isDestroyed&&tt(o,"updated")}}(o),an&&P.devtools&&an.emit("flush")}var pt=0,bt=function(n,e,t,o,r){this.vm=n,r&&(n._watcher=this),n._watchers.push(this),o?(this.deep=!!o.deep,this.user=!!o.user,this.lazy=!!o.lazy,this.sync=!!o.sync,this.before=o.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++pt,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new cn,this.newDepIds=new cn,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(n){if(!B.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=j)),this.value=this.lazy?void 0:this.get()};bt.prototype.get=function(){var n;bn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Bn(n,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&re(n),hn(),this.cleanupDeps()}return n},bt.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},bt.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},bt.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(n){var e=n.id;if(null==at[e]){if(at[e]=!0,ft){for(var t=ot.length-1;t>ct&&ot[t].id>n.id;)t--;ot.splice(t+1,0,n)}else ot.push(n);it||(it=!0,te(dt))}}(this)},bt.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||c(n)||this.deep){var e=this.value;if(this.value=n,this.user)try{this.cb.call(this.vm,n,e)}catch(n){Bn(n,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,n,e)}}},bt.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},bt.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},bt.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||g(this.vm._watchers,this);for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1}};var ht={enumerable:!0,configurable:!0,get:j,set:j};function mt(n,e,t){ht.get=function(){return this[e][t]},ht.set=function(n){this[e][t]=n},Object.defineProperty(n,t,ht)}function vt(n){n._watchers=[];var e=n.$options;e.props&&function(n,e){var t=n.$options.propsData||{},o=n._props={},r=n.$options._propKeys=[];n.$parent&&$n(!1);var a=function(a){r.push(a);var i=Dn(a,e,t,n);En(o,a,i),a in n||mt(n,"_props",a)};for(var i in e)a(i);$n(!0)}(n,e.props),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?j:S(e[t],n)}(n,e.methods),e.data?function(n){var e=n.$options.data;l(e=n._data="function"==typeof e?function(n,e){bn();try{return n.call(e,e)}catch(n){return Bn(n,e,"data()"),{}}finally{hn()}}(e,n):e||{})||(e={});var t=Object.keys(e),o=n.$options.props,r=(n.$options.methods,t.length);for(;r--;){var a=t[r];0,o&&_(o,a)||(i=void 0,36!==(i=(a+"").charCodeAt(0))&&95!==i&&mt(n,"_data",a))}var i;Sn(e,!0)}(n):Sn(n._data={},!0),e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),o=rn();for(var r in e){var a=e[r],i="function"==typeof a?a:a.get;0,o||(t[r]=new bt(n,i||j,j,gt)),r in n||yt(n,r,a)}}(n,e.computed),e.watch&&e.watch!==en&&function(n,e){for(var t in e){var o=e[t];if(Array.isArray(o))for(var r=0;r<o.length;r++)xt(n,t,o[r]);else xt(n,t,o)}}(n,e.watch)}var gt={lazy:!0};function yt(n,e,t){var o=!rn();"function"==typeof t?(ht.get=o?_t(e):wt(t),ht.set=j):(ht.get=t.get?o&&!1!==t.cache?_t(e):wt(t.get):j,ht.set=t.set||j),Object.defineProperty(n,e,ht)}function _t(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),dn.target&&e.depend(),e.value}}function wt(n){return function(){return n.call(this,this)}}function xt(n,e,t,o){return l(t)&&(o=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,o)}var kt=0;function Ct(n){var e=n.options;if(n.super){var t=Ct(n.super);if(t!==n.superOptions){n.superOptions=t;var o=function(n){var e,t=n.options,o=n.sealedOptions;for(var r in t)t[r]!==o[r]&&(e||(e={}),e[r]=t[r]);return e}(n);o&&O(n.extendOptions,o),(e=n.options=Rn(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function $t(n){this._init(n)}function At(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,o=t.cid,r=n._Ctor||(n._Ctor={});if(r[o])return r[o];var a=n.name||t.options.name;var i=function(n){this._init(n)};return(i.prototype=Object.create(t.prototype)).constructor=i,i.cid=e++,i.options=Rn(t.options,n),i.super=t,i.options.props&&function(n){var e=n.options.props;for(var t in e)mt(n.prototype,"_props",t)}(i),i.options.computed&&function(n){var e=n.options.computed;for(var t in e)yt(n.prototype,t,e[t])}(i),i.extend=t.extend,i.mixin=t.mixin,i.use=t.use,z.forEach(function(n){i[n]=t[n]}),a&&(i.options.components[a]=i),i.superOptions=t.options,i.extendOptions=n,i.sealedOptions=O({},i.options),r[o]=i,i}}function St(n){return n&&(n.Ctor.options.name||n.tag)}function Et(n,e){return Array.isArray(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!u(n)&&n.test(e)}function Ot(n,e){var t=n.cache,o=n.keys,r=n._vnode;for(var a in t){var i=t[a];if(i){var f=St(i.componentOptions);f&&!e(f)&&Tt(t,a,o,r)}}}function Tt(n,e,t,o){var r=n[e];!r||o&&r.tag===o.tag||r.componentInstance.$destroy(),n[e]=null,g(t,e)}!function(n){n.prototype._init=function(n){var e=this;e._uid=kt++,e._isVue=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),o=e._parentVnode;t.parent=e.parent,t._parentVnode=o;var r=o.componentOptions;t.propsData=r.propsData,t._parentListeners=r.listeners,t._renderChildren=r.children,t._componentTag=r.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=Rn(Ct(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Je(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,r=t&&t.context;n.$slots=pe(e._renderChildren,r),n.$scopedSlots=o,n._c=function(e,t,o,r){return Ue(n,e,t,o,r,!1)},n.$createElement=function(e,t,o,r){return Ue(n,e,t,o,r,!0)};var a=t&&t.data;En(n,"$attrs",a&&a.attrs||o,null,!0),En(n,"$listeners",e._parentListeners||o,null,!0)}(e),tt(e,"beforeCreate"),function(n){var e=de(n.$options.inject,n);e&&($n(!1),Object.keys(e).forEach(function(t){En(n,t,e[t])}),$n(!0))}(e),vt(e),function(n){var e=n.$options.provide;e&&(n._provided="function"==typeof e?e.call(n):e)}(e),tt(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}($t),function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=On,n.prototype.$delete=Tn,n.prototype.$watch=function(n,e,t){if(l(e))return xt(this,n,e,t);(t=t||{}).user=!0;var o=new bt(this,n,e,t);if(t.immediate)try{e.call(this,o.value)}catch(n){Bn(n,this,'callback for immediate watcher "'+o.expression+'"')}return function(){o.teardown()}}}($t),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var o=this;if(Array.isArray(n))for(var r=0,a=n.length;r<a;r++)o.$on(n[r],t);else(o._events[n]||(o._events[n]=[])).push(t),e.test(n)&&(o._hasHookEvent=!0);return o},n.prototype.$once=function(n,e){var t=this;function o(){t.$off(n,o),e.apply(t,arguments)}return o.fn=e,t.$on(n,o),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(Array.isArray(n)){for(var o=0,r=n.length;o<r;o++)t.$off(n[o],e);return t}var a,i=t._events[n];if(!i)return t;if(!e)return t._events[n]=null,t;for(var f=i.length;f--;)if((a=i[f])===e||a.fn===e){i.splice(f,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?E(t):t;for(var o=E(arguments,1),r='event handler for "'+n+'"',a=0,i=t.length;a<i;a++)Hn(t[a],e,o,e,r)}return e}}($t),function(n){n.prototype._update=function(n,e){var t=this,o=t.$el,r=t._vnode,a=Qe(t);t._vnode=n,t.$el=r?t.__patch__(r,n):t.__patch__(t.$el,n,e,!1),a(),o&&(o.__vue__=null),t.$el&&(t.$el.__vue__=t),t.$vnode&&t.$parent&&t.$vnode===t.$parent._vnode&&(t.$parent.$el=t.$el)},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){tt(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||g(e.$children,n),n._watcher&&n._watcher.teardown();for(var t=n._watchers.length;t--;)n._watchers[t].teardown();n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),tt(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}($t),function(n){Ie(n.prototype),n.prototype.$nextTick=function(n){return te(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,o=t.render,r=t._parentVnode;r&&(e.$scopedSlots=he(r.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=r;try{He=e,n=o.call(e._renderProxy,e.$createElement)}catch(t){Bn(t,e,"render"),n=e._vnode}finally{He=null}return Array.isArray(n)&&1===n.length&&(n=n[0]),n instanceof mn||(n=gn()),n.parent=r,n}}($t);var jt=[String,RegExp,Array],It={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:jt,exclude:jt,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Tt(this.cache,n,this.keys)},mounted:function(){var n=this;this.$watch("include",function(e){Ot(n,function(n){return Et(e,n)})}),this.$watch("exclude",function(e){Ot(n,function(n){return!Et(e,n)})})},render:function(){var n=this.$slots.default,e=Ge(n),t=e&&e.componentOptions;if(t){var o=St(t),r=this.include,a=this.exclude;if(r&&(!o||!Et(r,o))||a&&o&&Et(a,o))return e;var i=this.cache,f=this.keys,c=null==e.key?t.Ctor.cid+(t.tag?"::"+t.tag:""):e.key;i[c]?(e.componentInstance=i[c].componentInstance,g(f,c),f.push(c)):(i[c]=e,f.push(c),this.max&&f.length>parseInt(this.max)&&Tt(i,f[0],f,this._vnode)),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return P}};Object.defineProperty(n,"config",e),n.util={warn:ln,extend:O,mergeOptions:Rn,defineReactive:En},n.set=On,n.delete=Tn,n.nextTick=te,n.observable=function(n){return Sn(n),n},n.options=Object.create(null),z.forEach(function(e){n.options[e+"s"]=Object.create(null)}),n.options._base=n,O(n.options.components,It),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=E(arguments,1);return t.unshift(this),"function"==typeof n.install?n.install.apply(n,t):"function"==typeof n&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=Rn(this.options,n),this}}(n),At(n),function(n){z.forEach(function(e){n[e]=function(n,t){return t?("component"===e&&l(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&"function"==typeof t&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}})}(n)}($t),Object.defineProperty($t.prototype,"$isServer",{get:rn}),Object.defineProperty($t.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty($t,"FunctionalRenderContext",{value:Le}),$t.version="2.6.10";var Lt=m("style,class"),Mt=m("input,textarea,option,select,progress"),Ft=m("contenteditable,draggable,spellcheck"),Nt=m("events,caret,typing,plaintext-only"),Rt=function(n,e){return Ut(e)||"false"===e?"false":"contenteditable"===n&&Nt(e)?e:"true"},zt=m("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Dt="http://www.w3.org/1999/xlink",Pt=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},qt=function(n){return Pt(n)?n.slice(6,n.length):""},Ut=function(n){return null==n||!1===n};function Bt(n){for(var e=n.data,t=n,o=n;a(o.componentInstance);)(o=o.componentInstance._vnode)&&o.data&&(e=Ht(o.data,e));for(;a(t=t.parent);)t&&t.data&&(e=Ht(e,t.data));return function(n,e){if(a(n)||a(e))return Vt(n,Wt(e));return""}(e.staticClass,e.class)}function Ht(n,e){return{staticClass:Vt(n.staticClass,e.staticClass),class:a(n.class)?[n.class,e.class]:e.class}}function Vt(n,e){return n?e?n+" "+e:n:e||""}function Wt(n){return Array.isArray(n)?function(n){for(var e,t="",o=0,r=n.length;o<r;o++)a(e=Wt(n[o]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):c(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var Gt={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Xt=m("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Kt=m("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Yt=function(n){return Xt(n)||Kt(n)};var Jt=Object.create(null);var Zt=m("text,number,password,search,email,tel,url");var Qt=Object.freeze({createElement:function(n,e){var t=document.createElement(n);return"select"!==n?t:(e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t)},createElementNS:function(n,e){return document.createElementNS(Gt[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),no={create:function(n,e){eo(e)},update:function(n,e){n.data.ref!==e.data.ref&&(eo(n,!0),eo(e))},destroy:function(n){eo(n,!0)}};function eo(n,e){var t=n.data.ref;if(a(t)){var o=n.context,r=n.componentInstance||n.elm,i=o.$refs;e?Array.isArray(i[t])?g(i[t],r):i[t]===r&&(i[t]=void 0):n.data.refInFor?Array.isArray(i[t])?i[t].indexOf(r)<0&&i[t].push(r):i[t]=[r]:i[t]=r}}var to=new mn("",{},[]),oo=["create","activate","update","remove","destroy"];function ro(n,e){return n.key===e.key&&(n.tag===e.tag&&n.isComment===e.isComment&&a(n.data)===a(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,o=a(t=n.data)&&a(t=t.attrs)&&t.type,r=a(t=e.data)&&a(t=t.attrs)&&t.type;return o===r||Zt(o)&&Zt(r)}(n,e)||i(n.isAsyncPlaceholder)&&n.asyncFactory===e.asyncFactory&&r(e.asyncFactory.error))}function ao(n,e,t){var o,r,i={};for(o=e;o<=t;++o)a(r=n[o].key)&&(i[r]=o);return i}var io={create:fo,update:fo,destroy:function(n){fo(n,to)}};function fo(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,o,r,a=n===to,i=e===to,f=so(n.data.directives,n.context),c=so(e.data.directives,e.context),s=[],l=[];for(t in c)o=f[t],r=c[t],o?(r.oldValue=o.value,r.oldArg=o.arg,uo(r,"update",e,n),r.def&&r.def.componentUpdated&&l.push(r)):(uo(r,"bind",e,n),r.def&&r.def.inserted&&s.push(r));if(s.length){var u=function(){for(var t=0;t<s.length;t++)uo(s[t],"inserted",e,n)};a?ce(e,"insert",u):u()}l.length&&ce(e,"postpatch",function(){for(var t=0;t<l.length;t++)uo(l[t],"componentUpdated",e,n)});if(!a)for(t in f)c[t]||uo(f[t],"unbind",n,n,i)}(n,e)}var co=Object.create(null);function so(n,e){var t,o,r=Object.create(null);if(!n)return r;for(t=0;t<n.length;t++)(o=n[t]).modifiers||(o.modifiers=co),r[lo(o)]=o,o.def=zn(e.$options,"directives",o.name);return r}function lo(n){return n.rawName||n.name+"."+Object.keys(n.modifiers||{}).join(".")}function uo(n,e,t,o,r){var a=n.def&&n.def[e];if(a)try{a(t.elm,n,t,o,r)}catch(o){Bn(o,t.context,"directive "+n.name+" "+e+" hook")}}var po=[no,io];function bo(n,e){var t=e.componentOptions;if(!(a(t)&&!1===t.Ctor.options.inheritAttrs||r(n.data.attrs)&&r(e.data.attrs))){var o,i,f=e.elm,c=n.data.attrs||{},s=e.data.attrs||{};for(o in a(s.__ob__)&&(s=e.data.attrs=O({},s)),s)i=s[o],c[o]!==i&&ho(f,o,i);for(o in(Y||Z)&&s.value!==c.value&&ho(f,"value",s.value),c)r(s[o])&&(Pt(o)?f.removeAttributeNS(Dt,qt(o)):Ft(o)||f.removeAttribute(o))}}function ho(n,e,t){n.tagName.indexOf("-")>-1?mo(n,e,t):zt(e)?Ut(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):Ft(e)?n.setAttribute(e,Rt(e,t)):Pt(e)?Ut(t)?n.removeAttributeNS(Dt,qt(e)):n.setAttributeNS(Dt,e,t):mo(n,e,t)}function mo(n,e,t){if(Ut(t))n.removeAttribute(e);else{if(Y&&!J&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var o=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",o)};n.addEventListener("input",o),n.__ieph=!0}n.setAttribute(e,t)}}var vo={create:bo,update:bo};function go(n,e){var t=e.elm,o=e.data,i=n.data;if(!(r(o.staticClass)&&r(o.class)&&(r(i)||r(i.staticClass)&&r(i.class)))){var f=Bt(e),c=t._transitionClasses;a(c)&&(f=Vt(f,Wt(c))),f!==t._prevClass&&(t.setAttribute("class",f),t._prevClass=f)}}var yo,_o={create:go,update:go},wo="__r",xo="__c";function ko(n,e,t){var o=yo;return function r(){var a=e.apply(null,arguments);null!==a&&Ao(n,r,t,o)}}var Co=Xn&&!(nn&&Number(nn[1])<=53);function $o(n,e,t,o){if(Co){var r=st,a=e;e=a._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=r||n.timeStamp<=0||n.target.ownerDocument!==document)return a.apply(this,arguments)}}yo.addEventListener(n,e,tn?{capture:t,passive:o}:t)}function Ao(n,e,t,o){(o||yo).removeEventListener(n,e._wrapper||e,t)}function So(n,e){if(!r(n.data.on)||!r(e.data.on)){var t=e.data.on||{},o=n.data.on||{};yo=e.elm,function(n){if(a(n[wo])){var e=Y?"change":"input";n[e]=[].concat(n[wo],n[e]||[]),delete n[wo]}a(n[xo])&&(n.change=[].concat(n[xo],n.change||[]),delete n[xo])}(t),fe(t,o,$o,Ao,ko,e.context),yo=void 0}}var Eo,Oo={create:So,update:So};function To(n,e){if(!r(n.data.domProps)||!r(e.data.domProps)){var t,o,i=e.elm,f=n.data.domProps||{},c=e.data.domProps||{};for(t in a(c.__ob__)&&(c=e.data.domProps=O({},c)),f)t in c||(i[t]="");for(t in c){if(o=c[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),o===f[t])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===t&&"PROGRESS"!==i.tagName){i._value=o;var s=r(o)?"":String(o);jo(i,s)&&(i.value=s)}else if("innerHTML"===t&&Kt(i.tagName)&&r(i.innerHTML)){(Eo=Eo||document.createElement("div")).innerHTML="<svg>"+o+"</svg>";for(var l=Eo.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;l.firstChild;)i.appendChild(l.firstChild)}else if(o!==f[t])try{i[t]=o}catch(n){}}}}function jo(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,o=n._vModifiers;if(a(o)){if(o.number)return h(t)!==h(e);if(o.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Io={create:To,update:To},Lo=w(function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach(function(n){if(n){var o=n.split(t);o.length>1&&(e[o[0].trim()]=o[1].trim())}}),e});function Mo(n){var e=Fo(n.style);return n.staticStyle?O(n.staticStyle,e):e}function Fo(n){return Array.isArray(n)?T(n):"string"==typeof n?Lo(n):n}var No,Ro=/^--/,zo=/\s*!important$/,Do=function(n,e,t){if(Ro.test(e))n.style.setProperty(e,t);else if(zo.test(t))n.style.setProperty(A(e),t.replace(zo,""),"important");else{var o=qo(e);if(Array.isArray(t))for(var r=0,a=t.length;r<a;r++)n.style[o]=t[r];else n.style[o]=t}},Po=["Webkit","Moz","ms"],qo=w(function(n){if(No=No||document.createElement("div").style,"filter"!==(n=k(n))&&n in No)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<Po.length;t++){var o=Po[t]+e;if(o in No)return o}});function Uo(n,e){var t=e.data,o=n.data;if(!(r(t.staticStyle)&&r(t.style)&&r(o.staticStyle)&&r(o.style))){var i,f,c=e.elm,s=o.staticStyle,l=o.normalizedStyle||o.style||{},u=s||l,d=Fo(e.data.style)||{};e.data.normalizedStyle=a(d.__ob__)?O({},d):d;var p=function(n,e){var t,o={};if(e)for(var r=n;r.componentInstance;)(r=r.componentInstance._vnode)&&r.data&&(t=Mo(r.data))&&O(o,t);(t=Mo(n.data))&&O(o,t);for(var a=n;a=a.parent;)a.data&&(t=Mo(a.data))&&O(o,t);return o}(e,!0);for(f in u)r(p[f])&&Do(c,f,"");for(f in p)(i=p[f])!==u[f]&&Do(c,f,null==i?"":i)}}var Bo={create:Uo,update:Uo},Ho=/\s+/;function Vo(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(Ho).forEach(function(e){return n.classList.add(e)}):n.classList.add(e);else{var t=" "+(n.getAttribute("class")||"")+" ";t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function Wo(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(Ho).forEach(function(e){return n.classList.remove(e)}):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" "+(n.getAttribute("class")||"")+" ",o=" "+e+" ";t.indexOf(o)>=0;)t=t.replace(o," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function Go(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&O(e,Xo(n.name||"v")),O(e,n),e}return"string"==typeof n?Xo(n):void 0}}var Xo=w(function(n){return{enterClass:n+"-enter",enterToClass:n+"-enter-to",enterActiveClass:n+"-enter-active",leaveClass:n+"-leave",leaveToClass:n+"-leave-to",leaveActiveClass:n+"-leave-active"}}),Ko=W&&!J,Yo="transition",Jo="animation",Zo="transition",Qo="transitionend",nr="animation",er="animationend";Ko&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Zo="WebkitTransition",Qo="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(nr="WebkitAnimation",er="webkitAnimationEnd"));var tr=W?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function or(n){tr(function(){tr(n)})}function rr(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),Vo(n,e))}function ar(n,e){n._transitionClasses&&g(n._transitionClasses,e),Wo(n,e)}function ir(n,e,t){var o=cr(n,e),r=o.type,a=o.timeout,i=o.propCount;if(!r)return t();var f=r===Yo?Qo:er,c=0,s=function(){n.removeEventListener(f,l),t()},l=function(e){e.target===n&&++c>=i&&s()};setTimeout(function(){c<i&&s()},a+1),n.addEventListener(f,l)}var fr=/\b(transform|all)(,|$)/;function cr(n,e){var t,o=window.getComputedStyle(n),r=(o[Zo+"Delay"]||"").split(", "),a=(o[Zo+"Duration"]||"").split(", "),i=sr(r,a),f=(o[nr+"Delay"]||"").split(", "),c=(o[nr+"Duration"]||"").split(", "),s=sr(f,c),l=0,u=0;return e===Yo?i>0&&(t=Yo,l=i,u=a.length):e===Jo?s>0&&(t=Jo,l=s,u=c.length):u=(t=(l=Math.max(i,s))>0?i>s?Yo:Jo:null)?t===Yo?a.length:c.length:0,{type:t,timeout:l,propCount:u,hasTransform:t===Yo&&fr.test(o[Zo+"Property"])}}function sr(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map(function(e,t){return lr(e)+lr(n[t])}))}function lr(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function ur(n,e){var t=n.elm;a(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var o=Go(n.data.transition);if(!r(o)&&!a(t._enterCb)&&1===t.nodeType){for(var i=o.css,f=o.type,s=o.enterClass,l=o.enterToClass,u=o.enterActiveClass,d=o.appearClass,p=o.appearToClass,b=o.appearActiveClass,m=o.beforeEnter,v=o.enter,g=o.afterEnter,y=o.enterCancelled,_=o.beforeAppear,w=o.appear,x=o.afterAppear,k=o.appearCancelled,C=o.duration,$=Ze,A=Ze.$vnode;A&&A.parent;)$=A.context,A=A.parent;var S=!$._isMounted||!n.isRootInsert;if(!S||w||""===w){var E=S&&d?d:s,O=S&&b?b:u,T=S&&p?p:l,j=S&&_||m,I=S&&"function"==typeof w?w:v,L=S&&x||g,M=S&&k||y,F=h(c(C)?C.enter:C);0;var R=!1!==i&&!J,z=br(I),D=t._enterCb=N(function(){R&&(ar(t,T),ar(t,O)),D.cancelled?(R&&ar(t,E),M&&M(t)):L&&L(t),t._enterCb=null});n.data.show||ce(n,"insert",function(){var e=t.parentNode,o=e&&e._pending&&e._pending[n.key];o&&o.tag===n.tag&&o.elm._leaveCb&&o.elm._leaveCb(),I&&I(t,D)}),j&&j(t),R&&(rr(t,E),rr(t,O),or(function(){ar(t,E),D.cancelled||(rr(t,T),z||(pr(F)?setTimeout(D,F):ir(t,f,D)))})),n.data.show&&(e&&e(),I&&I(t,D)),R||z||D()}}}function dr(n,e){var t=n.elm;a(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var o=Go(n.data.transition);if(r(o)||1!==t.nodeType)return e();if(!a(t._leaveCb)){var i=o.css,f=o.type,s=o.leaveClass,l=o.leaveToClass,u=o.leaveActiveClass,d=o.beforeLeave,p=o.leave,b=o.afterLeave,m=o.leaveCancelled,v=o.delayLeave,g=o.duration,y=!1!==i&&!J,_=br(p),w=h(c(g)?g.leave:g);0;var x=t._leaveCb=N(function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),y&&(ar(t,l),ar(t,u)),x.cancelled?(y&&ar(t,s),m&&m(t)):(e(),b&&b(t)),t._leaveCb=null});v?v(k):k()}function k(){x.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),d&&d(t),y&&(rr(t,s),rr(t,u),or(function(){ar(t,s),x.cancelled||(rr(t,l),_||(pr(w)?setTimeout(x,w):ir(t,f,x)))})),p&&p(t,x),y||_||x())}}function pr(n){return"number"==typeof n&&!isNaN(n)}function br(n){if(r(n))return!1;var e=n.fns;return a(e)?br(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function hr(n,e){!0!==e.data.show&&ur(e)}var mr=function(n){var e,t,o={},c=n.modules,s=n.nodeOps;for(e=0;e<oo.length;++e)for(o[oo[e]]=[],t=0;t<c.length;++t)a(c[t][oo[e]])&&o[oo[e]].push(c[t][oo[e]]);function l(n){var e=s.parentNode(n);a(e)&&s.removeChild(e,n)}function u(n,e,t,r,f,c,l){if(a(n.elm)&&a(c)&&(n=c[l]=_n(n)),n.isRootInsert=!f,!function(n,e,t,r){var f=n.data;if(a(f)){var c=a(n.componentInstance)&&f.keepAlive;if(a(f=f.hook)&&a(f=f.init)&&f(n,!1),a(n.componentInstance))return d(n,e),p(t,n.elm,r),i(c)&&function(n,e,t,r){for(var i,f=n;f.componentInstance;)if(f=f.componentInstance._vnode,a(i=f.data)&&a(i=i.transition)){for(i=0;i<o.activate.length;++i)o.activate[i](to,f);e.push(f);break}p(t,n.elm,r)}(n,e,t,r),!0}}(n,e,t,r)){var u=n.data,h=n.children,m=n.tag;a(m)?(n.elm=n.ns?s.createElementNS(n.ns,m):s.createElement(m,n),g(n),b(n,h,e),a(u)&&v(n,e),p(t,n.elm,r)):i(n.isComment)?(n.elm=s.createComment(n.text),p(t,n.elm,r)):(n.elm=s.createTextNode(n.text),p(t,n.elm,r))}}function d(n,e){a(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,h(n)?(v(n,e),g(n)):(eo(n),e.push(n))}function p(n,e,t){a(n)&&(a(t)?s.parentNode(t)===n&&s.insertBefore(n,e,t):s.appendChild(n,e))}function b(n,e,t){if(Array.isArray(e))for(var o=0;o<e.length;++o)u(e[o],t,n.elm,null,!0,e,o);else f(n.text)&&s.appendChild(n.elm,s.createTextNode(String(n.text)))}function h(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return a(n.tag)}function v(n,t){for(var r=0;r<o.create.length;++r)o.create[r](to,n);a(e=n.data.hook)&&(a(e.create)&&e.create(to,n),a(e.insert)&&t.push(n))}function g(n){var e;if(a(e=n.fnScopeId))s.setStyleScope(n.elm,e);else for(var t=n;t;)a(e=t.context)&&a(e=e.$options._scopeId)&&s.setStyleScope(n.elm,e),t=t.parent;a(e=Ze)&&e!==n.context&&e!==n.fnContext&&a(e=e.$options._scopeId)&&s.setStyleScope(n.elm,e)}function y(n,e,t,o,r,a){for(;o<=r;++o)u(t[o],a,n,e,!1,t,o)}function _(n){var e,t,r=n.data;if(a(r))for(a(e=r.hook)&&a(e=e.destroy)&&e(n),e=0;e<o.destroy.length;++e)o.destroy[e](n);if(a(e=n.children))for(t=0;t<n.children.length;++t)_(n.children[t])}function w(n,e,t,o){for(;t<=o;++t){var r=e[t];a(r)&&(a(r.tag)?(x(r),_(r)):l(r.elm))}}function x(n,e){if(a(e)||a(n.data)){var t,r=o.remove.length+1;for(a(e)?e.listeners+=r:e=function(n,e){function t(){0==--t.listeners&&l(n)}return t.listeners=e,t}(n.elm,r),a(t=n.componentInstance)&&a(t=t._vnode)&&a(t.data)&&x(t,e),t=0;t<o.remove.length;++t)o.remove[t](n,e);a(t=n.data.hook)&&a(t=t.remove)?t(n,e):e()}else l(n.elm)}function k(n,e,t,o){for(var r=t;r<o;r++){var i=e[r];if(a(i)&&ro(n,i))return r}}function C(n,e,t,f,c,l){if(n!==e){a(e.elm)&&a(f)&&(e=f[c]=_n(e));var d=e.elm=n.elm;if(i(n.isAsyncPlaceholder))a(e.asyncFactory.resolved)?S(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(i(e.isStatic)&&i(n.isStatic)&&e.key===n.key&&(i(e.isCloned)||i(e.isOnce)))e.componentInstance=n.componentInstance;else{var p,b=e.data;a(b)&&a(p=b.hook)&&a(p=p.prepatch)&&p(n,e);var m=n.children,v=e.children;if(a(b)&&h(e)){for(p=0;p<o.update.length;++p)o.update[p](n,e);a(p=b.hook)&&a(p=p.update)&&p(n,e)}r(e.text)?a(m)&&a(v)?m!==v&&function(n,e,t,o,i){for(var f,c,l,d=0,p=0,b=e.length-1,h=e[0],m=e[b],v=t.length-1,g=t[0],_=t[v],x=!i;d<=b&&p<=v;)r(h)?h=e[++d]:r(m)?m=e[--b]:ro(h,g)?(C(h,g,o,t,p),h=e[++d],g=t[++p]):ro(m,_)?(C(m,_,o,t,v),m=e[--b],_=t[--v]):ro(h,_)?(C(h,_,o,t,v),x&&s.insertBefore(n,h.elm,s.nextSibling(m.elm)),h=e[++d],_=t[--v]):ro(m,g)?(C(m,g,o,t,p),x&&s.insertBefore(n,m.elm,h.elm),m=e[--b],g=t[++p]):(r(f)&&(f=ao(e,d,b)),r(c=a(g.key)?f[g.key]:k(g,e,d,b))?u(g,o,n,h.elm,!1,t,p):ro(l=e[c],g)?(C(l,g,o,t,p),e[c]=void 0,x&&s.insertBefore(n,l.elm,h.elm)):u(g,o,n,h.elm,!1,t,p),g=t[++p]);d>b?y(n,r(t[v+1])?null:t[v+1].elm,t,p,v,o):p>v&&w(0,e,d,b)}(d,m,v,t,l):a(v)?(a(n.text)&&s.setTextContent(d,""),y(d,null,v,0,v.length-1,t)):a(m)?w(0,m,0,m.length-1):a(n.text)&&s.setTextContent(d,""):n.text!==e.text&&s.setTextContent(d,e.text),a(b)&&a(p=b.hook)&&a(p=p.postpatch)&&p(n,e)}}}function $(n,e,t){if(i(t)&&a(n.parent))n.parent.data.pendingInsert=e;else for(var o=0;o<e.length;++o)e[o].data.hook.insert(e[o])}var A=m("attrs,class,staticClass,staticStyle,key");function S(n,e,t,o){var r,f=e.tag,c=e.data,s=e.children;if(o=o||c&&c.pre,e.elm=n,i(e.isComment)&&a(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(a(c)&&(a(r=c.hook)&&a(r=r.init)&&r(e,!0),a(r=e.componentInstance)))return d(e,t),!0;if(a(f)){if(a(s))if(n.hasChildNodes())if(a(r=c)&&a(r=r.domProps)&&a(r=r.innerHTML)){if(r!==n.innerHTML)return!1}else{for(var l=!0,u=n.firstChild,p=0;p<s.length;p++){if(!u||!S(u,s[p],t,o)){l=!1;break}u=u.nextSibling}if(!l||u)return!1}else b(e,s,t);if(a(c)){var h=!1;for(var m in c)if(!A(m)){h=!0,v(e,t);break}!h&&c.class&&re(c.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,f){if(!r(e)){var c,l=!1,d=[];if(r(n))l=!0,u(e,d);else{var p=a(n.nodeType);if(!p&&ro(n,e))C(n,e,d,null,null,f);else{if(p){if(1===n.nodeType&&n.hasAttribute(R)&&(n.removeAttribute(R),t=!0),i(t)&&S(n,e,d))return $(e,d,!0),n;c=n,n=new mn(s.tagName(c).toLowerCase(),{},[],void 0,c)}var b=n.elm,m=s.parentNode(b);if(u(e,d,b._leaveCb?null:m,s.nextSibling(b)),a(e.parent))for(var v=e.parent,g=h(e);v;){for(var y=0;y<o.destroy.length;++y)o.destroy[y](v);if(v.elm=e.elm,g){for(var x=0;x<o.create.length;++x)o.create[x](to,v);var k=v.data.hook.insert;if(k.merged)for(var A=1;A<k.fns.length;A++)k.fns[A]()}else eo(v);v=v.parent}a(m)?w(0,[n],0,0):a(n.tag)&&_(n)}}return $(e,d,l),e.elm}a(n)&&_(n)}}({nodeOps:Qt,modules:[vo,_o,Oo,Io,Bo,W?{create:hr,activate:hr,remove:function(n,e){!0!==n.data.show?dr(n,e):e()}}:{}].concat(po)});J&&document.addEventListener("selectionchange",function(){var n=document.activeElement;n&&n.vmodel&&Cr(n,"input")});var vr={inserted:function(n,e,t,o){"select"===t.tag?(o.elm&&!o.elm._vOptions?ce(t,"postpatch",function(){vr.componentUpdated(n,e,t)}):gr(n,e,t.context),n._vOptions=[].map.call(n.options,wr)):("textarea"===t.tag||Zt(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",xr),n.addEventListener("compositionend",kr),n.addEventListener("change",kr),J&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){gr(n,e,t.context);var o=n._vOptions,r=n._vOptions=[].map.call(n.options,wr);if(r.some(function(n,e){return!M(n,o[e])}))(n.multiple?e.value.some(function(n){return _r(n,r)}):e.value!==e.oldValue&&_r(e.value,r))&&Cr(n,"change")}}};function gr(n,e,t){yr(n,e,t),(Y||Z)&&setTimeout(function(){yr(n,e,t)},0)}function yr(n,e,t){var o=e.value,r=n.multiple;if(!r||Array.isArray(o)){for(var a,i,f=0,c=n.options.length;f<c;f++)if(i=n.options[f],r)a=F(o,wr(i))>-1,i.selected!==a&&(i.selected=a);else if(M(wr(i),o))return void(n.selectedIndex!==f&&(n.selectedIndex=f));r||(n.selectedIndex=-1)}}function _r(n,e){return e.every(function(e){return!M(e,n)})}function wr(n){return"_value"in n?n._value:n.value}function xr(n){n.target.composing=!0}function kr(n){n.target.composing&&(n.target.composing=!1,Cr(n.target,"input"))}function Cr(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function $r(n){return!n.componentInstance||n.data&&n.data.transition?n:$r(n.componentInstance._vnode)}var Ar={model:vr,show:{bind:function(n,e,t){var o=e.value,r=(t=$r(t)).data&&t.data.transition,a=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;o&&r?(t.data.show=!0,ur(t,function(){n.style.display=a})):n.style.display=o?a:"none"},update:function(n,e,t){var o=e.value;!o!=!e.oldValue&&((t=$r(t)).data&&t.data.transition?(t.data.show=!0,o?ur(t,function(){n.style.display=n.__vOriginalDisplay}):dr(t,function(){n.style.display="none"})):n.style.display=o?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,o,r){r||(n.style.display=n.__vOriginalDisplay)}}},Sr={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Er(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?Er(Ge(e.children)):n}function Or(n){var e={},t=n.$options;for(var o in t.propsData)e[o]=n[o];var r=t._parentListeners;for(var a in r)e[k(a)]=r[a];return e}function Tr(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var jr=function(n){return n.tag||We(n)},Ir=function(n){return"show"===n.name},Lr={name:"transition",props:Sr,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(jr)).length){0;var o=this.mode;0;var r=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return r;var a=Er(r);if(!a)return r;if(this._leaving)return Tr(n,r);var i="__transition-"+this._uid+"-";a.key=null==a.key?a.isComment?i+"comment":i+a.tag:f(a.key)?0===String(a.key).indexOf(i)?a.key:i+a.key:a.key;var c=(a.data||(a.data={})).transition=Or(this),s=this._vnode,l=Er(s);if(a.data.directives&&a.data.directives.some(Ir)&&(a.data.show=!0),l&&l.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(a,l)&&!We(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var u=l.data.transition=O({},c);if("out-in"===o)return this._leaving=!0,ce(u,"afterLeave",function(){e._leaving=!1,e.$forceUpdate()}),Tr(n,r);if("in-out"===o){if(We(a))return s;var d,p=function(){d()};ce(c,"afterEnter",p),ce(c,"enterCancelled",p),ce(u,"delayLeave",function(n){d=n})}}return r}}},Mr=O({tag:String,moveClass:String},Sr);function Fr(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Nr(n){n.data.newPos=n.elm.getBoundingClientRect()}function Rr(n){var e=n.data.pos,t=n.data.newPos,o=e.left-t.left,r=e.top-t.top;if(o||r){n.data.moved=!0;var a=n.elm.style;a.transform=a.WebkitTransform="translate("+o+"px,"+r+"px)",a.transitionDuration="0s"}}delete Mr.mode;var zr={Transition:Lr,TransitionGroup:{props:Mr,beforeMount:function(){var n=this,e=this._update;this._update=function(t,o){var r=Qe(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,r(),e.call(n,t,o)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),o=this.prevChildren=this.children,r=this.$slots.default||[],a=this.children=[],i=Or(this),f=0;f<r.length;f++){var c=r[f];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))a.push(c),t[c.key]=c,(c.data||(c.data={})).transition=i;else;}if(o){for(var s=[],l=[],u=0;u<o.length;u++){var d=o[u];d.data.transition=i,d.data.pos=d.elm.getBoundingClientRect(),t[d.key]?s.push(d):l.push(d)}this.kept=n(e,null,s),this.removed=l}return n(e,null,a)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Fr),n.forEach(Nr),n.forEach(Rr),this._reflow=document.body.offsetHeight,n.forEach(function(n){if(n.data.moved){var t=n.elm,o=t.style;rr(t,e),o.transform=o.WebkitTransform=o.transitionDuration="",t.addEventListener(Qo,t._moveCb=function n(o){o&&o.target!==t||o&&!/transform$/.test(o.propertyName)||(t.removeEventListener(Qo,n),t._moveCb=null,ar(t,e))})}}))},methods:{hasMove:function(n,e){if(!Ko)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach(function(n){Wo(t,n)}),Vo(t,e),t.style.display="none",this.$el.appendChild(t);var o=cr(t);return this.$el.removeChild(t),this._hasMove=o.hasTransform}}}};$t.config.mustUseProp=function(n,e,t){return"value"===t&&Mt(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},$t.config.isReservedTag=Yt,$t.config.isReservedAttr=Lt,$t.config.getTagNamespace=function(n){return Kt(n)?"svg":"math"===n?"math":void 0},$t.config.isUnknownElement=function(n){if(!W)return!0;if(Yt(n))return!1;if(n=n.toLowerCase(),null!=Jt[n])return Jt[n];var e=document.createElement(n);return n.indexOf("-")>-1?Jt[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Jt[n]=/HTMLUnknownElement/.test(e.toString())},O($t.options.directives,Ar),O($t.options.components,zr),$t.prototype.__patch__=W?mr:j,$t.prototype.$mount=function(n,e){return function(n,e,t){var o;return n.$el=e,n.$options.render||(n.$options.render=gn),tt(n,"beforeMount"),o=function(){n._update(n._render(),t)},new bt(n,o,j,{before:function(){n._isMounted&&!n._isDestroyed&&tt(n,"beforeUpdate")}},!0),t=!1,null==n.$vnode&&(n._isMounted=!0,tt(n,"mounted")),n}(this,n=n&&W?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},W&&setTimeout(function(){P.devtools&&an&&an.emit("init",$t)},0),e.a=$t}).call(this,t(5),t(43).setImmediate)},function(n,e){var t;t=function(){return this}();try{t=t||new Function("return this")()}catch(n){"object"==typeof window&&(t=window)}n.exports=t},function(n,e,t){var o=t(46);"string"==typeof o&&(o=[[n.i,o,""]]),o.locals&&(n.exports=o.locals);(0,t(3).default)("f1524ce6",o,!1,{})},function(n,e,t){var o=t(48);"string"==typeof o&&(o=[[n.i,o,""]]),o.locals&&(n.exports=o.locals);(0,t(3).default)("bad9be8a",o,!1,{})},function(n,e,t){var o=t(50);"string"==typeof o&&(o=[[n.i,o,""]]),o.locals&&(n.exports=o.locals);(0,t(3).default)("3d48ad0d",o,!1,{})},function(n,e,t){var o=t(52);"string"==typeof o&&(o=[[n.i,o,""]]),o.locals&&(n.exports=o.locals);(0,t(3).default)("1ed42999",o,!1,{})},function(n,e,t){var o=t(54);"string"==typeof o&&(o=[[n.i,o,""]]),o.locals&&(n.exports=o.locals);(0,t(3).default)("0c069b9a",o,!1,{})},function(n,e,t){var o=t(56);"string"==typeof o&&(o=[[n.i,o,""]]),o.locals&&(n.exports=o.locals);(0,t(3).default)("40acb602",o,!1,{})},function(n,e,t){var o=t(98);"string"==typeof o&&(o=[[n.i,o,""]]),o.locals&&(n.exports=o.locals);(0,t(3).default)("d32cbebe",o,!1,{})},function(n,e,t){var o=t(100);"string"==typeof o&&(o=[[n.i,o,""]]),o.locals&&(n.exports=o.locals);(0,t(3).default)("000617e4",o,!1,{})},function(n,e,t){"use strict";(function(n){var t=("undefined"!=typeof window?window:void 0!==n?n:{}).__VUE_DEVTOOLS_GLOBAL_HOOK__;function o(n,e){Object.keys(n).forEach(function(t){return e(n[t],t)})}var r=function(n,e){this.runtime=e,this._children=Object.create(null),this._rawModule=n;var t=n.state;this.state=("function"==typeof t?t():t)||{}},a={namespaced:{configurable:!0}};a.namespaced.get=function(){return!!this._rawModule.namespaced},r.prototype.addChild=function(n,e){this._children[n]=e},r.prototype.removeChild=function(n){delete this._children[n]},r.prototype.getChild=function(n){return this._children[n]},r.prototype.update=function(n){this._rawModule.namespaced=n.namespaced,n.actions&&(this._rawModule.actions=n.actions),n.mutations&&(this._rawModule.mutations=n.mutations),n.getters&&(this._rawModule.getters=n.getters)},r.prototype.forEachChild=function(n){o(this._children,n)},r.prototype.forEachGetter=function(n){this._rawModule.getters&&o(this._rawModule.getters,n)},r.prototype.forEachAction=function(n){this._rawModule.actions&&o(this._rawModule.actions,n)},r.prototype.forEachMutation=function(n){this._rawModule.mutations&&o(this._rawModule.mutations,n)},Object.defineProperties(r.prototype,a);var i=function(n){this.register([],n,!1)};i.prototype.get=function(n){return n.reduce(function(n,e){return n.getChild(e)},this.root)},i.prototype.getNamespace=function(n){var e=this.root;return n.reduce(function(n,t){return n+((e=e.getChild(t)).namespaced?t+"/":"")},"")},i.prototype.update=function(n){!function n(e,t,o){0;t.update(o);if(o.modules)for(var r in o.modules){if(!t.getChild(r))return void 0;n(e.concat(r),t.getChild(r),o.modules[r])}}([],this.root,n)},i.prototype.register=function(n,e,t){var a=this;void 0===t&&(t=!0);var i=new r(e,t);0===n.length?this.root=i:this.get(n.slice(0,-1)).addChild(n[n.length-1],i);e.modules&&o(e.modules,function(e,o){a.register(n.concat(o),e,t)})},i.prototype.unregister=function(n){var e=this.get(n.slice(0,-1)),t=n[n.length-1];e.getChild(t).runtime&&e.removeChild(t)};var f;var c=function(n){var e=this;void 0===n&&(n={}),!f&&"undefined"!=typeof window&&window.Vue&&m(window.Vue);var o=n.plugins;void 0===o&&(o=[]);var r=n.strict;void 0===r&&(r=!1),this._committing=!1,this._actions=Object.create(null),this._actionSubscribers=[],this._mutations=Object.create(null),this._wrappedGetters=Object.create(null),this._modules=new i(n),this._modulesNamespaceMap=Object.create(null),this._subscribers=[],this._watcherVM=new f;var a=this,c=this.dispatch,s=this.commit;this.dispatch=function(n,e){return c.call(a,n,e)},this.commit=function(n,e,t){return s.call(a,n,e,t)},this.strict=r;var l=this._modules.root.state;p(this,l,[],this._modules.root),d(this,l),o.forEach(function(n){return n(e)}),(void 0!==n.devtools?n.devtools:f.config.devtools)&&function(n){t&&(n._devtoolHook=t,t.emit("vuex:init",n),t.on("vuex:travel-to-state",function(e){n.replaceState(e)}),n.subscribe(function(n,e){t.emit("vuex:mutation",n,e)}))}(this)},s={state:{configurable:!0}};function l(n,e){return e.indexOf(n)<0&&e.push(n),function(){var t=e.indexOf(n);t>-1&&e.splice(t,1)}}function u(n,e){n._actions=Object.create(null),n._mutations=Object.create(null),n._wrappedGetters=Object.create(null),n._modulesNamespaceMap=Object.create(null);var t=n.state;p(n,t,[],n._modules.root,!0),d(n,t,e)}function d(n,e,t){var r=n._vm;n.getters={};var a=n._wrappedGetters,i={};o(a,function(e,t){i[t]=function(n,e){return function(){return n(e)}}(e,n),Object.defineProperty(n.getters,t,{get:function(){return n._vm[t]},enumerable:!0})});var c=f.config.silent;f.config.silent=!0,n._vm=new f({data:{$$state:e},computed:i}),f.config.silent=c,n.strict&&function(n){n._vm.$watch(function(){return this._data.$$state},function(){0},{deep:!0,sync:!0})}(n),r&&(t&&n._withCommit(function(){r._data.$$state=null}),f.nextTick(function(){return r.$destroy()}))}function p(n,e,t,o,r){var a=!t.length,i=n._modules.getNamespace(t);if(o.namespaced&&(n._modulesNamespaceMap[i]=o),!a&&!r){var c=b(e,t.slice(0,-1)),s=t[t.length-1];n._withCommit(function(){f.set(c,s,o.state)})}var l=o.context=function(n,e,t){var o=""===e,r={dispatch:o?n.dispatch:function(t,o,r){var a=h(t,o,r),i=a.payload,f=a.options,c=a.type;return f&&f.root||(c=e+c),n.dispatch(c,i)},commit:o?n.commit:function(t,o,r){var a=h(t,o,r),i=a.payload,f=a.options,c=a.type;f&&f.root||(c=e+c),n.commit(c,i,f)}};return Object.defineProperties(r,{getters:{get:o?function(){return n.getters}:function(){return function(n,e){var t={},o=e.length;return Object.keys(n.getters).forEach(function(r){if(r.slice(0,o)===e){var a=r.slice(o);Object.defineProperty(t,a,{get:function(){return n.getters[r]},enumerable:!0})}}),t}(n,e)}},state:{get:function(){return b(n.state,t)}}}),r}(n,i,t);o.forEachMutation(function(e,t){!function(n,e,t,o){(n._mutations[e]||(n._mutations[e]=[])).push(function(e){t.call(n,o.state,e)})}(n,i+t,e,l)}),o.forEachAction(function(e,t){var o=e.root?t:i+t,r=e.handler||e;!function(n,e,t,o){(n._actions[e]||(n._actions[e]=[])).push(function(e,r){var a,i=t.call(n,{dispatch:o.dispatch,commit:o.commit,getters:o.getters,state:o.state,rootGetters:n.getters,rootState:n.state},e,r);return(a=i)&&"function"==typeof a.then||(i=Promise.resolve(i)),n._devtoolHook?i.catch(function(e){throw n._devtoolHook.emit("vuex:error",e),e}):i})}(n,o,r,l)}),o.forEachGetter(function(e,t){!function(n,e,t,o){if(n._wrappedGetters[e])return void 0;n._wrappedGetters[e]=function(n){return t(o.state,o.getters,n.state,n.getters)}}(n,i+t,e,l)}),o.forEachChild(function(o,a){p(n,e,t.concat(a),o,r)})}function b(n,e){return e.length?e.reduce(function(n,e){return n[e]},n):n}function h(n,e,t){var o;return null!==(o=n)&&"object"==typeof o&&n.type&&(t=e,e=n,n=n.type),{type:n,payload:e,options:t}}function m(n){f&&n===f||
/**
 * vuex v3.1.1
 * (c) 2019 Evan You
 * @license MIT
 */
function(n){if(Number(n.version.split(".")[0])>=2)n.mixin({beforeCreate:t});else{var e=n.prototype._init;n.prototype._init=function(n){void 0===n&&(n={}),n.init=n.init?[t].concat(n.init):t,e.call(this,n)}}function t(){var n=this.$options;n.store?this.$store="function"==typeof n.store?n.store():n.store:n.parent&&n.parent.$store&&(this.$store=n.parent.$store)}}(f=n)}s.state.get=function(){return this._vm._data.$$state},s.state.set=function(n){0},c.prototype.commit=function(n,e,t){var o=this,r=h(n,e,t),a=r.type,i=r.payload,f=(r.options,{type:a,payload:i}),c=this._mutations[a];c&&(this._withCommit(function(){c.forEach(function(n){n(i)})}),this._subscribers.forEach(function(n){return n(f,o.state)}))},c.prototype.dispatch=function(n,e){var t=this,o=h(n,e),r=o.type,a=o.payload,i={type:r,payload:a},f=this._actions[r];if(f){try{this._actionSubscribers.filter(function(n){return n.before}).forEach(function(n){return n.before(i,t.state)})}catch(n){0}return(f.length>1?Promise.all(f.map(function(n){return n(a)})):f[0](a)).then(function(n){try{t._actionSubscribers.filter(function(n){return n.after}).forEach(function(n){return n.after(i,t.state)})}catch(n){0}return n})}},c.prototype.subscribe=function(n){return l(n,this._subscribers)},c.prototype.subscribeAction=function(n){return l("function"==typeof n?{before:n}:n,this._actionSubscribers)},c.prototype.watch=function(n,e,t){var o=this;return this._watcherVM.$watch(function(){return n(o.state,o.getters)},e,t)},c.prototype.replaceState=function(n){var e=this;this._withCommit(function(){e._vm._data.$$state=n})},c.prototype.registerModule=function(n,e,t){void 0===t&&(t={}),"string"==typeof n&&(n=[n]),this._modules.register(n,e),p(this,this.state,n,this._modules.get(n),t.preserveState),d(this,this.state)},c.prototype.unregisterModule=function(n){var e=this;"string"==typeof n&&(n=[n]),this._modules.unregister(n),this._withCommit(function(){var t=b(e.state,n.slice(0,-1));f.delete(t,n[n.length-1])}),u(this)},c.prototype.hotUpdate=function(n){this._modules.update(n),u(this,!0)},c.prototype._withCommit=function(n){var e=this._committing;this._committing=!0,n(),this._committing=e},Object.defineProperties(c.prototype,s);var v=x(function(n,e){var t={};return w(e).forEach(function(e){var o=e.key,r=e.val;t[o]=function(){var e=this.$store.state,t=this.$store.getters;if(n){var o=k(this.$store,"mapState",n);if(!o)return;e=o.context.state,t=o.context.getters}return"function"==typeof r?r.call(this,e,t):e[r]},t[o].vuex=!0}),t}),g=x(function(n,e){var t={};return w(e).forEach(function(e){var o=e.key,r=e.val;t[o]=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var o=this.$store.commit;if(n){var a=k(this.$store,"mapMutations",n);if(!a)return;o=a.context.commit}return"function"==typeof r?r.apply(this,[o].concat(e)):o.apply(this.$store,[r].concat(e))}}),t}),y=x(function(n,e){var t={};return w(e).forEach(function(e){var o=e.key,r=e.val;r=n+r,t[o]=function(){if(!n||k(this.$store,"mapGetters",n))return this.$store.getters[r]},t[o].vuex=!0}),t}),_=x(function(n,e){var t={};return w(e).forEach(function(e){var o=e.key,r=e.val;t[o]=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var o=this.$store.dispatch;if(n){var a=k(this.$store,"mapActions",n);if(!a)return;o=a.context.dispatch}return"function"==typeof r?r.apply(this,[o].concat(e)):o.apply(this.$store,[r].concat(e))}}),t});function w(n){return Array.isArray(n)?n.map(function(n){return{key:n,val:n}}):Object.keys(n).map(function(e){return{key:e,val:n[e]}})}function x(n){return function(e,t){return"string"!=typeof e?(t=e,e=""):"/"!==e.charAt(e.length-1)&&(e+="/"),n(e,t)}}function k(n,e,t){return n._modulesNamespaceMap[t]}var C={Store:c,install:m,version:"3.1.1",mapState:v,mapMutations:g,mapGetters:y,mapActions:_,createNamespacedHelpers:function(n){return{mapState:v.bind(null,n),mapGetters:y.bind(null,n),mapMutations:g.bind(null,n),mapActions:_.bind(null,n)}}};e.a=C}).call(this,t(5))},function(n,e,t){"use strict";n.exports=function(n,e){return function(){for(var t=new Array(arguments.length),o=0;o<t.length;o++)t[o]=arguments[o];return n.apply(e,t)}}},function(n,e,t){"use strict";var o=t(1);function r(n){return encodeURIComponent(n).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}n.exports=function(n,e,t){if(!e)return n;var a;if(t)a=t(e);else if(o.isURLSearchParams(e))a=e.toString();else{var i=[];o.forEach(e,function(n,e){null!=n&&(o.isArray(n)?e+="[]":n=[n],o.forEach(n,function(n){o.isDate(n)?n=n.toISOString():o.isObject(n)&&(n=JSON.stringify(n)),i.push(r(e)+"="+r(n))}))}),a=i.join("&")}if(a){var f=n.indexOf("#");-1!==f&&(n=n.slice(0,f)),n+=(-1===n.indexOf("?")?"?":"&")+a}return n}},function(n,e,t){"use strict";n.exports=function(n){return!(!n||!n.__CANCEL__)}},function(n,e,t){"use strict";(function(e){var o=t(1),r=t(33),a={"Content-Type":"application/x-www-form-urlencoded"};function i(n,e){!o.isUndefined(n)&&o.isUndefined(n["Content-Type"])&&(n["Content-Type"]=e)}var f,c={adapter:(void 0!==e&&"[object process]"===Object.prototype.toString.call(e)?f=t(20):"undefined"!=typeof XMLHttpRequest&&(f=t(20)),f),transformRequest:[function(n,e){return r(e,"Accept"),r(e,"Content-Type"),o.isFormData(n)||o.isArrayBuffer(n)||o.isBuffer(n)||o.isStream(n)||o.isFile(n)||o.isBlob(n)?n:o.isArrayBufferView(n)?n.buffer:o.isURLSearchParams(n)?(i(e,"application/x-www-form-urlencoded;charset=utf-8"),n.toString()):o.isObject(n)?(i(e,"application/json;charset=utf-8"),JSON.stringify(n)):n}],transformResponse:[function(n){if("string"==typeof n)try{n=JSON.parse(n)}catch(n){}return n}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(n){return n>=200&&n<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},o.forEach(["delete","get","head"],function(n){c.headers[n]={}}),o.forEach(["post","put","patch"],function(n){c.headers[n]=o.merge(a)}),n.exports=c}).call(this,t(19))},function(n,e){var t,o,r=n.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function f(n){if(t===setTimeout)return setTimeout(n,0);if((t===a||!t)&&setTimeout)return t=setTimeout,setTimeout(n,0);try{return t(n,0)}catch(e){try{return t.call(null,n,0)}catch(e){return t.call(this,n,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:a}catch(n){t=a}try{o="function"==typeof clearTimeout?clearTimeout:i}catch(n){o=i}}();var c,s=[],l=!1,u=-1;function d(){l&&c&&(l=!1,c.length?s=c.concat(s):u=-1,s.length&&p())}function p(){if(!l){var n=f(d);l=!0;for(var e=s.length;e;){for(c=s,s=[];++u<e;)c&&c[u].run();u=-1,e=s.length}c=null,l=!1,function(n){if(o===clearTimeout)return clearTimeout(n);if((o===i||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(n);try{o(n)}catch(e){try{return o.call(null,n)}catch(e){return o.call(this,n)}}}(n)}}function b(n,e){this.fun=n,this.array=e}function h(){}r.nextTick=function(n){var e=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)e[t-1]=arguments[t];s.push(new b(n,e)),1!==s.length||l||f(p)},b.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=h,r.addListener=h,r.once=h,r.off=h,r.removeListener=h,r.removeAllListeners=h,r.emit=h,r.prependListener=h,r.prependOnceListener=h,r.listeners=function(n){return[]},r.binding=function(n){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(n){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(n,e,t){"use strict";var o=t(1),r=t(34),a=t(16),i=t(36),f=t(37),c=t(21);n.exports=function(n){return new Promise(function(e,s){var l=n.data,u=n.headers;o.isFormData(l)&&delete u["Content-Type"];var d=new XMLHttpRequest;if(n.auth){var p=n.auth.username||"",b=n.auth.password||"";u.Authorization="Basic "+btoa(p+":"+b)}if(d.open(n.method.toUpperCase(),a(n.url,n.params,n.paramsSerializer),!0),d.timeout=n.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var t="getAllResponseHeaders"in d?i(d.getAllResponseHeaders()):null,o={data:n.responseType&&"text"!==n.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:t,config:n,request:d};r(e,s,o),d=null}},d.onabort=function(){d&&(s(c("Request aborted",n,"ECONNABORTED",d)),d=null)},d.onerror=function(){s(c("Network Error",n,null,d)),d=null},d.ontimeout=function(){s(c("timeout of "+n.timeout+"ms exceeded",n,"ECONNABORTED",d)),d=null},o.isStandardBrowserEnv()){var h=t(38),m=(n.withCredentials||f(n.url))&&n.xsrfCookieName?h.read(n.xsrfCookieName):void 0;m&&(u[n.xsrfHeaderName]=m)}if("setRequestHeader"in d&&o.forEach(u,function(n,e){void 0===l&&"content-type"===e.toLowerCase()?delete u[e]:d.setRequestHeader(e,n)}),n.withCredentials&&(d.withCredentials=!0),n.responseType)try{d.responseType=n.responseType}catch(e){if("json"!==n.responseType)throw e}"function"==typeof n.onDownloadProgress&&d.addEventListener("progress",n.onDownloadProgress),"function"==typeof n.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",n.onUploadProgress),n.cancelToken&&n.cancelToken.promise.then(function(n){d&&(d.abort(),s(n),d=null)}),void 0===l&&(l=null),d.send(l)})}},function(n,e,t){"use strict";var o=t(35);n.exports=function(n,e,t,r,a){var i=new Error(n);return o(i,e,t,r,a)}},function(n,e,t){"use strict";var o=t(1);n.exports=function(n,e){e=e||{};var t={};return o.forEach(["url","method","params","data"],function(n){void 0!==e[n]&&(t[n]=e[n])}),o.forEach(["headers","auth","proxy"],function(r){o.isObject(e[r])?t[r]=o.deepMerge(n[r],e[r]):void 0!==e[r]?t[r]=e[r]:o.isObject(n[r])?t[r]=o.deepMerge(n[r]):void 0!==n[r]&&(t[r]=n[r])}),o.forEach(["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"],function(o){void 0!==e[o]?t[o]=e[o]:void 0!==n[o]&&(t[o]=n[o])}),t}},function(n,e,t){"use strict";function o(n){this.message=n}o.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},o.prototype.__CANCEL__=!0,n.exports=o},function(n,e,t){n.exports=t.p+"ef3df98419d143d9617fe163bf4edc0b.eot"},function(n,e,t){n.exports=t.p+"fc9c63c8224fb341fc933641cbdd12ef.eot"},function(n,e,t){n.exports=t.p+"03783c5172ee1ad128c576bf88fac168.eot"},function(n,e,t){"use strict";var o=t(1),r=t(15),a=t(29),i=t(22);function f(n){var e=new a(n),t=r(a.prototype.request,e);return o.extend(t,a.prototype,e),o.extend(t,e),t}var c=f(t(18));c.Axios=a,c.create=function(n){return f(i(c.defaults,n))},c.Cancel=t(23),c.CancelToken=t(41),c.isCancel=t(17),c.all=function(n){return Promise.all(n)},c.spread=t(42),n.exports=c,n.exports.default=c},function(n,e){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
n.exports=function(n){return null!=n&&null!=n.constructor&&"function"==typeof n.constructor.isBuffer&&n.constructor.isBuffer(n)}},function(n,e,t){"use strict";var o=t(1),r=t(16),a=t(30),i=t(31),f=t(22);function c(n){this.defaults=n,this.interceptors={request:new a,response:new a}}c.prototype.request=function(n){"string"==typeof n?(n=arguments[1]||{}).url=arguments[0]:n=n||{},(n=f(this.defaults,n)).method=n.method?n.method.toLowerCase():"get";var e=[i,void 0],t=Promise.resolve(n);for(this.interceptors.request.forEach(function(n){e.unshift(n.fulfilled,n.rejected)}),this.interceptors.response.forEach(function(n){e.push(n.fulfilled,n.rejected)});e.length;)t=t.then(e.shift(),e.shift());return t},c.prototype.getUri=function(n){return n=f(this.defaults,n),r(n.url,n.params,n.paramsSerializer).replace(/^\?/,"")},o.forEach(["delete","get","head","options"],function(n){c.prototype[n]=function(e,t){return this.request(o.merge(t||{},{method:n,url:e}))}}),o.forEach(["post","put","patch"],function(n){c.prototype[n]=function(e,t,r){return this.request(o.merge(r||{},{method:n,url:e,data:t}))}}),n.exports=c},function(n,e,t){"use strict";var o=t(1);function r(){this.handlers=[]}r.prototype.use=function(n,e){return this.handlers.push({fulfilled:n,rejected:e}),this.handlers.length-1},r.prototype.eject=function(n){this.handlers[n]&&(this.handlers[n]=null)},r.prototype.forEach=function(n){o.forEach(this.handlers,function(e){null!==e&&n(e)})},n.exports=r},function(n,e,t){"use strict";var o=t(1),r=t(32),a=t(17),i=t(18),f=t(39),c=t(40);function s(n){n.cancelToken&&n.cancelToken.throwIfRequested()}n.exports=function(n){return s(n),n.baseURL&&!f(n.url)&&(n.url=c(n.baseURL,n.url)),n.headers=n.headers||{},n.data=r(n.data,n.headers,n.transformRequest),n.headers=o.merge(n.headers.common||{},n.headers[n.method]||{},n.headers||{}),o.forEach(["delete","get","head","post","put","patch","common"],function(e){delete n.headers[e]}),(n.adapter||i.adapter)(n).then(function(e){return s(n),e.data=r(e.data,e.headers,n.transformResponse),e},function(e){return a(e)||(s(n),e&&e.response&&(e.response.data=r(e.response.data,e.response.headers,n.transformResponse))),Promise.reject(e)})}},function(n,e,t){"use strict";var o=t(1);n.exports=function(n,e,t){return o.forEach(t,function(t){n=t(n,e)}),n}},function(n,e,t){"use strict";var o=t(1);n.exports=function(n,e){o.forEach(n,function(t,o){o!==e&&o.toUpperCase()===e.toUpperCase()&&(n[e]=t,delete n[o])})}},function(n,e,t){"use strict";var o=t(21);n.exports=function(n,e,t){var r=t.config.validateStatus;!r||r(t.status)?n(t):e(o("Request failed with status code "+t.status,t.config,null,t.request,t))}},function(n,e,t){"use strict";n.exports=function(n,e,t,o,r){return n.config=e,t&&(n.code=t),n.request=o,n.response=r,n.isAxiosError=!0,n.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},n}},function(n,e,t){"use strict";var o=t(1),r=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];n.exports=function(n){var e,t,a,i={};return n?(o.forEach(n.split("\n"),function(n){if(a=n.indexOf(":"),e=o.trim(n.substr(0,a)).toLowerCase(),t=o.trim(n.substr(a+1)),e){if(i[e]&&r.indexOf(e)>=0)return;i[e]="set-cookie"===e?(i[e]?i[e]:[]).concat([t]):i[e]?i[e]+", "+t:t}}),i):i}},function(n,e,t){"use strict";var o=t(1);n.exports=o.isStandardBrowserEnv()?function(){var n,e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");function r(n){var o=n;return e&&(t.setAttribute("href",o),o=t.href),t.setAttribute("href",o),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){var t=o.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0}},function(n,e,t){"use strict";var o=t(1);n.exports=o.isStandardBrowserEnv()?{write:function(n,e,t,r,a,i){var f=[];f.push(n+"="+encodeURIComponent(e)),o.isNumber(t)&&f.push("expires="+new Date(t).toGMTString()),o.isString(r)&&f.push("path="+r),o.isString(a)&&f.push("domain="+a),!0===i&&f.push("secure"),document.cookie=f.join("; ")},read:function(n){var e=document.cookie.match(new RegExp("(^|;\\s*)("+n+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(n){this.write(n,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(n,e,t){"use strict";n.exports=function(n){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(n)}},function(n,e,t){"use strict";n.exports=function(n,e){return e?n.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):n}},function(n,e,t){"use strict";var o=t(23);function r(n){if("function"!=typeof n)throw new TypeError("executor must be a function.");var e;this.promise=new Promise(function(n){e=n});var t=this;n(function(n){t.reason||(t.reason=new o(n),e(t.reason))})}r.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},r.source=function(){var n;return{token:new r(function(e){n=e}),cancel:n}},n.exports=r},function(n,e,t){"use strict";n.exports=function(n){return function(e){return n.apply(null,e)}}},function(n,e,t){(function(n){var o=void 0!==n&&n||"undefined"!=typeof self&&self||window,r=Function.prototype.apply;function a(n,e){this._id=n,this._clearFn=e}e.setTimeout=function(){return new a(r.call(setTimeout,o,arguments),clearTimeout)},e.setInterval=function(){return new a(r.call(setInterval,o,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(n){n&&n.close()},a.prototype.unref=a.prototype.ref=function(){},a.prototype.close=function(){this._clearFn.call(o,this._id)},e.enroll=function(n,e){clearTimeout(n._idleTimeoutId),n._idleTimeout=e},e.unenroll=function(n){clearTimeout(n._idleTimeoutId),n._idleTimeout=-1},e._unrefActive=e.active=function(n){clearTimeout(n._idleTimeoutId);var e=n._idleTimeout;e>=0&&(n._idleTimeoutId=setTimeout(function(){n._onTimeout&&n._onTimeout()},e))},t(44),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==n&&n.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==n&&n.clearImmediate||this&&this.clearImmediate}).call(this,t(5))},function(n,e,t){(function(n,e){!function(n,t){"use strict";if(!n.setImmediate){var o,r,a,i,f,c=1,s={},l=!1,u=n.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(n);d=d&&d.setTimeout?d:n,"[object process]"==={}.toString.call(n.process)?o=function(n){e.nextTick(function(){b(n)})}:!function(){if(n.postMessage&&!n.importScripts){var e=!0,t=n.onmessage;return n.onmessage=function(){e=!1},n.postMessage("","*"),n.onmessage=t,e}}()?n.MessageChannel?((a=new MessageChannel).port1.onmessage=function(n){b(n.data)},o=function(n){a.port2.postMessage(n)}):u&&"onreadystatechange"in u.createElement("script")?(r=u.documentElement,o=function(n){var e=u.createElement("script");e.onreadystatechange=function(){b(n),e.onreadystatechange=null,r.removeChild(e),e=null},r.appendChild(e)}):o=function(n){setTimeout(b,0,n)}:(i="setImmediate$"+Math.random()+"$",f=function(e){e.source===n&&"string"==typeof e.data&&0===e.data.indexOf(i)&&b(+e.data.slice(i.length))},n.addEventListener?n.addEventListener("message",f,!1):n.attachEvent("onmessage",f),o=function(e){n.postMessage(i+e,"*")}),d.setImmediate=function(n){"function"!=typeof n&&(n=new Function(""+n));for(var e=new Array(arguments.length-1),t=0;t<e.length;t++)e[t]=arguments[t+1];var r={callback:n,args:e};return s[c]=r,o(c),c++},d.clearImmediate=p}function p(n){delete s[n]}function b(n){if(l)setTimeout(b,0,n);else{var e=s[n];if(e){l=!0;try{!function(n){var e=n.callback,o=n.args;switch(o.length){case 0:e();break;case 1:e(o[0]);break;case 2:e(o[0],o[1]);break;case 3:e(o[0],o[1],o[2]);break;default:e.apply(t,o)}}(e)}finally{p(n),l=!1}}}}}("undefined"==typeof self?void 0===n?this:n:self)}).call(this,t(5),t(19))},function(n,e,t){"use strict";var o=t(6);t.n(o).a},function(n,e,t){(n.exports=t(2)(!1)).push([n.i,".translations__header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.translations__header .translations__actions {\n    display: flex;\n}\n.translations__header .translations__actions .button {\n      display: block;\n      height: 38px;\n      padding: 12px 18px;\n      background-color: #4a90e2;\n      color: white;\n      font-weight: 500;\n      border: none;\n      border-radius: 3px;\n      cursor: pointer;\n      margin-right: 15px;\n}\n.translations__header .translations__actions .button i {\n        margin-right: 10px;\n}\n.translations__header .translations__actions .button:hover {\n        background-color: #2275d7;\n}\n.translations__header .translations__actions .button:active {\n        transform: translateY(1px);\n}\ntable {\n  width: 100%;\n  color: rgba(0, 0, 0, 0.87);\n  margin-bottom: 2rem;\n  border-collapse: collapse;\n  border-spacing: 0;\n}\ntable thead tr {\n    height: 56px;\n}\ntable thead tr th {\n      padding: 0;\n      border-bottom-width: 1px;\n      border-bottom-style: solid;\n      border-bottom-color: rgba(0, 0, 0, 0.12);\n      color: rgba(0, 0, 0, 0.54);\n      font-size: 12px;\n      font-weight: 500;\n      text-align: left;\n}\ntable thead tr th:first-child {\n        padding-left: 24px;\n}\ntable tbody tr {\n    transition: background-color 0.3s cubic-bezier(0.4, 0, 0.2, 1) 0s, font-weight;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0 15px;\n    height: 48px;\n}\ntable tbody tr:hover {\n      background-color: rgba(0, 0, 0, 0.08);\n}\ntable tbody tr td {\n      padding: 0;\n      border-bottom-width: 1px;\n      border-bottom-style: solid;\n      border-bottom-color: rgba(0, 0, 0, 0.12);\n      color: rgba(0, 0, 0, 0.87);\n      font-size: 14px;\n      text-align: left;\n}\ntable tbody tr td:first-child {\n        padding-left: 24px;\n}\n.translation__action i {\n  cursor: pointer;\n  font-size: 16px;\n  color: rgba(0, 0, 0, 0.38);\n}\n.translation__action i i + i {\n    margin-left: 10px;\n}\n.translation__action i:hover {\n    color: #4a90e2;\n}\n",""])},function(n,e,t){"use strict";var o=t(7);t.n(o).a},function(n,e,t){(n.exports=t(2)(!1)).push([n.i,".account {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n.account .account__title {\n    text-align: center;\n    margin-bottom: 60px;\n}\n.account .account__title .title__headline {\n      font-size: 3rem;\n      line-height: 3rem;\n      font-weight: 400;\n      letter-spacing: normal;\n      color: rgba(0, 0, 0, 0.87);\n      margin-bottom: 10px;\n}\n.account .account__title .title__subheadline {\n      font-size: 1rem;\n      line-height: 1.75rem;\n      font-weight: 400;\n      letter-spacing: typography-get-letter-spacing(0.15, 1);\n      color: rgba(0, 0, 0, 0.54);\n}\n.account .account__box {\n    display: block;\n    position: relative;\n    width: 50%;\n    padding: 0 15px;\n    background-color: white;\n    border-radius: 3px;\n    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.08), inset 0 0 0 1px #dbe3e7;\n    transition: 0.4s;\n}\n.account .account__box .account__form {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      padding: 40px 40px 30px;\n}\n.account .account__box .account__form #flash {\n        display: block;\n        width: 100%;\n        margin-bottom: 30px;\n        background-color: #fcf8e3;\n        border: 1px solid #faebcc;\n        border-radius: 3px;\n        color: #76674e;\n        font-size: 1rem;\n        line-height: 1.2rem;\n        padding: 8px 10px;\n}\n.account .account__box .account__form .form__item {\n        margin-bottom: 20px;\n        position: relative;\n}\n.account .account__box .account__form .form__item .form__label {\n          color: rgba(0, 0, 0, 0.87);\n          display: block;\n          font-weight: 400;\n          position: relative;\n          height: 20px;\n          margin-bottom: 10px;\n}\n.account .account__box .account__form .form__item .form__input {\n          display: block;\n          position: relative;\n          width: 100%;\n          height: 38px;\n          padding: 0 10px;\n          margin-bottom: 10px;\n          background-color: #f7f9fa;\n          border: 1px solid #dbe3e7;\n          border-radius: 3px;\n          color: rgba(0, 0, 0, 0.87);\n          font-size: 1rem;\n          transition: all ease-in-out 0.1s;\n          outline: none;\n}\n.account .account__box .account__form .form__item .form__input:active, .account .account__box .account__form .form__item .form__input:focus {\n            background-color: #eef2f4;\n            border-color: #4a90e2;\n}\n.account .account__box .account__form .form__submit {\n        display: block;\n        height: 38px;\n        width: 100%;\n        padding: 12px 18px;\n        background-color: #4a90e2;\n        color: white;\n        font-weight: 500;\n        border: none;\n        border-radius: 3px;\n        cursor: pointer;\n}\n.account .account__box .account__form .form__submit:hover {\n          background-color: #2275d7;\n}\n.account .account__box .account__form .form__submit:active {\n          transform: translateY(1px);\n}\n",""])},function(n,e,t){"use strict";var o=t(8);t.n(o).a},function(n,e,t){(n.exports=t(2)(!1)).push([n.i,".translation-create .translation__box {\n  display: block;\n  position: relative;\n  width: 50%;\n  padding: 15px 0;\n}\n.translation-create .translation__box #flash {\n    display: block;\n    width: 100%;\n    margin-bottom: 30px;\n    background-color: #fcf8e3;\n    border: 1px solid #faebcc;\n    border-radius: 3px;\n    color: #76674e;\n    font-size: 1rem;\n    line-height: 1.2rem;\n    padding: 8px 10px;\n}\n.translation-create .translation__box .translation__form {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    padding: 40px 0 30px;\n}\n.translation-create .translation__box .translation__form .form__item {\n      margin-bottom: 20px;\n      position: relative;\n}\n.translation-create .translation__box .translation__form .form__item .form__label {\n        color: rgba(0, 0, 0, 0.87);\n        display: block;\n        font-weight: 400;\n        position: relative;\n        height: 20px;\n        margin-bottom: 10px;\n}\n.translation-create .translation__box .translation__form .form__item .form__input {\n        display: block;\n        position: relative;\n        width: 100%;\n        height: 38px;\n        padding: 0 10px;\n        margin-bottom: 10px;\n        background-color: #f7f9fa;\n        border: 1px solid #dbe3e7;\n        border-radius: 3px;\n        color: rgba(0, 0, 0, 0.87);\n        font-size: 1rem;\n        transition: all ease-in-out 0.1s;\n        outline: none;\n}\n.translation-create .translation__box .translation__form .form__item .form__input:active, .translation-create .translation__box .translation__form .form__item .form__input:focus {\n          background-color: #eef2f4;\n          border-color: #4a90e2;\n}\n.translation-create .translation__box .translation__form .form__submit {\n      display: block;\n      height: 38px;\n      padding: 12px 18px;\n      background-color: #4a90e2;\n      color: white;\n      font-weight: 500;\n      border: none;\n      border-radius: 3px;\n      cursor: pointer;\n}\n.translation-create .translation__box .translation__form .form__submit:hover {\n        background-color: #2275d7;\n}\n.translation-create .translation__box .translation__form .form__submit:active {\n        transform: translateY(1px);\n}\n",""])},function(n,e,t){"use strict";var o=t(9);t.n(o).a},function(n,e,t){(n.exports=t(2)(!1)).push([n.i,".actions {\n  display: flex;\n}\n.actions .button {\n    display: block;\n    height: 38px;\n    padding: 12px 18px;\n    background-color: #4a90e2;\n    color: white;\n    font-weight: 500;\n    border: none;\n    border-radius: 3px;\n    cursor: pointer;\n    margin-right: 15px;\n    text-decoration: none;\n}\n.actions .button i {\n      margin-right: 10px;\n}\n.actions .button:hover {\n      background-color: #2275d7;\n}\n.actions .button:active {\n      transform: translateY(1px);\n}\n#flash {\n  display: block;\n  width: 100%;\n  margin-bottom: 30px;\n  background-color: #fcf8e3;\n  border: 1px solid #faebcc;\n  border-radius: 3px;\n  color: #76674e;\n  font-size: 1rem;\n  line-height: 1.2rem;\n  padding: 8px 10px;\n}\n",""])},function(n,e,t){"use strict";var o=t(10);t.n(o).a},function(n,e,t){(n.exports=t(2)(!1)).push([n.i,".translation-update .translation__box {\n  display: block;\n  position: relative;\n  width: 50%;\n  padding: 15px 0;\n}\n.translation-update .translation__box #flash {\n    display: block;\n    width: 100%;\n    margin-bottom: 30px;\n    background-color: #fcf8e3;\n    border: 1px solid #faebcc;\n    border-radius: 3px;\n    color: #76674e;\n    font-size: 1rem;\n    line-height: 1.2rem;\n    padding: 8px 10px;\n}\n.translation-update .translation__box .translation__form {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    padding: 40px 0 30px;\n}\n.translation-update .translation__box .translation__form .form__item {\n      margin-bottom: 20px;\n      position: relative;\n}\n.translation-update .translation__box .translation__form .form__item .form__label {\n        color: rgba(0, 0, 0, 0.87);\n        display: block;\n        font-weight: 400;\n        position: relative;\n        height: 20px;\n        margin-bottom: 10px;\n}\n.translation-update .translation__box .translation__form .form__item .form__input {\n        display: block;\n        position: relative;\n        width: 100%;\n        height: 38px;\n        padding: 0 10px;\n        margin-bottom: 10px;\n        background-color: #f7f9fa;\n        border: 1px solid #dbe3e7;\n        border-radius: 3px;\n        color: rgba(0, 0, 0, 0.87);\n        font-size: 1rem;\n        transition: all ease-in-out 0.1s;\n        outline: none;\n}\n.translation-update .translation__box .translation__form .form__item .form__input:active, .translation-update .translation__box .translation__form .form__item .form__input:focus {\n          background-color: #eef2f4;\n          border-color: #4a90e2;\n}\n.translation-update .translation__box .actions {\n    display: flex;\n}\n.translation-update .translation__box .actions .button {\n      display: block;\n      height: 38px;\n      padding: 12px 18px;\n      background-color: #4a90e2;\n      color: white;\n      font-weight: 500;\n      border: none;\n      border-radius: 3px;\n      cursor: pointer;\n      margin-right: 15px;\n      text-decoration: none;\n}\n.translation-update .translation__box .actions .button i {\n        margin-right: 10px;\n}\n.translation-update .translation__box .actions .button:hover {\n        background-color: #2275d7;\n}\n.translation-update .translation__box .actions .button:active {\n        transform: translateY(1px);\n}\n",""])},function(n,e,t){"use strict";var o=t(11);t.n(o).a},function(n,e,t){(n.exports=t(2)(!1)).push([n.i,".translation-update .translation__box {\n  display: block;\n  position: relative;\n  width: 50%;\n  padding: 15px 0;\n}\n.translation-update .translation__box .flash {\n    display: block;\n    width: 100%;\n    margin-bottom: 30px;\n    background-color: #fcf8e3;\n    border: 1px solid #faebcc;\n    border-radius: 3px;\n    color: #76674e;\n    font-size: 1rem;\n    line-height: 1.2rem;\n    padding: 8px 10px;\n}\n.translation-update .translation__box .translation__form {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    padding: 40px 0 30px;\n}\n.translation-update .translation__box .translation__form .form__item {\n      margin-bottom: 20px;\n      position: relative;\n}\n.translation-update .translation__box .translation__form .form__item .form__label {\n        color: rgba(0, 0, 0, 0.87);\n        display: block;\n        font-weight: 400;\n        position: relative;\n        height: 20px;\n        margin-bottom: 10px;\n}\n.translation-update .translation__box .translation__form .form__item .form__input {\n        display: block;\n        position: relative;\n        width: 100%;\n        height: 38px;\n        padding: 0 10px;\n        margin-bottom: 10px;\n        background-color: #f7f9fa;\n        border: 1px solid #dbe3e7;\n        border-radius: 3px;\n        color: rgba(0, 0, 0, 0.87);\n        font-size: 1rem;\n        transition: all ease-in-out 0.1s;\n        outline: none;\n}\n.translation-update .translation__box .translation__form .form__item .form__input:active, .translation-update .translation__box .translation__form .form__item .form__input:focus {\n          background-color: #eef2f4;\n          border-color: #4a90e2;\n}\n.translation-update .translation__box .actions {\n    display: flex;\n}\n.translation-update .translation__box .actions .button {\n      display: block;\n      height: 38px;\n      padding: 12px 18px;\n      background-color: #4a90e2;\n      color: white;\n      font-weight: 500;\n      border: none;\n      border-radius: 3px;\n      cursor: pointer;\n      margin-right: 15px;\n      text-decoration: none;\n}\n.translation-update .translation__box .actions .button i {\n        margin-right: 10px;\n}\n.translation-update .translation__box .actions .button:hover {\n        background-color: #2275d7;\n}\n.translation-update .translation__box .actions .button:active {\n        transform: translateY(1px);\n}\n",""])},function(n,e,t){var o=t(58);"string"==typeof o&&(o=[[n.i,o,""]]),o.locals&&(n.exports=o.locals);(0,t(3).default)("5d1639c4",o,!1,{})},function(n,e,t){e=n.exports=t(2)(!1);var o=t(59),r=o(t(60)),a=o(t(61)),i=o(t(62)),f=o(t(63)),c=o(t(64)),s=o(t(65)),l=o(t(66)),u=o(t(67)),d=o(t(68)),p=o(t(69)),b=o(t(70)),h=o(t(71)),m=o(t(72)),v=o(t(73)),g=o(t(74)),y=o(t(75)),_=o(t(76)),w=o(t(77)),x=o(t(78)),k=o(t(79)),C=o(t(80)),$=o(t(81)),A=o(t(82)),S=o(t(83)),E=o(t(24)),O=o(t(24)+"?#iefix"),T=o(t(84)),j=o(t(85)),I=o(t(86)),L=o(t(87)+"#fontawesome"),M=o(t(25)),F=o(t(25)+"?#iefix"),N=o(t(88)),R=o(t(89)),z=o(t(90)),D=o(t(91)+"#fontawesome"),P=o(t(26)),q=o(t(26)+"?#iefix"),U=o(t(92)),B=o(t(93)),H=o(t(94)),V=o(t(95)+"#fontawesome");e.push([n.i,'/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n/* Document\n   ========================================================================== */\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\nhtml {\n  line-height: 1.15;\n  /* 1 */\n  -webkit-text-size-adjust: 100%;\n  /* 2 */ }\n\n/* Sections\n   ========================================================================== */\n/**\n * Remove the margin in all browsers.\n */\nbody {\n  margin: 0; }\n\n/**\n * Render the `main` element consistently in IE.\n */\nmain {\n  display: block; }\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0; }\n\n/* Grouping content\n   ========================================================================== */\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\nhr {\n  box-sizing: content-box;\n  /* 1 */\n  height: 0;\n  /* 1 */\n  overflow: visible;\n  /* 2 */ }\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\npre {\n  font-family: monospace, monospace;\n  /* 1 */\n  font-size: 1em;\n  /* 2 */ }\n\n/* Text-level semantics\n   ========================================================================== */\n/**\n * Remove the gray background on active links in IE 10.\n */\na {\n  background-color: transparent; }\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\nabbr[title] {\n  border-bottom: none;\n  /* 1 */\n  text-decoration: underline;\n  /* 2 */\n  text-decoration: underline dotted;\n  /* 2 */ }\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\nb,\nstrong {\n  font-weight: bolder; }\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace;\n  /* 1 */\n  font-size: 1em;\n  /* 2 */ }\n\n/**\n * Add the correct font size in all browsers.\n */\nsmall {\n  font-size: 80%; }\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline; }\n\nsub {\n  bottom: -0.25em; }\n\nsup {\n  top: -0.5em; }\n\n/* Embedded content\n   ========================================================================== */\n/**\n * Remove the border on images inside links in IE 10.\n */\nimg {\n  border-style: none; }\n\n/* Forms\n   ========================================================================== */\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit;\n  /* 1 */\n  font-size: 100%;\n  /* 1 */\n  line-height: 1.15;\n  /* 1 */\n  margin: 0;\n  /* 2 */ }\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\nbutton,\ninput {\n  /* 1 */\n  overflow: visible; }\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\nbutton,\nselect {\n  /* 1 */\n  text-transform: none; }\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button; }\n\n/**\n * Remove the inner border and padding in Firefox.\n */\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0; }\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText; }\n\n/**\n * Correct the padding in Firefox.\n */\nfieldset {\n  padding: 0.35em 0.75em 0.625em; }\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\nlegend {\n  box-sizing: border-box;\n  /* 1 */\n  color: inherit;\n  /* 2 */\n  display: table;\n  /* 1 */\n  max-width: 100%;\n  /* 1 */\n  padding: 0;\n  /* 3 */\n  white-space: normal;\n  /* 1 */ }\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\nprogress {\n  vertical-align: baseline; }\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\ntextarea {\n  overflow: auto; }\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box;\n  /* 1 */\n  padding: 0;\n  /* 2 */ }\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto; }\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n[type="search"] {\n  -webkit-appearance: textfield;\n  /* 1 */\n  outline-offset: -2px;\n  /* 2 */ }\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none; }\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  /* 1 */\n  font: inherit;\n  /* 2 */ }\n\n/* Interactive\n   ========================================================================== */\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\ndetails {\n  display: block; }\n\n/*\n * Add the correct display in all browsers.\n */\nsummary {\n  display: list-item; }\n\n/* Misc\n   ========================================================================== */\n/**\n * Add the correct display in IE 10+.\n */\ntemplate {\n  display: none; }\n\n/**\n * Add the correct display in IE 10.\n */\n[hidden] {\n  display: none; }\n\n@font-face {\n  font-family: "Roboto";\n  src: url('+r+') format("woff2"), url('+a+') format("woff");\n  font-weight: 400;\n  font-style: normal; }\n\n@font-face {\n  font-family: "Roboto-Regular";\n  src: url('+r+') format("woff2"), url('+a+') format("woff"); }\n\n@font-face {\n  font-family: "Roboto";\n  src: url('+i+') format("woff2"), url('+f+') format("woff");\n  font-weight: 400;\n  font-style: italic; }\n\n@font-face {\n  font-family: "Roboto-RegularItalic";\n  src: url('+i+') format("woff2"), url('+f+') format("woff"); }\n\n@font-face {\n  font-family: "Roboto";\n  src: url('+c+') format("woff2"), url('+s+') format("woff");\n  font-weight: 300;\n  font-style: normal; }\n\n@font-face {\n  font-family: "Roboto-Light";\n  src: url('+c+') format("woff2"), url('+s+') format("woff"); }\n\n@font-face {\n  font-family: "Roboto";\n  src: url('+l+') format("woff2"), url('+u+') format("woff");\n  font-weight: 300;\n  font-style: italic; }\n\n@font-face {\n  font-family: "Roboto-LightItalic";\n  src: url('+l+') format("woff2"), url('+u+') format("woff"); }\n\n@font-face {\n  font-family: "Roboto";\n  src: url('+d+') format("woff2"), url('+p+') format("woff");\n  font-weight: 100;\n  font-style: normal; }\n\n@font-face {\n  font-family: "Roboto-Thin";\n  src: url('+d+') format("woff2"), url('+p+') format("woff"); }\n\n@font-face {\n  font-family: "Roboto";\n  src: url('+b+') format("woff2"), url('+h+') format("woff");\n  font-weight: 100;\n  font-style: italic; }\n\n@font-face {\n  font-family: "Roboto-ThinItalic";\n  src: url('+b+') format("woff2"), url('+h+') format("woff"); }\n\n@font-face {\n  font-family: "Roboto";\n  src: url('+m+') format("woff2"), url('+v+') format("woff");\n  font-weight: 500;\n  font-style: normal; }\n\n@font-face {\n  font-family: "Roboto-Medium";\n  src: url('+m+') format("woff2"), url('+v+') format("woff"); }\n\n@font-face {\n  font-family: "Roboto";\n  src: url('+g+') format("woff2"), url('+y+') format("woff");\n  font-weight: 500;\n  font-style: italic; }\n\n@font-face {\n  font-family: "Roboto-MediumItalic";\n  src: url('+g+') format("woff2"), url('+y+') format("woff"); }\n\n@font-face {\n  font-family: "Roboto";\n  src: url('+_+') format("woff2"), url('+w+') format("woff");\n  font-weight: 700;\n  font-style: normal; }\n\n@font-face {\n  font-family: "Roboto-Bold";\n  src: url('+_+') format("woff2"), url('+w+') format("woff"); }\n\n@font-face {\n  font-family: "Roboto";\n  src: url('+x+') format("woff2"), url('+k+') format("woff");\n  font-weight: 700;\n  font-style: italic; }\n\n@font-face {\n  font-family: "Roboto-BoldItalic";\n  src: url('+x+') format("woff2"), url('+k+') format("woff"); }\n\n@font-face {\n  font-family: "Roboto";\n  src: url('+C+') format("woff2"), url('+$+') format("woff");\n  font-weight: 900;\n  font-style: normal; }\n\n@font-face {\n  font-family: "Roboto-Black";\n  src: url('+C+') format("woff2"), url('+$+') format("woff"); }\n\n@font-face {\n  font-family: "Roboto";\n  src: url('+A+') format("woff2"), url('+S+') format("woff");\n  font-weight: 900;\n  font-style: italic; }\n\n@font-face {\n  font-family: "Roboto-BlackItalic";\n  src: url('+A+') format("woff2"), url('+S+') format("woff"); }\n\n/*!\n * Font Awesome Free 5.9.0 by @fontawesome - https://fontawesome.com\n * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n */\n.fa,\n.fas,\n.far,\n.fal,\n.fab {\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  display: inline-block;\n  font-style: normal;\n  font-variant: normal;\n  text-rendering: auto;\n  line-height: 1; }\n\n.fa-lg {\n  font-size: 1.33333em;\n  line-height: 0.75em;\n  vertical-align: -.0667em; }\n\n.fa-xs {\n  font-size: .75em; }\n\n.fa-sm {\n  font-size: .875em; }\n\n.fa-1x {\n  font-size: 1em; }\n\n.fa-2x {\n  font-size: 2em; }\n\n.fa-3x {\n  font-size: 3em; }\n\n.fa-4x {\n  font-size: 4em; }\n\n.fa-5x {\n  font-size: 5em; }\n\n.fa-6x {\n  font-size: 6em; }\n\n.fa-7x {\n  font-size: 7em; }\n\n.fa-8x {\n  font-size: 8em; }\n\n.fa-9x {\n  font-size: 9em; }\n\n.fa-10x {\n  font-size: 10em; }\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em; }\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: 2.5em;\n  padding-left: 0; }\n  .fa-ul > li {\n    position: relative; }\n\n.fa-li {\n  left: -2em;\n  position: absolute;\n  text-align: center;\n  width: 2em;\n  line-height: inherit; }\n\n.fa-border {\n  border: solid 0.08em #eee;\n  border-radius: .1em;\n  padding: .2em .25em .15em; }\n\n.fa-pull-left {\n  float: left; }\n\n.fa-pull-right {\n  float: right; }\n\n.fa.fa-pull-left,\n.fas.fa-pull-left,\n.far.fa-pull-left,\n.fal.fa-pull-left,\n.fab.fa-pull-left {\n  margin-right: .3em; }\n\n.fa.fa-pull-right,\n.fas.fa-pull-right,\n.far.fa-pull-right,\n.fal.fa-pull-right,\n.fab.fa-pull-right {\n  margin-left: .3em; }\n\n.fa-spin {\n  animation: fa-spin 2s infinite linear; }\n\n.fa-pulse {\n  animation: fa-spin 1s infinite steps(8); }\n\n@keyframes fa-spin {\n  0% {\n    transform: rotate(0deg); }\n  100% {\n    transform: rotate(360deg); } }\n\n.fa-rotate-90 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=1)";\n  transform: rotate(90deg); }\n\n.fa-rotate-180 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";\n  transform: rotate(180deg); }\n\n.fa-rotate-270 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=3)";\n  transform: rotate(270deg); }\n\n.fa-flip-horizontal {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)";\n  transform: scale(-1, 1); }\n\n.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  transform: scale(1, -1); }\n\n.fa-flip-both, .fa-flip-horizontal.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  transform: scale(-1, -1); }\n\n:root .fa-rotate-90,\n:root .fa-rotate-180,\n:root .fa-rotate-270,\n:root .fa-flip-horizontal,\n:root .fa-flip-vertical,\n:root .fa-flip-both {\n  filter: none; }\n\n.fa-stack {\n  display: inline-block;\n  height: 2em;\n  line-height: 2em;\n  position: relative;\n  vertical-align: middle;\n  width: 2.5em; }\n\n.fa-stack-1x,\n.fa-stack-2x {\n  left: 0;\n  position: absolute;\n  text-align: center;\n  width: 100%; }\n\n.fa-stack-1x {\n  line-height: inherit; }\n\n.fa-stack-2x {\n  font-size: 2em; }\n\n.fa-inverse {\n  color: #fff; }\n\n/* Font Awesome uses the Unicode Private Use Area (PUA) to ensure screen\nreaders do not read off random characters that represent icons */\n.fa-500px:before {\n  content: "\\f26e"; }\n\n.fa-accessible-icon:before {\n  content: "\\f368"; }\n\n.fa-accusoft:before {\n  content: "\\f369"; }\n\n.fa-acquisitions-incorporated:before {\n  content: "\\f6af"; }\n\n.fa-ad:before {\n  content: "\\f641"; }\n\n.fa-address-book:before {\n  content: "\\f2b9"; }\n\n.fa-address-card:before {\n  content: "\\f2bb"; }\n\n.fa-adjust:before {\n  content: "\\f042"; }\n\n.fa-adn:before {\n  content: "\\f170"; }\n\n.fa-adobe:before {\n  content: "\\f778"; }\n\n.fa-adversal:before {\n  content: "\\f36a"; }\n\n.fa-affiliatetheme:before {\n  content: "\\f36b"; }\n\n.fa-air-freshener:before {\n  content: "\\f5d0"; }\n\n.fa-airbnb:before {\n  content: "\\f834"; }\n\n.fa-algolia:before {\n  content: "\\f36c"; }\n\n.fa-align-center:before {\n  content: "\\f037"; }\n\n.fa-align-justify:before {\n  content: "\\f039"; }\n\n.fa-align-left:before {\n  content: "\\f036"; }\n\n.fa-align-right:before {\n  content: "\\f038"; }\n\n.fa-alipay:before {\n  content: "\\f642"; }\n\n.fa-allergies:before {\n  content: "\\f461"; }\n\n.fa-amazon:before {\n  content: "\\f270"; }\n\n.fa-amazon-pay:before {\n  content: "\\f42c"; }\n\n.fa-ambulance:before {\n  content: "\\f0f9"; }\n\n.fa-american-sign-language-interpreting:before {\n  content: "\\f2a3"; }\n\n.fa-amilia:before {\n  content: "\\f36d"; }\n\n.fa-anchor:before {\n  content: "\\f13d"; }\n\n.fa-android:before {\n  content: "\\f17b"; }\n\n.fa-angellist:before {\n  content: "\\f209"; }\n\n.fa-angle-double-down:before {\n  content: "\\f103"; }\n\n.fa-angle-double-left:before {\n  content: "\\f100"; }\n\n.fa-angle-double-right:before {\n  content: "\\f101"; }\n\n.fa-angle-double-up:before {\n  content: "\\f102"; }\n\n.fa-angle-down:before {\n  content: "\\f107"; }\n\n.fa-angle-left:before {\n  content: "\\f104"; }\n\n.fa-angle-right:before {\n  content: "\\f105"; }\n\n.fa-angle-up:before {\n  content: "\\f106"; }\n\n.fa-angry:before {\n  content: "\\f556"; }\n\n.fa-angrycreative:before {\n  content: "\\f36e"; }\n\n.fa-angular:before {\n  content: "\\f420"; }\n\n.fa-ankh:before {\n  content: "\\f644"; }\n\n.fa-app-store:before {\n  content: "\\f36f"; }\n\n.fa-app-store-ios:before {\n  content: "\\f370"; }\n\n.fa-apper:before {\n  content: "\\f371"; }\n\n.fa-apple:before {\n  content: "\\f179"; }\n\n.fa-apple-alt:before {\n  content: "\\f5d1"; }\n\n.fa-apple-pay:before {\n  content: "\\f415"; }\n\n.fa-archive:before {\n  content: "\\f187"; }\n\n.fa-archway:before {\n  content: "\\f557"; }\n\n.fa-arrow-alt-circle-down:before {\n  content: "\\f358"; }\n\n.fa-arrow-alt-circle-left:before {\n  content: "\\f359"; }\n\n.fa-arrow-alt-circle-right:before {\n  content: "\\f35a"; }\n\n.fa-arrow-alt-circle-up:before {\n  content: "\\f35b"; }\n\n.fa-arrow-circle-down:before {\n  content: "\\f0ab"; }\n\n.fa-arrow-circle-left:before {\n  content: "\\f0a8"; }\n\n.fa-arrow-circle-right:before {\n  content: "\\f0a9"; }\n\n.fa-arrow-circle-up:before {\n  content: "\\f0aa"; }\n\n.fa-arrow-down:before {\n  content: "\\f063"; }\n\n.fa-arrow-left:before {\n  content: "\\f060"; }\n\n.fa-arrow-right:before {\n  content: "\\f061"; }\n\n.fa-arrow-up:before {\n  content: "\\f062"; }\n\n.fa-arrows-alt:before {\n  content: "\\f0b2"; }\n\n.fa-arrows-alt-h:before {\n  content: "\\f337"; }\n\n.fa-arrows-alt-v:before {\n  content: "\\f338"; }\n\n.fa-artstation:before {\n  content: "\\f77a"; }\n\n.fa-assistive-listening-systems:before {\n  content: "\\f2a2"; }\n\n.fa-asterisk:before {\n  content: "\\f069"; }\n\n.fa-asymmetrik:before {\n  content: "\\f372"; }\n\n.fa-at:before {\n  content: "\\f1fa"; }\n\n.fa-atlas:before {\n  content: "\\f558"; }\n\n.fa-atlassian:before {\n  content: "\\f77b"; }\n\n.fa-atom:before {\n  content: "\\f5d2"; }\n\n.fa-audible:before {\n  content: "\\f373"; }\n\n.fa-audio-description:before {\n  content: "\\f29e"; }\n\n.fa-autoprefixer:before {\n  content: "\\f41c"; }\n\n.fa-avianex:before {\n  content: "\\f374"; }\n\n.fa-aviato:before {\n  content: "\\f421"; }\n\n.fa-award:before {\n  content: "\\f559"; }\n\n.fa-aws:before {\n  content: "\\f375"; }\n\n.fa-baby:before {\n  content: "\\f77c"; }\n\n.fa-baby-carriage:before {\n  content: "\\f77d"; }\n\n.fa-backspace:before {\n  content: "\\f55a"; }\n\n.fa-backward:before {\n  content: "\\f04a"; }\n\n.fa-bacon:before {\n  content: "\\f7e5"; }\n\n.fa-balance-scale:before {\n  content: "\\f24e"; }\n\n.fa-balance-scale-left:before {\n  content: "\\f515"; }\n\n.fa-balance-scale-right:before {\n  content: "\\f516"; }\n\n.fa-ban:before {\n  content: "\\f05e"; }\n\n.fa-band-aid:before {\n  content: "\\f462"; }\n\n.fa-bandcamp:before {\n  content: "\\f2d5"; }\n\n.fa-barcode:before {\n  content: "\\f02a"; }\n\n.fa-bars:before {\n  content: "\\f0c9"; }\n\n.fa-baseball-ball:before {\n  content: "\\f433"; }\n\n.fa-basketball-ball:before {\n  content: "\\f434"; }\n\n.fa-bath:before {\n  content: "\\f2cd"; }\n\n.fa-battery-empty:before {\n  content: "\\f244"; }\n\n.fa-battery-full:before {\n  content: "\\f240"; }\n\n.fa-battery-half:before {\n  content: "\\f242"; }\n\n.fa-battery-quarter:before {\n  content: "\\f243"; }\n\n.fa-battery-three-quarters:before {\n  content: "\\f241"; }\n\n.fa-battle-net:before {\n  content: "\\f835"; }\n\n.fa-bed:before {\n  content: "\\f236"; }\n\n.fa-beer:before {\n  content: "\\f0fc"; }\n\n.fa-behance:before {\n  content: "\\f1b4"; }\n\n.fa-behance-square:before {\n  content: "\\f1b5"; }\n\n.fa-bell:before {\n  content: "\\f0f3"; }\n\n.fa-bell-slash:before {\n  content: "\\f1f6"; }\n\n.fa-bezier-curve:before {\n  content: "\\f55b"; }\n\n.fa-bible:before {\n  content: "\\f647"; }\n\n.fa-bicycle:before {\n  content: "\\f206"; }\n\n.fa-biking:before {\n  content: "\\f84a"; }\n\n.fa-bimobject:before {\n  content: "\\f378"; }\n\n.fa-binoculars:before {\n  content: "\\f1e5"; }\n\n.fa-biohazard:before {\n  content: "\\f780"; }\n\n.fa-birthday-cake:before {\n  content: "\\f1fd"; }\n\n.fa-bitbucket:before {\n  content: "\\f171"; }\n\n.fa-bitcoin:before {\n  content: "\\f379"; }\n\n.fa-bity:before {\n  content: "\\f37a"; }\n\n.fa-black-tie:before {\n  content: "\\f27e"; }\n\n.fa-blackberry:before {\n  content: "\\f37b"; }\n\n.fa-blender:before {\n  content: "\\f517"; }\n\n.fa-blender-phone:before {\n  content: "\\f6b6"; }\n\n.fa-blind:before {\n  content: "\\f29d"; }\n\n.fa-blog:before {\n  content: "\\f781"; }\n\n.fa-blogger:before {\n  content: "\\f37c"; }\n\n.fa-blogger-b:before {\n  content: "\\f37d"; }\n\n.fa-bluetooth:before {\n  content: "\\f293"; }\n\n.fa-bluetooth-b:before {\n  content: "\\f294"; }\n\n.fa-bold:before {\n  content: "\\f032"; }\n\n.fa-bolt:before {\n  content: "\\f0e7"; }\n\n.fa-bomb:before {\n  content: "\\f1e2"; }\n\n.fa-bone:before {\n  content: "\\f5d7"; }\n\n.fa-bong:before {\n  content: "\\f55c"; }\n\n.fa-book:before {\n  content: "\\f02d"; }\n\n.fa-book-dead:before {\n  content: "\\f6b7"; }\n\n.fa-book-medical:before {\n  content: "\\f7e6"; }\n\n.fa-book-open:before {\n  content: "\\f518"; }\n\n.fa-book-reader:before {\n  content: "\\f5da"; }\n\n.fa-bookmark:before {\n  content: "\\f02e"; }\n\n.fa-bootstrap:before {\n  content: "\\f836"; }\n\n.fa-border-all:before {\n  content: "\\f84c"; }\n\n.fa-border-none:before {\n  content: "\\f850"; }\n\n.fa-border-style:before {\n  content: "\\f853"; }\n\n.fa-bowling-ball:before {\n  content: "\\f436"; }\n\n.fa-box:before {\n  content: "\\f466"; }\n\n.fa-box-open:before {\n  content: "\\f49e"; }\n\n.fa-boxes:before {\n  content: "\\f468"; }\n\n.fa-braille:before {\n  content: "\\f2a1"; }\n\n.fa-brain:before {\n  content: "\\f5dc"; }\n\n.fa-bread-slice:before {\n  content: "\\f7ec"; }\n\n.fa-briefcase:before {\n  content: "\\f0b1"; }\n\n.fa-briefcase-medical:before {\n  content: "\\f469"; }\n\n.fa-broadcast-tower:before {\n  content: "\\f519"; }\n\n.fa-broom:before {\n  content: "\\f51a"; }\n\n.fa-brush:before {\n  content: "\\f55d"; }\n\n.fa-btc:before {\n  content: "\\f15a"; }\n\n.fa-buffer:before {\n  content: "\\f837"; }\n\n.fa-bug:before {\n  content: "\\f188"; }\n\n.fa-building:before {\n  content: "\\f1ad"; }\n\n.fa-bullhorn:before {\n  content: "\\f0a1"; }\n\n.fa-bullseye:before {\n  content: "\\f140"; }\n\n.fa-burn:before {\n  content: "\\f46a"; }\n\n.fa-buromobelexperte:before {\n  content: "\\f37f"; }\n\n.fa-bus:before {\n  content: "\\f207"; }\n\n.fa-bus-alt:before {\n  content: "\\f55e"; }\n\n.fa-business-time:before {\n  content: "\\f64a"; }\n\n.fa-buysellads:before {\n  content: "\\f20d"; }\n\n.fa-calculator:before {\n  content: "\\f1ec"; }\n\n.fa-calendar:before {\n  content: "\\f133"; }\n\n.fa-calendar-alt:before {\n  content: "\\f073"; }\n\n.fa-calendar-check:before {\n  content: "\\f274"; }\n\n.fa-calendar-day:before {\n  content: "\\f783"; }\n\n.fa-calendar-minus:before {\n  content: "\\f272"; }\n\n.fa-calendar-plus:before {\n  content: "\\f271"; }\n\n.fa-calendar-times:before {\n  content: "\\f273"; }\n\n.fa-calendar-week:before {\n  content: "\\f784"; }\n\n.fa-camera:before {\n  content: "\\f030"; }\n\n.fa-camera-retro:before {\n  content: "\\f083"; }\n\n.fa-campground:before {\n  content: "\\f6bb"; }\n\n.fa-canadian-maple-leaf:before {\n  content: "\\f785"; }\n\n.fa-candy-cane:before {\n  content: "\\f786"; }\n\n.fa-cannabis:before {\n  content: "\\f55f"; }\n\n.fa-capsules:before {\n  content: "\\f46b"; }\n\n.fa-car:before {\n  content: "\\f1b9"; }\n\n.fa-car-alt:before {\n  content: "\\f5de"; }\n\n.fa-car-battery:before {\n  content: "\\f5df"; }\n\n.fa-car-crash:before {\n  content: "\\f5e1"; }\n\n.fa-car-side:before {\n  content: "\\f5e4"; }\n\n.fa-caret-down:before {\n  content: "\\f0d7"; }\n\n.fa-caret-left:before {\n  content: "\\f0d9"; }\n\n.fa-caret-right:before {\n  content: "\\f0da"; }\n\n.fa-caret-square-down:before {\n  content: "\\f150"; }\n\n.fa-caret-square-left:before {\n  content: "\\f191"; }\n\n.fa-caret-square-right:before {\n  content: "\\f152"; }\n\n.fa-caret-square-up:before {\n  content: "\\f151"; }\n\n.fa-caret-up:before {\n  content: "\\f0d8"; }\n\n.fa-carrot:before {\n  content: "\\f787"; }\n\n.fa-cart-arrow-down:before {\n  content: "\\f218"; }\n\n.fa-cart-plus:before {\n  content: "\\f217"; }\n\n.fa-cash-register:before {\n  content: "\\f788"; }\n\n.fa-cat:before {\n  content: "\\f6be"; }\n\n.fa-cc-amazon-pay:before {\n  content: "\\f42d"; }\n\n.fa-cc-amex:before {\n  content: "\\f1f3"; }\n\n.fa-cc-apple-pay:before {\n  content: "\\f416"; }\n\n.fa-cc-diners-club:before {\n  content: "\\f24c"; }\n\n.fa-cc-discover:before {\n  content: "\\f1f2"; }\n\n.fa-cc-jcb:before {\n  content: "\\f24b"; }\n\n.fa-cc-mastercard:before {\n  content: "\\f1f1"; }\n\n.fa-cc-paypal:before {\n  content: "\\f1f4"; }\n\n.fa-cc-stripe:before {\n  content: "\\f1f5"; }\n\n.fa-cc-visa:before {\n  content: "\\f1f0"; }\n\n.fa-centercode:before {\n  content: "\\f380"; }\n\n.fa-centos:before {\n  content: "\\f789"; }\n\n.fa-certificate:before {\n  content: "\\f0a3"; }\n\n.fa-chair:before {\n  content: "\\f6c0"; }\n\n.fa-chalkboard:before {\n  content: "\\f51b"; }\n\n.fa-chalkboard-teacher:before {\n  content: "\\f51c"; }\n\n.fa-charging-station:before {\n  content: "\\f5e7"; }\n\n.fa-chart-area:before {\n  content: "\\f1fe"; }\n\n.fa-chart-bar:before {\n  content: "\\f080"; }\n\n.fa-chart-line:before {\n  content: "\\f201"; }\n\n.fa-chart-pie:before {\n  content: "\\f200"; }\n\n.fa-check:before {\n  content: "\\f00c"; }\n\n.fa-check-circle:before {\n  content: "\\f058"; }\n\n.fa-check-double:before {\n  content: "\\f560"; }\n\n.fa-check-square:before {\n  content: "\\f14a"; }\n\n.fa-cheese:before {\n  content: "\\f7ef"; }\n\n.fa-chess:before {\n  content: "\\f439"; }\n\n.fa-chess-bishop:before {\n  content: "\\f43a"; }\n\n.fa-chess-board:before {\n  content: "\\f43c"; }\n\n.fa-chess-king:before {\n  content: "\\f43f"; }\n\n.fa-chess-knight:before {\n  content: "\\f441"; }\n\n.fa-chess-pawn:before {\n  content: "\\f443"; }\n\n.fa-chess-queen:before {\n  content: "\\f445"; }\n\n.fa-chess-rook:before {\n  content: "\\f447"; }\n\n.fa-chevron-circle-down:before {\n  content: "\\f13a"; }\n\n.fa-chevron-circle-left:before {\n  content: "\\f137"; }\n\n.fa-chevron-circle-right:before {\n  content: "\\f138"; }\n\n.fa-chevron-circle-up:before {\n  content: "\\f139"; }\n\n.fa-chevron-down:before {\n  content: "\\f078"; }\n\n.fa-chevron-left:before {\n  content: "\\f053"; }\n\n.fa-chevron-right:before {\n  content: "\\f054"; }\n\n.fa-chevron-up:before {\n  content: "\\f077"; }\n\n.fa-child:before {\n  content: "\\f1ae"; }\n\n.fa-chrome:before {\n  content: "\\f268"; }\n\n.fa-chromecast:before {\n  content: "\\f838"; }\n\n.fa-church:before {\n  content: "\\f51d"; }\n\n.fa-circle:before {\n  content: "\\f111"; }\n\n.fa-circle-notch:before {\n  content: "\\f1ce"; }\n\n.fa-city:before {\n  content: "\\f64f"; }\n\n.fa-clinic-medical:before {\n  content: "\\f7f2"; }\n\n.fa-clipboard:before {\n  content: "\\f328"; }\n\n.fa-clipboard-check:before {\n  content: "\\f46c"; }\n\n.fa-clipboard-list:before {\n  content: "\\f46d"; }\n\n.fa-clock:before {\n  content: "\\f017"; }\n\n.fa-clone:before {\n  content: "\\f24d"; }\n\n.fa-closed-captioning:before {\n  content: "\\f20a"; }\n\n.fa-cloud:before {\n  content: "\\f0c2"; }\n\n.fa-cloud-download-alt:before {\n  content: "\\f381"; }\n\n.fa-cloud-meatball:before {\n  content: "\\f73b"; }\n\n.fa-cloud-moon:before {\n  content: "\\f6c3"; }\n\n.fa-cloud-moon-rain:before {\n  content: "\\f73c"; }\n\n.fa-cloud-rain:before {\n  content: "\\f73d"; }\n\n.fa-cloud-showers-heavy:before {\n  content: "\\f740"; }\n\n.fa-cloud-sun:before {\n  content: "\\f6c4"; }\n\n.fa-cloud-sun-rain:before {\n  content: "\\f743"; }\n\n.fa-cloud-upload-alt:before {\n  content: "\\f382"; }\n\n.fa-cloudscale:before {\n  content: "\\f383"; }\n\n.fa-cloudsmith:before {\n  content: "\\f384"; }\n\n.fa-cloudversify:before {\n  content: "\\f385"; }\n\n.fa-cocktail:before {\n  content: "\\f561"; }\n\n.fa-code:before {\n  content: "\\f121"; }\n\n.fa-code-branch:before {\n  content: "\\f126"; }\n\n.fa-codepen:before {\n  content: "\\f1cb"; }\n\n.fa-codiepie:before {\n  content: "\\f284"; }\n\n.fa-coffee:before {\n  content: "\\f0f4"; }\n\n.fa-cog:before {\n  content: "\\f013"; }\n\n.fa-cogs:before {\n  content: "\\f085"; }\n\n.fa-coins:before {\n  content: "\\f51e"; }\n\n.fa-columns:before {\n  content: "\\f0db"; }\n\n.fa-comment:before {\n  content: "\\f075"; }\n\n.fa-comment-alt:before {\n  content: "\\f27a"; }\n\n.fa-comment-dollar:before {\n  content: "\\f651"; }\n\n.fa-comment-dots:before {\n  content: "\\f4ad"; }\n\n.fa-comment-medical:before {\n  content: "\\f7f5"; }\n\n.fa-comment-slash:before {\n  content: "\\f4b3"; }\n\n.fa-comments:before {\n  content: "\\f086"; }\n\n.fa-comments-dollar:before {\n  content: "\\f653"; }\n\n.fa-compact-disc:before {\n  content: "\\f51f"; }\n\n.fa-compass:before {\n  content: "\\f14e"; }\n\n.fa-compress:before {\n  content: "\\f066"; }\n\n.fa-compress-arrows-alt:before {\n  content: "\\f78c"; }\n\n.fa-concierge-bell:before {\n  content: "\\f562"; }\n\n.fa-confluence:before {\n  content: "\\f78d"; }\n\n.fa-connectdevelop:before {\n  content: "\\f20e"; }\n\n.fa-contao:before {\n  content: "\\f26d"; }\n\n.fa-cookie:before {\n  content: "\\f563"; }\n\n.fa-cookie-bite:before {\n  content: "\\f564"; }\n\n.fa-copy:before {\n  content: "\\f0c5"; }\n\n.fa-copyright:before {\n  content: "\\f1f9"; }\n\n.fa-couch:before {\n  content: "\\f4b8"; }\n\n.fa-cpanel:before {\n  content: "\\f388"; }\n\n.fa-creative-commons:before {\n  content: "\\f25e"; }\n\n.fa-creative-commons-by:before {\n  content: "\\f4e7"; }\n\n.fa-creative-commons-nc:before {\n  content: "\\f4e8"; }\n\n.fa-creative-commons-nc-eu:before {\n  content: "\\f4e9"; }\n\n.fa-creative-commons-nc-jp:before {\n  content: "\\f4ea"; }\n\n.fa-creative-commons-nd:before {\n  content: "\\f4eb"; }\n\n.fa-creative-commons-pd:before {\n  content: "\\f4ec"; }\n\n.fa-creative-commons-pd-alt:before {\n  content: "\\f4ed"; }\n\n.fa-creative-commons-remix:before {\n  content: "\\f4ee"; }\n\n.fa-creative-commons-sa:before {\n  content: "\\f4ef"; }\n\n.fa-creative-commons-sampling:before {\n  content: "\\f4f0"; }\n\n.fa-creative-commons-sampling-plus:before {\n  content: "\\f4f1"; }\n\n.fa-creative-commons-share:before {\n  content: "\\f4f2"; }\n\n.fa-creative-commons-zero:before {\n  content: "\\f4f3"; }\n\n.fa-credit-card:before {\n  content: "\\f09d"; }\n\n.fa-critical-role:before {\n  content: "\\f6c9"; }\n\n.fa-crop:before {\n  content: "\\f125"; }\n\n.fa-crop-alt:before {\n  content: "\\f565"; }\n\n.fa-cross:before {\n  content: "\\f654"; }\n\n.fa-crosshairs:before {\n  content: "\\f05b"; }\n\n.fa-crow:before {\n  content: "\\f520"; }\n\n.fa-crown:before {\n  content: "\\f521"; }\n\n.fa-crutch:before {\n  content: "\\f7f7"; }\n\n.fa-css3:before {\n  content: "\\f13c"; }\n\n.fa-css3-alt:before {\n  content: "\\f38b"; }\n\n.fa-cube:before {\n  content: "\\f1b2"; }\n\n.fa-cubes:before {\n  content: "\\f1b3"; }\n\n.fa-cut:before {\n  content: "\\f0c4"; }\n\n.fa-cuttlefish:before {\n  content: "\\f38c"; }\n\n.fa-d-and-d:before {\n  content: "\\f38d"; }\n\n.fa-d-and-d-beyond:before {\n  content: "\\f6ca"; }\n\n.fa-dashcube:before {\n  content: "\\f210"; }\n\n.fa-database:before {\n  content: "\\f1c0"; }\n\n.fa-deaf:before {\n  content: "\\f2a4"; }\n\n.fa-delicious:before {\n  content: "\\f1a5"; }\n\n.fa-democrat:before {\n  content: "\\f747"; }\n\n.fa-deploydog:before {\n  content: "\\f38e"; }\n\n.fa-deskpro:before {\n  content: "\\f38f"; }\n\n.fa-desktop:before {\n  content: "\\f108"; }\n\n.fa-dev:before {\n  content: "\\f6cc"; }\n\n.fa-deviantart:before {\n  content: "\\f1bd"; }\n\n.fa-dharmachakra:before {\n  content: "\\f655"; }\n\n.fa-dhl:before {\n  content: "\\f790"; }\n\n.fa-diagnoses:before {\n  content: "\\f470"; }\n\n.fa-diaspora:before {\n  content: "\\f791"; }\n\n.fa-dice:before {\n  content: "\\f522"; }\n\n.fa-dice-d20:before {\n  content: "\\f6cf"; }\n\n.fa-dice-d6:before {\n  content: "\\f6d1"; }\n\n.fa-dice-five:before {\n  content: "\\f523"; }\n\n.fa-dice-four:before {\n  content: "\\f524"; }\n\n.fa-dice-one:before {\n  content: "\\f525"; }\n\n.fa-dice-six:before {\n  content: "\\f526"; }\n\n.fa-dice-three:before {\n  content: "\\f527"; }\n\n.fa-dice-two:before {\n  content: "\\f528"; }\n\n.fa-digg:before {\n  content: "\\f1a6"; }\n\n.fa-digital-ocean:before {\n  content: "\\f391"; }\n\n.fa-digital-tachograph:before {\n  content: "\\f566"; }\n\n.fa-directions:before {\n  content: "\\f5eb"; }\n\n.fa-discord:before {\n  content: "\\f392"; }\n\n.fa-discourse:before {\n  content: "\\f393"; }\n\n.fa-divide:before {\n  content: "\\f529"; }\n\n.fa-dizzy:before {\n  content: "\\f567"; }\n\n.fa-dna:before {\n  content: "\\f471"; }\n\n.fa-dochub:before {\n  content: "\\f394"; }\n\n.fa-docker:before {\n  content: "\\f395"; }\n\n.fa-dog:before {\n  content: "\\f6d3"; }\n\n.fa-dollar-sign:before {\n  content: "\\f155"; }\n\n.fa-dolly:before {\n  content: "\\f472"; }\n\n.fa-dolly-flatbed:before {\n  content: "\\f474"; }\n\n.fa-donate:before {\n  content: "\\f4b9"; }\n\n.fa-door-closed:before {\n  content: "\\f52a"; }\n\n.fa-door-open:before {\n  content: "\\f52b"; }\n\n.fa-dot-circle:before {\n  content: "\\f192"; }\n\n.fa-dove:before {\n  content: "\\f4ba"; }\n\n.fa-download:before {\n  content: "\\f019"; }\n\n.fa-draft2digital:before {\n  content: "\\f396"; }\n\n.fa-drafting-compass:before {\n  content: "\\f568"; }\n\n.fa-dragon:before {\n  content: "\\f6d5"; }\n\n.fa-draw-polygon:before {\n  content: "\\f5ee"; }\n\n.fa-dribbble:before {\n  content: "\\f17d"; }\n\n.fa-dribbble-square:before {\n  content: "\\f397"; }\n\n.fa-dropbox:before {\n  content: "\\f16b"; }\n\n.fa-drum:before {\n  content: "\\f569"; }\n\n.fa-drum-steelpan:before {\n  content: "\\f56a"; }\n\n.fa-drumstick-bite:before {\n  content: "\\f6d7"; }\n\n.fa-drupal:before {\n  content: "\\f1a9"; }\n\n.fa-dumbbell:before {\n  content: "\\f44b"; }\n\n.fa-dumpster:before {\n  content: "\\f793"; }\n\n.fa-dumpster-fire:before {\n  content: "\\f794"; }\n\n.fa-dungeon:before {\n  content: "\\f6d9"; }\n\n.fa-dyalog:before {\n  content: "\\f399"; }\n\n.fa-earlybirds:before {\n  content: "\\f39a"; }\n\n.fa-ebay:before {\n  content: "\\f4f4"; }\n\n.fa-edge:before {\n  content: "\\f282"; }\n\n.fa-edit:before {\n  content: "\\f044"; }\n\n.fa-egg:before {\n  content: "\\f7fb"; }\n\n.fa-eject:before {\n  content: "\\f052"; }\n\n.fa-elementor:before {\n  content: "\\f430"; }\n\n.fa-ellipsis-h:before {\n  content: "\\f141"; }\n\n.fa-ellipsis-v:before {\n  content: "\\f142"; }\n\n.fa-ello:before {\n  content: "\\f5f1"; }\n\n.fa-ember:before {\n  content: "\\f423"; }\n\n.fa-empire:before {\n  content: "\\f1d1"; }\n\n.fa-envelope:before {\n  content: "\\f0e0"; }\n\n.fa-envelope-open:before {\n  content: "\\f2b6"; }\n\n.fa-envelope-open-text:before {\n  content: "\\f658"; }\n\n.fa-envelope-square:before {\n  content: "\\f199"; }\n\n.fa-envira:before {\n  content: "\\f299"; }\n\n.fa-equals:before {\n  content: "\\f52c"; }\n\n.fa-eraser:before {\n  content: "\\f12d"; }\n\n.fa-erlang:before {\n  content: "\\f39d"; }\n\n.fa-ethereum:before {\n  content: "\\f42e"; }\n\n.fa-ethernet:before {\n  content: "\\f796"; }\n\n.fa-etsy:before {\n  content: "\\f2d7"; }\n\n.fa-euro-sign:before {\n  content: "\\f153"; }\n\n.fa-evernote:before {\n  content: "\\f839"; }\n\n.fa-exchange-alt:before {\n  content: "\\f362"; }\n\n.fa-exclamation:before {\n  content: "\\f12a"; }\n\n.fa-exclamation-circle:before {\n  content: "\\f06a"; }\n\n.fa-exclamation-triangle:before {\n  content: "\\f071"; }\n\n.fa-expand:before {\n  content: "\\f065"; }\n\n.fa-expand-arrows-alt:before {\n  content: "\\f31e"; }\n\n.fa-expeditedssl:before {\n  content: "\\f23e"; }\n\n.fa-external-link-alt:before {\n  content: "\\f35d"; }\n\n.fa-external-link-square-alt:before {\n  content: "\\f360"; }\n\n.fa-eye:before {\n  content: "\\f06e"; }\n\n.fa-eye-dropper:before {\n  content: "\\f1fb"; }\n\n.fa-eye-slash:before {\n  content: "\\f070"; }\n\n.fa-facebook:before {\n  content: "\\f09a"; }\n\n.fa-facebook-f:before {\n  content: "\\f39e"; }\n\n.fa-facebook-messenger:before {\n  content: "\\f39f"; }\n\n.fa-facebook-square:before {\n  content: "\\f082"; }\n\n.fa-fan:before {\n  content: "\\f863"; }\n\n.fa-fantasy-flight-games:before {\n  content: "\\f6dc"; }\n\n.fa-fast-backward:before {\n  content: "\\f049"; }\n\n.fa-fast-forward:before {\n  content: "\\f050"; }\n\n.fa-fax:before {\n  content: "\\f1ac"; }\n\n.fa-feather:before {\n  content: "\\f52d"; }\n\n.fa-feather-alt:before {\n  content: "\\f56b"; }\n\n.fa-fedex:before {\n  content: "\\f797"; }\n\n.fa-fedora:before {\n  content: "\\f798"; }\n\n.fa-female:before {\n  content: "\\f182"; }\n\n.fa-fighter-jet:before {\n  content: "\\f0fb"; }\n\n.fa-figma:before {\n  content: "\\f799"; }\n\n.fa-file:before {\n  content: "\\f15b"; }\n\n.fa-file-alt:before {\n  content: "\\f15c"; }\n\n.fa-file-archive:before {\n  content: "\\f1c6"; }\n\n.fa-file-audio:before {\n  content: "\\f1c7"; }\n\n.fa-file-code:before {\n  content: "\\f1c9"; }\n\n.fa-file-contract:before {\n  content: "\\f56c"; }\n\n.fa-file-csv:before {\n  content: "\\f6dd"; }\n\n.fa-file-download:before {\n  content: "\\f56d"; }\n\n.fa-file-excel:before {\n  content: "\\f1c3"; }\n\n.fa-file-export:before {\n  content: "\\f56e"; }\n\n.fa-file-image:before {\n  content: "\\f1c5"; }\n\n.fa-file-import:before {\n  content: "\\f56f"; }\n\n.fa-file-invoice:before {\n  content: "\\f570"; }\n\n.fa-file-invoice-dollar:before {\n  content: "\\f571"; }\n\n.fa-file-medical:before {\n  content: "\\f477"; }\n\n.fa-file-medical-alt:before {\n  content: "\\f478"; }\n\n.fa-file-pdf:before {\n  content: "\\f1c1"; }\n\n.fa-file-powerpoint:before {\n  content: "\\f1c4"; }\n\n.fa-file-prescription:before {\n  content: "\\f572"; }\n\n.fa-file-signature:before {\n  content: "\\f573"; }\n\n.fa-file-upload:before {\n  content: "\\f574"; }\n\n.fa-file-video:before {\n  content: "\\f1c8"; }\n\n.fa-file-word:before {\n  content: "\\f1c2"; }\n\n.fa-fill:before {\n  content: "\\f575"; }\n\n.fa-fill-drip:before {\n  content: "\\f576"; }\n\n.fa-film:before {\n  content: "\\f008"; }\n\n.fa-filter:before {\n  content: "\\f0b0"; }\n\n.fa-fingerprint:before {\n  content: "\\f577"; }\n\n.fa-fire:before {\n  content: "\\f06d"; }\n\n.fa-fire-alt:before {\n  content: "\\f7e4"; }\n\n.fa-fire-extinguisher:before {\n  content: "\\f134"; }\n\n.fa-firefox:before {\n  content: "\\f269"; }\n\n.fa-first-aid:before {\n  content: "\\f479"; }\n\n.fa-first-order:before {\n  content: "\\f2b0"; }\n\n.fa-first-order-alt:before {\n  content: "\\f50a"; }\n\n.fa-firstdraft:before {\n  content: "\\f3a1"; }\n\n.fa-fish:before {\n  content: "\\f578"; }\n\n.fa-fist-raised:before {\n  content: "\\f6de"; }\n\n.fa-flag:before {\n  content: "\\f024"; }\n\n.fa-flag-checkered:before {\n  content: "\\f11e"; }\n\n.fa-flag-usa:before {\n  content: "\\f74d"; }\n\n.fa-flask:before {\n  content: "\\f0c3"; }\n\n.fa-flickr:before {\n  content: "\\f16e"; }\n\n.fa-flipboard:before {\n  content: "\\f44d"; }\n\n.fa-flushed:before {\n  content: "\\f579"; }\n\n.fa-fly:before {\n  content: "\\f417"; }\n\n.fa-folder:before {\n  content: "\\f07b"; }\n\n.fa-folder-minus:before {\n  content: "\\f65d"; }\n\n.fa-folder-open:before {\n  content: "\\f07c"; }\n\n.fa-folder-plus:before {\n  content: "\\f65e"; }\n\n.fa-font:before {\n  content: "\\f031"; }\n\n.fa-font-awesome:before {\n  content: "\\f2b4"; }\n\n.fa-font-awesome-alt:before {\n  content: "\\f35c"; }\n\n.fa-font-awesome-flag:before {\n  content: "\\f425"; }\n\n.fa-font-awesome-logo-full:before {\n  content: "\\f4e6"; }\n\n.fa-fonticons:before {\n  content: "\\f280"; }\n\n.fa-fonticons-fi:before {\n  content: "\\f3a2"; }\n\n.fa-football-ball:before {\n  content: "\\f44e"; }\n\n.fa-fort-awesome:before {\n  content: "\\f286"; }\n\n.fa-fort-awesome-alt:before {\n  content: "\\f3a3"; }\n\n.fa-forumbee:before {\n  content: "\\f211"; }\n\n.fa-forward:before {\n  content: "\\f04e"; }\n\n.fa-foursquare:before {\n  content: "\\f180"; }\n\n.fa-free-code-camp:before {\n  content: "\\f2c5"; }\n\n.fa-freebsd:before {\n  content: "\\f3a4"; }\n\n.fa-frog:before {\n  content: "\\f52e"; }\n\n.fa-frown:before {\n  content: "\\f119"; }\n\n.fa-frown-open:before {\n  content: "\\f57a"; }\n\n.fa-fulcrum:before {\n  content: "\\f50b"; }\n\n.fa-funnel-dollar:before {\n  content: "\\f662"; }\n\n.fa-futbol:before {\n  content: "\\f1e3"; }\n\n.fa-galactic-republic:before {\n  content: "\\f50c"; }\n\n.fa-galactic-senate:before {\n  content: "\\f50d"; }\n\n.fa-gamepad:before {\n  content: "\\f11b"; }\n\n.fa-gas-pump:before {\n  content: "\\f52f"; }\n\n.fa-gavel:before {\n  content: "\\f0e3"; }\n\n.fa-gem:before {\n  content: "\\f3a5"; }\n\n.fa-genderless:before {\n  content: "\\f22d"; }\n\n.fa-get-pocket:before {\n  content: "\\f265"; }\n\n.fa-gg:before {\n  content: "\\f260"; }\n\n.fa-gg-circle:before {\n  content: "\\f261"; }\n\n.fa-ghost:before {\n  content: "\\f6e2"; }\n\n.fa-gift:before {\n  content: "\\f06b"; }\n\n.fa-gifts:before {\n  content: "\\f79c"; }\n\n.fa-git:before {\n  content: "\\f1d3"; }\n\n.fa-git-alt:before {\n  content: "\\f841"; }\n\n.fa-git-square:before {\n  content: "\\f1d2"; }\n\n.fa-github:before {\n  content: "\\f09b"; }\n\n.fa-github-alt:before {\n  content: "\\f113"; }\n\n.fa-github-square:before {\n  content: "\\f092"; }\n\n.fa-gitkraken:before {\n  content: "\\f3a6"; }\n\n.fa-gitlab:before {\n  content: "\\f296"; }\n\n.fa-gitter:before {\n  content: "\\f426"; }\n\n.fa-glass-cheers:before {\n  content: "\\f79f"; }\n\n.fa-glass-martini:before {\n  content: "\\f000"; }\n\n.fa-glass-martini-alt:before {\n  content: "\\f57b"; }\n\n.fa-glass-whiskey:before {\n  content: "\\f7a0"; }\n\n.fa-glasses:before {\n  content: "\\f530"; }\n\n.fa-glide:before {\n  content: "\\f2a5"; }\n\n.fa-glide-g:before {\n  content: "\\f2a6"; }\n\n.fa-globe:before {\n  content: "\\f0ac"; }\n\n.fa-globe-africa:before {\n  content: "\\f57c"; }\n\n.fa-globe-americas:before {\n  content: "\\f57d"; }\n\n.fa-globe-asia:before {\n  content: "\\f57e"; }\n\n.fa-globe-europe:before {\n  content: "\\f7a2"; }\n\n.fa-gofore:before {\n  content: "\\f3a7"; }\n\n.fa-golf-ball:before {\n  content: "\\f450"; }\n\n.fa-goodreads:before {\n  content: "\\f3a8"; }\n\n.fa-goodreads-g:before {\n  content: "\\f3a9"; }\n\n.fa-google:before {\n  content: "\\f1a0"; }\n\n.fa-google-drive:before {\n  content: "\\f3aa"; }\n\n.fa-google-play:before {\n  content: "\\f3ab"; }\n\n.fa-google-plus:before {\n  content: "\\f2b3"; }\n\n.fa-google-plus-g:before {\n  content: "\\f0d5"; }\n\n.fa-google-plus-square:before {\n  content: "\\f0d4"; }\n\n.fa-google-wallet:before {\n  content: "\\f1ee"; }\n\n.fa-gopuram:before {\n  content: "\\f664"; }\n\n.fa-graduation-cap:before {\n  content: "\\f19d"; }\n\n.fa-gratipay:before {\n  content: "\\f184"; }\n\n.fa-grav:before {\n  content: "\\f2d6"; }\n\n.fa-greater-than:before {\n  content: "\\f531"; }\n\n.fa-greater-than-equal:before {\n  content: "\\f532"; }\n\n.fa-grimace:before {\n  content: "\\f57f"; }\n\n.fa-grin:before {\n  content: "\\f580"; }\n\n.fa-grin-alt:before {\n  content: "\\f581"; }\n\n.fa-grin-beam:before {\n  content: "\\f582"; }\n\n.fa-grin-beam-sweat:before {\n  content: "\\f583"; }\n\n.fa-grin-hearts:before {\n  content: "\\f584"; }\n\n.fa-grin-squint:before {\n  content: "\\f585"; }\n\n.fa-grin-squint-tears:before {\n  content: "\\f586"; }\n\n.fa-grin-stars:before {\n  content: "\\f587"; }\n\n.fa-grin-tears:before {\n  content: "\\f588"; }\n\n.fa-grin-tongue:before {\n  content: "\\f589"; }\n\n.fa-grin-tongue-squint:before {\n  content: "\\f58a"; }\n\n.fa-grin-tongue-wink:before {\n  content: "\\f58b"; }\n\n.fa-grin-wink:before {\n  content: "\\f58c"; }\n\n.fa-grip-horizontal:before {\n  content: "\\f58d"; }\n\n.fa-grip-lines:before {\n  content: "\\f7a4"; }\n\n.fa-grip-lines-vertical:before {\n  content: "\\f7a5"; }\n\n.fa-grip-vertical:before {\n  content: "\\f58e"; }\n\n.fa-gripfire:before {\n  content: "\\f3ac"; }\n\n.fa-grunt:before {\n  content: "\\f3ad"; }\n\n.fa-guitar:before {\n  content: "\\f7a6"; }\n\n.fa-gulp:before {\n  content: "\\f3ae"; }\n\n.fa-h-square:before {\n  content: "\\f0fd"; }\n\n.fa-hacker-news:before {\n  content: "\\f1d4"; }\n\n.fa-hacker-news-square:before {\n  content: "\\f3af"; }\n\n.fa-hackerrank:before {\n  content: "\\f5f7"; }\n\n.fa-hamburger:before {\n  content: "\\f805"; }\n\n.fa-hammer:before {\n  content: "\\f6e3"; }\n\n.fa-hamsa:before {\n  content: "\\f665"; }\n\n.fa-hand-holding:before {\n  content: "\\f4bd"; }\n\n.fa-hand-holding-heart:before {\n  content: "\\f4be"; }\n\n.fa-hand-holding-usd:before {\n  content: "\\f4c0"; }\n\n.fa-hand-lizard:before {\n  content: "\\f258"; }\n\n.fa-hand-middle-finger:before {\n  content: "\\f806"; }\n\n.fa-hand-paper:before {\n  content: "\\f256"; }\n\n.fa-hand-peace:before {\n  content: "\\f25b"; }\n\n.fa-hand-point-down:before {\n  content: "\\f0a7"; }\n\n.fa-hand-point-left:before {\n  content: "\\f0a5"; }\n\n.fa-hand-point-right:before {\n  content: "\\f0a4"; }\n\n.fa-hand-point-up:before {\n  content: "\\f0a6"; }\n\n.fa-hand-pointer:before {\n  content: "\\f25a"; }\n\n.fa-hand-rock:before {\n  content: "\\f255"; }\n\n.fa-hand-scissors:before {\n  content: "\\f257"; }\n\n.fa-hand-spock:before {\n  content: "\\f259"; }\n\n.fa-hands:before {\n  content: "\\f4c2"; }\n\n.fa-hands-helping:before {\n  content: "\\f4c4"; }\n\n.fa-handshake:before {\n  content: "\\f2b5"; }\n\n.fa-hanukiah:before {\n  content: "\\f6e6"; }\n\n.fa-hard-hat:before {\n  content: "\\f807"; }\n\n.fa-hashtag:before {\n  content: "\\f292"; }\n\n.fa-hat-wizard:before {\n  content: "\\f6e8"; }\n\n.fa-haykal:before {\n  content: "\\f666"; }\n\n.fa-hdd:before {\n  content: "\\f0a0"; }\n\n.fa-heading:before {\n  content: "\\f1dc"; }\n\n.fa-headphones:before {\n  content: "\\f025"; }\n\n.fa-headphones-alt:before {\n  content: "\\f58f"; }\n\n.fa-headset:before {\n  content: "\\f590"; }\n\n.fa-heart:before {\n  content: "\\f004"; }\n\n.fa-heart-broken:before {\n  content: "\\f7a9"; }\n\n.fa-heartbeat:before {\n  content: "\\f21e"; }\n\n.fa-helicopter:before {\n  content: "\\f533"; }\n\n.fa-highlighter:before {\n  content: "\\f591"; }\n\n.fa-hiking:before {\n  content: "\\f6ec"; }\n\n.fa-hippo:before {\n  content: "\\f6ed"; }\n\n.fa-hips:before {\n  content: "\\f452"; }\n\n.fa-hire-a-helper:before {\n  content: "\\f3b0"; }\n\n.fa-history:before {\n  content: "\\f1da"; }\n\n.fa-hockey-puck:before {\n  content: "\\f453"; }\n\n.fa-holly-berry:before {\n  content: "\\f7aa"; }\n\n.fa-home:before {\n  content: "\\f015"; }\n\n.fa-hooli:before {\n  content: "\\f427"; }\n\n.fa-hornbill:before {\n  content: "\\f592"; }\n\n.fa-horse:before {\n  content: "\\f6f0"; }\n\n.fa-horse-head:before {\n  content: "\\f7ab"; }\n\n.fa-hospital:before {\n  content: "\\f0f8"; }\n\n.fa-hospital-alt:before {\n  content: "\\f47d"; }\n\n.fa-hospital-symbol:before {\n  content: "\\f47e"; }\n\n.fa-hot-tub:before {\n  content: "\\f593"; }\n\n.fa-hotdog:before {\n  content: "\\f80f"; }\n\n.fa-hotel:before {\n  content: "\\f594"; }\n\n.fa-hotjar:before {\n  content: "\\f3b1"; }\n\n.fa-hourglass:before {\n  content: "\\f254"; }\n\n.fa-hourglass-end:before {\n  content: "\\f253"; }\n\n.fa-hourglass-half:before {\n  content: "\\f252"; }\n\n.fa-hourglass-start:before {\n  content: "\\f251"; }\n\n.fa-house-damage:before {\n  content: "\\f6f1"; }\n\n.fa-houzz:before {\n  content: "\\f27c"; }\n\n.fa-hryvnia:before {\n  content: "\\f6f2"; }\n\n.fa-html5:before {\n  content: "\\f13b"; }\n\n.fa-hubspot:before {\n  content: "\\f3b2"; }\n\n.fa-i-cursor:before {\n  content: "\\f246"; }\n\n.fa-ice-cream:before {\n  content: "\\f810"; }\n\n.fa-icicles:before {\n  content: "\\f7ad"; }\n\n.fa-icons:before {\n  content: "\\f86d"; }\n\n.fa-id-badge:before {\n  content: "\\f2c1"; }\n\n.fa-id-card:before {\n  content: "\\f2c2"; }\n\n.fa-id-card-alt:before {\n  content: "\\f47f"; }\n\n.fa-igloo:before {\n  content: "\\f7ae"; }\n\n.fa-image:before {\n  content: "\\f03e"; }\n\n.fa-images:before {\n  content: "\\f302"; }\n\n.fa-imdb:before {\n  content: "\\f2d8"; }\n\n.fa-inbox:before {\n  content: "\\f01c"; }\n\n.fa-indent:before {\n  content: "\\f03c"; }\n\n.fa-industry:before {\n  content: "\\f275"; }\n\n.fa-infinity:before {\n  content: "\\f534"; }\n\n.fa-info:before {\n  content: "\\f129"; }\n\n.fa-info-circle:before {\n  content: "\\f05a"; }\n\n.fa-instagram:before {\n  content: "\\f16d"; }\n\n.fa-intercom:before {\n  content: "\\f7af"; }\n\n.fa-internet-explorer:before {\n  content: "\\f26b"; }\n\n.fa-invision:before {\n  content: "\\f7b0"; }\n\n.fa-ioxhost:before {\n  content: "\\f208"; }\n\n.fa-italic:before {\n  content: "\\f033"; }\n\n.fa-itch-io:before {\n  content: "\\f83a"; }\n\n.fa-itunes:before {\n  content: "\\f3b4"; }\n\n.fa-itunes-note:before {\n  content: "\\f3b5"; }\n\n.fa-java:before {\n  content: "\\f4e4"; }\n\n.fa-jedi:before {\n  content: "\\f669"; }\n\n.fa-jedi-order:before {\n  content: "\\f50e"; }\n\n.fa-jenkins:before {\n  content: "\\f3b6"; }\n\n.fa-jira:before {\n  content: "\\f7b1"; }\n\n.fa-joget:before {\n  content: "\\f3b7"; }\n\n.fa-joint:before {\n  content: "\\f595"; }\n\n.fa-joomla:before {\n  content: "\\f1aa"; }\n\n.fa-journal-whills:before {\n  content: "\\f66a"; }\n\n.fa-js:before {\n  content: "\\f3b8"; }\n\n.fa-js-square:before {\n  content: "\\f3b9"; }\n\n.fa-jsfiddle:before {\n  content: "\\f1cc"; }\n\n.fa-kaaba:before {\n  content: "\\f66b"; }\n\n.fa-kaggle:before {\n  content: "\\f5fa"; }\n\n.fa-key:before {\n  content: "\\f084"; }\n\n.fa-keybase:before {\n  content: "\\f4f5"; }\n\n.fa-keyboard:before {\n  content: "\\f11c"; }\n\n.fa-keycdn:before {\n  content: "\\f3ba"; }\n\n.fa-khanda:before {\n  content: "\\f66d"; }\n\n.fa-kickstarter:before {\n  content: "\\f3bb"; }\n\n.fa-kickstarter-k:before {\n  content: "\\f3bc"; }\n\n.fa-kiss:before {\n  content: "\\f596"; }\n\n.fa-kiss-beam:before {\n  content: "\\f597"; }\n\n.fa-kiss-wink-heart:before {\n  content: "\\f598"; }\n\n.fa-kiwi-bird:before {\n  content: "\\f535"; }\n\n.fa-korvue:before {\n  content: "\\f42f"; }\n\n.fa-landmark:before {\n  content: "\\f66f"; }\n\n.fa-language:before {\n  content: "\\f1ab"; }\n\n.fa-laptop:before {\n  content: "\\f109"; }\n\n.fa-laptop-code:before {\n  content: "\\f5fc"; }\n\n.fa-laptop-medical:before {\n  content: "\\f812"; }\n\n.fa-laravel:before {\n  content: "\\f3bd"; }\n\n.fa-lastfm:before {\n  content: "\\f202"; }\n\n.fa-lastfm-square:before {\n  content: "\\f203"; }\n\n.fa-laugh:before {\n  content: "\\f599"; }\n\n.fa-laugh-beam:before {\n  content: "\\f59a"; }\n\n.fa-laugh-squint:before {\n  content: "\\f59b"; }\n\n.fa-laugh-wink:before {\n  content: "\\f59c"; }\n\n.fa-layer-group:before {\n  content: "\\f5fd"; }\n\n.fa-leaf:before {\n  content: "\\f06c"; }\n\n.fa-leanpub:before {\n  content: "\\f212"; }\n\n.fa-lemon:before {\n  content: "\\f094"; }\n\n.fa-less:before {\n  content: "\\f41d"; }\n\n.fa-less-than:before {\n  content: "\\f536"; }\n\n.fa-less-than-equal:before {\n  content: "\\f537"; }\n\n.fa-level-down-alt:before {\n  content: "\\f3be"; }\n\n.fa-level-up-alt:before {\n  content: "\\f3bf"; }\n\n.fa-life-ring:before {\n  content: "\\f1cd"; }\n\n.fa-lightbulb:before {\n  content: "\\f0eb"; }\n\n.fa-line:before {\n  content: "\\f3c0"; }\n\n.fa-link:before {\n  content: "\\f0c1"; }\n\n.fa-linkedin:before {\n  content: "\\f08c"; }\n\n.fa-linkedin-in:before {\n  content: "\\f0e1"; }\n\n.fa-linode:before {\n  content: "\\f2b8"; }\n\n.fa-linux:before {\n  content: "\\f17c"; }\n\n.fa-lira-sign:before {\n  content: "\\f195"; }\n\n.fa-list:before {\n  content: "\\f03a"; }\n\n.fa-list-alt:before {\n  content: "\\f022"; }\n\n.fa-list-ol:before {\n  content: "\\f0cb"; }\n\n.fa-list-ul:before {\n  content: "\\f0ca"; }\n\n.fa-location-arrow:before {\n  content: "\\f124"; }\n\n.fa-lock:before {\n  content: "\\f023"; }\n\n.fa-lock-open:before {\n  content: "\\f3c1"; }\n\n.fa-long-arrow-alt-down:before {\n  content: "\\f309"; }\n\n.fa-long-arrow-alt-left:before {\n  content: "\\f30a"; }\n\n.fa-long-arrow-alt-right:before {\n  content: "\\f30b"; }\n\n.fa-long-arrow-alt-up:before {\n  content: "\\f30c"; }\n\n.fa-low-vision:before {\n  content: "\\f2a8"; }\n\n.fa-luggage-cart:before {\n  content: "\\f59d"; }\n\n.fa-lyft:before {\n  content: "\\f3c3"; }\n\n.fa-magento:before {\n  content: "\\f3c4"; }\n\n.fa-magic:before {\n  content: "\\f0d0"; }\n\n.fa-magnet:before {\n  content: "\\f076"; }\n\n.fa-mail-bulk:before {\n  content: "\\f674"; }\n\n.fa-mailchimp:before {\n  content: "\\f59e"; }\n\n.fa-male:before {\n  content: "\\f183"; }\n\n.fa-mandalorian:before {\n  content: "\\f50f"; }\n\n.fa-map:before {\n  content: "\\f279"; }\n\n.fa-map-marked:before {\n  content: "\\f59f"; }\n\n.fa-map-marked-alt:before {\n  content: "\\f5a0"; }\n\n.fa-map-marker:before {\n  content: "\\f041"; }\n\n.fa-map-marker-alt:before {\n  content: "\\f3c5"; }\n\n.fa-map-pin:before {\n  content: "\\f276"; }\n\n.fa-map-signs:before {\n  content: "\\f277"; }\n\n.fa-markdown:before {\n  content: "\\f60f"; }\n\n.fa-marker:before {\n  content: "\\f5a1"; }\n\n.fa-mars:before {\n  content: "\\f222"; }\n\n.fa-mars-double:before {\n  content: "\\f227"; }\n\n.fa-mars-stroke:before {\n  content: "\\f229"; }\n\n.fa-mars-stroke-h:before {\n  content: "\\f22b"; }\n\n.fa-mars-stroke-v:before {\n  content: "\\f22a"; }\n\n.fa-mask:before {\n  content: "\\f6fa"; }\n\n.fa-mastodon:before {\n  content: "\\f4f6"; }\n\n.fa-maxcdn:before {\n  content: "\\f136"; }\n\n.fa-medal:before {\n  content: "\\f5a2"; }\n\n.fa-medapps:before {\n  content: "\\f3c6"; }\n\n.fa-medium:before {\n  content: "\\f23a"; }\n\n.fa-medium-m:before {\n  content: "\\f3c7"; }\n\n.fa-medkit:before {\n  content: "\\f0fa"; }\n\n.fa-medrt:before {\n  content: "\\f3c8"; }\n\n.fa-meetup:before {\n  content: "\\f2e0"; }\n\n.fa-megaport:before {\n  content: "\\f5a3"; }\n\n.fa-meh:before {\n  content: "\\f11a"; }\n\n.fa-meh-blank:before {\n  content: "\\f5a4"; }\n\n.fa-meh-rolling-eyes:before {\n  content: "\\f5a5"; }\n\n.fa-memory:before {\n  content: "\\f538"; }\n\n.fa-mendeley:before {\n  content: "\\f7b3"; }\n\n.fa-menorah:before {\n  content: "\\f676"; }\n\n.fa-mercury:before {\n  content: "\\f223"; }\n\n.fa-meteor:before {\n  content: "\\f753"; }\n\n.fa-microchip:before {\n  content: "\\f2db"; }\n\n.fa-microphone:before {\n  content: "\\f130"; }\n\n.fa-microphone-alt:before {\n  content: "\\f3c9"; }\n\n.fa-microphone-alt-slash:before {\n  content: "\\f539"; }\n\n.fa-microphone-slash:before {\n  content: "\\f131"; }\n\n.fa-microscope:before {\n  content: "\\f610"; }\n\n.fa-microsoft:before {\n  content: "\\f3ca"; }\n\n.fa-minus:before {\n  content: "\\f068"; }\n\n.fa-minus-circle:before {\n  content: "\\f056"; }\n\n.fa-minus-square:before {\n  content: "\\f146"; }\n\n.fa-mitten:before {\n  content: "\\f7b5"; }\n\n.fa-mix:before {\n  content: "\\f3cb"; }\n\n.fa-mixcloud:before {\n  content: "\\f289"; }\n\n.fa-mizuni:before {\n  content: "\\f3cc"; }\n\n.fa-mobile:before {\n  content: "\\f10b"; }\n\n.fa-mobile-alt:before {\n  content: "\\f3cd"; }\n\n.fa-modx:before {\n  content: "\\f285"; }\n\n.fa-monero:before {\n  content: "\\f3d0"; }\n\n.fa-money-bill:before {\n  content: "\\f0d6"; }\n\n.fa-money-bill-alt:before {\n  content: "\\f3d1"; }\n\n.fa-money-bill-wave:before {\n  content: "\\f53a"; }\n\n.fa-money-bill-wave-alt:before {\n  content: "\\f53b"; }\n\n.fa-money-check:before {\n  content: "\\f53c"; }\n\n.fa-money-check-alt:before {\n  content: "\\f53d"; }\n\n.fa-monument:before {\n  content: "\\f5a6"; }\n\n.fa-moon:before {\n  content: "\\f186"; }\n\n.fa-mortar-pestle:before {\n  content: "\\f5a7"; }\n\n.fa-mosque:before {\n  content: "\\f678"; }\n\n.fa-motorcycle:before {\n  content: "\\f21c"; }\n\n.fa-mountain:before {\n  content: "\\f6fc"; }\n\n.fa-mouse-pointer:before {\n  content: "\\f245"; }\n\n.fa-mug-hot:before {\n  content: "\\f7b6"; }\n\n.fa-music:before {\n  content: "\\f001"; }\n\n.fa-napster:before {\n  content: "\\f3d2"; }\n\n.fa-neos:before {\n  content: "\\f612"; }\n\n.fa-network-wired:before {\n  content: "\\f6ff"; }\n\n.fa-neuter:before {\n  content: "\\f22c"; }\n\n.fa-newspaper:before {\n  content: "\\f1ea"; }\n\n.fa-nimblr:before {\n  content: "\\f5a8"; }\n\n.fa-node:before {\n  content: "\\f419"; }\n\n.fa-node-js:before {\n  content: "\\f3d3"; }\n\n.fa-not-equal:before {\n  content: "\\f53e"; }\n\n.fa-notes-medical:before {\n  content: "\\f481"; }\n\n.fa-npm:before {\n  content: "\\f3d4"; }\n\n.fa-ns8:before {\n  content: "\\f3d5"; }\n\n.fa-nutritionix:before {\n  content: "\\f3d6"; }\n\n.fa-object-group:before {\n  content: "\\f247"; }\n\n.fa-object-ungroup:before {\n  content: "\\f248"; }\n\n.fa-odnoklassniki:before {\n  content: "\\f263"; }\n\n.fa-odnoklassniki-square:before {\n  content: "\\f264"; }\n\n.fa-oil-can:before {\n  content: "\\f613"; }\n\n.fa-old-republic:before {\n  content: "\\f510"; }\n\n.fa-om:before {\n  content: "\\f679"; }\n\n.fa-opencart:before {\n  content: "\\f23d"; }\n\n.fa-openid:before {\n  content: "\\f19b"; }\n\n.fa-opera:before {\n  content: "\\f26a"; }\n\n.fa-optin-monster:before {\n  content: "\\f23c"; }\n\n.fa-osi:before {\n  content: "\\f41a"; }\n\n.fa-otter:before {\n  content: "\\f700"; }\n\n.fa-outdent:before {\n  content: "\\f03b"; }\n\n.fa-page4:before {\n  content: "\\f3d7"; }\n\n.fa-pagelines:before {\n  content: "\\f18c"; }\n\n.fa-pager:before {\n  content: "\\f815"; }\n\n.fa-paint-brush:before {\n  content: "\\f1fc"; }\n\n.fa-paint-roller:before {\n  content: "\\f5aa"; }\n\n.fa-palette:before {\n  content: "\\f53f"; }\n\n.fa-palfed:before {\n  content: "\\f3d8"; }\n\n.fa-pallet:before {\n  content: "\\f482"; }\n\n.fa-paper-plane:before {\n  content: "\\f1d8"; }\n\n.fa-paperclip:before {\n  content: "\\f0c6"; }\n\n.fa-parachute-box:before {\n  content: "\\f4cd"; }\n\n.fa-paragraph:before {\n  content: "\\f1dd"; }\n\n.fa-parking:before {\n  content: "\\f540"; }\n\n.fa-passport:before {\n  content: "\\f5ab"; }\n\n.fa-pastafarianism:before {\n  content: "\\f67b"; }\n\n.fa-paste:before {\n  content: "\\f0ea"; }\n\n.fa-patreon:before {\n  content: "\\f3d9"; }\n\n.fa-pause:before {\n  content: "\\f04c"; }\n\n.fa-pause-circle:before {\n  content: "\\f28b"; }\n\n.fa-paw:before {\n  content: "\\f1b0"; }\n\n.fa-paypal:before {\n  content: "\\f1ed"; }\n\n.fa-peace:before {\n  content: "\\f67c"; }\n\n.fa-pen:before {\n  content: "\\f304"; }\n\n.fa-pen-alt:before {\n  content: "\\f305"; }\n\n.fa-pen-fancy:before {\n  content: "\\f5ac"; }\n\n.fa-pen-nib:before {\n  content: "\\f5ad"; }\n\n.fa-pen-square:before {\n  content: "\\f14b"; }\n\n.fa-pencil-alt:before {\n  content: "\\f303"; }\n\n.fa-pencil-ruler:before {\n  content: "\\f5ae"; }\n\n.fa-penny-arcade:before {\n  content: "\\f704"; }\n\n.fa-people-carry:before {\n  content: "\\f4ce"; }\n\n.fa-pepper-hot:before {\n  content: "\\f816"; }\n\n.fa-percent:before {\n  content: "\\f295"; }\n\n.fa-percentage:before {\n  content: "\\f541"; }\n\n.fa-periscope:before {\n  content: "\\f3da"; }\n\n.fa-person-booth:before {\n  content: "\\f756"; }\n\n.fa-phabricator:before {\n  content: "\\f3db"; }\n\n.fa-phoenix-framework:before {\n  content: "\\f3dc"; }\n\n.fa-phoenix-squadron:before {\n  content: "\\f511"; }\n\n.fa-phone:before {\n  content: "\\f095"; }\n\n.fa-phone-alt:before {\n  content: "\\f879"; }\n\n.fa-phone-slash:before {\n  content: "\\f3dd"; }\n\n.fa-phone-square:before {\n  content: "\\f098"; }\n\n.fa-phone-square-alt:before {\n  content: "\\f87b"; }\n\n.fa-phone-volume:before {\n  content: "\\f2a0"; }\n\n.fa-photo-video:before {\n  content: "\\f87c"; }\n\n.fa-php:before {\n  content: "\\f457"; }\n\n.fa-pied-piper:before {\n  content: "\\f2ae"; }\n\n.fa-pied-piper-alt:before {\n  content: "\\f1a8"; }\n\n.fa-pied-piper-hat:before {\n  content: "\\f4e5"; }\n\n.fa-pied-piper-pp:before {\n  content: "\\f1a7"; }\n\n.fa-piggy-bank:before {\n  content: "\\f4d3"; }\n\n.fa-pills:before {\n  content: "\\f484"; }\n\n.fa-pinterest:before {\n  content: "\\f0d2"; }\n\n.fa-pinterest-p:before {\n  content: "\\f231"; }\n\n.fa-pinterest-square:before {\n  content: "\\f0d3"; }\n\n.fa-pizza-slice:before {\n  content: "\\f818"; }\n\n.fa-place-of-worship:before {\n  content: "\\f67f"; }\n\n.fa-plane:before {\n  content: "\\f072"; }\n\n.fa-plane-arrival:before {\n  content: "\\f5af"; }\n\n.fa-plane-departure:before {\n  content: "\\f5b0"; }\n\n.fa-play:before {\n  content: "\\f04b"; }\n\n.fa-play-circle:before {\n  content: "\\f144"; }\n\n.fa-playstation:before {\n  content: "\\f3df"; }\n\n.fa-plug:before {\n  content: "\\f1e6"; }\n\n.fa-plus:before {\n  content: "\\f067"; }\n\n.fa-plus-circle:before {\n  content: "\\f055"; }\n\n.fa-plus-square:before {\n  content: "\\f0fe"; }\n\n.fa-podcast:before {\n  content: "\\f2ce"; }\n\n.fa-poll:before {\n  content: "\\f681"; }\n\n.fa-poll-h:before {\n  content: "\\f682"; }\n\n.fa-poo:before {\n  content: "\\f2fe"; }\n\n.fa-poo-storm:before {\n  content: "\\f75a"; }\n\n.fa-poop:before {\n  content: "\\f619"; }\n\n.fa-portrait:before {\n  content: "\\f3e0"; }\n\n.fa-pound-sign:before {\n  content: "\\f154"; }\n\n.fa-power-off:before {\n  content: "\\f011"; }\n\n.fa-pray:before {\n  content: "\\f683"; }\n\n.fa-praying-hands:before {\n  content: "\\f684"; }\n\n.fa-prescription:before {\n  content: "\\f5b1"; }\n\n.fa-prescription-bottle:before {\n  content: "\\f485"; }\n\n.fa-prescription-bottle-alt:before {\n  content: "\\f486"; }\n\n.fa-print:before {\n  content: "\\f02f"; }\n\n.fa-procedures:before {\n  content: "\\f487"; }\n\n.fa-product-hunt:before {\n  content: "\\f288"; }\n\n.fa-project-diagram:before {\n  content: "\\f542"; }\n\n.fa-pushed:before {\n  content: "\\f3e1"; }\n\n.fa-puzzle-piece:before {\n  content: "\\f12e"; }\n\n.fa-python:before {\n  content: "\\f3e2"; }\n\n.fa-qq:before {\n  content: "\\f1d6"; }\n\n.fa-qrcode:before {\n  content: "\\f029"; }\n\n.fa-question:before {\n  content: "\\f128"; }\n\n.fa-question-circle:before {\n  content: "\\f059"; }\n\n.fa-quidditch:before {\n  content: "\\f458"; }\n\n.fa-quinscape:before {\n  content: "\\f459"; }\n\n.fa-quora:before {\n  content: "\\f2c4"; }\n\n.fa-quote-left:before {\n  content: "\\f10d"; }\n\n.fa-quote-right:before {\n  content: "\\f10e"; }\n\n.fa-quran:before {\n  content: "\\f687"; }\n\n.fa-r-project:before {\n  content: "\\f4f7"; }\n\n.fa-radiation:before {\n  content: "\\f7b9"; }\n\n.fa-radiation-alt:before {\n  content: "\\f7ba"; }\n\n.fa-rainbow:before {\n  content: "\\f75b"; }\n\n.fa-random:before {\n  content: "\\f074"; }\n\n.fa-raspberry-pi:before {\n  content: "\\f7bb"; }\n\n.fa-ravelry:before {\n  content: "\\f2d9"; }\n\n.fa-react:before {\n  content: "\\f41b"; }\n\n.fa-reacteurope:before {\n  content: "\\f75d"; }\n\n.fa-readme:before {\n  content: "\\f4d5"; }\n\n.fa-rebel:before {\n  content: "\\f1d0"; }\n\n.fa-receipt:before {\n  content: "\\f543"; }\n\n.fa-recycle:before {\n  content: "\\f1b8"; }\n\n.fa-red-river:before {\n  content: "\\f3e3"; }\n\n.fa-reddit:before {\n  content: "\\f1a1"; }\n\n.fa-reddit-alien:before {\n  content: "\\f281"; }\n\n.fa-reddit-square:before {\n  content: "\\f1a2"; }\n\n.fa-redhat:before {\n  content: "\\f7bc"; }\n\n.fa-redo:before {\n  content: "\\f01e"; }\n\n.fa-redo-alt:before {\n  content: "\\f2f9"; }\n\n.fa-registered:before {\n  content: "\\f25d"; }\n\n.fa-remove-format:before {\n  content: "\\f87d"; }\n\n.fa-renren:before {\n  content: "\\f18b"; }\n\n.fa-reply:before {\n  content: "\\f3e5"; }\n\n.fa-reply-all:before {\n  content: "\\f122"; }\n\n.fa-replyd:before {\n  content: "\\f3e6"; }\n\n.fa-republican:before {\n  content: "\\f75e"; }\n\n.fa-researchgate:before {\n  content: "\\f4f8"; }\n\n.fa-resolving:before {\n  content: "\\f3e7"; }\n\n.fa-restroom:before {\n  content: "\\f7bd"; }\n\n.fa-retweet:before {\n  content: "\\f079"; }\n\n.fa-rev:before {\n  content: "\\f5b2"; }\n\n.fa-ribbon:before {\n  content: "\\f4d6"; }\n\n.fa-ring:before {\n  content: "\\f70b"; }\n\n.fa-road:before {\n  content: "\\f018"; }\n\n.fa-robot:before {\n  content: "\\f544"; }\n\n.fa-rocket:before {\n  content: "\\f135"; }\n\n.fa-rocketchat:before {\n  content: "\\f3e8"; }\n\n.fa-rockrms:before {\n  content: "\\f3e9"; }\n\n.fa-route:before {\n  content: "\\f4d7"; }\n\n.fa-rss:before {\n  content: "\\f09e"; }\n\n.fa-rss-square:before {\n  content: "\\f143"; }\n\n.fa-ruble-sign:before {\n  content: "\\f158"; }\n\n.fa-ruler:before {\n  content: "\\f545"; }\n\n.fa-ruler-combined:before {\n  content: "\\f546"; }\n\n.fa-ruler-horizontal:before {\n  content: "\\f547"; }\n\n.fa-ruler-vertical:before {\n  content: "\\f548"; }\n\n.fa-running:before {\n  content: "\\f70c"; }\n\n.fa-rupee-sign:before {\n  content: "\\f156"; }\n\n.fa-sad-cry:before {\n  content: "\\f5b3"; }\n\n.fa-sad-tear:before {\n  content: "\\f5b4"; }\n\n.fa-safari:before {\n  content: "\\f267"; }\n\n.fa-salesforce:before {\n  content: "\\f83b"; }\n\n.fa-sass:before {\n  content: "\\f41e"; }\n\n.fa-satellite:before {\n  content: "\\f7bf"; }\n\n.fa-satellite-dish:before {\n  content: "\\f7c0"; }\n\n.fa-save:before {\n  content: "\\f0c7"; }\n\n.fa-schlix:before {\n  content: "\\f3ea"; }\n\n.fa-school:before {\n  content: "\\f549"; }\n\n.fa-screwdriver:before {\n  content: "\\f54a"; }\n\n.fa-scribd:before {\n  content: "\\f28a"; }\n\n.fa-scroll:before {\n  content: "\\f70e"; }\n\n.fa-sd-card:before {\n  content: "\\f7c2"; }\n\n.fa-search:before {\n  content: "\\f002"; }\n\n.fa-search-dollar:before {\n  content: "\\f688"; }\n\n.fa-search-location:before {\n  content: "\\f689"; }\n\n.fa-search-minus:before {\n  content: "\\f010"; }\n\n.fa-search-plus:before {\n  content: "\\f00e"; }\n\n.fa-searchengin:before {\n  content: "\\f3eb"; }\n\n.fa-seedling:before {\n  content: "\\f4d8"; }\n\n.fa-sellcast:before {\n  content: "\\f2da"; }\n\n.fa-sellsy:before {\n  content: "\\f213"; }\n\n.fa-server:before {\n  content: "\\f233"; }\n\n.fa-servicestack:before {\n  content: "\\f3ec"; }\n\n.fa-shapes:before {\n  content: "\\f61f"; }\n\n.fa-share:before {\n  content: "\\f064"; }\n\n.fa-share-alt:before {\n  content: "\\f1e0"; }\n\n.fa-share-alt-square:before {\n  content: "\\f1e1"; }\n\n.fa-share-square:before {\n  content: "\\f14d"; }\n\n.fa-shekel-sign:before {\n  content: "\\f20b"; }\n\n.fa-shield-alt:before {\n  content: "\\f3ed"; }\n\n.fa-ship:before {\n  content: "\\f21a"; }\n\n.fa-shipping-fast:before {\n  content: "\\f48b"; }\n\n.fa-shirtsinbulk:before {\n  content: "\\f214"; }\n\n.fa-shoe-prints:before {\n  content: "\\f54b"; }\n\n.fa-shopping-bag:before {\n  content: "\\f290"; }\n\n.fa-shopping-basket:before {\n  content: "\\f291"; }\n\n.fa-shopping-cart:before {\n  content: "\\f07a"; }\n\n.fa-shopware:before {\n  content: "\\f5b5"; }\n\n.fa-shower:before {\n  content: "\\f2cc"; }\n\n.fa-shuttle-van:before {\n  content: "\\f5b6"; }\n\n.fa-sign:before {\n  content: "\\f4d9"; }\n\n.fa-sign-in-alt:before {\n  content: "\\f2f6"; }\n\n.fa-sign-language:before {\n  content: "\\f2a7"; }\n\n.fa-sign-out-alt:before {\n  content: "\\f2f5"; }\n\n.fa-signal:before {\n  content: "\\f012"; }\n\n.fa-signature:before {\n  content: "\\f5b7"; }\n\n.fa-sim-card:before {\n  content: "\\f7c4"; }\n\n.fa-simplybuilt:before {\n  content: "\\f215"; }\n\n.fa-sistrix:before {\n  content: "\\f3ee"; }\n\n.fa-sitemap:before {\n  content: "\\f0e8"; }\n\n.fa-sith:before {\n  content: "\\f512"; }\n\n.fa-skating:before {\n  content: "\\f7c5"; }\n\n.fa-sketch:before {\n  content: "\\f7c6"; }\n\n.fa-skiing:before {\n  content: "\\f7c9"; }\n\n.fa-skiing-nordic:before {\n  content: "\\f7ca"; }\n\n.fa-skull:before {\n  content: "\\f54c"; }\n\n.fa-skull-crossbones:before {\n  content: "\\f714"; }\n\n.fa-skyatlas:before {\n  content: "\\f216"; }\n\n.fa-skype:before {\n  content: "\\f17e"; }\n\n.fa-slack:before {\n  content: "\\f198"; }\n\n.fa-slack-hash:before {\n  content: "\\f3ef"; }\n\n.fa-slash:before {\n  content: "\\f715"; }\n\n.fa-sleigh:before {\n  content: "\\f7cc"; }\n\n.fa-sliders-h:before {\n  content: "\\f1de"; }\n\n.fa-slideshare:before {\n  content: "\\f1e7"; }\n\n.fa-smile:before {\n  content: "\\f118"; }\n\n.fa-smile-beam:before {\n  content: "\\f5b8"; }\n\n.fa-smile-wink:before {\n  content: "\\f4da"; }\n\n.fa-smog:before {\n  content: "\\f75f"; }\n\n.fa-smoking:before {\n  content: "\\f48d"; }\n\n.fa-smoking-ban:before {\n  content: "\\f54d"; }\n\n.fa-sms:before {\n  content: "\\f7cd"; }\n\n.fa-snapchat:before {\n  content: "\\f2ab"; }\n\n.fa-snapchat-ghost:before {\n  content: "\\f2ac"; }\n\n.fa-snapchat-square:before {\n  content: "\\f2ad"; }\n\n.fa-snowboarding:before {\n  content: "\\f7ce"; }\n\n.fa-snowflake:before {\n  content: "\\f2dc"; }\n\n.fa-snowman:before {\n  content: "\\f7d0"; }\n\n.fa-snowplow:before {\n  content: "\\f7d2"; }\n\n.fa-socks:before {\n  content: "\\f696"; }\n\n.fa-solar-panel:before {\n  content: "\\f5ba"; }\n\n.fa-sort:before {\n  content: "\\f0dc"; }\n\n.fa-sort-alpha-down:before {\n  content: "\\f15d"; }\n\n.fa-sort-alpha-down-alt:before {\n  content: "\\f881"; }\n\n.fa-sort-alpha-up:before {\n  content: "\\f15e"; }\n\n.fa-sort-alpha-up-alt:before {\n  content: "\\f882"; }\n\n.fa-sort-amount-down:before {\n  content: "\\f160"; }\n\n.fa-sort-amount-down-alt:before {\n  content: "\\f884"; }\n\n.fa-sort-amount-up:before {\n  content: "\\f161"; }\n\n.fa-sort-amount-up-alt:before {\n  content: "\\f885"; }\n\n.fa-sort-down:before {\n  content: "\\f0dd"; }\n\n.fa-sort-numeric-down:before {\n  content: "\\f162"; }\n\n.fa-sort-numeric-down-alt:before {\n  content: "\\f886"; }\n\n.fa-sort-numeric-up:before {\n  content: "\\f163"; }\n\n.fa-sort-numeric-up-alt:before {\n  content: "\\f887"; }\n\n.fa-sort-up:before {\n  content: "\\f0de"; }\n\n.fa-soundcloud:before {\n  content: "\\f1be"; }\n\n.fa-sourcetree:before {\n  content: "\\f7d3"; }\n\n.fa-spa:before {\n  content: "\\f5bb"; }\n\n.fa-space-shuttle:before {\n  content: "\\f197"; }\n\n.fa-speakap:before {\n  content: "\\f3f3"; }\n\n.fa-speaker-deck:before {\n  content: "\\f83c"; }\n\n.fa-spell-check:before {\n  content: "\\f891"; }\n\n.fa-spider:before {\n  content: "\\f717"; }\n\n.fa-spinner:before {\n  content: "\\f110"; }\n\n.fa-splotch:before {\n  content: "\\f5bc"; }\n\n.fa-spotify:before {\n  content: "\\f1bc"; }\n\n.fa-spray-can:before {\n  content: "\\f5bd"; }\n\n.fa-square:before {\n  content: "\\f0c8"; }\n\n.fa-square-full:before {\n  content: "\\f45c"; }\n\n.fa-square-root-alt:before {\n  content: "\\f698"; }\n\n.fa-squarespace:before {\n  content: "\\f5be"; }\n\n.fa-stack-exchange:before {\n  content: "\\f18d"; }\n\n.fa-stack-overflow:before {\n  content: "\\f16c"; }\n\n.fa-stackpath:before {\n  content: "\\f842"; }\n\n.fa-stamp:before {\n  content: "\\f5bf"; }\n\n.fa-star:before {\n  content: "\\f005"; }\n\n.fa-star-and-crescent:before {\n  content: "\\f699"; }\n\n.fa-star-half:before {\n  content: "\\f089"; }\n\n.fa-star-half-alt:before {\n  content: "\\f5c0"; }\n\n.fa-star-of-david:before {\n  content: "\\f69a"; }\n\n.fa-star-of-life:before {\n  content: "\\f621"; }\n\n.fa-staylinked:before {\n  content: "\\f3f5"; }\n\n.fa-steam:before {\n  content: "\\f1b6"; }\n\n.fa-steam-square:before {\n  content: "\\f1b7"; }\n\n.fa-steam-symbol:before {\n  content: "\\f3f6"; }\n\n.fa-step-backward:before {\n  content: "\\f048"; }\n\n.fa-step-forward:before {\n  content: "\\f051"; }\n\n.fa-stethoscope:before {\n  content: "\\f0f1"; }\n\n.fa-sticker-mule:before {\n  content: "\\f3f7"; }\n\n.fa-sticky-note:before {\n  content: "\\f249"; }\n\n.fa-stop:before {\n  content: "\\f04d"; }\n\n.fa-stop-circle:before {\n  content: "\\f28d"; }\n\n.fa-stopwatch:before {\n  content: "\\f2f2"; }\n\n.fa-store:before {\n  content: "\\f54e"; }\n\n.fa-store-alt:before {\n  content: "\\f54f"; }\n\n.fa-strava:before {\n  content: "\\f428"; }\n\n.fa-stream:before {\n  content: "\\f550"; }\n\n.fa-street-view:before {\n  content: "\\f21d"; }\n\n.fa-strikethrough:before {\n  content: "\\f0cc"; }\n\n.fa-stripe:before {\n  content: "\\f429"; }\n\n.fa-stripe-s:before {\n  content: "\\f42a"; }\n\n.fa-stroopwafel:before {\n  content: "\\f551"; }\n\n.fa-studiovinari:before {\n  content: "\\f3f8"; }\n\n.fa-stumbleupon:before {\n  content: "\\f1a4"; }\n\n.fa-stumbleupon-circle:before {\n  content: "\\f1a3"; }\n\n.fa-subscript:before {\n  content: "\\f12c"; }\n\n.fa-subway:before {\n  content: "\\f239"; }\n\n.fa-suitcase:before {\n  content: "\\f0f2"; }\n\n.fa-suitcase-rolling:before {\n  content: "\\f5c1"; }\n\n.fa-sun:before {\n  content: "\\f185"; }\n\n.fa-superpowers:before {\n  content: "\\f2dd"; }\n\n.fa-superscript:before {\n  content: "\\f12b"; }\n\n.fa-supple:before {\n  content: "\\f3f9"; }\n\n.fa-surprise:before {\n  content: "\\f5c2"; }\n\n.fa-suse:before {\n  content: "\\f7d6"; }\n\n.fa-swatchbook:before {\n  content: "\\f5c3"; }\n\n.fa-swimmer:before {\n  content: "\\f5c4"; }\n\n.fa-swimming-pool:before {\n  content: "\\f5c5"; }\n\n.fa-symfony:before {\n  content: "\\f83d"; }\n\n.fa-synagogue:before {\n  content: "\\f69b"; }\n\n.fa-sync:before {\n  content: "\\f021"; }\n\n.fa-sync-alt:before {\n  content: "\\f2f1"; }\n\n.fa-syringe:before {\n  content: "\\f48e"; }\n\n.fa-table:before {\n  content: "\\f0ce"; }\n\n.fa-table-tennis:before {\n  content: "\\f45d"; }\n\n.fa-tablet:before {\n  content: "\\f10a"; }\n\n.fa-tablet-alt:before {\n  content: "\\f3fa"; }\n\n.fa-tablets:before {\n  content: "\\f490"; }\n\n.fa-tachometer-alt:before {\n  content: "\\f3fd"; }\n\n.fa-tag:before {\n  content: "\\f02b"; }\n\n.fa-tags:before {\n  content: "\\f02c"; }\n\n.fa-tape:before {\n  content: "\\f4db"; }\n\n.fa-tasks:before {\n  content: "\\f0ae"; }\n\n.fa-taxi:before {\n  content: "\\f1ba"; }\n\n.fa-teamspeak:before {\n  content: "\\f4f9"; }\n\n.fa-teeth:before {\n  content: "\\f62e"; }\n\n.fa-teeth-open:before {\n  content: "\\f62f"; }\n\n.fa-telegram:before {\n  content: "\\f2c6"; }\n\n.fa-telegram-plane:before {\n  content: "\\f3fe"; }\n\n.fa-temperature-high:before {\n  content: "\\f769"; }\n\n.fa-temperature-low:before {\n  content: "\\f76b"; }\n\n.fa-tencent-weibo:before {\n  content: "\\f1d5"; }\n\n.fa-tenge:before {\n  content: "\\f7d7"; }\n\n.fa-terminal:before {\n  content: "\\f120"; }\n\n.fa-text-height:before {\n  content: "\\f034"; }\n\n.fa-text-width:before {\n  content: "\\f035"; }\n\n.fa-th:before {\n  content: "\\f00a"; }\n\n.fa-th-large:before {\n  content: "\\f009"; }\n\n.fa-th-list:before {\n  content: "\\f00b"; }\n\n.fa-the-red-yeti:before {\n  content: "\\f69d"; }\n\n.fa-theater-masks:before {\n  content: "\\f630"; }\n\n.fa-themeco:before {\n  content: "\\f5c6"; }\n\n.fa-themeisle:before {\n  content: "\\f2b2"; }\n\n.fa-thermometer:before {\n  content: "\\f491"; }\n\n.fa-thermometer-empty:before {\n  content: "\\f2cb"; }\n\n.fa-thermometer-full:before {\n  content: "\\f2c7"; }\n\n.fa-thermometer-half:before {\n  content: "\\f2c9"; }\n\n.fa-thermometer-quarter:before {\n  content: "\\f2ca"; }\n\n.fa-thermometer-three-quarters:before {\n  content: "\\f2c8"; }\n\n.fa-think-peaks:before {\n  content: "\\f731"; }\n\n.fa-thumbs-down:before {\n  content: "\\f165"; }\n\n.fa-thumbs-up:before {\n  content: "\\f164"; }\n\n.fa-thumbtack:before {\n  content: "\\f08d"; }\n\n.fa-ticket-alt:before {\n  content: "\\f3ff"; }\n\n.fa-times:before {\n  content: "\\f00d"; }\n\n.fa-times-circle:before {\n  content: "\\f057"; }\n\n.fa-tint:before {\n  content: "\\f043"; }\n\n.fa-tint-slash:before {\n  content: "\\f5c7"; }\n\n.fa-tired:before {\n  content: "\\f5c8"; }\n\n.fa-toggle-off:before {\n  content: "\\f204"; }\n\n.fa-toggle-on:before {\n  content: "\\f205"; }\n\n.fa-toilet:before {\n  content: "\\f7d8"; }\n\n.fa-toilet-paper:before {\n  content: "\\f71e"; }\n\n.fa-toolbox:before {\n  content: "\\f552"; }\n\n.fa-tools:before {\n  content: "\\f7d9"; }\n\n.fa-tooth:before {\n  content: "\\f5c9"; }\n\n.fa-torah:before {\n  content: "\\f6a0"; }\n\n.fa-torii-gate:before {\n  content: "\\f6a1"; }\n\n.fa-tractor:before {\n  content: "\\f722"; }\n\n.fa-trade-federation:before {\n  content: "\\f513"; }\n\n.fa-trademark:before {\n  content: "\\f25c"; }\n\n.fa-traffic-light:before {\n  content: "\\f637"; }\n\n.fa-train:before {\n  content: "\\f238"; }\n\n.fa-tram:before {\n  content: "\\f7da"; }\n\n.fa-transgender:before {\n  content: "\\f224"; }\n\n.fa-transgender-alt:before {\n  content: "\\f225"; }\n\n.fa-trash:before {\n  content: "\\f1f8"; }\n\n.fa-trash-alt:before {\n  content: "\\f2ed"; }\n\n.fa-trash-restore:before {\n  content: "\\f829"; }\n\n.fa-trash-restore-alt:before {\n  content: "\\f82a"; }\n\n.fa-tree:before {\n  content: "\\f1bb"; }\n\n.fa-trello:before {\n  content: "\\f181"; }\n\n.fa-tripadvisor:before {\n  content: "\\f262"; }\n\n.fa-trophy:before {\n  content: "\\f091"; }\n\n.fa-truck:before {\n  content: "\\f0d1"; }\n\n.fa-truck-loading:before {\n  content: "\\f4de"; }\n\n.fa-truck-monster:before {\n  content: "\\f63b"; }\n\n.fa-truck-moving:before {\n  content: "\\f4df"; }\n\n.fa-truck-pickup:before {\n  content: "\\f63c"; }\n\n.fa-tshirt:before {\n  content: "\\f553"; }\n\n.fa-tty:before {\n  content: "\\f1e4"; }\n\n.fa-tumblr:before {\n  content: "\\f173"; }\n\n.fa-tumblr-square:before {\n  content: "\\f174"; }\n\n.fa-tv:before {\n  content: "\\f26c"; }\n\n.fa-twitch:before {\n  content: "\\f1e8"; }\n\n.fa-twitter:before {\n  content: "\\f099"; }\n\n.fa-twitter-square:before {\n  content: "\\f081"; }\n\n.fa-typo3:before {\n  content: "\\f42b"; }\n\n.fa-uber:before {\n  content: "\\f402"; }\n\n.fa-ubuntu:before {\n  content: "\\f7df"; }\n\n.fa-uikit:before {\n  content: "\\f403"; }\n\n.fa-umbrella:before {\n  content: "\\f0e9"; }\n\n.fa-umbrella-beach:before {\n  content: "\\f5ca"; }\n\n.fa-underline:before {\n  content: "\\f0cd"; }\n\n.fa-undo:before {\n  content: "\\f0e2"; }\n\n.fa-undo-alt:before {\n  content: "\\f2ea"; }\n\n.fa-uniregistry:before {\n  content: "\\f404"; }\n\n.fa-universal-access:before {\n  content: "\\f29a"; }\n\n.fa-university:before {\n  content: "\\f19c"; }\n\n.fa-unlink:before {\n  content: "\\f127"; }\n\n.fa-unlock:before {\n  content: "\\f09c"; }\n\n.fa-unlock-alt:before {\n  content: "\\f13e"; }\n\n.fa-untappd:before {\n  content: "\\f405"; }\n\n.fa-upload:before {\n  content: "\\f093"; }\n\n.fa-ups:before {\n  content: "\\f7e0"; }\n\n.fa-usb:before {\n  content: "\\f287"; }\n\n.fa-user:before {\n  content: "\\f007"; }\n\n.fa-user-alt:before {\n  content: "\\f406"; }\n\n.fa-user-alt-slash:before {\n  content: "\\f4fa"; }\n\n.fa-user-astronaut:before {\n  content: "\\f4fb"; }\n\n.fa-user-check:before {\n  content: "\\f4fc"; }\n\n.fa-user-circle:before {\n  content: "\\f2bd"; }\n\n.fa-user-clock:before {\n  content: "\\f4fd"; }\n\n.fa-user-cog:before {\n  content: "\\f4fe"; }\n\n.fa-user-edit:before {\n  content: "\\f4ff"; }\n\n.fa-user-friends:before {\n  content: "\\f500"; }\n\n.fa-user-graduate:before {\n  content: "\\f501"; }\n\n.fa-user-injured:before {\n  content: "\\f728"; }\n\n.fa-user-lock:before {\n  content: "\\f502"; }\n\n.fa-user-md:before {\n  content: "\\f0f0"; }\n\n.fa-user-minus:before {\n  content: "\\f503"; }\n\n.fa-user-ninja:before {\n  content: "\\f504"; }\n\n.fa-user-nurse:before {\n  content: "\\f82f"; }\n\n.fa-user-plus:before {\n  content: "\\f234"; }\n\n.fa-user-secret:before {\n  content: "\\f21b"; }\n\n.fa-user-shield:before {\n  content: "\\f505"; }\n\n.fa-user-slash:before {\n  content: "\\f506"; }\n\n.fa-user-tag:before {\n  content: "\\f507"; }\n\n.fa-user-tie:before {\n  content: "\\f508"; }\n\n.fa-user-times:before {\n  content: "\\f235"; }\n\n.fa-users:before {\n  content: "\\f0c0"; }\n\n.fa-users-cog:before {\n  content: "\\f509"; }\n\n.fa-usps:before {\n  content: "\\f7e1"; }\n\n.fa-ussunnah:before {\n  content: "\\f407"; }\n\n.fa-utensil-spoon:before {\n  content: "\\f2e5"; }\n\n.fa-utensils:before {\n  content: "\\f2e7"; }\n\n.fa-vaadin:before {\n  content: "\\f408"; }\n\n.fa-vector-square:before {\n  content: "\\f5cb"; }\n\n.fa-venus:before {\n  content: "\\f221"; }\n\n.fa-venus-double:before {\n  content: "\\f226"; }\n\n.fa-venus-mars:before {\n  content: "\\f228"; }\n\n.fa-viacoin:before {\n  content: "\\f237"; }\n\n.fa-viadeo:before {\n  content: "\\f2a9"; }\n\n.fa-viadeo-square:before {\n  content: "\\f2aa"; }\n\n.fa-vial:before {\n  content: "\\f492"; }\n\n.fa-vials:before {\n  content: "\\f493"; }\n\n.fa-viber:before {\n  content: "\\f409"; }\n\n.fa-video:before {\n  content: "\\f03d"; }\n\n.fa-video-slash:before {\n  content: "\\f4e2"; }\n\n.fa-vihara:before {\n  content: "\\f6a7"; }\n\n.fa-vimeo:before {\n  content: "\\f40a"; }\n\n.fa-vimeo-square:before {\n  content: "\\f194"; }\n\n.fa-vimeo-v:before {\n  content: "\\f27d"; }\n\n.fa-vine:before {\n  content: "\\f1ca"; }\n\n.fa-vk:before {\n  content: "\\f189"; }\n\n.fa-vnv:before {\n  content: "\\f40b"; }\n\n.fa-voicemail:before {\n  content: "\\f897"; }\n\n.fa-volleyball-ball:before {\n  content: "\\f45f"; }\n\n.fa-volume-down:before {\n  content: "\\f027"; }\n\n.fa-volume-mute:before {\n  content: "\\f6a9"; }\n\n.fa-volume-off:before {\n  content: "\\f026"; }\n\n.fa-volume-up:before {\n  content: "\\f028"; }\n\n.fa-vote-yea:before {\n  content: "\\f772"; }\n\n.fa-vr-cardboard:before {\n  content: "\\f729"; }\n\n.fa-vuejs:before {\n  content: "\\f41f"; }\n\n.fa-walking:before {\n  content: "\\f554"; }\n\n.fa-wallet:before {\n  content: "\\f555"; }\n\n.fa-warehouse:before {\n  content: "\\f494"; }\n\n.fa-water:before {\n  content: "\\f773"; }\n\n.fa-wave-square:before {\n  content: "\\f83e"; }\n\n.fa-waze:before {\n  content: "\\f83f"; }\n\n.fa-weebly:before {\n  content: "\\f5cc"; }\n\n.fa-weibo:before {\n  content: "\\f18a"; }\n\n.fa-weight:before {\n  content: "\\f496"; }\n\n.fa-weight-hanging:before {\n  content: "\\f5cd"; }\n\n.fa-weixin:before {\n  content: "\\f1d7"; }\n\n.fa-whatsapp:before {\n  content: "\\f232"; }\n\n.fa-whatsapp-square:before {\n  content: "\\f40c"; }\n\n.fa-wheelchair:before {\n  content: "\\f193"; }\n\n.fa-whmcs:before {\n  content: "\\f40d"; }\n\n.fa-wifi:before {\n  content: "\\f1eb"; }\n\n.fa-wikipedia-w:before {\n  content: "\\f266"; }\n\n.fa-wind:before {\n  content: "\\f72e"; }\n\n.fa-window-close:before {\n  content: "\\f410"; }\n\n.fa-window-maximize:before {\n  content: "\\f2d0"; }\n\n.fa-window-minimize:before {\n  content: "\\f2d1"; }\n\n.fa-window-restore:before {\n  content: "\\f2d2"; }\n\n.fa-windows:before {\n  content: "\\f17a"; }\n\n.fa-wine-bottle:before {\n  content: "\\f72f"; }\n\n.fa-wine-glass:before {\n  content: "\\f4e3"; }\n\n.fa-wine-glass-alt:before {\n  content: "\\f5ce"; }\n\n.fa-wix:before {\n  content: "\\f5cf"; }\n\n.fa-wizards-of-the-coast:before {\n  content: "\\f730"; }\n\n.fa-wolf-pack-battalion:before {\n  content: "\\f514"; }\n\n.fa-won-sign:before {\n  content: "\\f159"; }\n\n.fa-wordpress:before {\n  content: "\\f19a"; }\n\n.fa-wordpress-simple:before {\n  content: "\\f411"; }\n\n.fa-wpbeginner:before {\n  content: "\\f297"; }\n\n.fa-wpexplorer:before {\n  content: "\\f2de"; }\n\n.fa-wpforms:before {\n  content: "\\f298"; }\n\n.fa-wpressr:before {\n  content: "\\f3e4"; }\n\n.fa-wrench:before {\n  content: "\\f0ad"; }\n\n.fa-x-ray:before {\n  content: "\\f497"; }\n\n.fa-xbox:before {\n  content: "\\f412"; }\n\n.fa-xing:before {\n  content: "\\f168"; }\n\n.fa-xing-square:before {\n  content: "\\f169"; }\n\n.fa-y-combinator:before {\n  content: "\\f23b"; }\n\n.fa-yahoo:before {\n  content: "\\f19e"; }\n\n.fa-yammer:before {\n  content: "\\f840"; }\n\n.fa-yandex:before {\n  content: "\\f413"; }\n\n.fa-yandex-international:before {\n  content: "\\f414"; }\n\n.fa-yarn:before {\n  content: "\\f7e3"; }\n\n.fa-yelp:before {\n  content: "\\f1e9"; }\n\n.fa-yen-sign:before {\n  content: "\\f157"; }\n\n.fa-yin-yang:before {\n  content: "\\f6ad"; }\n\n.fa-yoast:before {\n  content: "\\f2b1"; }\n\n.fa-youtube:before {\n  content: "\\f167"; }\n\n.fa-youtube-square:before {\n  content: "\\f431"; }\n\n.fa-zhihu:before {\n  content: "\\f63f"; }\n\n.sr-only {\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px; }\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  clip: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  position: static;\n  width: auto; }\n\n/*!\n * Font Awesome Free 5.9.0 by @fontawesome - https://fontawesome.com\n * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n */\n@font-face {\n  font-family: \'Font Awesome 5 Free\';\n  font-style: normal;\n  font-weight: 900;\n  font-display: auto;\n  src: url('+E+");\n  src: url("+O+') format("embedded-opentype"), url('+T+') format("woff2"), url('+j+') format("woff"), url('+I+') format("truetype"), url('+L+") format(\"svg\"); }\n\n.fa,\n.fas {\n  font-family: 'Font Awesome 5 Free';\n  font-weight: 900; }\n\n/*!\n * Font Awesome Free 5.9.0 by @fontawesome - https://fontawesome.com\n * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n */\n@font-face {\n  font-family: 'Font Awesome 5 Free';\n  font-style: normal;\n  font-weight: 400;\n  font-display: auto;\n  src: url("+M+");\n  src: url("+F+') format("embedded-opentype"), url('+N+') format("woff2"), url('+R+') format("woff"), url('+z+') format("truetype"), url('+D+") format(\"svg\"); }\n\n.far {\n  font-family: 'Font Awesome 5 Free';\n  font-weight: 400; }\n\n/*!\n * Font Awesome Free 5.9.0 by @fontawesome - https://fontawesome.com\n * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n */\n@font-face {\n  font-family: 'Font Awesome 5 Brands';\n  font-style: normal;\n  font-weight: normal;\n  font-display: auto;\n  src: url("+P+");\n  src: url("+q+') format("embedded-opentype"), url('+U+') format("woff2"), url('+B+') format("woff"), url('+H+') format("truetype"), url('+V+') format("svg"); }\n\n.fab {\n  font-family: \'Font Awesome 5 Brands\'; }\n\n/*------------------------------------*\\\r\n    MAIN\r\n\\*------------------------------------*/\n/* global box-sizing */\n*,\n*:after,\n*:before {\n  box-sizing: border-box;\n  -webkit-font-smoothing: antialiased;\n  text-rendering: optimizeLegibility; }\n\n/* Typography */\nhtml {\n  font-size: 16px; }\n\nbody {\n  color: rgba(0, 0, 0, 0.87);\n  font-family: Roboto, sans-serif;\n  font-weight: 400;\n  font-size: 1rem; }\n\n/* Clear */\n.clear {\n  *zoom: 1; }\n  .clear:before, .clear:after {\n    content: " ";\n    display: table; }\n  .clear:after {\n    clear: both; }\n\n/* Input */\ninput:focus,\ntextarea:focus {\n  outline: none;\n  border: 1px solid #4a90e2; }\n',""])},function(n,e,t){"use strict";n.exports=function(n,e){return"string"!=typeof n?n:(/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),/["'() \t\n]/.test(n)||e?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n)}},function(n,e,t){n.exports=t.p+"73f0a88bbca1bec19fb1303c689d04c6.woff2"},function(n,e,t){n.exports=t.p+"35b07eb2f8711ae08d1f58c043880930.woff"},function(n,e,t){n.exports=t.p+"4357beb823a5f8d65c260f045d9e019a.woff2"},function(n,e,t){n.exports=t.p+"f5902d5ef961717ed263902fc429e6ae.woff"},function(n,e,t){n.exports=t.p+"d26871e8149b5759f814fd3c7a4f784b.woff2"},function(n,e,t){n.exports=t.p+"c73eb1ceba3321a80a0aff13ad373cb4.woff"},function(n,e,t){n.exports=t.p+"e8eaae902c3a4dacb9a5062667e10576.woff2"},function(n,e,t){n.exports=t.p+"13efe6cbc10b97144a28310ebdeda594.woff"},function(n,e,t){n.exports=t.p+"ad538a69b0e8615ed0419c4529344ffc.woff2"},function(n,e,t){n.exports=t.p+"d3b47375afd904983d9be8d6e239a949.woff"},function(n,e,t){n.exports=t.p+"5b4a33e176ff736a74f0ca2dd9e6b396.woff2"},function(n,e,t){n.exports=t.p+"8a96edbbcd9a6991d79371aed0b0288e.woff"},function(n,e,t){n.exports=t.p+"90d1676003d9c28c04994c18bfd8b558.woff2"},function(n,e,t){n.exports=t.p+"1d6594826615607f6dc860bb49258acb.woff"},function(n,e,t){n.exports=t.p+"13ec0eb5bdb821ff4930237d7c9f943f.woff2"},function(n,e,t){n.exports=t.p+"83e114c316fcc3f23f524ec3e1c65984.woff"},function(n,e,t){n.exports=t.p+"b52fac2bb93c5858f3f2675e4b52e1de.woff2"},function(n,e,t){n.exports=t.p+"50d75e48e0a3ddab1dd15d6bfb9d3700.woff"},function(n,e,t){n.exports=t.p+"94008e69aaf05da75c0bbf8f8bb0db41.woff2"},function(n,e,t){n.exports=t.p+"4fe0f73cc919ba2b7a3c36e4540d725c.woff"},function(n,e,t){n.exports=t.p+"59eb3601394dd87f30f82433fb39dd94.woff2"},function(n,e,t){n.exports=t.p+"313a65630d341645c13e4f2a0364381d.woff"},function(n,e,t){n.exports=t.p+"f75569f8a5fab0893fa712d8c0d9c3fe.woff2"},function(n,e,t){n.exports=t.p+"cc2fadc3928f2f223418887111947b40.woff"},function(n,e,t){n.exports=t.p+"b5cf8ae26748570d8fb95a47f46b69e1.woff2"},function(n,e,t){n.exports=t.p+"4bced7c4c0d61d4f988629bb8ae80b8b.woff"},function(n,e,t){n.exports=t.p+"acf50f59802f20d8b45220eaae532a1c.ttf"},function(n,e,t){n.exports=t.p+"b557f56e367e59344ca95f9d1fb44352.svg"},function(n,e,t){n.exports=t.p+"e07d9e40b26048d9abe2ef966cd6e263.woff2"},function(n,e,t){n.exports=t.p+"e5770f9863963fb576942e25214a226d.woff"},function(n,e,t){n.exports=t.p+"59215032a4397507b80e5625dc323de3.ttf"},function(n,e,t){n.exports=t.p+"8fdea4e89ac405d9f8db327adb331d8d.svg"},function(n,e,t){n.exports=t.p+"7559b3774a0625e8ca6c0160f8f6cfd8.woff2"},function(n,e,t){n.exports=t.p+"fe9d62e0d16a333a20e63c3e7595f82e.woff"},function(n,e,t){n.exports=t.p+"ed2b8bf117160466ba6220a8f1da54a4.ttf"},function(n,e,t){n.exports=t.p+"073c2f3ce60eaf69cc2767ef3d989078.svg"},function(n,e,t){n.exports=t.p+"36693416accce06356f46b0d57242b53.png"},function(n,e,t){"use strict";var o=t(12);t.n(o).a},function(n,e,t){(n.exports=t(2)(!1)).push([n.i,".header {\n  max-width: 1080px;\n  margin: 0 auto 80px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.header .header__logo {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: rgba(0, 0, 0, 0.87);\n}\n.header .header__logo .logo__img {\n      max-height: 32px;\n      margin-right: 10px;\n}\n.header .header__logo .logo__title {\n      font-size: 1.5rem;\n      line-height: 2rem;\n      font-weight: 400;\n      letter-spacing: normal;\n}\n.header .header__nav {\n    display: flex;\n}\n.header .header__nav .header__logout {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      height: 32px;\n      width: 32px;\n      background-color: transparent;\n      outline: none;\n      border: none;\n      margin-left: 15px;\n      color: rgba(0, 0, 0, 0.38);\n      cursor: pointer;\n}\n.header .header__nav .header__logout:hover, .header .header__nav .header__logout:active {\n        color: #4a90e2;\n}\n",""])},function(n,e,t){"use strict";var o=t(13);t.n(o).a},function(n,e,t){(n.exports=t(2)(!1)).push([n.i,".main-layout {\n  padding: 40px 0;\n}\n.main-layout .content {\n    max-width: 1080px;\n    margin: 0 auto;\n}\n",""])},function(n,e,t){"use strict";t.r(e);var o=t(4),r=t(0),a=t.n(r),i=function(){var n=this.$createElement;return(this._self._c||n)(this.layout,{tag:"component"})};i._withStripped=!0;function f(n,e,t,o,r,a,i,f){var c,s="function"==typeof n?n.options:n;if(e&&(s.render=e,s.staticRenderFns=t,s._compiled=!0),o&&(s.functional=!0),a&&(s._scopeId="data-v-"+a),i?(c=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),r&&r.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(i)},s._ssrRegister=c):r&&(c=f?function(){r.call(this,this.$root.$options.shadowRoot)}:r),c)if(s.functional){s._injectStyles=c;var l=s.render;s.render=function(n,e){return c.call(e),l(n,e)}}else{var u=s.beforeCreate;s.beforeCreate=u?[].concat(u,c):[c]}return{exports:n,options:s}}var c=f({name:"App",computed:{layout:function(){return(this.$route.meta.layout||"main")+"-layout"}},created:function(){var n=this;a.a.interceptors.response.use(function(n){return n},function(e){return console.log("refresh token"),console.log(e),console.log(e.response),new Promise(function(t,o){e.response&&401===e.response.status&&n.$store.dispatch("auth/refreshToken").then(function(n){console.log("token refreshed",n),t()}).catch(function(e){console.error("token not refreshed. Logout",e),n.$router.push("/login"),o(e)}),o(e)})})}},i,[],!1,null,null,null);c.options.__file="src/App.vue";var s=c.exports;
/*!
  * vue-router v3.0.7
  * (c) 2019 Evan You
  * @license MIT
  */function l(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function u(n,e){for(var t in e)n[t]=e[t];return n}var d={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,o=e.children,r=e.parent,a=e.data;a.routerView=!0;for(var i=r.$createElement,f=t.name,c=r.$route,s=r._routerViewCache||(r._routerViewCache={}),l=0,d=!1;r&&r._routerRoot!==r;){var p=r.$vnode&&r.$vnode.data;p&&(p.routerView&&l++,p.keepAlive&&r._inactive&&(d=!0)),r=r.$parent}if(a.routerViewDepth=l,d)return i(s[f],a,o);var b=c.matched[l];if(!b)return s[f]=null,i();var h=s[f]=b.components[f];a.registerRouteInstance=function(n,e){var t=b.instances[f];(e&&t!==n||!e&&t===n)&&(b.instances[f]=e)},(a.hook||(a.hook={})).prepatch=function(n,e){b.instances[f]=e.componentInstance},a.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==b.instances[f]&&(b.instances[f]=n.componentInstance)};var m=a.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(c,b.props&&b.props[f]);if(m){m=a.props=u({},m);var v=a.attrs=a.attrs||{};for(var g in m)h.props&&g in h.props||(v[g]=m[g],delete m[g])}return i(h,a,o)}};var p=/[!'()*]/g,b=function(n){return"%"+n.charCodeAt(0).toString(16)},h=/%2C/g,m=function(n){return encodeURIComponent(n).replace(p,b).replace(h,",")},v=decodeURIComponent;function g(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach(function(n){var t=n.replace(/\+/g," ").split("="),o=v(t.shift()),r=t.length>0?v(t.join("=")):null;void 0===e[o]?e[o]=r:Array.isArray(e[o])?e[o].push(r):e[o]=[e[o],r]}),e):e}function y(n){var e=n?Object.keys(n).map(function(e){var t=n[e];if(void 0===t)return"";if(null===t)return m(e);if(Array.isArray(t)){var o=[];return t.forEach(function(n){void 0!==n&&(null===n?o.push(m(e)):o.push(m(e)+"="+m(n)))}),o.join("&")}return m(e)+"="+m(t)}).filter(function(n){return n.length>0}).join("&"):null;return e?"?"+e:""}var _=/\/?$/;function w(n,e,t,o){var r=o&&o.options.stringifyQuery,a=e.query||{};try{a=x(a)}catch(n){}var i={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:a,params:e.params||{},fullPath:$(e,r),matched:n?C(n):[]};return t&&(i.redirectedFrom=$(t,r)),Object.freeze(i)}function x(n){if(Array.isArray(n))return n.map(x);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=x(n[t]);return e}return n}var k=w(null,{path:"/"});function C(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function $(n,e){var t=n.path,o=n.query;void 0===o&&(o={});var r=n.hash;return void 0===r&&(r=""),(t||"/")+(e||y)(o)+r}function A(n,e){return e===k?n===e:!!e&&(n.path&&e.path?n.path.replace(_,"")===e.path.replace(_,"")&&n.hash===e.hash&&S(n.query,e.query):!(!n.name||!e.name)&&(n.name===e.name&&n.hash===e.hash&&S(n.query,e.query)&&S(n.params,e.params)))}function S(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n),o=Object.keys(e);return t.length===o.length&&t.every(function(t){var o=n[t],r=e[t];return"object"==typeof o&&"object"==typeof r?S(o,r):String(o)===String(r)})}var E,O=[String,Object],T=[String,Array],j={name:"RouterLink",props:{to:{type:O,required:!0},tag:{type:String,default:"a"},exact:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,event:{type:T,default:"click"}},render:function(n){var e=this,t=this.$router,o=this.$route,r=t.resolve(this.to,o,this.append),a=r.location,i=r.route,f=r.href,c={},s=t.options.linkActiveClass,l=t.options.linkExactActiveClass,d=null==s?"router-link-active":s,p=null==l?"router-link-exact-active":l,b=null==this.activeClass?d:this.activeClass,h=null==this.exactActiveClass?p:this.exactActiveClass,m=a.path?w(null,a,null,t):i;c[h]=A(o,m),c[b]=this.exact?c[h]:function(n,e){return 0===n.path.replace(_,"/").indexOf(e.path.replace(_,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(o,m);var v=function(n){I(n)&&(e.replace?t.replace(a):t.push(a))},g={click:I};Array.isArray(this.event)?this.event.forEach(function(n){g[n]=v}):g[this.event]=v;var y={class:c};if("a"===this.tag)y.on=g,y.attrs={href:f};else{var x=function n(e){if(e)for(var t,o=0;o<e.length;o++){if("a"===(t=e[o]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(x)x.isStatic=!1,(x.data=u({},x.data)).on=g,(x.data.attrs=u({},x.data.attrs)).href=f;else y.on=g}return n(this.tag,y,this.$slots.default)}};function I(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var L="undefined"!=typeof window;function M(n,e,t){var o=n.charAt(0);if("/"===o)return n;if("?"===o||"#"===o)return e+n;var r=e.split("/");t&&r[r.length-1]||r.pop();for(var a=n.replace(/^\//,"").split("/"),i=0;i<a.length;i++){var f=a[i];".."===f?r.pop():"."!==f&&r.push(f)}return""!==r[0]&&r.unshift(""),r.join("/")}function F(n){return n.replace(/\/\//g,"/")}var N=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},R=J,z=B,D=function(n,e){return V(B(n,e))},P=V,q=Y,U=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function B(n,e){for(var t,o=[],r=0,a=0,i="",f=e&&e.delimiter||"/";null!=(t=U.exec(n));){var c=t[0],s=t[1],l=t.index;if(i+=n.slice(a,l),a=l+c.length,s)i+=s[1];else{var u=n[a],d=t[2],p=t[3],b=t[4],h=t[5],m=t[6],v=t[7];i&&(o.push(i),i="");var g=null!=d&&null!=u&&u!==d,y="+"===m||"*"===m,_="?"===m||"*"===m,w=t[2]||f,x=b||h;o.push({name:p||r++,prefix:d||"",delimiter:w,optional:_,repeat:y,partial:g,asterisk:!!v,pattern:x?G(x):v?".*":"[^"+W(w)+"]+?"})}}return a<n.length&&(i+=n.substr(a)),i&&o.push(i),o}function H(n){return encodeURI(n).replace(/[\/?#]/g,function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})}function V(n){for(var e=new Array(n.length),t=0;t<n.length;t++)"object"==typeof n[t]&&(e[t]=new RegExp("^(?:"+n[t].pattern+")$"));return function(t,o){for(var r="",a=t||{},i=(o||{}).pretty?H:encodeURIComponent,f=0;f<n.length;f++){var c=n[f];if("string"!=typeof c){var s,l=a[c.name];if(null==l){if(c.optional){c.partial&&(r+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(N(l)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(l)+"`");if(0===l.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var u=0;u<l.length;u++){if(s=i(l[u]),!e[f].test(s))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(s)+"`");r+=(0===u?c.prefix:c.delimiter)+s}}else{if(s=c.asterisk?encodeURI(l).replace(/[?#]/g,function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}):i(l),!e[f].test(s))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+s+'"');r+=c.prefix+s}}else r+=c}return r}}function W(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function G(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function X(n,e){return n.keys=e,n}function K(n){return n.sensitive?"":"i"}function Y(n,e,t){N(e)||(t=e||t,e=[]);for(var o=(t=t||{}).strict,r=!1!==t.end,a="",i=0;i<n.length;i++){var f=n[i];if("string"==typeof f)a+=W(f);else{var c=W(f.prefix),s="(?:"+f.pattern+")";e.push(f),f.repeat&&(s+="(?:"+c+s+")*"),a+=s=f.optional?f.partial?c+"("+s+")?":"(?:"+c+"("+s+"))?":c+"("+s+")"}}var l=W(t.delimiter||"/"),u=a.slice(-l.length)===l;return o||(a=(u?a.slice(0,-l.length):a)+"(?:"+l+"(?=$))?"),a+=r?"$":o&&u?"":"(?="+l+"|$)",X(new RegExp("^"+a,K(t)),e)}function J(n,e,t){return N(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var o=0;o<t.length;o++)e.push({name:o,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return X(n,e)}(n,e):N(n)?function(n,e,t){for(var o=[],r=0;r<n.length;r++)o.push(J(n[r],e,t).source);return X(new RegExp("(?:"+o.join("|")+")",K(t)),e)}(n,e,t):function(n,e,t){return Y(B(n,t),e,t)}(n,e,t)}R.parse=z,R.compile=D,R.tokensToFunction=P,R.tokensToRegExp=q;var Z=Object.create(null);function Q(n,e,t){e=e||{};try{var o=Z[n]||(Z[n]=R.compile(n));return e.pathMatch&&(e[0]=e.pathMatch),o(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function nn(n,e,t,o){var r=e||[],a=t||Object.create(null),i=o||Object.create(null);n.forEach(function(n){!function n(e,t,o,r,a,i){var f=r.path;var c=r.name;0;var s=r.pathToRegexpOptions||{};var l=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return F(e.path+"/"+n)}(f,a,s.strict);"boolean"==typeof r.caseSensitive&&(s.sensitive=r.caseSensitive);var u={path:l,regex:en(l,s),components:r.components||{default:r.component},instances:{},name:c,parent:a,matchAs:i,redirect:r.redirect,beforeEnter:r.beforeEnter,meta:r.meta||{},props:null==r.props?{}:r.components?r.props:{default:r.props}};r.children&&r.children.forEach(function(r){var a=i?F(i+"/"+r.path):void 0;n(e,t,o,r,u,a)});if(void 0!==r.alias){var d=Array.isArray(r.alias)?r.alias:[r.alias];d.forEach(function(i){var f={path:i,children:r.children};n(e,t,o,f,a,u.path||"/")})}t[u.path]||(e.push(u.path),t[u.path]=u);c&&(o[c]||(o[c]=u))}(r,a,i,n)});for(var f=0,c=r.length;f<c;f++)"*"===r[f]&&(r.push(r.splice(f,1)[0]),c--,f--);return{pathList:r,pathMap:a,nameMap:i}}function en(n,e){return R(n,[],e)}function tn(n,e,t,o){var r="string"==typeof n?{path:n}:n;if(r._normalized)return r;if(r.name)return u({},n);if(!r.path&&r.params&&e){(r=u({},r))._normalized=!0;var a=u(u({},e.params),r.params);if(e.name)r.name=e.name,r.params=a;else if(e.matched.length){var i=e.matched[e.matched.length-1].path;r.path=Q(i,a,e.path)}else 0;return r}var f=function(n){var e="",t="",o=n.indexOf("#");o>=0&&(e=n.slice(o),n=n.slice(0,o));var r=n.indexOf("?");return r>=0&&(t=n.slice(r+1),n=n.slice(0,r)),{path:n,query:t,hash:e}}(r.path||""),c=e&&e.path||"/",s=f.path?M(f.path,c,t||r.append):c,l=function(n,e,t){void 0===e&&(e={});var o,r=t||g;try{o=r(n||"")}catch(n){o={}}for(var a in e)o[a]=e[a];return o}(f.query,r.query,o&&o.options.parseQuery),d=r.hash||f.hash;return d&&"#"!==d.charAt(0)&&(d="#"+d),{_normalized:!0,path:s,query:l,hash:d}}function on(n,e){var t=nn(n),o=t.pathList,r=t.pathMap,a=t.nameMap;function i(n,t,i){var f=tn(n,t,!1,e),s=f.name;if(s){var l=a[s];if(!l)return c(null,f);var u=l.regex.keys.filter(function(n){return!n.optional}).map(function(n){return n.name});if("object"!=typeof f.params&&(f.params={}),t&&"object"==typeof t.params)for(var d in t.params)!(d in f.params)&&u.indexOf(d)>-1&&(f.params[d]=t.params[d]);return f.path=Q(l.path,f.params),c(l,f,i)}if(f.path){f.params={};for(var p=0;p<o.length;p++){var b=o[p],h=r[b];if(rn(h.regex,f.path,f.params))return c(h,f,i)}}return c(null,f)}function f(n,t){var o=n.redirect,r="function"==typeof o?o(w(n,t,null,e)):o;if("string"==typeof r&&(r={path:r}),!r||"object"!=typeof r)return c(null,t);var f=r,s=f.name,l=f.path,u=t.query,d=t.hash,p=t.params;if(u=f.hasOwnProperty("query")?f.query:u,d=f.hasOwnProperty("hash")?f.hash:d,p=f.hasOwnProperty("params")?f.params:p,s){a[s];return i({_normalized:!0,name:s,query:u,hash:d,params:p},void 0,t)}if(l){var b=function(n,e){return M(n,e.parent?e.parent.path:"/",!0)}(l,n);return i({_normalized:!0,path:Q(b,p),query:u,hash:d},void 0,t)}return c(null,t)}function c(n,t,o){return n&&n.redirect?f(n,o||t):n&&n.matchAs?function(n,e,t){var o=i({_normalized:!0,path:Q(t,e.params)});if(o){var r=o.matched,a=r[r.length-1];return e.params=o.params,c(a,e)}return c(null,e)}(0,t,n.matchAs):w(n,t,o,e)}return{match:i,addRoutes:function(n){nn(n,o,r,a)}}}function rn(n,e,t){var o=e.match(n);if(!o)return!1;if(!t)return!0;for(var r=1,a=o.length;r<a;++r){var i=n.keys[r-1],f="string"==typeof o[r]?decodeURIComponent(o[r]):o[r];i&&(t[i.name||"pathMatch"]=f)}return!0}var an=Object.create(null);function fn(){var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,"");window.history.replaceState({key:yn()},"",e),window.addEventListener("popstate",function(n){var e;sn(),n.state&&n.state.key&&(e=n.state.key,vn=e)})}function cn(n,e,t,o){if(n.app){var r=n.options.scrollBehavior;r&&n.app.$nextTick(function(){var a=function(){var n=yn();if(n)return an[n]}(),i=r.call(n,e,t,o?a:null);i&&("function"==typeof i.then?i.then(function(n){pn(n,a)}).catch(function(n){0}):pn(i,a))})}}function sn(){var n=yn();n&&(an[n]={x:window.pageXOffset,y:window.pageYOffset})}function ln(n){return dn(n.x)||dn(n.y)}function un(n){return{x:dn(n.x)?n.x:window.pageXOffset,y:dn(n.y)?n.y:window.pageYOffset}}function dn(n){return"number"==typeof n}function pn(n,e){var t,o="object"==typeof n;if(o&&"string"==typeof n.selector){var r=document.querySelector(n.selector);if(r){var a=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),o=n.getBoundingClientRect();return{x:o.left-t.left-e.x,y:o.top-t.top-e.y}}(r,a={x:dn((t=a).x)?t.x:0,y:dn(t.y)?t.y:0})}else ln(n)&&(e=un(n))}else o&&ln(n)&&(e=un(n));e&&window.scrollTo(e.x,e.y)}var bn,hn=L&&((-1===(bn=window.navigator.userAgent).indexOf("Android 2.")&&-1===bn.indexOf("Android 4.0")||-1===bn.indexOf("Mobile Safari")||-1!==bn.indexOf("Chrome")||-1!==bn.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history),mn=L&&window.performance&&window.performance.now?window.performance:Date,vn=gn();function gn(){return mn.now().toFixed(3)}function yn(){return vn}function _n(n,e){sn();var t=window.history;try{e?t.replaceState({key:vn},"",n):(vn=gn(),t.pushState({key:vn},"",n))}catch(t){window.location[e?"replace":"assign"](n)}}function wn(n){_n(n,!0)}function xn(n,e,t){var o=function(r){r>=n.length?t():n[r]?e(n[r],function(){o(r+1)}):o(r+1)};o(0)}function kn(n){return function(e,t,o){var r=!1,a=0,i=null;Cn(n,function(n,e,t,f){if("function"==typeof n&&void 0===n.cid){r=!0,a++;var c,s=Sn(function(e){var r;((r=e).__esModule||An&&"Module"===r[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:E.extend(e),t.components[f]=e,--a<=0&&o()}),u=Sn(function(n){var e="Failed to resolve async component "+f+": "+n;i||(i=l(n)?n:new Error(e),o(i))});try{c=n(s,u)}catch(n){u(n)}if(c)if("function"==typeof c.then)c.then(s,u);else{var d=c.component;d&&"function"==typeof d.then&&d.then(s,u)}}}),r||o()}}function Cn(n,e){return $n(n.map(function(n){return Object.keys(n.components).map(function(t){return e(n.components[t],n.instances[t],n,t)})}))}function $n(n){return Array.prototype.concat.apply([],n)}var An="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Sn(n){var e=!1;return function(){for(var t=[],o=arguments.length;o--;)t[o]=arguments[o];if(!e)return e=!0,n.apply(this,t)}}var En=function(n,e){this.router=n,this.base=function(n){if(!n)if(L){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=k,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[]};function On(n,e,t,o){var r=Cn(n,function(n,o,r,a){var i=function(n,e){"function"!=typeof n&&(n=E.extend(n));return n.options[e]}(n,e);if(i)return Array.isArray(i)?i.map(function(n){return t(n,o,r,a)}):t(i,o,r,a)});return $n(o?r.reverse():r)}function Tn(n,e){if(e)return function(){return n.apply(e,arguments)}}En.prototype.listen=function(n){this.cb=n},En.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},En.prototype.onError=function(n){this.errorCbs.push(n)},En.prototype.transitionTo=function(n,e,t){var o=this,r=this.router.match(n,this.current);this.confirmTransition(r,function(){o.updateRoute(r),e&&e(r),o.ensureURL(),o.ready||(o.ready=!0,o.readyCbs.forEach(function(n){n(r)}))},function(n){t&&t(n),n&&!o.ready&&(o.ready=!0,o.readyErrorCbs.forEach(function(e){e(n)}))})},En.prototype.confirmTransition=function(n,e,t){var o=this,r=this.current,a=function(n){l(n)&&(o.errorCbs.length?o.errorCbs.forEach(function(e){e(n)}):console.error(n)),t&&t(n)};if(A(n,r)&&n.matched.length===r.matched.length)return this.ensureURL(),a();var i=function(n,e){var t,o=Math.max(n.length,e.length);for(t=0;t<o&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),f=i.updated,c=i.deactivated,s=i.activated,u=[].concat(function(n){return On(n,"beforeRouteLeave",Tn,!0)}(c),this.router.beforeHooks,function(n){return On(n,"beforeRouteUpdate",Tn)}(f),s.map(function(n){return n.beforeEnter}),kn(s));this.pending=n;var d=function(e,t){if(o.pending!==n)return a();try{e(n,r,function(n){!1===n||l(n)?(o.ensureURL(!0),a(n)):"string"==typeof n||"object"==typeof n&&("string"==typeof n.path||"string"==typeof n.name)?(a(),"object"==typeof n&&n.replace?o.replace(n):o.push(n)):t(n)})}catch(n){a(n)}};xn(u,d,function(){var t=[];xn(function(n,e,t){return On(n,"beforeRouteEnter",function(n,o,r,a){return function(n,e,t,o,r){return function(a,i,f){return n(a,i,function(n){"function"==typeof n&&o.push(function(){!function n(e,t,o,r){t[o]&&!t[o]._isBeingDestroyed?e(t[o]):r()&&setTimeout(function(){n(e,t,o,r)},16)}(n,e.instances,t,r)}),f(n)})}}(n,r,a,e,t)})}(s,t,function(){return o.current===n}).concat(o.router.resolveHooks),d,function(){if(o.pending!==n)return a();o.pending=null,e(n),o.router.app&&o.router.app.$nextTick(function(){t.forEach(function(n){n()})})})})},En.prototype.updateRoute=function(n){var e=this.current;this.current=n,this.cb&&this.cb(n),this.router.afterHooks.forEach(function(t){t&&t(n,e)})};var jn=function(n){function e(e,t){var o=this;n.call(this,e,t);var r=e.options.scrollBehavior,a=hn&&r;a&&fn();var i=In(this.base);window.addEventListener("popstate",function(n){var t=o.current,r=In(o.base);o.current===k&&r===i||o.transitionTo(r,function(n){a&&cn(e,n,t,!0)})})}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var o=this,r=this.current;this.transitionTo(n,function(n){_n(F(o.base+n.fullPath)),cn(o.router,n,r,!1),e&&e(n)},t)},e.prototype.replace=function(n,e,t){var o=this,r=this.current;this.transitionTo(n,function(n){wn(F(o.base+n.fullPath)),cn(o.router,n,r,!1),e&&e(n)},t)},e.prototype.ensureURL=function(n){if(In(this.base)!==this.current.fullPath){var e=F(this.base+this.current.fullPath);n?_n(e):wn(e)}},e.prototype.getCurrentLocation=function(){return In(this.base)},e}(En);function In(n){var e=decodeURI(window.location.pathname);return n&&0===e.indexOf(n)&&(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var Ln=function(n){function e(e,t,o){n.call(this,e,t),o&&function(n){var e=In(n);if(!/^\/#/.test(e))return window.location.replace(F(n+"/#"+e)),!0}(this.base)||Mn()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this,e=this.router.options.scrollBehavior,t=hn&&e;t&&fn(),window.addEventListener(hn?"popstate":"hashchange",function(){var e=n.current;Mn()&&n.transitionTo(Fn(),function(o){t&&cn(n.router,o,e,!0),hn||zn(o.fullPath)})})},e.prototype.push=function(n,e,t){var o=this,r=this.current;this.transitionTo(n,function(n){Rn(n.fullPath),cn(o.router,n,r,!1),e&&e(n)},t)},e.prototype.replace=function(n,e,t){var o=this,r=this.current;this.transitionTo(n,function(n){zn(n.fullPath),cn(o.router,n,r,!1),e&&e(n)},t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;Fn()!==e&&(n?Rn(e):zn(e))},e.prototype.getCurrentLocation=function(){return Fn()},e}(En);function Mn(){var n=Fn();return"/"===n.charAt(0)||(zn("/"+n),!1)}function Fn(){var n=window.location.href,e=n.indexOf("#");if(e<0)return"";var t=(n=n.slice(e+1)).indexOf("?");if(t<0){var o=n.indexOf("#");n=o>-1?decodeURI(n.slice(0,o))+n.slice(o):decodeURI(n)}else t>-1&&(n=decodeURI(n.slice(0,t))+n.slice(t));return n}function Nn(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function Rn(n){hn?_n(Nn(n)):window.location.hash=n}function zn(n){hn?wn(Nn(n)):window.location.replace(Nn(n))}var Dn=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var o=this;this.transitionTo(n,function(n){o.stack=o.stack.slice(0,o.index+1).concat(n),o.index++,e&&e(n)},t)},e.prototype.replace=function(n,e,t){var o=this;this.transitionTo(n,function(n){o.stack=o.stack.slice(0,o.index).concat(n),e&&e(n)},t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var o=this.stack[t];this.confirmTransition(o,function(){e.index=t,e.updateRoute(o)})}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(En),Pn=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=on(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!hn&&!1!==n.fallback,this.fallback&&(e="hash"),L||(e="abstract"),this.mode=e,e){case"history":this.history=new jn(this,n.base);break;case"hash":this.history=new Ln(this,n.base,this.fallback);break;case"abstract":this.history=new Dn(this,n.base);break;default:0}},qn={currentRoute:{configurable:!0}};function Un(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}Pn.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},qn.currentRoute.get=function(){return this.history&&this.history.current},Pn.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null)}),!this.app){this.app=n;var t=this.history;if(t instanceof jn)t.transitionTo(t.getCurrentLocation());else if(t instanceof Ln){var o=function(){t.setupListeners()};t.transitionTo(t.getCurrentLocation(),o,o)}t.listen(function(n){e.apps.forEach(function(e){e._route=n})})}},Pn.prototype.beforeEach=function(n){return Un(this.beforeHooks,n)},Pn.prototype.beforeResolve=function(n){return Un(this.resolveHooks,n)},Pn.prototype.afterEach=function(n){return Un(this.afterHooks,n)},Pn.prototype.onReady=function(n,e){this.history.onReady(n,e)},Pn.prototype.onError=function(n){this.history.onError(n)},Pn.prototype.push=function(n,e,t){this.history.push(n,e,t)},Pn.prototype.replace=function(n,e,t){this.history.replace(n,e,t)},Pn.prototype.go=function(n){this.history.go(n)},Pn.prototype.back=function(){this.go(-1)},Pn.prototype.forward=function(){this.go(1)},Pn.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map(function(n){return Object.keys(n.components).map(function(e){return n.components[e]})})):[]},Pn.prototype.resolve=function(n,e,t){var o=tn(n,e=e||this.history.current,t,this),r=this.match(o,e),a=r.redirectedFrom||r.fullPath;return{location:o,route:r,href:function(n,e,t){var o="hash"===t?"#"+e:e;return n?F(n+"/"+o):o}(this.history.base,a,this.mode),normalizedTo:o,resolved:r}},Pn.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==k&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Pn.prototype,qn),Pn.install=function n(e){if(!n.installed||E!==e){n.installed=!0,E=e;var t=function(n){return void 0!==n},o=function(n,e){var o=n.$options._parentVnode;t(o)&&t(o=o.data)&&t(o=o.registerRouteInstance)&&o(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,o(this,this)},destroyed:function(){o(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",d),e.component("RouterLink",j);var r=e.config.optionMergeStrategies;r.beforeRouteEnter=r.beforeRouteLeave=r.beforeRouteUpdate=r.created}},Pn.version="3.0.7",L&&window.Vue&&window.Vue.use(Pn);var Bn=Pn,Hn=t(14),Vn={namespaced:!0,state:{token:localStorage.getItem("user-token")||"",token_expires:null,session:{id:null,secret:null,active:!1,expires:null,created:null,updated:null}},getters:{isAuthenticated:function(n){return!!n.token},token:function(n){return n.token}},actions:{logout:function(n){var e=n.commit;return new Promise(function(n){e("removeToken"),localStorage.removeItem("user-token"),localStorage.removeItem("user-session"),localStorage.removeItem("user-session-secret"),delete a.a.defaults.headers.common.Authorization,n()})},login:function(n,e){var t=n.commit,o=e.username,r=e.password;return new Promise(function(n,e){a()({url:"/v2/my-session",method:"post",data:{username:o,password:r}}).then(function(e){var o=e.headers["x-access-token"],r=e.headers["x-access-expires"],i=e.data;localStorage.setItem("user-token",o),localStorage.setItem("user-session",i.id),localStorage.setItem("user-session-secret",i.secret),t("setToken",{token:o,expires:r,session:i}),a.a.defaults.headers.common.Authorization="Bearer "+o,n(e)}).catch(function(n){t("removeToken"),localStorage.removeItem("user-token"),localStorage.removeItem("user-session"),localStorage.removeItem("user-session-secret"),delete a.a.defaults.headers.common.Authorization,e(n)})})},refreshToken:function(n){var e=n.state,t=n.commit;return new Promise(function(n,o){var r=e.session.id||localStorage.getItem("user-session"),i=e.session.secret||localStorage.getItem("user-session-secret");r&&i?a()({url:"/v2/my-session/"+r+"/refresh",method:"put",data:{secret:i}}).then(function(e){var o=e.headers["x-access-token"],r=e.headers["x-access-expires"],i=e.data;localStorage.setItem("user-token",o),t("setToken",{token:o,expires:r,session:i}),a.a.defaults.headers.common.Authorization="Bearer "+o,n(e)}).catch(function(n){t("removeToken"),localStorage.removeItem("user-token"),localStorage.removeItem("user-session"),localStorage.removeItem("user-session-secret"),delete a.a.defaults.headers.common.Authorization,o(n)}):o()})}},mutations:{setToken:function(n,e){var t=e.token,o=e.expires,r=e.session;n.token=t,n.token_expires=o,n.session.id=r.id,n.session.secret=r.secret,n.session.active=!!r.active,n.session.expires=r.expires,n.session.created=r.created,n.session.updated=r.updated},removeToken:function(n){n.token="",n.token_expires=null,n.session.id=null,n.session.secret=null,n.session.active=!1,n.session.expires=null,n.session.created=null,n.session.updated=null}}};o.a.use(Hn.a);var Wn={locale:localStorage.getItem("locale")||"en"},Gn=new Hn.a.Store({strict:!1,state:Wn,mutations:{setLocale:function(n,e){var t=e.locale;n.locale=t}},actions:{changeLocale:function(n,e){(0,n.commit)("setLocale",{locale:e.locale})}},getters:{getLocale:function(n){return n.locale}},modules:{auth:Vn}}),Xn=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"translations"},[t("div",{staticClass:"translations__header"},[t("h3",{staticClass:"translations__title"},[n._v(n._s(n.$t("table.head")))]),n._v(" "),t("div",{staticClass:"translations__actions"},[t("button",{staticClass:"button action__create",on:{click:function(e){return n.createItem()}}},[t("i",{staticClass:"fas fa-plus"}),n._v("\n        "+n._s(n.$t("table.actionCreate"))+"\n      ")])])]),n._v(" "),n.translations.length?t("table",{staticClass:"translations__list"},[t("thead",[t("tr",[t("th",[n._v("ID")]),n._v(" "),t("th",[n._v(n._s(n.$t("table.name")))]),n._v(" "),t("th",[n._v(n._s(n.$t("table.native")))]),n._v(" "),t("th",[n._v(n._s(n.$t("table.lexicon")))]),n._v(" "),t("th",[n._v(n._s(n.$t("table.created")))]),n._v(" "),t("th",[n._v(n._s(n.$t("table.updated")))]),n._v(" "),t("th",[n._v(n._s(n.$t("table.actions")))])])]),n._v(" "),t("tbody",n._l(n.translations,function(e){return t("tr",{key:e.id},[t("td",[n._v(n._s(e.id))]),n._v(" "),t("td",[n._v(n._s(e.name))]),n._v(" "),t("td",[n._v(n._s(e.native))]),n._v(" "),t("td",[n._v(n._s(e.lexicon))]),n._v(" "),t("td",[n._v(n._s(n.parseDate(e.created)))]),n._v(" "),t("td",[n._v(n._s(n.parseDate(e.updated)))]),n._v(" "),t("td",{staticClass:"translation__action"},[t("i",{staticClass:"far fa-eye action__read",on:{click:function(t){return n.readItem(e.id)}}}),n._v(" "),t("i",{staticClass:"far fa-edit action__edit",on:{click:function(t){return n.updateItem(e.id)}}}),n._v(" "),t("i",{staticClass:"far fa-file-word action__native",on:{click:function(t){return n.updateNative(e.id)}}})])])}),0)]):n._e()])};Xn._withStripped=!0;var Kn={name:"IndexPage",i18n:{messages:{en:{table:{head:"Translations",actionCreate:"Create",name:"Name",native:"Native",lexicon:"Lexicon",created:"Created",updated:"Updated",actions:"Actions"}},es:{table:{head:"Traducciones",actionCreate:"Crear",name:"Nombre",native:"Nativo",lexicon:"Léxico",created:"Creado",updated:"Actualizado",actions:"Comportamiento"}},de:{table:{head:"Übersetzungen",actionCreate:"Erstellen",name:"Name",native:"Eingeborener",lexicon:"Lexikon",created:"Erstellt",updated:"Aktualisierte",actions:"Aktionen"}},fr:{table:{head:"Traductions",actionCreate:"Créer",name:"prénom",native:"Originaire de",lexicon:"Lexique",created:"Créé",updated:"Mis à jour",actions:"actes"}},"pt-br":{table:{head:"Traduções",actionCreate:"Crio",name:"Nome",native:"Nativo",lexicon:"Léxico",created:"Criado",updated:"Atualizada",actions:"Ações"}},it:{table:{head:"Traduzioni",actionCreate:"Creare",name:"Nome",native:"nativo",lexicon:"Lessico",created:"Creato",updated:"aggiornato",actions:"Azioni"}},ru:{table:{head:"Переводы",actionCreate:"Создать",name:"Название",native:"Нативный",lexicon:"Лексикон",created:"Создан",updated:"Обновлен",actions:"Действия"}},uk:{table:{head:"Переклади",actionCreate:"Створити",name:"Ім'я",native:"Рідний",lexicon:"Лексикон",created:"Створено",updated:"Оновлено",actions:"Дії"}},tr:{table:{head:"Çeviriler",actionCreate:"yaratmak",name:"isim",native:"yerli",lexicon:"sözlük",created:"düzenlendi",updated:"Güncellenmiş",actions:"Eylemler"}},"zh-tw":{table:{head:"翻譯",actionCreate:"創建",name:"名稱",native:"本地人",lexicon:"詞彙",created:"創建",updated:"更新",actions:"操作"}},"zh-cn":{table:{head:"翻译",actionCreate:"创建",name:"名称",native:"本地人",lexicon:"词汇",created:"创建",updated:"更新",actions:"操作"}}}},data:function(){return{currentLocale:"en",translations:[],timer:null}},computed:{locale:function(){return this.$store.getters.getLocale}},mounted:function(){var n=this;this.getTranslations(),this.timer=setInterval(function(){return n.getTranslations()},6e4)},methods:{parseDate:function(n){var e=new Date(1e3*n);return e.toLocaleDateString()+" "+e.toLocaleTimeString()},createItem:function(){this.$router.push({name:"create"})},readItem:function(n){this.$router.push({name:"read",params:{id:n}})},updateItem:function(n){this.$router.push({name:"update",params:{id:n}})},updateNative:function(n){this.$router.push({name:"native",params:{id:n}})},getTranslations:function(){var n=this;console.log("update list"),a.a.get("/v2/translations").then(function(e){204!==e.status&&200===e.status&&e.data&&(n.translations=e.data,n.currentLocale=e.headers["content-language"])}).catch(function(n){throw new Error(n)})}},watch:{locale:function(n){n!==this.currentLocale&&this.getTranslations()}},beforeDestroy:function(){clearInterval(this.timer)}},Yn=(t(45),f(Kn,Xn,[],!1,null,null,null));Yn.options.__file="src/pages/IndexPage.vue";var Jn=Yn.exports,Zn=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"account"},[t("div",{staticClass:"account__title"},[t("h1",{staticClass:"title__headline"},[n._v(n._s(n.$t("title.headline")))]),n._v(" "),t("span",{staticClass:"title__subheadline"},[n._v(n._s(n.$t("title.subHeadline")))])]),n._v(" "),t("div",{staticClass:"account__box"},[t("form",{staticClass:"account__form",attrs:{action:"/login",id:"login-form",method:"post"},on:{submit:n.checkForm}},[n.errors.length?t("div",{attrs:{id:"flash"}},[t("ul",n._l(n.errors,function(e){return t("li",{key:e},[n._v(n._s(e))])}),0)]):n._e(),n._v(" "),t("div",{staticClass:"form__item"},[t("label",{staticClass:"form__label",attrs:{for:"user-login"}},[n._v("\n          "+n._s(n.$t("form.loginField"))+"\n        ")]),n._v(" "),t("input",{directives:[{name:"model",rawName:"v-model",value:n.fields.username,expression:"fields.username"}],staticClass:"form__input required",attrs:{type:"text",id:"user-login",autofocus:"autofocus",name:"user[login]"},domProps:{value:n.fields.username},on:{input:function(e){e.target.composing||n.$set(n.fields,"username",e.target.value)}}})]),n._v(" "),t("div",{staticClass:"form__item"},[t("label",{staticClass:"form__label",attrs:{for:"user-password"}},[n._v("\n          "+n._s(n.$t("form.passwordField"))+"\n        ")]),n._v(" "),t("input",{directives:[{name:"model",rawName:"v-model",value:n.fields.password,expression:"fields.password"}],staticClass:"form__input required",attrs:{type:"password",id:"user-password",autofocus:"autofocus",name:"user[password]"},domProps:{value:n.fields.password},on:{input:function(e){e.target.composing||n.$set(n.fields,"password",e.target.value)}}})]),n._v(" "),t("input",{staticClass:"form__submit",attrs:{type:"submit",name:"commit"},domProps:{value:n.$t("form.submit")}})])])])};Zn._withStripped=!0;var Qn={name:"LoginPage",i18n:{messages:{en:{title:{headline:"Welcome back",subHeadline:"Log in to your account"},form:{loginField:"Login",passwordField:"Password",submit:"Log in"}},es:{title:{headline:"Dar una buena acogida",subHeadline:"Ingrese a su cuenta"},form:{loginField:"Iniciar sesión",passwordField:"Contraseña",submit:"Iniciar sesión"}},de:{title:{headline:"Willkommen zurück",subHeadline:"Ins Konto einloggen"},form:{loginField:"Anmeldung",passwordField:"Passwort",submit:"Einloggen"}},fr:{title:{headline:"Nous saluons le retour",subHeadline:"Connectez-vous à votre compte"},form:{loginField:"S'identifier",passwordField:"Mot de passe",submit:"S'identifier"}},"pt-br":{title:{headline:"Bem vindo de volta",subHeadline:"Faça login na sua conta"},form:{loginField:"Entrar",passwordField:"Senha",submit:"Entrar"}},it:{title:{headline:"Ben tornato",subHeadline:"Accedi al tuo account"},form:{loginField:"Accesso",passwordField:"Parola d'ordine",submit:"Accesso"}},ru:{title:{headline:"С возвращением",subHeadline:"Войдите в свою учетную запись"},form:{loginField:"Имя пользователя",passwordField:"Пароль",submit:"Войти"}},uk:{title:{headline:"З поверненням",subHeadline:"Увійдіть до свого облікового запису"},form:{loginField:"Ім'я користувача",passwordField:"Пароль",submit:"Увійти"}},tr:{title:{headline:"Tekrar hoşgeldiniz",subHeadline:"Hesabınıza giriş yapın"},form:{loginField:"Kullanıcı adı",passwordField:"Parola",submit:"Oturum aç"}},"zh-tw":{title:{headline:"歡迎回來",subHeadline:"登錄到您的帳戶"},form:{loginField:"用戶名",passwordField:"密碼",submit:"登錄"}},"zh-cn":{title:{headline:"欢迎回来",subHeadline:"登录到您的帐户"},form:{loginField:"用户名",passwordField:"密码",submit:"登录"}}}},data:function(){return{errors:[],fields:{username:null,password:null}}},methods:{checkForm:function(n){var e=this;n.preventDefault(),this.errors=[],this.fields.username&&this.fields.password&&this.$store.dispatch("auth/login",{username:this.fields.username,password:this.fields.password}).then(function(){e.$router.push("/")}).catch(function(n){e.errors.push(n.response.headers["x-message"]),console.warn(n)}),this.fields.username||this.errors.push(this.$t("form.loginField")+" field is required"),this.fields.password||this.errors.push(this.$t("form.passwordField")+" field is required")}}},ne=(t(47),f(Qn,Zn,[],!1,null,null,null));ne.options.__file="src/pages/LoginPage.vue";var ee=ne.exports,te=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"translation-create"},[t("h1",[n._v(n._s(n.$t("form.head")))]),n._v(" "),t("div",{staticClass:"translation__box"},[n.notices.length?t("div",{attrs:{id:"flash"}},[t("ul",n._l(n.notices,function(e){return t("li",{key:e},[n._v(n._s(e))])}),0)]):n._e(),n._v(" "),t("form",{staticClass:"translation__form",attrs:{action:"/translation",method:"post"},on:{submit:n.createTranslation}},[t("div",{staticClass:"form__item"},[t("label",{staticClass:"form__label",attrs:{for:"translation-name"}},[n._v("\n          "+n._s(n.$t("form.name"))+"\n        ")]),n._v(" "),t("input",{directives:[{name:"model",rawName:"v-model",value:n.fields.name,expression:"fields.name"}],staticClass:"form__input required",attrs:{type:"text",id:"translation-name",autofocus:"autofocus",name:"translation[name]"},domProps:{value:n.fields.name},on:{input:function(e){e.target.composing||n.$set(n.fields,"name",e.target.value)}}})]),n._v(" "),t("div",{staticClass:"form__item"},[t("label",{staticClass:"form__label",attrs:{for:"translation-lexicon"}},[n._v("\n          "+n._s(n.$t("form.lexicon"))+"\n        ")]),n._v(" "),t("input",{directives:[{name:"model",rawName:"v-model",value:n.fields.lexicon,expression:"fields.lexicon"}],staticClass:"form__input required",attrs:{type:"checkbox",id:"translation-lexicon",autofocus:"autofocus",name:"translation[lexicon]"},domProps:{checked:Array.isArray(n.fields.lexicon)?n._i(n.fields.lexicon,null)>-1:n.fields.lexicon},on:{change:function(e){var t=n.fields.lexicon,o=e.target,r=!!o.checked;if(Array.isArray(t)){var a=n._i(t,null);o.checked?a<0&&n.$set(n.fields,"lexicon",t.concat([null])):a>-1&&n.$set(n.fields,"lexicon",t.slice(0,a).concat(t.slice(a+1)))}else n.$set(n.fields,"lexicon",r)}}})]),n._v(" "),t("input",{staticClass:"form__submit",attrs:{type:"submit",name:"commit"},domProps:{value:n.$t("form.action")}})])])])};te._withStripped=!0;var oe={name:"CreateTranslationPage",i18n:{messages:{en:{form:{head:"Create translation",action:"Create",name:"Name",lexicon:"Lexicon"}},es:{form:{head:"Crear traducción",action:"Crear",name:"Nombre",lexicon:"Léxico"}},de:{form:{head:"Übersetzung erstellen",action:"Erstellen",name:"Name",lexicon:"Lexikon"}},fr:{form:{head:"Créer une traduction",action:"Créer",name:"Prénom",lexicon:"Lexique"}},"pt-br":{form:{head:"Criar tradução",action:"Crio",name:"Nome",lexicon:"Léxico"}},it:{form:{head:"Crea traduzione",action:"Creare",name:"Nome",lexicon:"Lessico"}},ru:{form:{head:"Создать перевод",action:"Создать",name:"Название",lexicon:"Лексикон"}},uk:{form:{head:"Створити переклад",action:"Створити",name:"Ім'я",lexicon:"Лексикон"}},tr:{form:{head:"Çeviri oluştur",action:"Yaratmak",name:"Isim",lexicon:"Sözlük"}},"zh-tw":{form:{head:"創建翻譯",action:"創建",name:"名稱",lexicon:"詞彙"}},"zh-cn":{form:{head:"创建翻译",action:"创建",name:"名称",lexicon:"词汇"}}}},data:function(){return{fields:{name:null,lexicon:!1},notices:[]}},methods:{createTranslation:function(n){var e=this;if(n.preventDefault(),!this.fields.name)return this.notices.push("Field Name if required!"),!1;a()({url:"/v2/translation",method:"post",data:{name:this.fields.name,lexicon:this.fields.lexicon?1:0}}).then(function(n){201===n.status&&n.data&&(e.notices.push("Success. Created translation "+n.data.id),setTimeout(function(){e.$router.push({name:"read",params:{id:n.data.id}})},500))}).catch(function(n){throw e.notices.push(n),new Error(n)})}}},re=(t(49),f(oe,te,[],!1,null,null,null));re.options.__file="src/pages/translation/CreateTranslationPage.vue";var ae=re.exports,ie=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"translation"},[t("h3",[n._v(n._s(n.$t("form.head"))+" "+n._s(n.$route.params.id))]),n._v(" "),n.translation?t("table",{staticClass:"translation__data"},[t("tbody",[t("tr",[t("td",[n._v("ID")]),n._v(" "),t("td",[n._v(n._s(n.translation.id))])]),n._v(" "),t("tr",[t("td",[n._v(n._s(n.$t("form.name")))]),n._v(" "),t("td",[n._v(n._s(n.translation.name))])]),n._v(" "),t("tr",[t("td",[n._v(n._s(n.$t("form.native")))]),n._v(" "),t("td",[n._v(n._s(n.translation.native))])]),n._v(" "),t("tr",[t("td",[n._v(n._s(n.$t("form.lexicon")))]),n._v(" "),t("td",[n._v(n._s(n.translation.lexicon))])]),n._v(" "),t("tr",[t("td",[n._v(n._s(n.$t("form.created")))]),n._v(" "),t("td",[n._v(n._s(n.parseDate(n.translation.created)))])]),n._v(" "),t("tr",[t("td",[n._v(n._s(n.$t("form.updated")))]),n._v(" "),t("td",[n._v(n._s(n.parseDate(n.translation.updated)))])])])]):t("div",{attrs:{id:"flash"}},[n._v(n._s(n.$t("form.notAvailable")))]),n._v(" "),t("div",{staticClass:"actions"},[t("router-link",{staticClass:"button",attrs:{to:"/"}},[t("i",{staticClass:"fas fa-backward action__back"}),n._v("\n      "+n._s(n.$t("form.back"))+"\n    ")]),n._v(" "),t("router-link",{staticClass:"button",attrs:{to:{name:"update",params:{id:n.$route.params.id}}}},[t("i",{staticClass:"far fa-edit action__edit"}),n._v("\n      "+n._s(n.$t("form.action"))+"\n    ")]),n._v(" "),t("router-link",{staticClass:"button",attrs:{to:{name:"native",params:{id:n.$route.params.id}}}},[t("i",{staticClass:"far fa-file-word action__native"}),n._v("\n      "+n._s(n.$t("form.actionMore"))+"\n    ")])],1)])};ie._withStripped=!0;var fe={name:"ReadTranslationPage",i18n:{messages:{en:{form:{head:"Translation",action:"Edit",name:"Name",native:"Native",lexicon:"Lexicon",created:"Created",updated:"Updated",notAvailable:"Not Available",back:"Back",actionMore:"Edit native"}},es:{form:{head:"Traducción",action:"Editar",name:"Nombre",native:"Nativo",lexicon:"Léxico",created:"Creado",updated:"Actualizado",notAvailable:"No disponible",back:"Espalda",actionMore:"Editar nativo"}},de:{form:{head:"Übersetzung",action:"Bearbeiten",name:"Name",native:"Eingeborener",lexicon:"Lexikon",created:"Erstellt",updated:"Aktualisierte",notAvailable:"Nicht verfügbar",back:"Zurück",actionMore:"Native bearbeiten"}},fr:{form:{head:"Traduction",action:"modifier",name:"prénom",native:"Originaire de",lexicon:"Lexique",created:"Créé",updated:"Mis à jour",notAvailable:"Indisponible",back:"Retour",actionMore:"Modifier natif"}},"pt-br":{form:{head:"Tradução",action:"Editar",name:"Nome",native:"Nativo",lexicon:"Léxico",created:"Criado",updated:"Atualizada",notAvailable:"Não disponível",back:"De volta",actionMore:"Editar nativo"}},it:{form:{head:"Traduzione",action:"modificare",name:"Nome",native:"nativo",lexicon:"Lessico",created:"Creato",updated:"aggiornato",notAvailable:"Non disponibile",back:"Indietro",actionMore:"Modifica nativo"}},ru:{form:{head:"Перевод",action:"Редактировать",name:"Названия",native:"Нативно",lexicon:"Лексикон",created:"Создан",updated:"Обновлен",notAvailable:"Не доступно",back:"Назад",actionMore:"Редактировать нативный"}},uk:{form:{head:"Переклад",action:"Редагувати",name:"Ім'я",native:"Рідний",lexicon:"Лексикон",created:"Створено",updated:"Оновлено",notAvailable:"Недоступний",back:"Назад",actionMore:"Редагувати рідний"}},tr:{form:{head:"Çeviri",action:"Düzenle",name:"isim",native:"yerli",lexicon:"sözlük",created:"düzenlendi",updated:"Güncellenmiş",notAvailable:"Müsait değil",back:"Geri",actionMore:"Yerlileri düzenle"}},"zh-tw":{form:{head:"翻譯",action:"編輯",name:"名稱",native:"本地人",lexicon:"詞彙",created:"創建",updated:"更新",notAvailable:"無法使用",back:"背部",actionMore:"編輯原生"}},"zh-cn":{form:{head:"翻译",action:"编辑",name:"名称",native:"本地人",lexicon:"词汇",created:"创建",updated:"更新",notAvailable:"无法使用",back:"背部",actionMore:"编辑原生"}}}},data:function(){return{translation:null}},mounted:function(){var n=this;a.a.get("/v2/translation/"+this.$route.params.id).then(function(e){200===e.status&&e.data&&(n.translation=e.data)}).catch(function(n){throw new Error(n)})},methods:{parseDate:function(n){var e=new Date(1e3*n);return e.toLocaleDateString()+" "+e.toLocaleTimeString()}}},ce=(t(51),f(fe,ie,[],!1,null,null,null));ce.options.__file="src/pages/translation/ReadTranslationPage.vue";var se=ce.exports,le=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"translation-update"},[t("h1",[n._v(n._s(n.$t("form.head"))+" "+n._s(n.$route.params.id))]),n._v(" "),t("div",{staticClass:"translation__box"},[n.notices.length?t("div",{attrs:{id:"flash"}},[t("ul",n._l(n.notices,function(e){return t("li",{key:e},[n._v(n._s(e))])}),0)]):n._e(),n._v(" "),t("form",{staticClass:"translation__form",attrs:{action:"/translation",method:"post"},on:{submit:n.updateTranslation}},[t("div",{staticClass:"form__item"},[t("label",{staticClass:"form__label",attrs:{for:"translation-name"}},[n._v("\n          "+n._s(n.$t("form.name"))+"\n        ")]),n._v(" "),t("input",{directives:[{name:"model",rawName:"v-model",value:n.fields.name,expression:"fields.name"}],staticClass:"form__input required",attrs:{type:"text",id:"translation-name",autofocus:"autofocus",name:"translation[name]"},domProps:{value:n.fields.name},on:{input:function(e){e.target.composing||n.$set(n.fields,"name",e.target.value)}}})]),n._v(" "),t("div",{staticClass:"form__item"},[t("label",{staticClass:"form__label",attrs:{for:"translation-lexicon"}},[n._v("\n          "+n._s(n.$t("form.lexicon"))+"\n        ")]),n._v(" "),t("input",{directives:[{name:"model",rawName:"v-model",value:n.fields.lexicon,expression:"fields.lexicon"}],staticClass:"form__input required",attrs:{type:"checkbox",id:"translation-lexicon",autofocus:"autofocus",name:"translation[lexicon]"},domProps:{checked:Array.isArray(n.fields.lexicon)?n._i(n.fields.lexicon,null)>-1:n.fields.lexicon},on:{change:function(e){var t=n.fields.lexicon,o=e.target,r=!!o.checked;if(Array.isArray(t)){var a=n._i(t,null);o.checked?a<0&&n.$set(n.fields,"lexicon",t.concat([null])):a>-1&&n.$set(n.fields,"lexicon",t.slice(0,a).concat(t.slice(a+1)))}else n.$set(n.fields,"lexicon",r)}}})]),n._v(" "),t("div",{staticClass:"actions"},[t("router-link",{staticClass:"button",attrs:{to:"/"}},[t("i",{staticClass:"fas fa-backward action__back"}),n._v("\n          "+n._s(n.$t("form.back"))+"\n        ")]),n._v(" "),t("input",{staticClass:"button",attrs:{type:"submit",name:"commit"},domProps:{value:n.$t("form.action")}}),n._v(" "),t("router-link",{staticClass:"button",attrs:{to:{name:"native",params:{id:n.$route.params.id}}}},[t("i",{staticClass:"far fa-file-word action__more"}),n._v("\n          "+n._s(n.$t("form.actionMore"))+"\n        ")])],1)])])])};le._withStripped=!0;var ue={name:"UpdateTranslationPage",i18n:{messages:{en:{form:{head:"Translation",action:"Edit",name:"Name",lexicon:"Lexicon",notAvailable:"Not Available",back:"Back",actionMore:"Edit native"}},es:{form:{head:"Traducción",action:"Editar",name:"Nombre",lexicon:"Léxico",notAvailable:"No disponible",back:"Espalda",actionMore:"Editar nativo"}},de:{form:{head:"Übersetzung",action:"Bearbeiten",name:"Name",lexicon:"Lexikon",notAvailable:"Nicht verfügbar",back:"Zurück",actionMore:"Native bearbeiten"}},fr:{form:{head:"Traduction",action:"modifier",name:"Prénom",lexicon:"Lexique",notAvailable:"Indisponible",back:"Retour",actionMore:"Modifier natif"}},"pt-br":{form:{head:"Tradução",action:"Editar",name:"Nome",lexicon:"Léxico",notAvailable:"Não disponível",back:"De volta",actionMore:"Editar nativo"}},it:{form:{head:"Traduzione",action:"modificare",name:"Nome",lexicon:"Lessico",notAvailable:"Non disponibile",back:"Indietro",actionMore:"Modifica nativo"}},ru:{form:{head:"Перевод",action:"Редактировать",name:"Название",lexicon:"Лексикон",notAvailable:"Не доступно",back:"Назад",actionMore:"Редактировать нативный"}},uk:{form:{head:"Переклад",action:"Редагувати",name:"Ім'я",lexicon:"Лексикон",notAvailable:"Недоступний",back:"Назад",actionMore:"Редагувати рідний"}},tr:{form:{head:"Çeviri",action:"Düzenle",name:"Isim",lexicon:"Sözlük",notAvailable:"Müsait değil",back:"Geri",actionMore:"Yerlileri düzenle"}},"zh-tw":{form:{head:"翻譯",action:"編輯",name:"名稱",lexicon:"詞彙",notAvailable:"無法使用",back:"背部",actionMore:"編輯原生"}},"zh-cn":{form:{head:"创建翻译",action:"创建",name:"名称",lexicon:"词汇",notAvailable:"无法使用",back:"背部",actionMore:"编辑原生"}}}},data:function(){return{fields:{name:null,lexicon:!1},notices:[]}},mounted:function(){var n=this;a.a.get("/v2/translation/"+this.$route.params.id).then(function(e){200===e.status&&e.data&&(n.fields.name=e.data.name,n.fields.lexicon=!!e.data.lexicon)}).catch(function(n){throw new Error(n)})},methods:{updateTranslation:function(n){var e=this;n.preventDefault(),this.fields.name?a()({url:"/v2/translation/"+this.$route.params.id,method:"PUT",data:{name:this.fields.name,lexicon:this.fields.lexicon?1:0}}).then(function(n){e.notices.push("Success. Updated translation "+n.data.id),setTimeout(function(){e.$router.push({name:"read",params:{id:n.data.id}})},500)}).catch(function(n){throw e.notices.push(n),new Error(n)}):this.notices.push("Name field is required")}}},de=(t(53),f(ue,le,[],!1,null,null,null));de.options.__file="src/pages/translation/UpdateTranslationPage.vue";var pe=de.exports,be=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"translation-update"},[t("h1",[n._v(n._s(n.$t("form.head"))+" "+n._s(n.$route.params.id))]),n._v(" "),n.translation?t("div",{staticClass:"translation__box"},[n.notices.length?t("div",{staticClass:"flash"},[t("ul",n._l(n.notices,function(e){return t("li",{key:e},[n._v(n._s(e))])}),0)]):n._e(),n._v(" "),t("table",{staticClass:"translation__data"},[t("tbody",[t("tr",[t("td",[n._v("ID")]),n._v(" "),t("td",[n._v(n._s(n.translation.id))])]),n._v(" "),t("tr",[t("td",[n._v(n._s(n.$t("form.name")))]),n._v(" "),t("td",[n._v(n._s(n.translation.name))])]),n._v(" "),t("tr",[t("td",[n._v(n._s(n.$t("form.lexicon")))]),n._v(" "),t("td",[n._v(n._s(n.translation.lexicon))])]),n._v(" "),t("tr",[t("td",[n._v(n._s(n.$t("form.created")))]),n._v(" "),t("td",[n._v(n._s(n.parseDate(n.translation.created)))])]),n._v(" "),t("tr",[t("td",[n._v(n._s(n.$t("form.updated")))]),n._v(" "),t("td",[n._v(n._s(n.parseDate(n.translation.updated)))])])])]),n._v(" "),n.translation?t("form",{staticClass:"translation__form",attrs:{action:"/translation",method:"post"},on:{submit:n.updateNative}},[t("div",{staticClass:"form__item"},[t("label",{staticClass:"form__label",attrs:{for:"translation-native"}},[n._v("\n          "+n._s(n.$t("form.native"))+"\n        ")]),n._v(" "),t("input",{directives:[{name:"model",rawName:"v-model",value:n.fields.native,expression:"fields.native"}],staticClass:"form__input required",attrs:{type:"text",id:"translation-native",autofocus:"autofocus",name:"translation[name]"},domProps:{value:n.fields.native},on:{input:function(e){e.target.composing||n.$set(n.fields,"native",e.target.value)}}})]),n._v(" "),t("div",{staticClass:"actions"},[t("router-link",{staticClass:"button",attrs:{to:"/"}},[t("i",{staticClass:"fas fa-backward action__back"}),n._v("\n          "+n._s(n.$t("form.back"))+"\n        ")]),n._v(" "),t("input",{staticClass:"button",attrs:{type:"submit",name:"commit"},domProps:{value:n.$t("form.action")}})],1)]):n._e()]):t("div",{attrs:{id:"flash"}},[n._v(n._s(n.$t("form.notAvailable")))])])};be._withStripped=!0;var he={name:"UpdateTranslationPage",i18n:{messages:{en:{form:{head:"Translation",action:"Edit",name:"Name",native:"Native",lexicon:"Lexicon",created:"Created",updated:"Updated",notAvailable:"Not Available",back:"Back",actionMore:"Edit native"}},es:{form:{head:"Traducción",action:"Editar",name:"Nombre",native:"Nativo",lexicon:"Léxico",created:"Creado",updated:"Actualizado",notAvailable:"No disponible",back:"Espalda",actionMore:"Editar nativo"}},de:{form:{head:"Übersetzung",action:"Bearbeiten",name:"Name",native:"Eingeborener",lexicon:"Lexikon",created:"Erstellt",updated:"Aktualisierte",notAvailable:"Nicht verfügbar",back:"Zurück",actionMore:"Native bearbeiten"}},fr:{form:{head:"Traduction",action:"modifier",name:"prénom",native:"Originaire de",lexicon:"Lexique",created:"Créé",updated:"Mis à jour",notAvailable:"Indisponible",back:"Retour",actionMore:"Modifier natif"}},"pt-br":{form:{head:"Tradução",action:"Editar",name:"Nome",native:"Nativo",lexicon:"Léxico",created:"Criado",updated:"Atualizada",notAvailable:"Não disponível",back:"De volta",actionMore:"Editar nativo"}},it:{form:{head:"Traduzione",action:"modificare",name:"Nome",native:"nativo",lexicon:"Lessico",created:"Creato",updated:"aggiornato",notAvailable:"Non disponibile",back:"Indietro",actionMore:"Modifica nativo"}},ru:{form:{head:"Перевод",action:"Редактировать",name:"Названия",native:"Нативно",lexicon:"Лексикон",created:"Создан",updated:"Обновлен",notAvailable:"Не доступно",back:"Назад",actionMore:"Редактировать нативный"}},uk:{form:{head:"Переклад",action:"Редагувати",name:"Ім'я",native:"Рідний",lexicon:"Лексикон",created:"Створено",updated:"Оновлено",notAvailable:"Недоступний",back:"Назад",actionMore:"Редагувати рідний"}},tr:{form:{head:"Çeviri",action:"Düzenle",name:"isim",native:"yerli",lexicon:"sözlük",created:"düzenlendi",updated:"Güncellenmiş",notAvailable:"Müsait değil",back:"Geri",actionMore:"Yerlileri düzenle"}},"zh-tw":{form:{head:"翻譯",action:"編輯",name:"名稱",native:"本地人",lexicon:"詞彙",created:"創建",updated:"更新",notAvailable:"無法使用",back:"背部",actionMore:"編輯原生"}},"zh-cn":{form:{head:"翻译",action:"编辑",name:"名称",native:"本地人",lexicon:"词汇",created:"创建",updated:"更新",notAvailable:"无法使用",back:"背部",actionMore:"编辑原生"}}}},data:function(){return{translation:null,fields:{native:null},notices:[]}},mounted:function(){var n=this;a.a.get("/v2/translation/"+this.$route.params.id).then(function(e){200===e.status&&e.data&&(n.translation=e.data,n.fields.native=n.translation.native)}).catch(function(n){throw new Error(n)})},methods:{parseDate:function(n){var e=new Date(1e3*n);return e.toLocaleDateString()+" "+e.toLocaleTimeString()},updateNative:function(n){var e=this;n.preventDefault(),a()({url:"/v2/translation/"+this.$route.params.id+"/native",method:"PUT",data:{native:this.fields.native}}).then(function(n){e.notices.push("Success. Updated native for "+n.data.id),setTimeout(function(){e.$router.push({name:"read",params:{id:n.data.id}})},500)}).catch(function(n){throw e.notices.push(n),new Error(n)})}}},me=(t(55),f(he,be,[],!1,null,null,null));me.options.__file="src/pages/translation/UpdateNativePage.vue";var ve=me.exports;o.a.use(Bn);var ge=function(n,e,t){Gn.getters["auth/isAuthenticated"]?t():t("/login")},ye=new Bn({mode:"history",base:"/whoer_test/",routes:[{path:"/",name:"index",meta:{layout:"main",requiresAuth:!0},component:Jn,beforeEnter:ge},{path:"/login",name:"login",meta:{layout:"main",requiresAuth:!1},component:ee,beforeEnter:function(n,e,t){Gn.getters["auth/isAuthenticated"]?t("/"):t()}},{path:"/translation",name:"create",meta:{layout:"main",requiresAuth:!0},component:ae,beforeEnter:ge},{path:"/translation/:id/read",name:"read",meta:{layout:"main",requiresAuth:!0},component:se,beforeEnter:ge,props:!0},{path:"/translation/:id/update",name:"update",meta:{layout:"main",requiresAuth:!0},component:pe,beforeEnter:ge,props:!0},{path:"/translation/:id/native",name:"native",meta:{layout:"main",requiresAuth:!0},component:ve,beforeEnter:ge,props:!0}]}),_e=["style","currency","currencyDisplay","useGrouping","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","localeMatcher","formatMatcher"];function we(n,e){"undefined"!=typeof console&&(console.warn("[vue-i18n] "+n),e&&console.warn(e.stack))}function xe(n){return null!==n&&"object"==typeof n}var ke=Object.prototype.toString,Ce="[object Object]";function $e(n){return ke.call(n)===Ce}function Ae(n){return null==n}function Se(){for(var n=[],e=arguments.length;e--;)n[e]=arguments[e];var t=null,o=null;return 1===n.length?xe(n[0])||Array.isArray(n[0])?o=n[0]:"string"==typeof n[0]&&(t=n[0]):2===n.length&&("string"==typeof n[0]&&(t=n[0]),(xe(n[1])||Array.isArray(n[1]))&&(o=n[1])),{locale:t,params:o}}function Ee(n){return JSON.parse(JSON.stringify(n))}var Oe=Object.prototype.hasOwnProperty;function Te(n,e){return Oe.call(n,e)}function je(n){for(var e=arguments,t=Object(n),o=1;o<arguments.length;o++){var r=e[o];if(null!=r){var a=void 0;for(a in r)Te(r,a)&&(xe(r[a])?t[a]=je(t[a],r[a]):t[a]=r[a])}}return t}function Ie(n,e){if(n===e)return!0;var t=xe(n),o=xe(e);if(!t||!o)return!t&&!o&&String(n)===String(e);try{var r=Array.isArray(n),a=Array.isArray(e);if(r&&a)return n.length===e.length&&n.every(function(n,t){return Ie(n,e[t])});if(r||a)return!1;var i=Object.keys(n),f=Object.keys(e);return i.length===f.length&&i.every(function(t){return Ie(n[t],e[t])})}catch(n){return!1}}var Le,Me={beforeCreate:function(){var n=this.$options;if(n.i18n=n.i18n||(n.__i18n?{}:null),n.i18n)if(n.i18n instanceof ht){if(n.__i18n)try{var e={};n.__i18n.forEach(function(n){e=je(e,JSON.parse(n))}),Object.keys(e).forEach(function(t){n.i18n.mergeLocaleMessage(t,e[t])})}catch(n){0}this._i18n=n.i18n,this._i18nWatcher=this._i18n.watchI18nData()}else if($e(n.i18n)){if(this.$root&&this.$root.$i18n&&this.$root.$i18n instanceof ht&&(n.i18n.root=this.$root,n.i18n.formatter=this.$root.$i18n.formatter,n.i18n.fallbackLocale=this.$root.$i18n.fallbackLocale,n.i18n.silentTranslationWarn=this.$root.$i18n.silentTranslationWarn,n.i18n.silentFallbackWarn=this.$root.$i18n.silentFallbackWarn,n.i18n.pluralizationRules=this.$root.$i18n.pluralizationRules,n.i18n.preserveDirectiveContent=this.$root.$i18n.preserveDirectiveContent),n.__i18n)try{var t={};n.__i18n.forEach(function(n){t=je(t,JSON.parse(n))}),n.i18n.messages=t}catch(n){0}var o=n.i18n.sharedMessages;o&&$e(o)&&(n.i18n.messages=je(n.i18n.messages,o)),this._i18n=new ht(n.i18n),this._i18nWatcher=this._i18n.watchI18nData(),(void 0===n.i18n.sync||n.i18n.sync)&&(this._localeWatcher=this.$i18n.watchLocale())}else 0;else this.$root&&this.$root.$i18n&&this.$root.$i18n instanceof ht?this._i18n=this.$root.$i18n:n.parent&&n.parent.$i18n&&n.parent.$i18n instanceof ht&&(this._i18n=n.parent.$i18n)},beforeMount:function(){var n=this.$options;n.i18n=n.i18n||(n.__i18n?{}:null),n.i18n?n.i18n instanceof ht?(this._i18n.subscribeDataChanging(this),this._subscribing=!0):$e(n.i18n)&&(this._i18n.subscribeDataChanging(this),this._subscribing=!0):this.$root&&this.$root.$i18n&&this.$root.$i18n instanceof ht?(this._i18n.subscribeDataChanging(this),this._subscribing=!0):n.parent&&n.parent.$i18n&&n.parent.$i18n instanceof ht&&(this._i18n.subscribeDataChanging(this),this._subscribing=!0)},beforeDestroy:function(){if(this._i18n){var n=this;this.$nextTick(function(){n._subscribing&&(n._i18n.unsubscribeDataChanging(n),delete n._subscribing),n._i18nWatcher&&(n._i18nWatcher(),n._i18n.destroyVM(),delete n._i18nWatcher),n._localeWatcher&&(n._localeWatcher(),delete n._localeWatcher),n._i18n=null})}}},Fe={name:"i18n",functional:!0,props:{tag:{type:String,default:"span"},path:{type:String,required:!0},locale:{type:String},places:{type:[Array,Object]}},render:function(n,e){var t=e.props,o=e.data,r=e.children,a=e.parent.$i18n;if(r=(r||[]).filter(function(n){return n.tag||(n.text=n.text.trim())}),!a)return r;var i=t.path,f=t.locale,c={},s=t.places||{},l=(Array.isArray(s)?s.length:Object.keys(s).length,r.every(function(n){if(n.data&&n.data.attrs){var e=n.data.attrs.place;return void 0!==e&&""!==e}}));return Array.isArray(s)?s.forEach(function(n,e){c[e]=n}):Object.keys(s).forEach(function(n){c[n]=s[n]}),r.forEach(function(n,e){var t=l?""+n.data.attrs.place:""+e;c[t]=n}),n(t.tag,o,a.i(i,f,c))}},Ne={name:"i18n-n",functional:!0,props:{tag:{type:String,default:"span"},value:{type:Number,required:!0},format:{type:[String,Object]},locale:{type:String}},render:function(n,e){var t=e.props,o=e.parent,r=e.data,a=o.$i18n;if(!a)return null;var i=null,f=null;"string"==typeof t.format?i=t.format:xe(t.format)&&(t.format.key&&(i=t.format.key),f=Object.keys(t.format).reduce(function(n,e){var o;return _e.includes(e)?Object.assign({},n,((o={})[e]=t.format[e],o)):n},null));var c=t.locale||a.locale,s=a._ntp(t.value,c,i,f),l=s.map(function(n,e){var t,o=r.scopedSlots&&r.scopedSlots[n.type];return o?o(((t={})[n.type]=n.value,t.index=e,t.parts=s,t)):n.value});return n(t.tag,{attrs:r.attrs,class:r.class,staticClass:r.staticClass},l)}};function Re(n,e,t){Pe(n,t)&&qe(n,e,t)}function ze(n,e,t,o){if(Pe(n,t)){var r=t.context.$i18n;(function(n,e){var t=e.context;return n._locale===t.$i18n.locale})(n,t)&&Ie(e.value,e.oldValue)&&Ie(n._localeMessage,r.getLocaleMessage(r.locale))||qe(n,e,t)}}function De(n,e,t,o){if(t.context){var r=t.context.$i18n||{};e.modifiers.preserve||r.preserveDirectiveContent||(n.textContent=""),n._vt=void 0,delete n._vt,n._locale=void 0,delete n._locale,n._localeMessage=void 0,delete n._localeMessage}else we("Vue instance does not exists in VNode context")}function Pe(n,e){var t=e.context;return t?!!t.$i18n||(we("VueI18n instance does not exists in Vue instance"),!1):(we("Vue instance does not exists in VNode context"),!1)}function qe(n,e,t){var o,r,a=function(n){var e,t,o,r;"string"==typeof n?e=n:$e(n)&&(e=n.path,t=n.locale,o=n.args,r=n.choice);return{path:e,locale:t,args:o,choice:r}}(e.value),i=a.path,f=a.locale,c=a.args,s=a.choice;if(i||f||c)if(i){var l=t.context;n._vt=n.textContent=s?(o=l.$i18n).tc.apply(o,[i,s].concat(Ue(f,c))):(r=l.$i18n).t.apply(r,[i].concat(Ue(f,c))),n._locale=l.$i18n.locale,n._localeMessage=l.$i18n.getLocaleMessage(l.$i18n.locale)}else we("`path` is required in v-t directive");else we("value type not supported")}function Ue(n,e){var t=[];return n&&t.push(n),e&&(Array.isArray(e)||$e(e))&&t.push(e),t}function Be(n){Be.installed=!0;(Le=n).version&&Number(Le.version.split(".")[0]);(function(n){n.prototype.hasOwnProperty("$i18n")||Object.defineProperty(n.prototype,"$i18n",{get:function(){return this._i18n}}),n.prototype.$t=function(n){for(var e=[],t=arguments.length-1;t-- >0;)e[t]=arguments[t+1];var o=this.$i18n;return o._t.apply(o,[n,o.locale,o._getMessages(),this].concat(e))},n.prototype.$tc=function(n,e){for(var t=[],o=arguments.length-2;o-- >0;)t[o]=arguments[o+2];var r=this.$i18n;return r._tc.apply(r,[n,r.locale,r._getMessages(),this,e].concat(t))},n.prototype.$te=function(n,e){var t=this.$i18n;return t._te(n,t.locale,t._getMessages(),e)},n.prototype.$d=function(n){for(var e,t=[],o=arguments.length-1;o-- >0;)t[o]=arguments[o+1];return(e=this.$i18n).d.apply(e,[n].concat(t))},n.prototype.$n=function(n){for(var e,t=[],o=arguments.length-1;o-- >0;)t[o]=arguments[o+1];return(e=this.$i18n).n.apply(e,[n].concat(t))}})(Le),Le.mixin(Me),Le.directive("t",{bind:Re,update:ze,unbind:De}),Le.component(Fe.name,Fe),Le.component(Ne.name,Ne),Le.config.optionMergeStrategies.i18n=function(n,e){return void 0===e?n:e}}var He=function(){this._caches=Object.create(null)};He.prototype.interpolate=function(n,e){if(!e)return[n];var t=this._caches[n];return t||(t=function(n){var e=[],t=0,o="";for(;t<n.length;){var r=n[t++];if("{"===r){o&&e.push({type:"text",value:o}),o="";var a="";for(r=n[t++];void 0!==r&&"}"!==r;)a+=r,r=n[t++];var i="}"===r,f=Ve.test(a)?"list":i&&We.test(a)?"named":"unknown";e.push({value:a,type:f})}else"%"===r?"{"!==n[t]&&(o+=r):o+=r}return o&&e.push({type:"text",value:o}),e}(n),this._caches[n]=t),function(n,e){var t=[],o=0,r=Array.isArray(e)?"list":xe(e)?"named":"unknown";if("unknown"===r)return t;for(;o<n.length;){var a=n[o];switch(a.type){case"text":t.push(a.value);break;case"list":t.push(e[parseInt(a.value,10)]);break;case"named":"named"===r&&t.push(e[a.value]);break;case"unknown":0}o++}return t}(t,e)};var Ve=/^(?:\d)+/,We=/^(?:\w)+/;var Ge=0,Xe=1,Ke=2,Ye=3,Je=0,Ze=4,Qe=5,nt=6,et=7,tt=8,ot=[];ot[Je]={ws:[Je],ident:[3,Ge],"[":[Ze],eof:[et]},ot[1]={ws:[1],".":[2],"[":[Ze],eof:[et]},ot[2]={ws:[2],ident:[3,Ge],0:[3,Ge],number:[3,Ge]},ot[3]={ident:[3,Ge],0:[3,Ge],number:[3,Ge],ws:[1,Xe],".":[2,Xe],"[":[Ze,Xe],eof:[et,Xe]},ot[Ze]={"'":[Qe,Ge],'"':[nt,Ge],"[":[Ze,Ke],"]":[1,Ye],eof:tt,else:[Ze,Ge]},ot[Qe]={"'":[Ze,Ge],eof:tt,else:[Qe,Ge]},ot[nt]={'"':[Ze,Ge],eof:tt,else:[nt,Ge]};var rt=/^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;function at(n){if(null==n)return"eof";switch(n.charCodeAt(0)){case 91:case 93:case 46:case 34:case 39:return n;case 95:case 36:case 45:return"ident";case 9:case 10:case 13:case 160:case 65279:case 8232:case 8233:return"ws"}return"ident"}function it(n){var e,t,o,r=n.trim();return("0"!==n.charAt(0)||!isNaN(n))&&(o=r,rt.test(o)?(t=(e=r).charCodeAt(0))!==e.charCodeAt(e.length-1)||34!==t&&39!==t?e:e.slice(1,-1):"*"+r)}var ft=function(){this._cache=Object.create(null)};ft.prototype.parsePath=function(n){var e=this._cache[n];return e||(e=function(n){var e,t,o,r,a,i,f,c=[],s=-1,l=Je,u=0,d=[];function p(){var e=n[s+1];if(l===Qe&&"'"===e||l===nt&&'"'===e)return s++,o="\\"+e,d[Ge](),!0}for(d[Xe]=function(){void 0!==t&&(c.push(t),t=void 0)},d[Ge]=function(){void 0===t?t=o:t+=o},d[Ke]=function(){d[Ge](),u++},d[Ye]=function(){if(u>0)u--,l=Ze,d[Ge]();else{if(u=0,!1===(t=it(t)))return!1;d[Xe]()}};null!==l;)if("\\"!==(e=n[++s])||!p()){if(r=at(e),(a=(f=ot[l])[r]||f.else||tt)===tt)return;if(l=a[0],(i=d[a[1]])&&(o=void 0===(o=a[2])?e:o,!1===i()))return;if(l===et)return c}}(n))&&(this._cache[n]=e),e||[]},ft.prototype.getPathValue=function(n,e){if(!xe(n))return null;var t=this.parsePath(e);if(0===t.length)return null;for(var o=t.length,r=n,a=0;a<o;){var i=r[t[a]];if(void 0===i)return null;r=i,a++}return r};var ct,st=/<\/?[\w\s="\/.':;#-\/]+>/,lt=/(?:@(?:\.[a-z]+)?:(?:[\w\-_|.]+|\([\w\-_|.]+\)))/g,ut=/^@(?:\.([a-z]+))?:/,dt=/[()]/g,pt={upper:function(n){return n.toLocaleUpperCase()},lower:function(n){return n.toLocaleLowerCase()}},bt=new He,ht=function(n){var e=this;void 0===n&&(n={}),!Le&&"undefined"!=typeof window&&window.Vue&&Be(window.Vue);var t=n.locale||"en-US",o=n.fallbackLocale||"en-US",r=n.messages||{},a=n.dateTimeFormats||{},i=n.numberFormats||{};this._vm=null,this._formatter=n.formatter||bt,this._missing=n.missing||null,this._root=n.root||null,this._sync=void 0===n.sync||!!n.sync,this._fallbackRoot=void 0===n.fallbackRoot||!!n.fallbackRoot,this._silentTranslationWarn=void 0!==n.silentTranslationWarn&&!!n.silentTranslationWarn,this._silentFallbackWarn=void 0!==n.silentFallbackWarn&&!!n.silentFallbackWarn,this._dateTimeFormatters={},this._numberFormatters={},this._path=new ft,this._dataListeners=[],this._preserveDirectiveContent=void 0!==n.preserveDirectiveContent&&!!n.preserveDirectiveContent,this.pluralizationRules=n.pluralizationRules||{},this._warnHtmlInMessage=n.warnHtmlInMessage||"off",this._exist=function(n,t){return!(!n||!t)&&(!Ae(e._path.getPathValue(n,t))||!!n[t])},"warn"!==this._warnHtmlInMessage&&"error"!==this._warnHtmlInMessage||Object.keys(r).forEach(function(n){e._checkLocaleMessage(n,e._warnHtmlInMessage,r[n])}),this._initVM({locale:t,fallbackLocale:o,messages:r,dateTimeFormats:a,numberFormats:i})},mt={vm:{configurable:!0},messages:{configurable:!0},dateTimeFormats:{configurable:!0},numberFormats:{configurable:!0},availableLocales:{configurable:!0},locale:{configurable:!0},fallbackLocale:{configurable:!0},missing:{configurable:!0},formatter:{configurable:!0},silentTranslationWarn:{configurable:!0},silentFallbackWarn:{configurable:!0},preserveDirectiveContent:{configurable:!0},warnHtmlInMessage:{configurable:!0}};ht.prototype._checkLocaleMessage=function(n,e,t){var o=function(n,e,t,r){if($e(t))Object.keys(t).forEach(function(a){var i=t[a];$e(i)?(r.push(a),r.push("."),o(n,e,i,r),r.pop(),r.pop()):(r.push(a),o(n,e,i,r),r.pop())});else if(Array.isArray(t))t.forEach(function(t,a){$e(t)?(r.push("["+a+"]"),r.push("."),o(n,e,t,r),r.pop(),r.pop()):(r.push("["+a+"]"),o(n,e,t,r),r.pop())});else if("string"==typeof t){if(st.test(t)){var a="Detected HTML in message '"+t+"' of keypath '"+r.join("")+"' at '"+e+"'. Consider component interpolation with '<i18n>' to avoid XSS. See https://bit.ly/2ZqJzkp";"warn"===n?we(a):"error"===n&&function(n,e){"undefined"!=typeof console&&(console.error("[vue-i18n] "+n),e&&console.error(e.stack))}(a)}}};o(e,n,t,[])},ht.prototype._initVM=function(n){var e=Le.config.silent;Le.config.silent=!0,this._vm=new Le({data:n}),Le.config.silent=e},ht.prototype.destroyVM=function(){this._vm.$destroy()},ht.prototype.subscribeDataChanging=function(n){this._dataListeners.push(n)},ht.prototype.unsubscribeDataChanging=function(n){!function(n,e){if(n.length){var t=n.indexOf(e);if(t>-1)n.splice(t,1)}}(this._dataListeners,n)},ht.prototype.watchI18nData=function(){var n=this;return this._vm.$watch("$data",function(){for(var e=n._dataListeners.length;e--;)Le.nextTick(function(){n._dataListeners[e]&&n._dataListeners[e].$forceUpdate()})},{deep:!0})},ht.prototype.watchLocale=function(){if(!this._sync||!this._root)return null;var n=this._vm;return this._root.$i18n.vm.$watch("locale",function(e){n.$set(n,"locale",e),n.$forceUpdate()},{immediate:!0})},mt.vm.get=function(){return this._vm},mt.messages.get=function(){return Ee(this._getMessages())},mt.dateTimeFormats.get=function(){return Ee(this._getDateTimeFormats())},mt.numberFormats.get=function(){return Ee(this._getNumberFormats())},mt.availableLocales.get=function(){return Object.keys(this.messages).sort()},mt.locale.get=function(){return this._vm.locale},mt.locale.set=function(n){this._vm.$set(this._vm,"locale",n)},mt.fallbackLocale.get=function(){return this._vm.fallbackLocale},mt.fallbackLocale.set=function(n){this._vm.$set(this._vm,"fallbackLocale",n)},mt.missing.get=function(){return this._missing},mt.missing.set=function(n){this._missing=n},mt.formatter.get=function(){return this._formatter},mt.formatter.set=function(n){this._formatter=n},mt.silentTranslationWarn.get=function(){return this._silentTranslationWarn},mt.silentTranslationWarn.set=function(n){this._silentTranslationWarn=n},mt.silentFallbackWarn.get=function(){return this._silentFallbackWarn},mt.silentFallbackWarn.set=function(n){this._silentFallbackWarn=n},mt.preserveDirectiveContent.get=function(){return this._preserveDirectiveContent},mt.preserveDirectiveContent.set=function(n){this._preserveDirectiveContent=n},mt.warnHtmlInMessage.get=function(){return this._warnHtmlInMessage},mt.warnHtmlInMessage.set=function(n){var e=this,t=this._warnHtmlInMessage;if(this._warnHtmlInMessage=n,t!==n&&("warn"===n||"error"===n)){var o=this._getMessages();Object.keys(o).forEach(function(n){e._checkLocaleMessage(n,e._warnHtmlInMessage,o[n])})}},ht.prototype._getMessages=function(){return this._vm.messages},ht.prototype._getDateTimeFormats=function(){return this._vm.dateTimeFormats},ht.prototype._getNumberFormats=function(){return this._vm.numberFormats},ht.prototype._warnDefault=function(n,e,t,o,r){if(!Ae(t))return t;if(this._missing){var a=this._missing.apply(null,[n,e,o,r]);if("string"==typeof a)return a}else 0;return e},ht.prototype._isFallbackRoot=function(n){return!n&&!Ae(this._root)&&this._fallbackRoot},ht.prototype._isSilentFallback=function(n){return this._silentFallbackWarn&&(this._isFallbackRoot()||n!==this.fallbackLocale)},ht.prototype._interpolate=function(n,e,t,o,r,a,i){if(!e)return null;var f,c=this._path.getPathValue(e,t);if(Array.isArray(c)||$e(c))return c;if(Ae(c)){if(!$e(e))return null;if("string"!=typeof(f=e[t]))return null}else{if("string"!=typeof c)return null;f=c}return(f.indexOf("@:")>=0||f.indexOf("@.")>=0)&&(f=this._link(n,e,f,o,"raw",a,i)),this._render(f,r,a,t)},ht.prototype._link=function(n,e,t,o,r,a,i){var f=t,c=f.match(lt);for(var s in c)if(c.hasOwnProperty(s)){var l=c[s],u=l.match(ut),d=u[0],p=u[1],b=l.replace(d,"").replace(dt,"");if(i.includes(b))return f;i.push(b);var h=this._interpolate(n,e,b,o,"raw"===r?"string":r,"raw"===r?void 0:a,i);if(this._isFallbackRoot(h)){if(!this._root)throw Error("unexpected error");var m=this._root.$i18n;h=m._translate(m._getMessages(),m.locale,m.fallbackLocale,b,o,r,a)}h=this._warnDefault(n,b,h,o,Array.isArray(a)?a:[a]),pt.hasOwnProperty(p)&&(h=pt[p](h)),i.pop(),f=h?f.replace(l,h):f}return f},ht.prototype._render=function(n,e,t,o){var r=this._formatter.interpolate(n,t,o);return r||(r=bt.interpolate(n,t,o)),"string"===e?r.join(""):r},ht.prototype._translate=function(n,e,t,o,r,a,i){var f=this._interpolate(e,n[e],o,r,a,i,[o]);return Ae(f)&&Ae(f=this._interpolate(t,n[t],o,r,a,i,[o]))?null:f},ht.prototype._t=function(n,e,t,o){for(var r,a=[],i=arguments.length-4;i-- >0;)a[i]=arguments[i+4];if(!n)return"";var f=Se.apply(void 0,a),c=f.locale||e,s=this._translate(t,c,this.fallbackLocale,n,o,"string",f.params);if(this._isFallbackRoot(s)){if(!this._root)throw Error("unexpected error");return(r=this._root).$t.apply(r,[n].concat(a))}return this._warnDefault(c,n,s,o,a)},ht.prototype.t=function(n){for(var e,t=[],o=arguments.length-1;o-- >0;)t[o]=arguments[o+1];return(e=this)._t.apply(e,[n,this.locale,this._getMessages(),null].concat(t))},ht.prototype._i=function(n,e,t,o,r){var a=this._translate(t,e,this.fallbackLocale,n,o,"raw",r);if(this._isFallbackRoot(a)){if(!this._root)throw Error("unexpected error");return this._root.$i18n.i(n,e,r)}return this._warnDefault(e,n,a,o,[r])},ht.prototype.i=function(n,e,t){return n?("string"!=typeof e&&(e=this.locale),this._i(n,e,this._getMessages(),null,t)):""},ht.prototype._tc=function(n,e,t,o,r){for(var a,i=[],f=arguments.length-5;f-- >0;)i[f]=arguments[f+5];if(!n)return"";void 0===r&&(r=1);var c={count:r,n:r},s=Se.apply(void 0,i);return s.params=Object.assign(c,s.params),i=null===s.locale?[s.params]:[s.locale,s.params],this.fetchChoice((a=this)._t.apply(a,[n,e,t,o].concat(i)),r)},ht.prototype.fetchChoice=function(n,e){if(!n&&"string"!=typeof n)return null;var t=n.split("|");return t[e=this.getChoiceIndex(e,t.length)]?t[e].trim():n},ht.prototype.getChoiceIndex=function(n,e){var t,o;return this.locale in this.pluralizationRules?this.pluralizationRules[this.locale].apply(this,[n,e]):(t=n,o=e,t=Math.abs(t),2===o?t?t>1?1:0:1:t?Math.min(t,2):0)},ht.prototype.tc=function(n,e){for(var t,o=[],r=arguments.length-2;r-- >0;)o[r]=arguments[r+2];return(t=this)._tc.apply(t,[n,this.locale,this._getMessages(),null,e].concat(o))},ht.prototype._te=function(n,e,t){for(var o=[],r=arguments.length-3;r-- >0;)o[r]=arguments[r+3];var a=Se.apply(void 0,o).locale||e;return this._exist(t[a],n)},ht.prototype.te=function(n,e){return this._te(n,this.locale,this._getMessages(),e)},ht.prototype.getLocaleMessage=function(n){return Ee(this._vm.messages[n]||{})},ht.prototype.setLocaleMessage=function(n,e){("warn"!==this._warnHtmlInMessage&&"error"!==this._warnHtmlInMessage||(this._checkLocaleMessage(n,this._warnHtmlInMessage,e),"error"!==this._warnHtmlInMessage))&&this._vm.$set(this._vm.messages,n,e)},ht.prototype.mergeLocaleMessage=function(n,e){("warn"!==this._warnHtmlInMessage&&"error"!==this._warnHtmlInMessage||(this._checkLocaleMessage(n,this._warnHtmlInMessage,e),"error"!==this._warnHtmlInMessage))&&this._vm.$set(this._vm.messages,n,je(this._vm.messages[n]||{},e))},ht.prototype.getDateTimeFormat=function(n){return Ee(this._vm.dateTimeFormats[n]||{})},ht.prototype.setDateTimeFormat=function(n,e){this._vm.$set(this._vm.dateTimeFormats,n,e)},ht.prototype.mergeDateTimeFormat=function(n,e){this._vm.$set(this._vm.dateTimeFormats,n,je(this._vm.dateTimeFormats[n]||{},e))},ht.prototype._localizeDateTime=function(n,e,t,o,r){var a=e,i=o[a];if((Ae(i)||Ae(i[r]))&&(i=o[a=t]),Ae(i)||Ae(i[r]))return null;var f=i[r],c=a+"__"+r,s=this._dateTimeFormatters[c];return s||(s=this._dateTimeFormatters[c]=new Intl.DateTimeFormat(a,f)),s.format(n)},ht.prototype._d=function(n,e,t){if(!t)return new Intl.DateTimeFormat(e).format(n);var o=this._localizeDateTime(n,e,this.fallbackLocale,this._getDateTimeFormats(),t);if(this._isFallbackRoot(o)){if(!this._root)throw Error("unexpected error");return this._root.$i18n.d(n,t,e)}return o||""},ht.prototype.d=function(n){for(var e=[],t=arguments.length-1;t-- >0;)e[t]=arguments[t+1];var o=this.locale,r=null;return 1===e.length?"string"==typeof e[0]?r=e[0]:xe(e[0])&&(e[0].locale&&(o=e[0].locale),e[0].key&&(r=e[0].key)):2===e.length&&("string"==typeof e[0]&&(r=e[0]),"string"==typeof e[1]&&(o=e[1])),this._d(n,o,r)},ht.prototype.getNumberFormat=function(n){return Ee(this._vm.numberFormats[n]||{})},ht.prototype.setNumberFormat=function(n,e){this._vm.$set(this._vm.numberFormats,n,e)},ht.prototype.mergeNumberFormat=function(n,e){this._vm.$set(this._vm.numberFormats,n,je(this._vm.numberFormats[n]||{},e))},ht.prototype._getNumberFormatter=function(n,e,t,o,r,a){var i=e,f=o[i];if((Ae(f)||Ae(f[r]))&&(f=o[i=t]),Ae(f)||Ae(f[r]))return null;var c,s=f[r];if(a)c=new Intl.NumberFormat(i,Object.assign({},s,a));else{var l=i+"__"+r;(c=this._numberFormatters[l])||(c=this._numberFormatters[l]=new Intl.NumberFormat(i,s))}return c},ht.prototype._n=function(n,e,t,o){if(!ht.availabilities.numberFormat)return"";if(!t)return(o?new Intl.NumberFormat(e,o):new Intl.NumberFormat(e)).format(n);var r=this._getNumberFormatter(n,e,this.fallbackLocale,this._getNumberFormats(),t,o),a=r&&r.format(n);if(this._isFallbackRoot(a)){if(!this._root)throw Error("unexpected error");return this._root.$i18n.n(n,Object.assign({},{key:t,locale:e},o))}return a||""},ht.prototype.n=function(n){for(var e=[],t=arguments.length-1;t-- >0;)e[t]=arguments[t+1];var o=this.locale,r=null,a=null;return 1===e.length?"string"==typeof e[0]?r=e[0]:xe(e[0])&&(e[0].locale&&(o=e[0].locale),e[0].key&&(r=e[0].key),a=Object.keys(e[0]).reduce(function(n,t){var o;return _e.includes(t)?Object.assign({},n,((o={})[t]=e[0][t],o)):n},null)):2===e.length&&("string"==typeof e[0]&&(r=e[0]),"string"==typeof e[1]&&(o=e[1])),this._n(n,o,r,a)},ht.prototype._ntp=function(n,e,t,o){if(!ht.availabilities.numberFormat)return[];if(!t)return(o?new Intl.NumberFormat(e,o):new Intl.NumberFormat(e)).formatToParts(n);var r=this._getNumberFormatter(n,e,this.fallbackLocale,this._getNumberFormats(),t,o),a=r&&r.formatToParts(n);if(this._isFallbackRoot(a)){if(!this._root)throw Error("unexpected error");return this._root.$i18n._ntp(n,e,t,o)}return a||[]},Object.defineProperties(ht.prototype,mt),Object.defineProperty(ht,"availabilities",{get:function(){if(!ct){var n="undefined"!=typeof Intl;ct={dateTimeFormat:n&&void 0!==Intl.DateTimeFormat,numberFormat:n&&void 0!==Intl.NumberFormat}}return ct}}),ht.install=Be,ht.version="8.12.0";var vt=ht;o.a.use(vt);var gt=new vt({locale:localStorage.getItem("locale")||"en",fallbackLocale:"en"}),yt=(t(57),function(){var n=this.$createElement,e=this._self._c||n;return e("div",{staticClass:"main-layout"},[e("app-header"),this._v(" "),e("div",{staticClass:"content"},[e("router-view")],1)],1)});yt._withStripped=!0;var _t=function(){var n=this.$createElement,e=this._self._c||n;return e("header",{staticClass:"header"},[this._m(0),this._v(" "),e("div",{staticClass:"header__nav"},[e("lang-control",{staticClass:"header__lang"}),this._v(" "),this.isAuth?e("button",{staticClass:"header__logout",on:{click:this.logOut}},[e("i",{staticClass:"fas fa-sign-out-alt"})]):this._e()],1)])},wt=[function(){var n=this.$createElement,e=this._self._c||n;return e("a",{staticClass:"header__logo",attrs:{href:"/"}},[e("img",{staticClass:"logo__img",attrs:{src:t(96),alt:"Logo"}}),this._v(" "),e("span",{staticClass:"logo__title"},[this._v("Test Task")])])}];_t._withStripped=!0;var xt=function(){var n=this,e=n.$createElement,t=n._self._c||e;return n.hasLanguages?t("select",{directives:[{name:"model",rawName:"v-model",value:n.locale,expression:"locale"}],on:{change:[function(e){var t=Array.prototype.filter.call(e.target.options,function(n){return n.selected}).map(function(n){return"_value"in n?n._value:n.value});n.locale=e.target.multiple?t:t[0]},n.handleSelectLang]}},n._l(n.languages,function(e){return t("option",{key:e.code,domProps:{value:e.code}},[n._v("\n    "+n._s(e.native)+"\n  ")])}),0):n._e()};xt._withStripped=!0;var kt=f({name:"LanguageControl",data:function(){return{languages:[],locale:"en"}},computed:{hasLanguages:function(){return this.languages.length>0}},methods:{handleSelectLang:function(){a.a.defaults.headers.common["Accept-Language"]=this.locale,this.$i18n.locale=this.locale,localStorage.setItem("locale",this.locale),this.$store.dispatch("changeLocale",{locale:this.locale})}},mounted:function(){var n=this;a.a.get("/v2/languages").then(function(e){if(200===e.status&&e.data){n.languages=e.data;var t=n.languages.find(function(e){return e.code===n.$i18n.locale});t&&(n.locale=t.code)}}).catch(function(n){throw new Error(n)})},beforeDestroy:function(){localStorage.removeItem("locale")}},xt,[],!1,null,null,null);kt.options.__file="src/components/LanguageControl.vue";var Ct={name:"AppHeader",components:{langControl:kt.exports},computed:{isAuth:function(){return this.$store.getters["auth/isAuthenticated"]}},methods:{logOut:function(){var n=this;this.$store.dispatch("auth/logout").then(function(){n.$router.push("/login")}).catch(function(n){throw new Error(n)})}}},$t=(t(97),f(Ct,_t,wt,!1,null,null,null));$t.options.__file="src/components/AppHeader.vue";var At={name:"MainLayout",components:{appHeader:$t.exports}},St=(t(99),f(At,yt,[],!1,null,null,null));St.options.__file="src/layouts/MainLayout.vue";var Et=St.exports;o.a.component("main-layout",Et),a.a.defaults.baseURL="https://test.whteam.net";var Ot=localStorage.getItem("user-token");Ot&&(a.a.defaults.headers.common.Authorization="Bearer "+Ot),ye.beforeEach(function(n,e,t){n.matched.some(function(n){return n.meta.requiresAuth})?Gn.getters["auth/isAuthenticated"]?t():t({path:"/login",query:{redirect:n.fullPath}}):t()}),new o.a({router:ye,store:Gn,i18n:gt,render:function(n){return n(s)}}).$mount("#app")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvbGlzdFRvU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5ydW50aW1lLmVzbS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9JbmRleFBhZ2UudnVlPzZmNzQiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL0xvZ2luUGFnZS52dWU/MjNkMyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvdHJhbnNsYXRpb24vQ3JlYXRlVHJhbnNsYXRpb25QYWdlLnZ1ZT84OTJiIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy90cmFuc2xhdGlvbi9SZWFkVHJhbnNsYXRpb25QYWdlLnZ1ZT83NzE3Iiwid2VicGFjazovLy8uL3NyYy9wYWdlcy90cmFuc2xhdGlvbi9VcGRhdGVUcmFuc2xhdGlvblBhZ2UudnVlPzkxNTMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL3RyYW5zbGF0aW9uL1VwZGF0ZU5hdGl2ZVBhZ2UudnVlPzk2YWIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQXBwSGVhZGVyLnZ1ZT85NGZkIiwid2VicGFjazovLy8uL3NyYy9sYXlvdXRzL01haW5MYXlvdXQudnVlP2Y2M2EiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZXgvZGlzdC92dWV4LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtZnJlZS93ZWJmb250cy9mYS1zb2xpZC05MDAuZW90Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtZnJlZS93ZWJmb250cy9mYS1yZWd1bGFyLTQwMC5lb3QiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1mcmVlL3dlYmZvbnRzL2ZhLWJyYW5kcy00MDAuZW90Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9JbmRleFBhZ2UudnVlPzIzYTQiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL0luZGV4UGFnZS52dWU/Mjc1MyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvTG9naW5QYWdlLnZ1ZT83YjU3Iiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9Mb2dpblBhZ2UudnVlP2YyMjAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL3RyYW5zbGF0aW9uL0NyZWF0ZVRyYW5zbGF0aW9uUGFnZS52dWU/ZjhjZSIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvdHJhbnNsYXRpb24vQ3JlYXRlVHJhbnNsYXRpb25QYWdlLnZ1ZT9mZjNmIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy90cmFuc2xhdGlvbi9SZWFkVHJhbnNsYXRpb25QYWdlLnZ1ZT8xYTUzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy90cmFuc2xhdGlvbi9SZWFkVHJhbnNsYXRpb25QYWdlLnZ1ZT80MDJlIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy90cmFuc2xhdGlvbi9VcGRhdGVUcmFuc2xhdGlvblBhZ2UudnVlP2UwZGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL3RyYW5zbGF0aW9uL1VwZGF0ZVRyYW5zbGF0aW9uUGFnZS52dWU/Y2I1ZiIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvdHJhbnNsYXRpb24vVXBkYXRlTmF0aXZlUGFnZS52dWU/MjJjZSIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvdHJhbnNsYXRpb24vVXBkYXRlTmF0aXZlUGFnZS52dWU/NjhkYyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL3N0eWxlcy90aGVtZS5zY3NzPzU0N2YiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9zdHlsZXMvdGhlbWUuc2NzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb2JvdG8tZm9udGZhY2UvZm9udHMvcm9ib3RvL1JvYm90by1SZWd1bGFyLndvZmYyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb2JvdG8tZm9udGZhY2UvZm9udHMvcm9ib3RvL1JvYm90by1SZWd1bGFyLndvZmYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvYm90by1mb250ZmFjZS9mb250cy9yb2JvdG8vUm9ib3RvLVJlZ3VsYXJJdGFsaWMud29mZjIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvYm90by1mb250ZmFjZS9mb250cy9yb2JvdG8vUm9ib3RvLVJlZ3VsYXJJdGFsaWMud29mZiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm9ib3RvLWZvbnRmYWNlL2ZvbnRzL3JvYm90by9Sb2JvdG8tTGlnaHQud29mZjIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvYm90by1mb250ZmFjZS9mb250cy9yb2JvdG8vUm9ib3RvLUxpZ2h0LndvZmYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvYm90by1mb250ZmFjZS9mb250cy9yb2JvdG8vUm9ib3RvLUxpZ2h0SXRhbGljLndvZmYyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb2JvdG8tZm9udGZhY2UvZm9udHMvcm9ib3RvL1JvYm90by1MaWdodEl0YWxpYy53b2ZmIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb2JvdG8tZm9udGZhY2UvZm9udHMvcm9ib3RvL1JvYm90by1UaGluLndvZmYyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb2JvdG8tZm9udGZhY2UvZm9udHMvcm9ib3RvL1JvYm90by1UaGluLndvZmYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvYm90by1mb250ZmFjZS9mb250cy9yb2JvdG8vUm9ib3RvLVRoaW5JdGFsaWMud29mZjIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvYm90by1mb250ZmFjZS9mb250cy9yb2JvdG8vUm9ib3RvLVRoaW5JdGFsaWMud29mZiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm9ib3RvLWZvbnRmYWNlL2ZvbnRzL3JvYm90by9Sb2JvdG8tTWVkaXVtLndvZmYyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb2JvdG8tZm9udGZhY2UvZm9udHMvcm9ib3RvL1JvYm90by1NZWRpdW0ud29mZiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm9ib3RvLWZvbnRmYWNlL2ZvbnRzL3JvYm90by9Sb2JvdG8tTWVkaXVtSXRhbGljLndvZmYyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb2JvdG8tZm9udGZhY2UvZm9udHMvcm9ib3RvL1JvYm90by1NZWRpdW1JdGFsaWMud29mZiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm9ib3RvLWZvbnRmYWNlL2ZvbnRzL3JvYm90by9Sb2JvdG8tQm9sZC53b2ZmMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm9ib3RvLWZvbnRmYWNlL2ZvbnRzL3JvYm90by9Sb2JvdG8tQm9sZC53b2ZmIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb2JvdG8tZm9udGZhY2UvZm9udHMvcm9ib3RvL1JvYm90by1Cb2xkSXRhbGljLndvZmYyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb2JvdG8tZm9udGZhY2UvZm9udHMvcm9ib3RvL1JvYm90by1Cb2xkSXRhbGljLndvZmYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvYm90by1mb250ZmFjZS9mb250cy9yb2JvdG8vUm9ib3RvLUJsYWNrLndvZmYyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb2JvdG8tZm9udGZhY2UvZm9udHMvcm9ib3RvL1JvYm90by1CbGFjay53b2ZmIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb2JvdG8tZm9udGZhY2UvZm9udHMvcm9ib3RvL1JvYm90by1CbGFja0l0YWxpYy53b2ZmMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm9ib3RvLWZvbnRmYWNlL2ZvbnRzL3JvYm90by9Sb2JvdG8tQmxhY2tJdGFsaWMud29mZiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLWZyZWUvd2ViZm9udHMvZmEtc29saWQtOTAwLndvZmYyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtZnJlZS93ZWJmb250cy9mYS1zb2xpZC05MDAud29mZiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLWZyZWUvd2ViZm9udHMvZmEtc29saWQtOTAwLnR0ZiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLWZyZWUvd2ViZm9udHMvZmEtc29saWQtOTAwLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLWZyZWUvd2ViZm9udHMvZmEtcmVndWxhci00MDAud29mZjIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1mcmVlL3dlYmZvbnRzL2ZhLXJlZ3VsYXItNDAwLndvZmYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1mcmVlL3dlYmZvbnRzL2ZhLXJlZ3VsYXItNDAwLnR0ZiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLWZyZWUvd2ViZm9udHMvZmEtcmVndWxhci00MDAuc3ZnIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtZnJlZS93ZWJmb250cy9mYS1icmFuZHMtNDAwLndvZmYyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtZnJlZS93ZWJmb250cy9mYS1icmFuZHMtNDAwLndvZmYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1mcmVlL3dlYmZvbnRzL2ZhLWJyYW5kcy00MDAudHRmIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtZnJlZS93ZWJmb250cy9mYS1icmFuZHMtNDAwLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2ltYWdlcy9sb2dvLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcHBIZWFkZXIudnVlP2I0NDIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQXBwSGVhZGVyLnZ1ZT8wY2U4Iiwid2VicGFjazovLy8uL3NyYy9sYXlvdXRzL01haW5MYXlvdXQudnVlPzM2MzkiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xheW91dHMvTWFpbkxheW91dC52dWU/OGZkMSIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT82NDdhIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC52dWUiLCJ3ZWJwYWNrOi8vL3NyYy9BcHAudnVlIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtcm91dGVyL2Rpc3QvdnVlLXJvdXRlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL21vZHVsZXMvYXV0aC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvbW9kdWxlcy9hdXRoL3N0YXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9tb2R1bGVzL2F1dGgvZ2V0dGVycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvbW9kdWxlcy9hdXRoL2FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL21vZHVsZXMvYXV0aC9tdXRhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9JbmRleFBhZ2UudnVlPzZkZDYiLCJ3ZWJwYWNrOi8vL3NyYy9wYWdlcy9JbmRleFBhZ2UudnVlIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9JbmRleFBhZ2UudnVlPzIzMmIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL0luZGV4UGFnZS52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL0xvZ2luUGFnZS52dWU/OWYyOCIsIndlYnBhY2s6Ly8vc3JjL3BhZ2VzL0xvZ2luUGFnZS52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL0xvZ2luUGFnZS52dWU/NjA2NCIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvTG9naW5QYWdlLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvdHJhbnNsYXRpb24vQ3JlYXRlVHJhbnNsYXRpb25QYWdlLnZ1ZT9lNjNmIiwid2VicGFjazovLy9zcmMvcGFnZXMvdHJhbnNsYXRpb24vQ3JlYXRlVHJhbnNsYXRpb25QYWdlLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvdHJhbnNsYXRpb24vQ3JlYXRlVHJhbnNsYXRpb25QYWdlLnZ1ZT9hZTk4Iiwid2VicGFjazovLy8uL3NyYy9wYWdlcy90cmFuc2xhdGlvbi9DcmVhdGVUcmFuc2xhdGlvblBhZ2UudnVlIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy90cmFuc2xhdGlvbi9SZWFkVHJhbnNsYXRpb25QYWdlLnZ1ZT8xZDQ0Iiwid2VicGFjazovLy9zcmMvcGFnZXMvdHJhbnNsYXRpb24vUmVhZFRyYW5zbGF0aW9uUGFnZS52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL3RyYW5zbGF0aW9uL1JlYWRUcmFuc2xhdGlvblBhZ2UudnVlPzE0OTkiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL3RyYW5zbGF0aW9uL1JlYWRUcmFuc2xhdGlvblBhZ2UudnVlIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy90cmFuc2xhdGlvbi9VcGRhdGVUcmFuc2xhdGlvblBhZ2UudnVlPzUzNDMiLCJ3ZWJwYWNrOi8vL3NyYy9wYWdlcy90cmFuc2xhdGlvbi9VcGRhdGVUcmFuc2xhdGlvblBhZ2UudnVlIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy90cmFuc2xhdGlvbi9VcGRhdGVUcmFuc2xhdGlvblBhZ2UudnVlPzdlMTUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL3RyYW5zbGF0aW9uL1VwZGF0ZVRyYW5zbGF0aW9uUGFnZS52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL3RyYW5zbGF0aW9uL1VwZGF0ZU5hdGl2ZVBhZ2UudnVlPzVlNTAiLCJ3ZWJwYWNrOi8vL3NyYy9wYWdlcy90cmFuc2xhdGlvbi9VcGRhdGVOYXRpdmVQYWdlLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvdHJhbnNsYXRpb24vVXBkYXRlTmF0aXZlUGFnZS52dWU/ZDFkMCIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvdHJhbnNsYXRpb24vVXBkYXRlTmF0aXZlUGFnZS52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JvdXRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWkxOG4vZGlzdC92dWUtaTE4bi5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGF5b3V0cy9NYWluTGF5b3V0LnZ1ZT82Yzk1Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0FwcEhlYWRlci52dWU/OTYyYSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MYW5ndWFnZUNvbnRyb2wudnVlPzU5YTkiLCJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL0xhbmd1YWdlQ29udHJvbC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGFuZ3VhZ2VDb250cm9sLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcHBIZWFkZXIudnVlPzA2ZDkiLCJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL0FwcEhlYWRlci52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQXBwSGVhZGVyLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvbGF5b3V0cy9NYWluTGF5b3V0LnZ1ZT8wODUzIiwid2VicGFjazovLy9zcmMvbGF5b3V0cy9NYWluTGF5b3V0LnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvbGF5b3V0cy9NYWluTGF5b3V0LnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJyZXF1aXJlIiwiaXNCdWZmZXIiLCJ0b1N0cmluZyIsImlzQXJyYXkiLCJ2YWwiLCJpc09iamVjdCIsImlzRnVuY3Rpb24iLCJmb3JFYWNoIiwib2JqIiwiZm4iLCJsZW5ndGgiLCJpc0FycmF5QnVmZmVyIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc1VuZGVmaW5lZCIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0Iiwid2luZG93IiwiZG9jdW1lbnQiLCJtZXJnZSIsInJlc3VsdCIsImFzc2lnblZhbHVlIiwiYXJndW1lbnRzIiwiZGVlcE1lcmdlIiwiZXh0ZW5kIiwiYSIsImIiLCJ0aGlzQXJnIiwidHJpbSIsInN0ciIsInJlcGxhY2UiLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlTWFwIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsImNvbmNhdCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImpvaW4iLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJpZCIsIl9pIiwicHVzaCIsImxpc3RUb1N0eWxlcyIsInBhcmVudElkIiwic3R5bGVzIiwibmV3U3R5bGVzIiwicGFydCIsImNzcyIsIm1lZGlhIiwicGFydHMiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiYWRkU3R5bGVzQ2xpZW50IiwiaGFzRG9jdW1lbnQiLCJERUJVRyIsIkVycm9yIiwic3R5bGVzSW5Eb20iLCJoZWFkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzaW5nbGV0b25FbGVtZW50Iiwic2luZ2xldG9uQ291bnRlciIsImlzUHJvZHVjdGlvbiIsIm5vb3AiLCJvcHRpb25zIiwic3NySWRLZXkiLCJpc09sZElFIiwidGVzdCIsInVzZXJBZ2VudCIsInRvTG93ZXJDYXNlIiwiX2lzUHJvZHVjdGlvbiIsIl9vcHRpb25zIiwiYWRkU3R5bGVzVG9Eb20iLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwiZG9tU3R5bGUiLCJyZWZzIiwiaiIsImFkZFN0eWxlIiwiY3JlYXRlU3R5bGVFbGVtZW50Iiwic3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJhcHBlbmRDaGlsZCIsInVwZGF0ZSIsInJlbW92ZSIsInF1ZXJ5U2VsZWN0b3IiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInNldEF0dHJpYnV0ZSIsInNzcklkIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJuZXdPYmoiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsImluZGV4IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJpbnNlcnRCZWZvcmUiLCJnbG9iYWwiLCJzZXRJbW1lZGlhdGUiLCJlbXB0eU9iamVjdCIsImZyZWV6ZSIsImlzVW5kZWYiLCJ2IiwiaXNEZWYiLCJpc1RydWUiLCJpc1ByaW1pdGl2ZSIsIl90b1N0cmluZyIsImlzUGxhaW5PYmplY3QiLCJpc1JlZ0V4cCIsImlzVmFsaWRBcnJheUluZGV4IiwicGFyc2VGbG9hdCIsIlN0cmluZyIsIk1hdGgiLCJmbG9vciIsImlzRmluaXRlIiwiaXNQcm9taXNlIiwidGhlbiIsImNhdGNoIiwiQXJyYXkiLCJ0b051bWJlciIsImlzTmFOIiwibWFrZU1hcCIsImV4cGVjdHNMb3dlckNhc2UiLCJzcGxpdCIsImlzUmVzZXJ2ZWRBdHRyaWJ1dGUiLCJhcnIiLCJpbmRleE9mIiwic3BsaWNlIiwiaGFzT3duIiwiY2FjaGVkIiwiY2FjaGUiLCJjYW1lbGl6ZVJFIiwiY2FtZWxpemUiLCJfIiwidG9VcHBlckNhc2UiLCJjYXBpdGFsaXplIiwiY2hhckF0Iiwic2xpY2UiLCJoeXBoZW5hdGVSRSIsImh5cGhlbmF0ZSIsIkZ1bmN0aW9uIiwiY3R4IiwiYm91bmRGbiIsImFwcGx5IiwiX2xlbmd0aCIsInRvQXJyYXkiLCJzdGFydCIsInJldCIsInRvIiwiX2Zyb20iLCJ0b09iamVjdCIsInJlcyIsIm5vIiwiaWRlbnRpdHkiLCJsb29zZUVxdWFsIiwiaXNPYmplY3RBIiwiaXNPYmplY3RCIiwiaXNBcnJheUEiLCJpc0FycmF5QiIsImV2ZXJ5IiwiZSIsIkRhdGUiLCJnZXRUaW1lIiwia2V5c0EiLCJrZXlzIiwia2V5c0IiLCJsb29zZUluZGV4T2YiLCJvbmNlIiwiY2FsbGVkIiwiU1NSX0FUVFIiLCJBU1NFVF9UWVBFUyIsIkxJRkVDWUNMRV9IT09LUyIsImNvbmZpZyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsInNpbGVudCIsInByb2R1Y3Rpb25UaXAiLCJwcm9jZXNzIiwiZGV2dG9vbHMiLCJwZXJmb3JtYW5jZSIsImVycm9ySGFuZGxlciIsIndhcm5IYW5kbGVyIiwiaWdub3JlZEVsZW1lbnRzIiwia2V5Q29kZXMiLCJpc1Jlc2VydmVkVGFnIiwiaXNSZXNlcnZlZEF0dHIiLCJpc1Vua25vd25FbGVtZW50IiwiZ2V0VGFnTmFtZXNwYWNlIiwicGFyc2VQbGF0Zm9ybVRhZ05hbWUiLCJtdXN0VXNlUHJvcCIsImFzeW5jIiwiX2xpZmVjeWNsZUhvb2tzIiwidW5pY29kZVJlZ0V4cCIsImRlZiIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiYmFpbFJFIiwiUmVnRXhwIiwiX2lzU2VydmVyIiwiaGFzUHJvdG8iLCJpbkJyb3dzZXIiLCJpbldlZXgiLCJXWEVudmlyb25tZW50IiwicGxhdGZvcm0iLCJ3ZWV4UGxhdGZvcm0iLCJVQSIsImlzSUUiLCJpc0lFOSIsImlzRWRnZSIsImlzSU9TIiwiaXNGRiIsIm1hdGNoIiwibmF0aXZlV2F0Y2giLCJ3YXRjaCIsInN1cHBvcnRzUGFzc2l2ZSIsIm9wdHMiLCJhZGRFdmVudExpc3RlbmVyIiwiaXNTZXJ2ZXJSZW5kZXJpbmciLCJ1bmRlZmluZWQiLCJlbnYiLCJWVUVfRU5WIiwiX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImlzTmF0aXZlIiwiQ3RvciIsIl9TZXQiLCJoYXNTeW1ib2wiLCJSZWZsZWN0Iiwib3duS2V5cyIsIlNldCIsInNldCIsImhhcyIsImFkZCIsImNsZWFyIiwid2FybiIsInVpZCIsIkRlcCIsInN1YnMiLCJhZGRTdWIiLCJzdWIiLCJyZW1vdmVTdWIiLCJkZXBlbmQiLCJ0YXJnZXQiLCJhZGREZXAiLCJub3RpZnkiLCJ0YXJnZXRTdGFjayIsInB1c2hUYXJnZXQiLCJwb3BUYXJnZXQiLCJwb3AiLCJWTm9kZSIsInRhZyIsImNoaWxkcmVuIiwidGV4dCIsImVsbSIsImNvbnRleHQiLCJjb21wb25lbnRPcHRpb25zIiwiYXN5bmNGYWN0b3J5IiwiZm5Db250ZXh0IiwiZm5PcHRpb25zIiwiZm5TY29wZUlkIiwiY29tcG9uZW50SW5zdGFuY2UiLCJwYXJlbnQiLCJyYXciLCJpc1N0YXRpYyIsImlzUm9vdEluc2VydCIsImlzQ29tbWVudCIsImlzQ2xvbmVkIiwiaXNPbmNlIiwiYXN5bmNNZXRhIiwiaXNBc3luY1BsYWNlaG9sZGVyIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiY2hpbGQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY3JlYXRlRW1wdHlWTm9kZSIsIm5vZGUiLCJjcmVhdGVUZXh0Vk5vZGUiLCJjbG9uZVZOb2RlIiwidm5vZGUiLCJjbG9uZWQiLCJhcnJheVByb3RvIiwiYXJyYXlNZXRob2RzIiwibWV0aG9kIiwib3JpZ2luYWwiLCJhcmdzIiwibGVuIiwiaW5zZXJ0ZWQiLCJvYiIsIl9fb2JfXyIsIm9ic2VydmVBcnJheSIsImRlcCIsImFycmF5S2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJzaG91bGRPYnNlcnZlIiwidG9nZ2xlT2JzZXJ2aW5nIiwiT2JzZXJ2ZXIiLCJ2bUNvdW50Iiwic3JjIiwiX19wcm90b19fIiwicHJvdG9BdWdtZW50IiwiY29weUF1Z21lbnQiLCJ3YWxrIiwib2JzZXJ2ZSIsImFzUm9vdERhdGEiLCJpc0V4dGVuc2libGUiLCJfaXNWdWUiLCJkZWZpbmVSZWFjdGl2ZSQkMSIsImN1c3RvbVNldHRlciIsInNoYWxsb3ciLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJzZXR0ZXIiLCJjaGlsZE9iIiwiZGVwZW5kQXJyYXkiLCJuZXdWYWwiLCJtYXgiLCJkZWwiLCJpdGVtcyIsInN0cmF0cyIsIm1lcmdlRGF0YSIsImZyb20iLCJ0b1ZhbCIsImZyb21WYWwiLCJtZXJnZURhdGFPckZuIiwicGFyZW50VmFsIiwiY2hpbGRWYWwiLCJ2bSIsImluc3RhbmNlRGF0YSIsImRlZmF1bHREYXRhIiwibWVyZ2VIb29rIiwiaG9va3MiLCJkZWR1cGVIb29rcyIsIm1lcmdlQXNzZXRzIiwiaG9vayIsImtleSQxIiwicHJvcHMiLCJtZXRob2RzIiwiaW5qZWN0IiwiY29tcHV0ZWQiLCJwcm92aWRlIiwiZGVmYXVsdFN0cmF0IiwibWVyZ2VPcHRpb25zIiwibm9ybWFsaXplUHJvcHMiLCJub3JtYWxpemVkIiwibm9ybWFsaXplSW5qZWN0IiwiZGlycyIsImRpcmVjdGl2ZXMiLCJkZWYkJDEiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiX2Jhc2UiLCJleHRlbmRzIiwibWl4aW5zIiwibWVyZ2VGaWVsZCIsInN0cmF0IiwicmVzb2x2ZUFzc2V0Iiwid2Fybk1pc3NpbmciLCJhc3NldHMiLCJjYW1lbGl6ZWRJZCIsIlBhc2NhbENhc2VJZCIsInZhbGlkYXRlUHJvcCIsInByb3BPcHRpb25zIiwicHJvcHNEYXRhIiwicHJvcCIsImFic2VudCIsImJvb2xlYW5JbmRleCIsImdldFR5cGVJbmRleCIsInN0cmluZ0luZGV4IiwiZGVmYXVsdCIsIiRvcHRpb25zIiwiX3Byb3BzIiwiZ2V0VHlwZSIsImdldFByb3BEZWZhdWx0VmFsdWUiLCJwcmV2U2hvdWxkT2JzZXJ2ZSIsImlzU2FtZVR5cGUiLCJleHBlY3RlZFR5cGVzIiwiaGFuZGxlRXJyb3IiLCJlcnIiLCJpbmZvIiwiY3VyIiwiJHBhcmVudCIsImVycm9yQ2FwdHVyZWQiLCJnbG9iYWxIYW5kbGVFcnJvciIsImludm9rZVdpdGhFcnJvckhhbmRsaW5nIiwiaGFuZGxlciIsIl9oYW5kbGVkIiwibG9nRXJyb3IiLCJjb25zb2xlIiwiZXJyb3IiLCJ0aW1lckZ1bmMiLCJpc1VzaW5nTWljcm9UYXNrIiwiY2FsbGJhY2tzIiwicGVuZGluZyIsImZsdXNoQ2FsbGJhY2tzIiwiY29waWVzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiTXV0YXRpb25PYnNlcnZlciIsImNvdW50ZXIiLCJvYnNlcnZlciIsInRleHROb2RlIiwiY2hhcmFjdGVyRGF0YSIsIm5leHRUaWNrIiwiY2IiLCJfcmVzb2x2ZSIsInNlZW5PYmplY3RzIiwidHJhdmVyc2UiLCJfdHJhdmVyc2UiLCJzZWVuIiwiaXNBIiwiaXNGcm96ZW4iLCJkZXBJZCIsIm5vcm1hbGl6ZUV2ZW50IiwicGFzc2l2ZSIsIm9uY2UkJDEiLCJjYXB0dXJlIiwiY3JlYXRlRm5JbnZva2VyIiwiZm5zIiwiaW52b2tlciIsImFyZ3VtZW50cyQxIiwidXBkYXRlTGlzdGVuZXJzIiwib24iLCJvbGRPbiIsInJlbW92ZSQkMSIsImNyZWF0ZU9uY2VIYW5kbGVyIiwib2xkIiwiZXZlbnQiLCJwYXJhbXMiLCJtZXJnZVZOb2RlSG9vayIsImhvb2tLZXkiLCJvbGRIb29rIiwid3JhcHBlZEhvb2siLCJtZXJnZWQiLCJjaGVja1Byb3AiLCJoYXNoIiwiYWx0S2V5IiwicHJlc2VydmUiLCJub3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4iLCJuZXN0ZWRJbmRleCIsImxhc3RJbmRleCIsImxhc3QiLCJpc1RleHROb2RlIiwic2hpZnQiLCJfaXNWTGlzdCIsInJlc29sdmVJbmplY3QiLCJwcm92aWRlS2V5IiwiX3Byb3ZpZGVkIiwicHJvdmlkZURlZmF1bHQiLCJyZXNvbHZlU2xvdHMiLCJzbG90cyIsImF0dHJzIiwic2xvdCIsIm5hbWUkMSIsImlzV2hpdGVzcGFjZSIsIm5vcm1hbGl6ZVNjb3BlZFNsb3RzIiwibm9ybWFsU2xvdHMiLCJwcmV2U2xvdHMiLCJoYXNOb3JtYWxTbG90cyIsImlzU3RhYmxlIiwiJHN0YWJsZSIsIiRrZXkiLCJfbm9ybWFsaXplZCIsIiRoYXNOb3JtYWwiLCJub3JtYWxpemVTY29wZWRTbG90Iiwia2V5JDIiLCJwcm94eU5vcm1hbFNsb3QiLCJwcm94eSIsInJlbmRlckxpc3QiLCJyZW5kZXIiLCJpdGVyYXRvciIsIm5leHQiLCJkb25lIiwicmVuZGVyU2xvdCIsImZhbGxiYWNrIiwiYmluZE9iamVjdCIsIm5vZGVzIiwic2NvcGVkU2xvdEZuIiwiJHNjb3BlZFNsb3RzIiwiJHNsb3RzIiwiJGNyZWF0ZUVsZW1lbnQiLCJyZXNvbHZlRmlsdGVyIiwiaXNLZXlOb3RNYXRjaCIsImV4cGVjdCIsImFjdHVhbCIsImNoZWNrS2V5Q29kZXMiLCJldmVudEtleUNvZGUiLCJidWlsdEluS2V5Q29kZSIsImV2ZW50S2V5TmFtZSIsImJ1aWx0SW5LZXlOYW1lIiwibWFwcGVkS2V5Q29kZSIsImJpbmRPYmplY3RQcm9wcyIsImFzUHJvcCIsImlzU3luYyIsImxvb3AiLCJkb21Qcm9wcyIsImNhbWVsaXplZEtleSIsImh5cGhlbmF0ZWRLZXkiLCIkZXZlbnQiLCJyZW5kZXJTdGF0aWMiLCJpc0luRm9yIiwiX3N0YXRpY1RyZWVzIiwidHJlZSIsIm1hcmtTdGF0aWMiLCJzdGF0aWNSZW5kZXJGbnMiLCJfcmVuZGVyUHJveHkiLCJtYXJrT25jZSIsIm1hcmtTdGF0aWNOb2RlIiwiYmluZE9iamVjdExpc3RlbmVycyIsImV4aXN0aW5nIiwib3VycyIsInJlc29sdmVTY29wZWRTbG90cyIsImhhc0R5bmFtaWNLZXlzIiwiY29udGVudEhhc2hLZXkiLCJiaW5kRHluYW1pY0tleXMiLCJiYXNlT2JqIiwidmFsdWVzIiwicHJlcGVuZE1vZGlmaWVyIiwic3ltYm9sIiwiaW5zdGFsbFJlbmRlckhlbHBlcnMiLCJfbyIsIl9uIiwiX3MiLCJfbCIsIl90IiwiX3EiLCJfbSIsIl9mIiwiX2siLCJfYiIsIl92IiwiX2UiLCJfdSIsIl9nIiwiX2QiLCJfcCIsIkZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IiwiY29udGV4dFZtIiwidGhpcyQxIiwiX29yaWdpbmFsIiwiaXNDb21waWxlZCIsIl9jb21waWxlZCIsIm5lZWROb3JtYWxpemF0aW9uIiwibGlzdGVuZXJzIiwiaW5qZWN0aW9ucyIsInNjb3BlZFNsb3RzIiwiX3Njb3BlSWQiLCJfYyIsImNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQiLCJyZW5kZXJDb250ZXh0IiwiY2xvbmUiLCJtZXJnZVByb3BzIiwiY29tcG9uZW50Vk5vZGVIb29rcyIsImluaXQiLCJoeWRyYXRpbmciLCJfaXNEZXN0cm95ZWQiLCJrZWVwQWxpdmUiLCJtb3VudGVkTm9kZSIsInByZXBhdGNoIiwiX2lzQ29tcG9uZW50IiwiX3BhcmVudFZub2RlIiwiaW5saW5lVGVtcGxhdGUiLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIiwiYWN0aXZlSW5zdGFuY2UiLCIkbW91bnQiLCJvbGRWbm9kZSIsInBhcmVudFZub2RlIiwicmVuZGVyQ2hpbGRyZW4iLCJuZXdTY29wZWRTbG90cyIsIm9sZFNjb3BlZFNsb3RzIiwiaGFzRHluYW1pY1Njb3BlZFNsb3QiLCJuZWVkc0ZvcmNlVXBkYXRlIiwiX3JlbmRlckNoaWxkcmVuIiwiJHZub2RlIiwiX3Zub2RlIiwiJGF0dHJzIiwiJGxpc3RlbmVycyIsInByb3BLZXlzIiwiX3Byb3BLZXlzIiwib2xkTGlzdGVuZXJzIiwiX3BhcmVudExpc3RlbmVycyIsInVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyIsIiRmb3JjZVVwZGF0ZSIsInVwZGF0ZUNoaWxkQ29tcG9uZW50IiwiaW5zZXJ0IiwiX2lzTW91bnRlZCIsImNhbGxIb29rIiwiX2luYWN0aXZlIiwiYWN0aXZhdGVkQ2hpbGRyZW4iLCJhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiZGVzdHJveSIsImRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImRpcmVjdCIsIl9kaXJlY3RJbmFjdGl2ZSIsImlzSW5JbmFjdGl2ZVRyZWUiLCIkY2hpbGRyZW4iLCIkZGVzdHJveSIsImhvb2tzVG9NZXJnZSIsImNyZWF0ZUNvbXBvbmVudCIsImJhc2VDdG9yIiwiY2lkIiwiZmFjdG9yeSIsImVycm9yQ29tcCIsInJlc29sdmVkIiwib3duZXIiLCJjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJvd25lcnMiLCJsb2FkaW5nIiwibG9hZGluZ0NvbXAiLCJzeW5jIiwidGltZXJMb2FkaW5nIiwidGltZXJUaW1lb3V0IiwiJG9uIiwiZm9yY2VSZW5kZXIiLCJyZW5kZXJDb21wbGV0ZWQiLCJjbGVhclRpbWVvdXQiLCJlbnN1cmVDdG9yIiwicmVqZWN0IiwicmVhc29uIiwiY29tcG9uZW50IiwiZGVsYXkiLCJ0aW1lb3V0IiwicmVzb2x2ZUFzeW5jQ29tcG9uZW50IiwiY3JlYXRlQXN5bmNQbGFjZWhvbGRlciIsInJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMiLCJtb2RlbCIsImNhbGxiYWNrIiwidHJhbnNmb3JtTW9kZWwiLCJleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIiwiZnVuY3Rpb25hbCIsInZub2RlcyIsImNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQiLCJuYXRpdmVPbiIsImFic3RyYWN0IiwidG9NZXJnZSIsIl9tZXJnZWQiLCJtZXJnZUhvb2skMSIsImluc3RhbGxDb21wb25lbnRIb29rcyIsImYxIiwiZjIiLCJTSU1QTEVfTk9STUFMSVpFIiwiQUxXQVlTX05PUk1BTElaRSIsIm5vcm1hbGl6YXRpb25UeXBlIiwiYWx3YXlzTm9ybWFsaXplIiwiaXMiLCJzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiIsInByZSIsImFwcGx5TlMiLCJmb3JjZSIsInN0eWxlIiwiY2xhc3MiLCJyZWdpc3RlckRlZXBCaW5kaW5ncyIsIl9jcmVhdGVFbGVtZW50IiwiY29tcCIsImJhc2UiLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwicmVtb3ZlJDEiLCIkb2ZmIiwiX3RhcmdldCIsIm9uY2VIYW5kbGVyIiwic2V0QWN0aXZlSW5zdGFuY2UiLCJwcmV2QWN0aXZlSW5zdGFuY2UiLCJoYW5kbGVycyIsIl9oYXNIb29rRXZlbnQiLCIkZW1pdCIsInF1ZXVlIiwid2FpdGluZyIsImZsdXNoaW5nIiwiY3VycmVudEZsdXNoVGltZXN0YW1wIiwiZ2V0Tm93Iiwibm93IiwiY3JlYXRlRXZlbnQiLCJ0aW1lU3RhbXAiLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwid2F0Y2hlciIsInNvcnQiLCJiZWZvcmUiLCJydW4iLCJhY3RpdmF0ZWRRdWV1ZSIsInVwZGF0ZWRRdWV1ZSIsImNhbGxBY3RpdmF0ZWRIb29rcyIsIl93YXRjaGVyIiwiY2FsbFVwZGF0ZWRIb29rcyIsImVtaXQiLCJ1aWQkMiIsIldhdGNoZXIiLCJleHBPckZuIiwiaXNSZW5kZXJXYXRjaGVyIiwiX3dhdGNoZXJzIiwiZGVlcCIsInVzZXIiLCJsYXp5IiwiYWN0aXZlIiwiZGlydHkiLCJkZXBzIiwibmV3RGVwcyIsImRlcElkcyIsIm5ld0RlcElkcyIsImV4cHJlc3Npb24iLCJwYXRoIiwic2VnbWVudHMiLCJwYXJzZVBhdGgiLCJjbGVhbnVwRGVwcyIsInRtcCIsInF1ZXVlV2F0Y2hlciIsIm9sZFZhbHVlIiwiZXZhbHVhdGUiLCJ0ZWFyZG93biIsIl9pc0JlaW5nRGVzdHJveWVkIiwic2hhcmVkUHJvcGVydHlEZWZpbml0aW9uIiwic291cmNlS2V5IiwiaW5pdFN0YXRlIiwicHJvcHNPcHRpb25zIiwiaW5pdFByb3BzIiwiaW5pdE1ldGhvZHMiLCJfZGF0YSIsImdldERhdGEiLCJjaGFyQ29kZUF0IiwiaW5pdERhdGEiLCJ3YXRjaGVycyIsIl9jb21wdXRlZFdhdGNoZXJzIiwiaXNTU1IiLCJ1c2VyRGVmIiwiY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyIsImRlZmluZUNvbXB1dGVkIiwiaW5pdENvbXB1dGVkIiwiY3JlYXRlV2F0Y2hlciIsImluaXRXYXRjaCIsInNob3VsZENhY2hlIiwiY3JlYXRlQ29tcHV0ZWRHZXR0ZXIiLCJjcmVhdGVHZXR0ZXJJbnZva2VyIiwiJHdhdGNoIiwidWlkJDMiLCJzdXBlciIsInN1cGVyT3B0aW9ucyIsIm1vZGlmaWVkT3B0aW9ucyIsIm1vZGlmaWVkIiwibGF0ZXN0Iiwic2VhbGVkIiwic2VhbGVkT3B0aW9ucyIsInJlc29sdmVNb2RpZmllZE9wdGlvbnMiLCJleHRlbmRPcHRpb25zIiwiY29tcG9uZW50cyIsIlZ1ZSIsIl9pbml0IiwiaW5pdEV4dGVuZCIsIlN1cGVyIiwiU3VwZXJJZCIsImNhY2hlZEN0b3JzIiwiX0N0b3IiLCJTdWIiLCJjb25zdHJ1Y3RvciIsIkNvbXAiLCJpbml0UHJvcHMkMSIsImluaXRDb21wdXRlZCQxIiwibWl4aW4iLCJ1c2UiLCJnZXRDb21wb25lbnROYW1lIiwibWF0Y2hlcyIsInBhdHRlcm4iLCJwcnVuZUNhY2hlIiwia2VlcEFsaXZlSW5zdGFuY2UiLCJjYWNoZWROb2RlIiwicHJ1bmVDYWNoZUVudHJ5IiwiY3VycmVudCIsImNhY2hlZCQkMSIsIl91aWQiLCJ2bm9kZUNvbXBvbmVudE9wdGlvbnMiLCJfY29tcG9uZW50VGFnIiwiaW5pdEludGVybmFsQ29tcG9uZW50IiwiX3NlbGYiLCIkcm9vdCIsIiRyZWZzIiwiaW5pdExpZmVjeWNsZSIsIl9ldmVudHMiLCJpbml0RXZlbnRzIiwicGFyZW50RGF0YSIsImluaXRSZW5kZXIiLCJpbml0SW5qZWN0aW9ucyIsImluaXRQcm92aWRlIiwiZWwiLCJpbml0TWl4aW4iLCJkYXRhRGVmIiwicHJvcHNEZWYiLCIkc2V0IiwiJGRlbGV0ZSIsImltbWVkaWF0ZSIsInN0YXRlTWl4aW4iLCJob29rUkUiLCIkb25jZSIsImkkMSIsImNicyIsImV2ZW50c01peGluIiwiX3VwZGF0ZSIsInByZXZFbCIsIiRlbCIsInByZXZWbm9kZSIsInJlc3RvcmVBY3RpdmVJbnN0YW5jZSIsIl9fcGF0Y2hfXyIsIl9fdnVlX18iLCJsaWZlY3ljbGVNaXhpbiIsIiRuZXh0VGljayIsIl9yZW5kZXIiLCJyZWYiLCJyZW5kZXJNaXhpbiIsInBhdHRlcm5UeXBlcyIsImJ1aWx0SW5Db21wb25lbnRzIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJOdW1iZXIiLCJjcmVhdGVkIiwiZGVzdHJveWVkIiwibW91bnRlZCIsInBhcnNlSW50IiwiY29uZmlnRGVmIiwidXRpbCIsImRlZmluZVJlYWN0aXZlIiwiZGVsZXRlIiwib2JzZXJ2YWJsZSIsInBsdWdpbiIsImluc3RhbGxlZFBsdWdpbnMiLCJfaW5zdGFsbGVkUGx1Z2lucyIsInVuc2hpZnQiLCJpbnN0YWxsIiwiaW5pdFVzZSIsImluaXRNaXhpbiQxIiwiZGVmaW5pdGlvbiIsImluaXRBc3NldFJlZ2lzdGVycyIsImluaXRHbG9iYWxBUEkiLCJzc3JDb250ZXh0IiwidmVyc2lvbiIsImFjY2VwdFZhbHVlIiwiaXNFbnVtZXJhdGVkQXR0ciIsImlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSIsImNvbnZlcnRFbnVtZXJhdGVkVmFsdWUiLCJpc0ZhbHN5QXR0clZhbHVlIiwiaXNCb29sZWFuQXR0ciIsInhsaW5rTlMiLCJpc1hsaW5rIiwiZ2V0WGxpbmtQcm9wIiwiZ2VuQ2xhc3NGb3JWbm9kZSIsImNoaWxkTm9kZSIsIm1lcmdlQ2xhc3NEYXRhIiwic3RhdGljQ2xhc3MiLCJkeW5hbWljQ2xhc3MiLCJzdHJpbmdpZnlDbGFzcyIsInJlbmRlckNsYXNzIiwic3RyaW5naWZpZWQiLCJzdHJpbmdpZnlBcnJheSIsInN0cmluZ2lmeU9iamVjdCIsIm5hbWVzcGFjZU1hcCIsInN2ZyIsIm1hdGgiLCJpc0hUTUxUYWciLCJpc1NWRyIsInVua25vd25FbGVtZW50Q2FjaGUiLCJpc1RleHRJbnB1dFR5cGUiLCJub2RlT3BzIiwidGFnTmFtZSIsIm11bHRpcGxlIiwiY3JlYXRlRWxlbWVudE5TIiwibmFtZXNwYWNlIiwiY3JlYXRlQ29tbWVudCIsIm5ld05vZGUiLCJyZWZlcmVuY2VOb2RlIiwibmV4dFNpYmxpbmciLCJzZXRUZXh0Q29udGVudCIsInRleHRDb250ZW50Iiwic2V0U3R5bGVTY29wZSIsInNjb3BlSWQiLCJyZWdpc3RlclJlZiIsImlzUmVtb3ZhbCIsInJlZkluRm9yIiwiZW1wdHlOb2RlIiwic2FtZVZub2RlIiwidHlwZUEiLCJ0eXBlQiIsInNhbWVJbnB1dFR5cGUiLCJjcmVhdGVLZXlUb09sZElkeCIsImJlZ2luSWR4IiwiZW5kSWR4IiwidXBkYXRlRGlyZWN0aXZlcyIsIm9sZERpciIsImRpciIsImlzQ3JlYXRlIiwiaXNEZXN0cm95Iiwib2xkRGlycyIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMkMSIsIm5ld0RpcnMiLCJkaXJzV2l0aEluc2VydCIsImRpcnNXaXRoUG9zdHBhdGNoIiwib2xkQXJnIiwiYXJnIiwiY2FsbEhvb2skMSIsImNvbXBvbmVudFVwZGF0ZWQiLCJjYWxsSW5zZXJ0IiwiZW1wdHlNb2RpZmllcnMiLCJtb2RpZmllcnMiLCJnZXRSYXdEaXJOYW1lIiwicmF3TmFtZSIsImJhc2VNb2R1bGVzIiwidXBkYXRlQXR0cnMiLCJpbmhlcml0QXR0cnMiLCJvbGRBdHRycyIsInNldEF0dHIiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZSIsImJhc2VTZXRBdHRyIiwic2V0QXR0cmlidXRlTlMiLCJfX2llcGgiLCJibG9ja2VyIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInVwZGF0ZUNsYXNzIiwib2xkRGF0YSIsImNscyIsInRyYW5zaXRpb25DbGFzcyIsIl90cmFuc2l0aW9uQ2xhc3NlcyIsIl9wcmV2Q2xhc3MiLCJ0YXJnZXQkMSIsImtsYXNzIiwiUkFOR0VfVE9LRU4iLCJDSEVDS0JPWF9SQURJT19UT0tFTiIsImNyZWF0ZU9uY2VIYW5kbGVyJDEiLCJyZW1vdmUkMiIsInVzZU1pY3JvdGFza0ZpeCIsImFkZCQxIiwiYXR0YWNoZWRUaW1lc3RhbXAiLCJfd3JhcHBlciIsImN1cnJlbnRUYXJnZXQiLCJvd25lckRvY3VtZW50IiwidXBkYXRlRE9NTGlzdGVuZXJzIiwiY2hhbmdlIiwibm9ybWFsaXplRXZlbnRzIiwic3ZnQ29udGFpbmVyIiwiZXZlbnRzIiwidXBkYXRlRE9NUHJvcHMiLCJvbGRQcm9wcyIsIl92YWx1ZSIsInN0ckN1ciIsInNob3VsZFVwZGF0ZVZhbHVlIiwiaW5uZXJIVE1MIiwiY2hlY2tWYWwiLCJjb21wb3NpbmciLCJub3RJbkZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImlzTm90SW5Gb2N1c0FuZERpcnR5IiwiX3ZNb2RpZmllcnMiLCJudW1iZXIiLCJpc0RpcnR5V2l0aE1vZGlmaWVycyIsInBhcnNlU3R5bGVUZXh0IiwicHJvcGVydHlEZWxpbWl0ZXIiLCJub3JtYWxpemVTdHlsZURhdGEiLCJub3JtYWxpemVTdHlsZUJpbmRpbmciLCJzdGF0aWNTdHlsZSIsImJpbmRpbmdTdHlsZSIsImVtcHR5U3R5bGUiLCJjc3NWYXJSRSIsImltcG9ydGFudFJFIiwic2V0UHJvcCIsInNldFByb3BlcnR5Iiwibm9ybWFsaXplZE5hbWUiLCJub3JtYWxpemUiLCJ2ZW5kb3JOYW1lcyIsImNhcE5hbWUiLCJ1cGRhdGVTdHlsZSIsIm9sZFN0YXRpY1N0eWxlIiwib2xkU3R5bGVCaW5kaW5nIiwibm9ybWFsaXplZFN0eWxlIiwib2xkU3R5bGUiLCJuZXdTdHlsZSIsImNoZWNrQ2hpbGQiLCJzdHlsZURhdGEiLCJnZXRTdHlsZSIsIndoaXRlc3BhY2VSRSIsImFkZENsYXNzIiwiY2xhc3NMaXN0IiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQ2xhc3MiLCJ0YXIiLCJyZXNvbHZlVHJhbnNpdGlvbiIsImF1dG9Dc3NUcmFuc2l0aW9uIiwiZW50ZXJDbGFzcyIsImVudGVyVG9DbGFzcyIsImVudGVyQWN0aXZlQ2xhc3MiLCJsZWF2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImhhc1RyYW5zaXRpb24iLCJUUkFOU0lUSU9OIiwiQU5JTUFUSU9OIiwidHJhbnNpdGlvblByb3AiLCJ0cmFuc2l0aW9uRW5kRXZlbnQiLCJhbmltYXRpb25Qcm9wIiwiYW5pbWF0aW9uRW5kRXZlbnQiLCJvbnRyYW5zaXRpb25lbmQiLCJvbndlYmtpdHRyYW5zaXRpb25lbmQiLCJvbmFuaW1hdGlvbmVuZCIsIm9ud2Via2l0YW5pbWF0aW9uZW5kIiwicmFmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJyZW1vdmVUcmFuc2l0aW9uQ2xhc3MiLCJ3aGVuVHJhbnNpdGlvbkVuZHMiLCJleHBlY3RlZFR5cGUiLCJnZXRUcmFuc2l0aW9uSW5mbyIsInByb3BDb3VudCIsImVuZGVkIiwiZW5kIiwib25FbmQiLCJ0cmFuc2Zvcm1SRSIsImdldENvbXB1dGVkU3R5bGUiLCJ0cmFuc2l0aW9uRGVsYXlzIiwidHJhbnNpdGlvbkR1cmF0aW9ucyIsInRyYW5zaXRpb25UaW1lb3V0IiwiZ2V0VGltZW91dCIsImFuaW1hdGlvbkRlbGF5cyIsImFuaW1hdGlvbkR1cmF0aW9ucyIsImFuaW1hdGlvblRpbWVvdXQiLCJoYXNUcmFuc2Zvcm0iLCJkZWxheXMiLCJkdXJhdGlvbnMiLCJ0b01zIiwiZW50ZXIiLCJ0b2dnbGVEaXNwbGF5IiwiX2xlYXZlQ2IiLCJjYW5jZWxsZWQiLCJ0cmFuc2l0aW9uIiwiX2VudGVyQ2IiLCJub2RlVHlwZSIsImFwcGVhckNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYmVmb3JlRW50ZXIiLCJhZnRlckVudGVyIiwiZW50ZXJDYW5jZWxsZWQiLCJiZWZvcmVBcHBlYXIiLCJhcHBlYXIiLCJhZnRlckFwcGVhciIsImFwcGVhckNhbmNlbGxlZCIsImR1cmF0aW9uIiwidHJhbnNpdGlvbk5vZGUiLCJpc0FwcGVhciIsInN0YXJ0Q2xhc3MiLCJhY3RpdmVDbGFzcyIsInRvQ2xhc3MiLCJiZWZvcmVFbnRlckhvb2siLCJlbnRlckhvb2siLCJhZnRlckVudGVySG9vayIsImVudGVyQ2FuY2VsbGVkSG9vayIsImV4cGxpY2l0RW50ZXJEdXJhdGlvbiIsImV4cGVjdHNDU1MiLCJ1c2VyV2FudHNDb250cm9sIiwiZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCIsInNob3ciLCJwZW5kaW5nTm9kZSIsIl9wZW5kaW5nIiwiaXNWYWxpZER1cmF0aW9uIiwibGVhdmUiLCJybSIsImJlZm9yZUxlYXZlIiwiYWZ0ZXJMZWF2ZSIsImxlYXZlQ2FuY2VsbGVkIiwiZGVsYXlMZWF2ZSIsImV4cGxpY2l0TGVhdmVEdXJhdGlvbiIsInBlcmZvcm1MZWF2ZSIsImludm9rZXJGbnMiLCJfZW50ZXIiLCJwYXRjaCIsImJhY2tlbmQiLCJyZW1vdmVOb2RlIiwiY3JlYXRlRWxtIiwiaW5zZXJ0ZWRWbm9kZVF1ZXVlIiwicGFyZW50RWxtIiwicmVmRWxtIiwibmVzdGVkIiwib3duZXJBcnJheSIsImlzUmVhY3RpdmF0ZWQiLCJpbml0Q29tcG9uZW50IiwiaW5uZXJOb2RlIiwiYWN0aXZhdGUiLCJyZWFjdGl2YXRlQ29tcG9uZW50Iiwic2V0U2NvcGUiLCJjcmVhdGVDaGlsZHJlbiIsImludm9rZUNyZWF0ZUhvb2tzIiwicGVuZGluZ0luc2VydCIsImlzUGF0Y2hhYmxlIiwicmVmJCQxIiwiYW5jZXN0b3IiLCJhZGRWbm9kZXMiLCJzdGFydElkeCIsImludm9rZURlc3Ryb3lIb29rIiwicmVtb3ZlVm5vZGVzIiwiY2giLCJyZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rIiwiY2hpbGRFbG0iLCJjcmVhdGVSbUNiIiwiZmluZElkeEluT2xkIiwib2xkQ2giLCJwYXRjaFZub2RlIiwicmVtb3ZlT25seSIsImh5ZHJhdGUiLCJuZXdDaCIsIm9sZEtleVRvSWR4IiwiaWR4SW5PbGQiLCJ2bm9kZVRvTW92ZSIsIm9sZFN0YXJ0SWR4IiwibmV3U3RhcnRJZHgiLCJvbGRFbmRJZHgiLCJvbGRTdGFydFZub2RlIiwib2xkRW5kVm5vZGUiLCJuZXdFbmRJZHgiLCJuZXdTdGFydFZub2RlIiwibmV3RW5kVm5vZGUiLCJjYW5Nb3ZlIiwidXBkYXRlQ2hpbGRyZW4iLCJwb3N0cGF0Y2giLCJpbnZva2VJbnNlcnRIb29rIiwiaW5pdGlhbCIsImlzUmVuZGVyZWRNb2R1bGUiLCJpblZQcmUiLCJoYXNDaGlsZE5vZGVzIiwiY2hpbGRyZW5NYXRjaCIsImZ1bGxJbnZva2UiLCJpc0luaXRpYWxQYXRjaCIsImlzUmVhbEVsZW1lbnQiLCJoYXNBdHRyaWJ1dGUiLCJvbGRFbG0iLCJwYXRjaGFibGUiLCJpJDIiLCJjcmVhdGVQYXRjaEZ1bmN0aW9uIiwidm1vZGVsIiwidHJpZ2dlciIsImRpcmVjdGl2ZSIsImJpbmRpbmciLCJfdk9wdGlvbnMiLCJzZXRTZWxlY3RlZCIsImdldFZhbHVlIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvbkVuZCIsInByZXZPcHRpb25zIiwiY3VyT3B0aW9ucyIsInNvbWUiLCJoYXNOb01hdGNoaW5nT3B0aW9uIiwiYWN0dWFsbHlTZXRTZWxlY3RlZCIsImlzTXVsdGlwbGUiLCJzZWxlY3RlZCIsIm9wdGlvbiIsInNlbGVjdGVkSW5kZXgiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwibG9jYXRlTm9kZSIsInBsYXRmb3JtRGlyZWN0aXZlcyIsInRyYW5zaXRpb24kJDEiLCJvcmlnaW5hbERpc3BsYXkiLCJfX3ZPcmlnaW5hbERpc3BsYXkiLCJkaXNwbGF5IiwidW5iaW5kIiwidHJhbnNpdGlvblByb3BzIiwiZ2V0UmVhbENoaWxkIiwiY29tcE9wdGlvbnMiLCJleHRyYWN0VHJhbnNpdGlvbkRhdGEiLCJwbGFjZWhvbGRlciIsImgiLCJyYXdDaGlsZCIsImlzTm90VGV4dE5vZGUiLCJpc1ZTaG93RGlyZWN0aXZlIiwiVHJhbnNpdGlvbiIsImhhc1BhcmVudFRyYW5zaXRpb24iLCJfbGVhdmluZyIsIm9sZFJhd0NoaWxkIiwib2xkQ2hpbGQiLCJpc1NhbWVDaGlsZCIsImRlbGF5ZWRMZWF2ZSIsIm1vdmVDbGFzcyIsImNhbGxQZW5kaW5nQ2JzIiwiX21vdmVDYiIsInJlY29yZFBvc2l0aW9uIiwibmV3UG9zIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYXBwbHlUcmFuc2xhdGlvbiIsIm9sZFBvcyIsInBvcyIsImR4IiwibGVmdCIsImR5IiwidG9wIiwibW92ZWQiLCJ0cmFuc2Zvcm0iLCJXZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJwbGF0Zm9ybUNvbXBvbmVudHMiLCJUcmFuc2l0aW9uR3JvdXAiLCJiZWZvcmVNb3VudCIsImtlcHQiLCJwcmV2Q2hpbGRyZW4iLCJyYXdDaGlsZHJlbiIsInRyYW5zaXRpb25EYXRhIiwicmVtb3ZlZCIsImMkMSIsInVwZGF0ZWQiLCJoYXNNb3ZlIiwiX3JlZmxvdyIsImJvZHkiLCJvZmZzZXRIZWlnaHQiLCJwcm9wZXJ0eU5hbWUiLCJfaGFzTW92ZSIsImNsb25lTm9kZSIsImF0dHIiLCJIVE1MVW5rbm93bkVsZW1lbnQiLCJIVE1MRWxlbWVudCIsInVwZGF0ZUNvbXBvbmVudCIsIm1vdW50Q29tcG9uZW50IiwicXVlcnkiLCJnIiwibG9jYWxzIiwiZGV2dG9vbEhvb2siLCJmb3JFYWNoVmFsdWUiLCJNb2R1bGUiLCJyYXdNb2R1bGUiLCJydW50aW1lIiwiX2NoaWxkcmVuIiwiX3Jhd01vZHVsZSIsInJhd1N0YXRlIiwic3RhdGUiLCJuYW1lc3BhY2VkIiwiYWRkQ2hpbGQiLCJnZXRDaGlsZCIsImFjdGlvbnMiLCJtdXRhdGlvbnMiLCJnZXR0ZXJzIiwiZm9yRWFjaENoaWxkIiwiZm9yRWFjaEdldHRlciIsImZvckVhY2hBY3Rpb24iLCJmb3JFYWNoTXV0YXRpb24iLCJNb2R1bGVDb2xsZWN0aW9uIiwicmF3Um9vdE1vZHVsZSIsInJlZ2lzdGVyIiwicmVkdWNlIiwicm9vdCIsImdldE5hbWVzcGFjZSIsInRhcmdldE1vZHVsZSIsIm5ld01vZHVsZSIsInJhd0NoaWxkTW9kdWxlIiwidW5yZWdpc3RlciIsIlN0b3JlIiwicGx1Z2lucyIsInN0cmljdCIsIl9jb21taXR0aW5nIiwiX2FjdGlvbnMiLCJfYWN0aW9uU3Vic2NyaWJlcnMiLCJfbXV0YXRpb25zIiwiX3dyYXBwZWRHZXR0ZXJzIiwiX21vZHVsZXMiLCJfbW9kdWxlc05hbWVzcGFjZU1hcCIsIl9zdWJzY3JpYmVycyIsIl93YXRjaGVyVk0iLCJzdG9yZSIsImRpc3BhdGNoIiwiY29tbWl0IiwicGF5bG9hZCIsImluc3RhbGxNb2R1bGUiLCJyZXNldFN0b3JlVk0iLCJfZGV2dG9vbEhvb2siLCJ0YXJnZXRTdGF0ZSIsInJlcGxhY2VTdGF0ZSIsInN1YnNjcmliZSIsIm11dGF0aW9uIiwiZGV2dG9vbFBsdWdpbiIsInByb3RvdHlwZUFjY2Vzc29ycyQxIiwiZ2VuZXJpY1N1YnNjcmliZSIsInJlc2V0U3RvcmUiLCJob3QiLCJvbGRWbSIsIl92bSIsIndyYXBwZWRHZXR0ZXJzIiwicGFydGlhbCIsIiQkc3RhdGUiLCJlbmFibGVTdHJpY3RNb2RlIiwiX3dpdGhDb21taXQiLCJyb290U3RhdGUiLCJpc1Jvb3QiLCJwYXJlbnRTdGF0ZSIsImdldE5lc3RlZFN0YXRlIiwibW9kdWxlTmFtZSIsImxvY2FsIiwibm9OYW1lc3BhY2UiLCJfdHlwZSIsIl9wYXlsb2FkIiwidW5pZnlPYmplY3RTdHlsZSIsImdldHRlcnNQcm94eSIsInNwbGl0UG9zIiwibG9jYWxUeXBlIiwibWFrZUxvY2FsR2V0dGVycyIsIm1ha2VMb2NhbENvbnRleHQiLCJyZWdpc3Rlck11dGF0aW9uIiwiYWN0aW9uIiwicm9vdEdldHRlcnMiLCJyZWdpc3RlckFjdGlvbiIsInJhd0dldHRlciIsInJlZ2lzdGVyR2V0dGVyIiwiX1Z1ZSIsImJlZm9yZUNyZWF0ZSIsInZ1ZXhJbml0IiwiJHN0b3JlIiwiYXBwbHlNaXhpbiIsImVudHJ5IiwiYWxsIiwiYWZ0ZXIiLCJzdWJzY3JpYmVBY3Rpb24iLCJyZWdpc3Rlck1vZHVsZSIsInByZXNlcnZlU3RhdGUiLCJ1bnJlZ2lzdGVyTW9kdWxlIiwiaG90VXBkYXRlIiwibmV3T3B0aW9ucyIsImNvbW1pdHRpbmciLCJtYXBTdGF0ZSIsIm5vcm1hbGl6ZU5hbWVzcGFjZSIsInN0YXRlcyIsIm5vcm1hbGl6ZU1hcCIsImdldE1vZHVsZUJ5TmFtZXNwYWNlIiwidnVleCIsIm1hcE11dGF0aW9ucyIsIm1hcEdldHRlcnMiLCJtYXBBY3Rpb25zIiwiaGVscGVyIiwiaW5kZXhfZXNtIiwiY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnMiLCJ1dGlscyIsImVuY29kZSIsInVybCIsInBhcmFtc1NlcmlhbGl6ZXIiLCJzZXJpYWxpemVkUGFyYW1zIiwidG9JU09TdHJpbmciLCJoYXNobWFya0luZGV4IiwiX19DQU5DRUxfXyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsIkNvbnRlbnQtVHlwZSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImhlYWRlcnMiLCJhZGFwdGVyIiwiZGVmYXVsdHMiLCJYTUxIdHRwUmVxdWVzdCIsInRyYW5zZm9ybVJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInBhcnNlIiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsInN0YXR1cyIsImNvbW1vbiIsIkFjY2VwdCIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5IiwidGl0bGUiLCJicm93c2VyIiwiYXJndiIsInZlcnNpb25zIiwiYWRkTGlzdGVuZXIiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJjd2QiLCJjaGRpciIsInVtYXNrIiwic2V0dGxlIiwiYnVpbGRVUkwiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0IiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJBdXRob3JpemF0aW9uIiwib3BlbiIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9uYWJvcnQiLCJvbmVycm9yIiwib250aW1lb3V0IiwiY29va2llcyIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInJlYWQiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwicHJvbWlzZSIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsImVuaGFuY2VFcnJvciIsIm1lc3NhZ2UiLCJjb2RlIiwiY29uZmlnMSIsImNvbmZpZzIiLCJDYW5jZWwiLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiaW5zdGFuY2UiLCJheGlvcyIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsInByb21pc2VzIiwic3ByZWFkIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaW50ZXJjZXB0b3JzIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwiZ2V0VXJpIiwiZWplY3QiLCJ0cmFuc2Zvcm1EYXRhIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJiYXNlVVJMIiwiaXNBeGlvc0Vycm9yIiwidG9KU09OIiwiZGVzY3JpcHRpb24iLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJzdGFjayIsImlnbm9yZUR1cGxpY2F0ZU9mIiwicGFyc2VkIiwibGluZSIsInN1YnN0ciIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJocmVmIiwicHJvdG9jb2wiLCJob3N0Iiwic2VhcmNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJsb2NhdGlvbiIsInJlcXVlc3RVUkwiLCJ3cml0ZSIsImV4cGlyZXMiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJ0b0dNVFN0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbGF0aXZlVVJMIiwiZXhlY3V0b3IiLCJUeXBlRXJyb3IiLCJyZXNvbHZlUHJvbWlzZSIsInRva2VuIiwic2NvcGUiLCJzZWxmIiwiVGltZW91dCIsImNsZWFyRm4iLCJfaWQiLCJfY2xlYXJGbiIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImNsb3NlIiwidW5yZWYiLCJlbnJvbGwiLCJtc2VjcyIsIl9pZGxlVGltZW91dElkIiwiX2lkbGVUaW1lb3V0IiwidW5lbnJvbGwiLCJfdW5yZWZBY3RpdmUiLCJfb25UaW1lb3V0IiwiY2xlYXJJbW1lZGlhdGUiLCJyZWdpc3RlckltbWVkaWF0ZSIsImh0bWwiLCJjaGFubmVsIiwibWVzc2FnZVByZWZpeCIsIm9uR2xvYmFsTWVzc2FnZSIsIm5leHRIYW5kbGUiLCJ0YXNrc0J5SGFuZGxlIiwiY3VycmVudGx5UnVubmluZ0FUYXNrIiwiZG9jIiwiYXR0YWNoVG8iLCJnZXRQcm90b3R5cGVPZiIsImhhbmRsZSIsInJ1bklmUHJlc2VudCIsInBvc3RNZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsInBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMiLCJvbGRPbk1lc3NhZ2UiLCJvbm1lc3NhZ2UiLCJjYW5Vc2VQb3N0TWVzc2FnZSIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDEiLCJwb3J0MiIsImRvY3VtZW50RWxlbWVudCIsInNjcmlwdCIsInJhbmRvbSIsImF0dGFjaEV2ZW50IiwidGFzayIsIl9ub2RlX21vZHVsZXNfdnVlX3N0eWxlX2xvYWRlcl9pbmRleF9qc19ub2RlX21vZHVsZXNfY3NzX2xvYWRlcl9kaXN0X2Nqc19qc19ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfbG9hZGVyc19zdHlsZVBvc3RMb2FkZXJfanNfbm9kZV9tb2R1bGVzX3Nhc3NfbG9hZGVyX2xpYl9sb2FkZXJfanNfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc19JbmRleFBhZ2VfdnVlX3Z1ZV90eXBlX3N0eWxlX2luZGV4XzBfbGFuZ19zY3NzX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX25vZGVfbW9kdWxlc192dWVfc3R5bGVfbG9hZGVyX2luZGV4X2pzX25vZGVfbW9kdWxlc19jc3NfbG9hZGVyX2Rpc3RfY2pzX2pzX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9sb2FkZXJzX3N0eWxlUG9zdExvYWRlcl9qc19ub2RlX21vZHVsZXNfc2Fzc19sb2FkZXJfbGliX2xvYWRlcl9qc19ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfaW5kZXhfanNfdnVlX2xvYWRlcl9vcHRpb25zX0xvZ2luUGFnZV92dWVfdnVlX3R5cGVfc3R5bGVfaW5kZXhfMF9sYW5nX3Njc3NfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfbm9kZV9tb2R1bGVzX3Z1ZV9zdHlsZV9sb2FkZXJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX2Nzc19sb2FkZXJfZGlzdF9janNfanNfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2xvYWRlcnNfc3R5bGVQb3N0TG9hZGVyX2pzX25vZGVfbW9kdWxlc19zYXNzX2xvYWRlcl9saWJfbG9hZGVyX2pzX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfQ3JlYXRlVHJhbnNsYXRpb25QYWdlX3Z1ZV92dWVfdHlwZV9zdHlsZV9pbmRleF8wX2xhbmdfc2Nzc19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9ub2RlX21vZHVsZXNfdnVlX3N0eWxlX2xvYWRlcl9pbmRleF9qc19ub2RlX21vZHVsZXNfY3NzX2xvYWRlcl9kaXN0X2Nqc19qc19ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfbG9hZGVyc19zdHlsZVBvc3RMb2FkZXJfanNfbm9kZV9tb2R1bGVzX3Nhc3NfbG9hZGVyX2xpYl9sb2FkZXJfanNfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc19SZWFkVHJhbnNsYXRpb25QYWdlX3Z1ZV92dWVfdHlwZV9zdHlsZV9pbmRleF8wX2xhbmdfc2Nzc19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9ub2RlX21vZHVsZXNfdnVlX3N0eWxlX2xvYWRlcl9pbmRleF9qc19ub2RlX21vZHVsZXNfY3NzX2xvYWRlcl9kaXN0X2Nqc19qc19ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfbG9hZGVyc19zdHlsZVBvc3RMb2FkZXJfanNfbm9kZV9tb2R1bGVzX3Nhc3NfbG9hZGVyX2xpYl9sb2FkZXJfanNfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc19VcGRhdGVUcmFuc2xhdGlvblBhZ2VfdnVlX3Z1ZV90eXBlX3N0eWxlX2luZGV4XzBfbGFuZ19zY3NzX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX25vZGVfbW9kdWxlc192dWVfc3R5bGVfbG9hZGVyX2luZGV4X2pzX25vZGVfbW9kdWxlc19jc3NfbG9hZGVyX2Rpc3RfY2pzX2pzX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9sb2FkZXJzX3N0eWxlUG9zdExvYWRlcl9qc19ub2RlX21vZHVsZXNfc2Fzc19sb2FkZXJfbGliX2xvYWRlcl9qc19ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfaW5kZXhfanNfdnVlX2xvYWRlcl9vcHRpb25zX1VwZGF0ZU5hdGl2ZVBhZ2VfdnVlX3Z1ZV90eXBlX3N0eWxlX2luZGV4XzBfbGFuZ19zY3NzX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiZ2V0VXJsIiwiX19fQ1NTX0xPQURFUl9VUkxfX18wX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfX18xX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfX18yX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfX18zX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfX180X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfX181X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfX182X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfX183X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfX184X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfX185X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfX18xMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX19fMTFfX18iLCJfX19DU1NfTE9BREVSX1VSTF9fXzEyX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfX18xM19fXyIsIl9fX0NTU19MT0FERVJfVVJMX19fMTRfX18iLCJfX19DU1NfTE9BREVSX1VSTF9fXzE1X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfX18xNl9fXyIsIl9fX0NTU19MT0FERVJfVVJMX19fMTdfX18iLCJfX19DU1NfTE9BREVSX1VSTF9fXzE4X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfX18xOV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX19fMjBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9fXzIxX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfX18yMl9fXyIsIl9fX0NTU19MT0FERVJfVVJMX19fMjNfX18iLCJfX19DU1NfTE9BREVSX1VSTF9fXzI0X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfX18yNV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX19fMjZfX18iLCJfX19DU1NfTE9BREVSX1VSTF9fXzI3X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfX18yOF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX19fMjlfX18iLCJfX19DU1NfTE9BREVSX1VSTF9fXzMwX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfX18zMV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX19fMzJfX18iLCJfX19DU1NfTE9BREVSX1VSTF9fXzMzX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfX18zNF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX19fMzVfX18iLCJfX19DU1NfTE9BREVSX1VSTF9fXzM2X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfX18zN19fXyIsIl9fX0NTU19MT0FERVJfVVJMX19fMzhfX18iLCJfX19DU1NfTE9BREVSX1VSTF9fXzM5X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfX180MF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX19fNDFfX18iLCJuZWVkUXVvdGVzIiwiX25vZGVfbW9kdWxlc192dWVfc3R5bGVfbG9hZGVyX2luZGV4X2pzX25vZGVfbW9kdWxlc19jc3NfbG9hZGVyX2Rpc3RfY2pzX2pzX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9sb2FkZXJzX3N0eWxlUG9zdExvYWRlcl9qc19ub2RlX21vZHVsZXNfc2Fzc19sb2FkZXJfbGliX2xvYWRlcl9qc19ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfaW5kZXhfanNfdnVlX2xvYWRlcl9vcHRpb25zX0FwcEhlYWRlcl92dWVfdnVlX3R5cGVfc3R5bGVfaW5kZXhfMF9sYW5nX3Njc3NfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfbm9kZV9tb2R1bGVzX3Z1ZV9zdHlsZV9sb2FkZXJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX2Nzc19sb2FkZXJfZGlzdF9janNfanNfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2xvYWRlcnNfc3R5bGVQb3N0TG9hZGVyX2pzX25vZGVfbW9kdWxlc19zYXNzX2xvYWRlcl9saWJfbG9hZGVyX2pzX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfTWFpbkxheW91dF92dWVfdnVlX3R5cGVfc3R5bGVfaW5kZXhfMF9sYW5nX3Njc3NfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJBcHB2dWVfdHlwZV90ZW1wbGF0ZV9pZF83YmE1YmQ5MF9yZW5kZXIiLCJfaCIsImxheW91dCIsIl93aXRoU3RyaXBwZWQiLCJub3JtYWxpemVDb21wb25lbnQiLCJzY3JpcHRFeHBvcnRzIiwiZnVuY3Rpb25hbFRlbXBsYXRlIiwiaW5qZWN0U3R5bGVzIiwibW9kdWxlSWRlbnRpZmllciIsInNoYWRvd01vZGUiLCJfX1ZVRV9TU1JfQ09OVEVYVF9fIiwiX3JlZ2lzdGVyZWRDb21wb25lbnRzIiwiX3NzclJlZ2lzdGVyIiwic2hhZG93Um9vdCIsIl9pbmplY3RTdHlsZXMiLCJvcmlnaW5hbFJlbmRlciIsIiRyb3V0ZSIsIm1ldGEiLCJfdGhpcyIsImF4aW9zX2RlZmF1bHQiLCJsb2ciLCIkcm91dGVyIiwiX19maWxlIiwiQXBwIiwiaXNFcnJvciIsIlZpZXciLCJyb3V0ZXJWaWV3Iiwicm91dGUiLCJfcm91dGVyVmlld0NhY2hlIiwiZGVwdGgiLCJpbmFjdGl2ZSIsIl9yb3V0ZXJSb290Iiwidm5vZGVEYXRhIiwicm91dGVyVmlld0RlcHRoIiwibWF0Y2hlZCIsInJlZ2lzdGVyUm91dGVJbnN0YW5jZSIsImluc3RhbmNlcyIsInByb3BzVG9QYXNzIiwicmVzb2x2ZVByb3BzIiwiZW5jb2RlUmVzZXJ2ZVJFIiwiZW5jb2RlUmVzZXJ2ZVJlcGxhY2VyIiwiY29tbWFSRSIsImRlY29kZSIsInBhcnNlUXVlcnkiLCJwYXJhbSIsInN0cmluZ2lmeVF1ZXJ5IiwidmFsMiIsIngiLCJ0cmFpbGluZ1NsYXNoUkUiLCJjcmVhdGVSb3V0ZSIsInJlY29yZCIsInJlZGlyZWN0ZWRGcm9tIiwicm91dGVyIiwic3RyaW5naWZ5UXVlcnkkJDEiLCJmdWxsUGF0aCIsImdldEZ1bGxQYXRoIiwiZm9ybWF0TWF0Y2giLCJTVEFSVCIsIl9zdHJpbmdpZnlRdWVyeSIsImlzU2FtZVJvdXRlIiwiaXNPYmplY3RFcXVhbCIsImFLZXlzIiwiYktleXMiLCJhVmFsIiwiYlZhbCIsInRvVHlwZXMiLCJldmVudFR5cGVzIiwiTGluayIsInJlcXVpcmVkIiwiZXhhY3QiLCJhcHBlbmQiLCJleGFjdEFjdGl2ZUNsYXNzIiwiY2xhc3NlcyIsImdsb2JhbEFjdGl2ZUNsYXNzIiwibGlua0FjdGl2ZUNsYXNzIiwiZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcyIsImxpbmtFeGFjdEFjdGl2ZUNsYXNzIiwiYWN0aXZlQ2xhc3NGYWxsYmFjayIsImV4YWN0QWN0aXZlQ2xhc3NGYWxsYmFjayIsImNvbXBhcmVUYXJnZXQiLCJxdWVyeUluY2x1ZGVzIiwiaXNJbmNsdWRlZFJvdXRlIiwiZ3VhcmRFdmVudCIsImNsaWNrIiwiZmluZEFuY2hvciIsIm1ldGFLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJkZWZhdWx0UHJldmVudGVkIiwiYnV0dG9uIiwicHJldmVudERlZmF1bHQiLCJyZXNvbHZlUGF0aCIsInJlbGF0aXZlIiwiZmlyc3RDaGFyIiwic2VnbWVudCIsImNsZWFuUGF0aCIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHBfMSIsInBhdGhUb1JlZ2V4cCIsInBhcnNlXzEiLCJjb21waWxlXzEiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9GdW5jdGlvbl8xIiwidG9rZW5zVG9SZWdFeHBfMSIsInRva2Vuc1RvUmVnRXhwIiwiUEFUSF9SRUdFWFAiLCJ0b2tlbnMiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXhlYyIsImVzY2FwZWQiLCJvZmZzZXQiLCJwcmVmaXgiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJyZXBlYXQiLCJvcHRpb25hbCIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwicHJldHR5IiwiYXR0YWNoS2V5cyIsInJlIiwiZmxhZ3MiLCJzZW5zaXRpdmUiLCJlbmRzV2l0aERlbGltaXRlciIsImdyb3VwcyIsInJlZ2V4cFRvUmVnZXhwIiwiYXJyYXlUb1JlZ2V4cCIsInN0cmluZ1RvUmVnZXhwIiwiY29tcGlsZSIsInJlZ2V4cENvbXBpbGVDYWNoZSIsImZpbGxQYXJhbXMiLCJyb3V0ZU1zZyIsImZpbGxlciIsInBhdGhNYXRjaCIsImNyZWF0ZVJvdXRlTWFwIiwicm91dGVzIiwib2xkUGF0aExpc3QiLCJvbGRQYXRoTWFwIiwib2xkTmFtZU1hcCIsInBhdGhMaXN0IiwicGF0aE1hcCIsIm5hbWVNYXAiLCJhZGRSb3V0ZVJlY29yZCIsIm1hdGNoQXMiLCJwYXRoVG9SZWdleHBPcHRpb25zIiwibm9ybWFsaXplZFBhdGgiLCJub3JtYWxpemVQYXRoIiwiY2FzZVNlbnNpdGl2ZSIsInJlZ2V4IiwiY29tcGlsZVJvdXRlUmVnZXgiLCJyZWRpcmVjdCIsImNoaWxkTWF0Y2hBcyIsImFsaWFzIiwiYWxpYXNlcyIsImFsaWFzUm91dGUiLCJub3JtYWxpemVMb2NhdGlvbiIsInJhd1BhdGgiLCJwYXJzZWRQYXRoIiwiaGFzaEluZGV4IiwicXVlcnlJbmRleCIsImJhc2VQYXRoIiwiZXh0cmFRdWVyeSIsIl9wYXJzZVF1ZXJ5IiwicGFyc2VkUXVlcnkiLCJyZXNvbHZlUXVlcnkiLCJjcmVhdGVNYXRjaGVyIiwiY3VycmVudFJvdXRlIiwiX2NyZWF0ZVJvdXRlIiwicGFyYW1OYW1lcyIsInJlY29yZCQxIiwibWF0Y2hSb3V0ZSIsIm9yaWdpbmFsUmVkaXJlY3QiLCJyZXNvbHZlUmVjb3JkUGF0aCIsImFsaWFzZWRNYXRjaCIsImFsaWFzZWRSZWNvcmQiLCJhZGRSb3V0ZXMiLCJwb3NpdGlvblN0b3JlIiwic2V0dXBTY3JvbGwiLCJwcm90b2NvbEFuZFBhdGgiLCJhYnNvbHV0ZVBhdGgiLCJoaXN0b3J5IiwiZ2V0U3RhdGVLZXkiLCJzYXZlU2Nyb2xsUG9zaXRpb24iLCJfa2V5IiwiaGFuZGxlU2Nyb2xsIiwiaXNQb3AiLCJhcHAiLCJiZWhhdmlvciIsInNjcm9sbEJlaGF2aW9yIiwicG9zaXRpb24iLCJnZXRTY3JvbGxQb3NpdGlvbiIsInNob3VsZFNjcm9sbCIsInNjcm9sbFRvUG9zaXRpb24iLCJwYWdlWE9mZnNldCIsInkiLCJwYWdlWU9mZnNldCIsImlzVmFsaWRQb3NpdGlvbiIsIm5vcm1hbGl6ZVBvc2l0aW9uIiwic2VsZWN0b3IiLCJkb2NSZWN0IiwiZWxSZWN0IiwiZ2V0RWxlbWVudFBvc2l0aW9uIiwic2Nyb2xsVG8iLCJ1YSIsInN1cHBvcnRzUHVzaFN0YXRlIiwiVGltZSIsImdlbktleSIsInRvRml4ZWQiLCJwdXNoU3RhdGUiLCJydW5RdWV1ZSIsInN0ZXAiLCJyZXNvbHZlQXN5bmNDb21wb25lbnRzIiwiaGFzQXN5bmMiLCJmbGF0TWFwQ29tcG9uZW50cyIsInJlc29sdmVkRGVmIiwibXNnIiwiZmxhdHRlbiIsIkhpc3RvcnkiLCJiYXNlRWwiLCJub3JtYWxpemVCYXNlIiwicmVhZHkiLCJyZWFkeUNicyIsInJlYWR5RXJyb3JDYnMiLCJlcnJvckNicyIsImV4dHJhY3RHdWFyZHMiLCJyZWNvcmRzIiwicmV2ZXJzZSIsImd1YXJkcyIsImd1YXJkIiwiZXh0cmFjdEd1YXJkIiwiYmluZEd1YXJkIiwibGlzdGVuIiwib25SZWFkeSIsImVycm9yQ2IiLCJvbkVycm9yIiwidHJhbnNpdGlvblRvIiwib25Db21wbGV0ZSIsIm9uQWJvcnQiLCJjb25maXJtVHJhbnNpdGlvbiIsInVwZGF0ZVJvdXRlIiwiZW5zdXJlVVJMIiwiYWN0aXZhdGVkIiwiZGVhY3RpdmF0ZWQiLCJyZXNvbHZlUXVldWUiLCJleHRyYWN0TGVhdmVHdWFyZHMiLCJiZWZvcmVIb29rcyIsImV4dHJhY3RVcGRhdGVIb29rcyIsInBvc3RFbnRlckNicyIsImlzVmFsaWQiLCJwb2xsIiwiYmluZEVudGVyR3VhcmQiLCJleHRyYWN0RW50ZXJHdWFyZHMiLCJyZXNvbHZlSG9va3MiLCJwcmV2IiwiYWZ0ZXJIb29rcyIsIkhUTUw1SGlzdG9yeSIsIkhpc3RvcnkkJDEiLCJleHBlY3RTY3JvbGwiLCJzdXBwb3J0c1Njcm9sbCIsImluaXRMb2NhdGlvbiIsImdldExvY2F0aW9uIiwiZ28iLCJmcm9tUm91dGUiLCJnZXRDdXJyZW50TG9jYXRpb24iLCJkZWNvZGVVUkkiLCJIYXNoSGlzdG9yeSIsImNoZWNrRmFsbGJhY2siLCJlbnN1cmVTbGFzaCIsInNldHVwTGlzdGVuZXJzIiwiZ2V0SGFzaCIsInJlcGxhY2VIYXNoIiwicHVzaEhhc2giLCJzZWFyY2hJbmRleCIsIkFic3RyYWN0SGlzdG9yeSIsInRhcmdldEluZGV4IiwiVnVlUm91dGVyIiwiYXBwcyIsIm1hdGNoZXIiLCJyZWdpc3Rlckhvb2siLCJzZXR1cEhhc2hMaXN0ZW5lciIsIl9yb3V0ZSIsImJlZm9yZUVhY2giLCJiZWZvcmVSZXNvbHZlIiwiYWZ0ZXJFYWNoIiwiYmFjayIsImZvcndhcmQiLCJnZXRNYXRjaGVkQ29tcG9uZW50cyIsImNyZWF0ZUhyZWYiLCJub3JtYWxpemVkVG8iLCJpbnN0YWxsZWQiLCJyZWdpc3Rlckluc3RhbmNlIiwiY2FsbFZhbCIsIl9yb3V0ZXIiLCJiZWZvcmVSb3V0ZUVudGVyIiwiYmVmb3JlUm91dGVMZWF2ZSIsImJlZm9yZVJvdXRlVXBkYXRlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInRva2VuX2V4cGlyZXMiLCJzZXNzaW9uIiwic2VjcmV0IiwiaXNBdXRoZW50aWNhdGVkIiwibG9nb3V0IiwiX3JlZiIsInJlbW92ZUl0ZW0iLCJsb2dpbiIsIl9yZWYyIiwiX3JlZjMiLCJzZXRJdGVtIiwicmVmcmVzaFRva2VuIiwiX3JlZjQiLCJzZXRUb2tlbiIsInJlbW92ZVRva2VuIiwiVnVleCIsImxvY2FsZSIsInNldExvY2FsZSIsImNoYW5nZUxvY2FsZSIsImdldExvY2FsZSIsIkF1dGhNb2R1bGUiLCJJbmRleFBhZ2V2dWVfdHlwZV90ZW1wbGF0ZV9pZF83ZTc2YWMwZF9yZW5kZXIiLCIkdCIsImNyZWF0ZUl0ZW0iLCJ0cmFuc2xhdGlvbnMiLCJuYXRpdmUiLCJsZXhpY29uIiwicGFyc2VEYXRlIiwicmVhZEl0ZW0iLCJ1cGRhdGVJdGVtIiwidXBkYXRlTmF0aXZlIiwicGFnZXNfSW5kZXhQYWdldnVlX3R5cGVfc2NyaXB0X2xhbmdfanNfIiwiaTE4biIsIm1lc3NhZ2VzIiwiZW4iLCJ0YWJsZSIsImFjdGlvbkNyZWF0ZSIsImVzIiwiZGUiLCJmciIsInB0LWJyIiwiaXQiLCJydSIsInVrIiwidHIiLCJ6aC10dyIsInpoLWNuIiwiY3VycmVudExvY2FsZSIsInRpbWVyIiwiZ2V0VHJhbnNsYXRpb25zIiwidW5peERhdGUiLCJ0aGVEYXRlIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwiX3RoaXMyIiwiYmVmb3JlRGVzdHJveSIsIkluZGV4UGFnZV9jb21wb25lbnQiLCJJbmRleFBhZ2UiLCJMb2dpblBhZ2V2dWVfdHlwZV90ZW1wbGF0ZV9pZF8xNmQ4ZWJhNF9yZW5kZXIiLCJzdWJtaXQiLCJjaGVja0Zvcm0iLCJlcnJvcnMiLCJmb3IiLCJmaWVsZHMiLCJhdXRvZm9jdXMiLCJpbnB1dCIsInBhZ2VzX0xvZ2luUGFnZXZ1ZV90eXBlX3NjcmlwdF9sYW5nX2pzXyIsImhlYWRsaW5lIiwic3ViSGVhZGxpbmUiLCJmb3JtIiwibG9naW5GaWVsZCIsInBhc3N3b3JkRmllbGQiLCJMb2dpblBhZ2VfY29tcG9uZW50IiwiTG9naW5QYWdlIiwiQ3JlYXRlVHJhbnNsYXRpb25QYWdldnVlX3R5cGVfdGVtcGxhdGVfaWRfMWQ4NzUyNzJfcmVuZGVyIiwibm90aWNlcyIsIm5vdGljZSIsImNyZWF0ZVRyYW5zbGF0aW9uIiwiY2hlY2tlZCIsIiQkYSIsIiQkZWwiLCIkJGMiLCIkJGkiLCJ0cmFuc2xhdGlvbl9DcmVhdGVUcmFuc2xhdGlvblBhZ2V2dWVfdHlwZV9zY3JpcHRfbGFuZ19qc18iLCJDcmVhdGVUcmFuc2xhdGlvblBhZ2VfY29tcG9uZW50IiwiQ3JlYXRlVHJhbnNsYXRpb25QYWdlIiwiUmVhZFRyYW5zbGF0aW9uUGFnZXZ1ZV90eXBlX3RlbXBsYXRlX2lkXzNlN2NmZDE4X3JlbmRlciIsInRyYW5zbGF0aW9uIiwidHJhbnNsYXRpb25fUmVhZFRyYW5zbGF0aW9uUGFnZXZ1ZV90eXBlX3NjcmlwdF9sYW5nX2pzXyIsIm5vdEF2YWlsYWJsZSIsImFjdGlvbk1vcmUiLCJSZWFkVHJhbnNsYXRpb25QYWdlX2NvbXBvbmVudCIsIlJlYWRUcmFuc2xhdGlvblBhZ2UiLCJVcGRhdGVUcmFuc2xhdGlvblBhZ2V2dWVfdHlwZV90ZW1wbGF0ZV9pZF8yNmI4MDU4NV9yZW5kZXIiLCJ1cGRhdGVUcmFuc2xhdGlvbiIsInRyYW5zbGF0aW9uX1VwZGF0ZVRyYW5zbGF0aW9uUGFnZXZ1ZV90eXBlX3NjcmlwdF9sYW5nX2pzXyIsIlVwZGF0ZVRyYW5zbGF0aW9uUGFnZV9jb21wb25lbnQiLCJVcGRhdGVUcmFuc2xhdGlvblBhZ2UiLCJVcGRhdGVOYXRpdmVQYWdldnVlX3R5cGVfdGVtcGxhdGVfaWRfOWQ4NTU2OWVfcmVuZGVyIiwidHJhbnNsYXRpb25fVXBkYXRlTmF0aXZlUGFnZXZ1ZV90eXBlX3NjcmlwdF9sYW5nX2pzXyIsIlVwZGF0ZU5hdGl2ZVBhZ2VfY29tcG9uZW50IiwiVXBkYXRlTmF0aXZlUGFnZSIsIlJvdXRlciIsImlmQXV0aGVudGljYXRlZCIsInJlcXVpcmVzQXV0aCIsIkNyZWF0ZSIsIlJlYWQiLCJVcGRhdGUiLCJOYXRpdmUiLCJudW1iZXJGb3JtYXRLZXlzIiwiT0JKRUNUX1NUUklORyIsImlzTnVsbCIsInBhcnNlQXJncyIsImxvb3NlQ2xvbmUiLCJvdXRwdXQiLCJfX2kxOG4iLCJWdWVJMThuIiwibG9jYWxlTWVzc2FnZXMiLCJyZXNvdXJjZSIsIm1lcmdlTG9jYWxlTWVzc2FnZSIsIl9pMThuIiwiX2kxOG5XYXRjaGVyIiwid2F0Y2hJMThuRGF0YSIsIiRpMThuIiwiZm9ybWF0dGVyIiwiZmFsbGJhY2tMb2NhbGUiLCJzaWxlbnRUcmFuc2xhdGlvbldhcm4iLCJzaWxlbnRGYWxsYmFja1dhcm4iLCJwbHVyYWxpemF0aW9uUnVsZXMiLCJwcmVzZXJ2ZURpcmVjdGl2ZUNvbnRlbnQiLCJsb2NhbGVNZXNzYWdlcyQxIiwic2hhcmVkTWVzc2FnZXMiLCJfbG9jYWxlV2F0Y2hlciIsIndhdGNoTG9jYWxlIiwic3Vic2NyaWJlRGF0YUNoYW5naW5nIiwiX3N1YnNjcmliaW5nIiwidW5zdWJzY3JpYmVEYXRhQ2hhbmdpbmciLCJkZXN0cm95Vk0iLCJpbnRlcnBvbGF0aW9uQ29tcG9uZW50IiwicGxhY2VzIiwiZXZlcnlQbGFjZSIsInBsYWNlIiwibnVtYmVyQ29tcG9uZW50IiwiZm9ybWF0IiwiYWNjIiwiaW5jbHVkZXMiLCJhc3NpZ24iLCJfbnRwIiwiYXNzZXJ0Iiwib2xkVk5vZGUiLCJfbG9jYWxlIiwibG9jYWxlRXF1YWwiLCJfbG9jYWxlTWVzc2FnZSIsImdldExvY2FsZU1lc3NhZ2UiLCJfdnQiLCJyZWYkMSIsInJlZiQyIiwiY2hvaWNlIiwicGFyc2VWYWx1ZSIsInRjIiwibWFrZVBhcmFtcyIsIl9nZXRNZXNzYWdlcyIsIiR0YyIsIl90YyIsIiR0ZSIsIl90ZSIsIiRkIiwiJG4iLCJCYXNlRm9ybWF0dGVyIiwiX2NhY2hlcyIsImludGVycG9sYXRlIiwiY2hhciIsImlzQ2xvc2VkIiwiUkVfVE9LRU5fTElTVF9WQUxVRSIsIlJFX1RPS0VOX05BTUVEX1ZBTFVFIiwiY29tcGlsZWQiLCJBUFBFTkQiLCJQVVNIIiwiSU5DX1NVQl9QQVRIX0RFUFRIIiwiUFVTSF9TVUJfUEFUSCIsIkJFRk9SRV9QQVRIIiwiSU5fU1VCX1BBVEgiLCJJTl9TSU5HTEVfUVVPVEUiLCJJTl9ET1VCTEVfUVVPVEUiLCJBRlRFUl9QQVRIIiwiRVJST1IiLCJwYXRoU3RhdGVNYWNoaW5lIiwid3MiLCJpZGVudCIsIlsiLCJlb2YiLCIuIiwiMCIsIiciLCJcIiIsIl0iLCJlbHNlIiwibGl0ZXJhbFZhbHVlUkUiLCJnZXRQYXRoQ2hhclR5cGUiLCJmb3JtYXRTdWJQYXRoIiwiZXhwIiwidHJpbW1lZCIsIkkxOG5QYXRoIiwiX2NhY2hlIiwiaGl0IiwibmV3Q2hhciIsInR5cGVNYXAiLCJzdWJQYXRoRGVwdGgiLCJtYXliZVVuZXNjYXBlUXVvdGUiLCJuZXh0Q2hhciIsInBhcnNlJDEiLCJnZXRQYXRoVmFsdWUiLCJwYXRocyIsImF2YWlsYWJpbGl0aWVzIiwiaHRtbFRhZ01hdGNoZXIiLCJsaW5rS2V5TWF0Y2hlciIsImxpbmtLZXlQcmVmaXhNYXRjaGVyIiwiYnJhY2tldHNNYXRjaGVyIiwiZm9ybWF0dGVycyIsInVwcGVyIiwidG9Mb2NhbGVVcHBlckNhc2UiLCJsb3dlciIsInRvTG9jYWxlTG93ZXJDYXNlIiwiZGVmYXVsdEZvcm1hdHRlciIsImRhdGVUaW1lRm9ybWF0cyIsIm51bWJlckZvcm1hdHMiLCJfZm9ybWF0dGVyIiwiX21pc3NpbmciLCJtaXNzaW5nIiwiX3Jvb3QiLCJfc3luYyIsIl9mYWxsYmFja1Jvb3QiLCJmYWxsYmFja1Jvb3QiLCJfc2lsZW50VHJhbnNsYXRpb25XYXJuIiwiX3NpbGVudEZhbGxiYWNrV2FybiIsIl9kYXRlVGltZUZvcm1hdHRlcnMiLCJfbnVtYmVyRm9ybWF0dGVycyIsIl9wYXRoIiwiX2RhdGFMaXN0ZW5lcnMiLCJfcHJlc2VydmVEaXJlY3RpdmVDb250ZW50IiwiX3dhcm5IdG1sSW5NZXNzYWdlIiwid2Fybkh0bWxJbk1lc3NhZ2UiLCJfZXhpc3QiLCJfY2hlY2tMb2NhbGVNZXNzYWdlIiwiX2luaXRWTSIsImF2YWlsYWJsZUxvY2FsZXMiLCJsZXZlbCIsIl9nZXREYXRlVGltZUZvcm1hdHMiLCJfZ2V0TnVtYmVyRm9ybWF0cyIsIm9yZ0xldmVsIiwiX3dhcm5EZWZhdWx0IiwibWlzc2luZ1JldCIsIl9pc0ZhbGxiYWNrUm9vdCIsIl9pc1NpbGVudEZhbGxiYWNrIiwiX2ludGVycG9sYXRlIiwiaW50ZXJwb2xhdGVNb2RlIiwidmlzaXRlZExpbmtTdGFjayIsInBhdGhSZXQiLCJfbGluayIsImlkeCIsImxpbmsiLCJsaW5rS2V5UHJlZml4TWF0Y2hlcyIsImxpbmtQcmVmaXgiLCJmb3JtYXR0ZXJOYW1lIiwibGlua1BsYWNlaG9sZGVyIiwidHJhbnNsYXRlZCIsIl90cmFuc2xhdGUiLCJwYXJzZWRBcmdzIiwicHJlZGVmaW5lZCIsImNvdW50IiwiZmV0Y2hDaG9pY2UiLCJjaG9pY2VzIiwiZ2V0Q2hvaWNlSW5kZXgiLCJjaG9pY2VzTGVuZ3RoIiwiX2Nob2ljZSIsIl9jaG9pY2VzTGVuZ3RoIiwiYWJzIiwibWluIiwidGUiLCJzZXRMb2NhbGVNZXNzYWdlIiwiZ2V0RGF0ZVRpbWVGb3JtYXQiLCJzZXREYXRlVGltZUZvcm1hdCIsIm1lcmdlRGF0ZVRpbWVGb3JtYXQiLCJfbG9jYWxpemVEYXRlVGltZSIsImZvcm1hdHMiLCJJbnRsIiwiRGF0ZVRpbWVGb3JtYXQiLCJnZXROdW1iZXJGb3JtYXQiLCJzZXROdW1iZXJGb3JtYXQiLCJtZXJnZU51bWJlckZvcm1hdCIsIl9nZXROdW1iZXJGb3JtYXR0ZXIiLCJOdW1iZXJGb3JtYXQiLCJudW1iZXJGb3JtYXQiLCJmb3JtYXRUb1BhcnRzIiwiaW50bERlZmluZWQiLCJkYXRlVGltZUZvcm1hdCIsIk1haW5MYXlvdXR2dWVfdHlwZV90ZW1wbGF0ZV9pZF8xOGNhMjBjMl9yZW5kZXIiLCJBcHBIZWFkZXJ2dWVfdHlwZV90ZW1wbGF0ZV9pZF9iYjUwYTVlNF9yZW5kZXIiLCJpc0F1dGgiLCJsb2dPdXQiLCJBcHBIZWFkZXJ2dWVfdHlwZV90ZW1wbGF0ZV9pZF9iYjUwYTVlNF9zdGF0aWNSZW5kZXJGbnMiLCJhbHQiLCJMYW5ndWFnZUNvbnRyb2x2dWVfdHlwZV90ZW1wbGF0ZV9pZF80M2RjYzY2NV9yZW5kZXIiLCJoYXNMYW5ndWFnZXMiLCIkJHNlbGVjdGVkVmFsIiwiaGFuZGxlU2VsZWN0TGFuZyIsImxhbmd1YWdlcyIsIkxhbmd1YWdlQ29udHJvbF9jb21wb25lbnQiLCJjdXJyZW50TGFuZyIsImZpbmQiLCJjb21wb25lbnRzX0FwcEhlYWRlcnZ1ZV90eXBlX3NjcmlwdF9sYW5nX2pzXyIsImxhbmdDb250cm9sIiwiQXBwSGVhZGVyX2NvbXBvbmVudCIsImxheW91dHNfTWFpbkxheW91dHZ1ZV90eXBlX3NjcmlwdF9sYW5nX2pzXyIsImFwcEhlYWRlciIsIk1haW5MYXlvdXRfY29tcG9uZW50IiwiTWFpbkxheW91dCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLFlBQUEsQ0FBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURtQixPQUFBLEtBUWpEckIsRUFBQXNCLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElBQUFGLEVBQUFyQixFQUFBcUIsSUFDQSxFQUFBRSxFQUFBLE9BQUFGLEVBQ0EsS0FBQUUsR0FBQSxpQkFBQUYsUUFBQUcsV0FBQSxPQUFBSCxFQUNBLElBQUFJLEVBQUFYLE9BQUFZLE9BQUEsTUFHQSxHQUZBMUIsRUFBQWtCLEVBQUFPLEdBQ0FYLE9BQUFDLGVBQUFVLEVBQUEsV0FBeUNULFlBQUEsRUFBQUssVUFDekMsRUFBQUUsR0FBQSxpQkFBQUYsRUFBQSxRQUFBTSxLQUFBTixFQUFBckIsRUFBQVUsRUFBQWUsRUFBQUUsRUFBQSxTQUFBQSxHQUFnSCxPQUFBTixFQUFBTSxJQUFxQkMsS0FBQSxLQUFBRCxJQUNySSxPQUFBRixHQUlBekIsRUFBQTZCLEVBQUEsU0FBQTFCLEdBQ0EsSUFBQVMsRUFBQVQsS0FBQXFCLFdBQ0EsV0FBMkIsT0FBQXJCLEVBQUEsU0FDM0IsV0FBaUMsT0FBQUEsR0FFakMsT0FEQUgsRUFBQVUsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBWixFQUFBYSxFQUFBLFNBQUFpQixFQUFBQyxHQUFzRCxPQUFBakIsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBdUIsRUFBQUMsSUFHdEQvQixFQUFBa0MsRUFBQSxlQUlBbEMsSUFBQW1DLEVBQUEsdUJDbEZBaEMsRUFBT0QsUUFBVWtDLEVBQVEsa0NDRXpCLElBQUlSLEVBQU9RLEVBQVEsSUFDZkMsRUFBV0QsRUFBUSxJQU1uQkUsRUFBV3hCLE9BQU9rQixVQUFVTSxTQVFoQyxTQUFTQyxFQUFRQyxHQUNmLE1BQThCLG1CQUF2QkYsRUFBUy9CLEtBQUtpQyxHQTJFdkIsU0FBU0MsRUFBU0QsR0FDaEIsT0FBZSxPQUFSQSxHQUErQixpQkFBUkEsRUF1Q2hDLFNBQVNFLEVBQVdGLEdBQ2xCLE1BQThCLHNCQUF2QkYsRUFBUy9CLEtBQUtpQyxHQXdFdkIsU0FBU0csRUFBUUMsRUFBS0MsR0FFcEIsR0FBSUQsUUFVSixHQUxtQixpQkFBUkEsSUFFVEEsRUFBTSxDQUFDQSxJQUdMTCxFQUFRSyxHQUVWLElBQUssSUFBSXhDLEVBQUksRUFBR0MsRUFBSXVDLEVBQUlFLE9BQVExQyxFQUFJQyxFQUFHRCxJQUNyQ3lDLEVBQUd0QyxLQUFLLEtBQU1xQyxFQUFJeEMsR0FBSUEsRUFBR3dDLFFBSTNCLElBQUssSUFBSWpCLEtBQU9pQixFQUNWOUIsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLcUMsRUFBS2pCLElBQzVDa0IsRUFBR3RDLEtBQUssS0FBTXFDLEVBQUlqQixHQUFNQSxFQUFLaUIsR0FvRnJDekMsRUFBT0QsUUFBVSxDQUNmcUMsUUFBU0EsRUFDVFEsY0E5UkYsU0FBdUJQLEdBQ3JCLE1BQThCLHlCQUF2QkYsRUFBUy9CLEtBQUtpQyxJQThSckJILFNBQVVBLEVBQ1ZXLFdBdFJGLFNBQW9CUixHQUNsQixNQUE0QixvQkFBYlMsVUFBOEJULGFBQWVTLFVBc1I1REMsa0JBN1FGLFNBQTJCVixHQU96QixNQUw0QixvQkFBaEJXLGFBQWlDQSxZQUFZQyxPQUM5Q0QsWUFBWUMsT0FBT1osR0FFbEJBLEdBQVNBLEVBQUlhLFFBQVliLEVBQUlhLGtCQUFrQkYsYUF5UTNERyxTQTlQRixTQUFrQmQsR0FDaEIsTUFBc0IsaUJBQVJBLEdBOFBkZSxTQXJQRixTQUFrQmYsR0FDaEIsTUFBc0IsaUJBQVJBLEdBcVBkQyxTQUFVQSxFQUNWZSxZQTdPRixTQUFxQmhCLEdBQ25CLFlBQXNCLElBQVJBLEdBNk9kaUIsT0ExTkYsU0FBZ0JqQixHQUNkLE1BQThCLGtCQUF2QkYsRUFBUy9CLEtBQUtpQyxJQTBOckJrQixPQWpORixTQUFnQmxCLEdBQ2QsTUFBOEIsa0JBQXZCRixFQUFTL0IsS0FBS2lDLElBaU5yQm1CLE9BeE1GLFNBQWdCbkIsR0FDZCxNQUE4QixrQkFBdkJGLEVBQVMvQixLQUFLaUMsSUF3TXJCRSxXQUFZQSxFQUNaa0IsU0F0TEYsU0FBa0JwQixHQUNoQixPQUFPQyxFQUFTRCxJQUFRRSxFQUFXRixFQUFJcUIsT0FzTHZDQyxrQkE3S0YsU0FBMkJ0QixHQUN6QixNQUFrQyxvQkFBcEJ1QixpQkFBbUN2QixhQUFldUIsaUJBNktoRUMscUJBakpGLFdBQ0UsT0FBeUIsb0JBQWRDLFdBQW9ELGdCQUF0QkEsVUFBVUMsU0FDWSxpQkFBdEJELFVBQVVDLFNBQ1ksT0FBdEJELFVBQVVDLFVBSS9CLG9CQUFYQyxRQUNhLG9CQUFiQyxVQTBJVHpCLFFBQVNBLEVBQ1QwQixNQS9FRixTQUFTQSxJQUNQLElBQUlDLEVBQVMsR0FDYixTQUFTQyxFQUFZL0IsRUFBS2IsR0FDRyxpQkFBaEIyQyxFQUFPM0MsSUFBb0MsaUJBQVJhLEVBQzVDOEIsRUFBTzNDLEdBQU8wQyxFQUFNQyxFQUFPM0MsR0FBTWEsR0FFakM4QixFQUFPM0MsR0FBT2EsRUFJbEIsSUFBSyxJQUFJcEMsRUFBSSxFQUFHQyxFQUFJbUUsVUFBVTFCLE9BQVExQyxFQUFJQyxFQUFHRCxJQUMzQ3VDLEVBQVE2QixVQUFVcEUsR0FBSW1FLEdBRXhCLE9BQU9ELEdBbUVQRyxVQXhERixTQUFTQSxJQUNQLElBQUlILEVBQVMsR0FDYixTQUFTQyxFQUFZL0IsRUFBS2IsR0FDRyxpQkFBaEIyQyxFQUFPM0MsSUFBb0MsaUJBQVJhLEVBQzVDOEIsRUFBTzNDLEdBQU84QyxFQUFVSCxFQUFPM0MsR0FBTWEsR0FFckM4QixFQUFPM0MsR0FEaUIsaUJBQVJhLEVBQ0ZpQyxFQUFVLEdBQUlqQyxHQUVkQSxFQUlsQixJQUFLLElBQUlwQyxFQUFJLEVBQUdDLEVBQUltRSxVQUFVMUIsT0FBUTFDLEVBQUlDLEVBQUdELElBQzNDdUMsRUFBUTZCLFVBQVVwRSxHQUFJbUUsR0FFeEIsT0FBT0QsR0EwQ1BJLE9BL0JGLFNBQWdCQyxFQUFHQyxFQUFHQyxHQVFwQixPQVBBbEMsRUFBUWlDLEVBQUcsU0FBcUJwQyxFQUFLYixHQUVqQ2dELEVBQUVoRCxHQURBa0QsR0FBMEIsbUJBQVJyQyxFQUNYWixFQUFLWSxFQUFLcUMsR0FFVnJDLElBR05tQyxHQXdCUEcsS0F6S0YsU0FBY0MsR0FDWixPQUFPQSxFQUFJQyxRQUFRLE9BQVEsSUFBSUEsUUFBUSxPQUFRLG9DQzVKakQ3RSxFQUFPRCxRQUFVLFNBQVUrRSxHQUN6QixJQUFJQyxFQUFPLEdBbURYLE9BakRBQSxFQUFLNUMsU0FBVyxXQUNkLE9BQU82QyxLQUFLQyxJQUFJLFNBQVVDLEdBQ3hCLElBQUlDLEVBa0RWLFNBQWdDRCxFQUFNSixHQUNwQyxJQUFJSyxFQUFVRCxFQUFLLElBQU0sR0FFckJFLEVBQWFGLEVBQUssR0FFdEIsSUFBS0UsRUFDSCxPQUFPRCxFQUdULEdBQUlMLEdBQWdDLG1CQUFUTyxLQUFxQixDQUM5QyxJQUFJQyxHQVdXQyxFQVhlSCxFQWE1QkksRUFBU0gsS0FBS0ksU0FBU0MsbUJBQW1CQyxLQUFLQyxVQUFVTCxNQUN6RE0sRUFBTywrREFBK0RDLE9BQU9OLEdBQzFFLE9BQU9NLE9BQU9ELEVBQU0sUUFkckJFLEVBQWFYLEVBQVdZLFFBQVFmLElBQUksU0FBVWdCLEdBQ2hELE1BQU8saUJBQWlCSCxPQUFPVixFQUFXYyxZQUFZSixPQUFPRyxFQUFRLFNBRXZFLE1BQU8sQ0FBQ2QsR0FBU1csT0FBT0MsR0FBWUQsT0FBTyxDQUFDUixJQUFnQmEsS0FBSyxNQU9yRSxJQUFtQlosRUFFYkMsRUFDQUssRUFQSixNQUFPLENBQUNWLEdBQVNnQixLQUFLLE1BbkVKQyxDQUF1QmxCLEVBQU1KLEdBRTNDLE9BQUlJLEVBQUssR0FDQSxVQUFVWSxPQUFPWixFQUFLLEdBQUksS0FBS1ksT0FBT1gsRUFBUyxLQUdqREEsSUFDTmdCLEtBQUssS0FLVnBCLEVBQUs5RSxFQUFJLFNBQVVFLEVBQVNrRyxHQUNILGlCQUFabEcsSUFFVEEsRUFBVSxDQUFDLENBQUMsS0FBTUEsRUFBUyxNQUs3QixJQUZBLElBQUltRyxFQUF5QixHQUVwQnJHLEVBQUksRUFBR0EsRUFBSStFLEtBQUtyQyxPQUFRMUMsSUFBSyxDQUVwQyxJQUFJc0csRUFBS3ZCLEtBQUsvRSxHQUFHLEdBRVAsTUFBTnNHLElBQ0ZELEVBQXVCQyxJQUFNLEdBSWpDLElBQUssSUFBSUMsRUFBSyxFQUFHQSxFQUFLckcsRUFBUXdDLE9BQVE2RCxJQUFNLENBQzFDLElBQUl0QixFQUFPL0UsRUFBUXFHLEdBS0osTUFBWHRCLEVBQUssSUFBZW9CLEVBQXVCcEIsRUFBSyxNQUM5Q21CLElBQWVuQixFQUFLLEdBQ3RCQSxFQUFLLEdBQUttQixFQUNEQSxJQUNUbkIsRUFBSyxHQUFLLElBQUlZLE9BQU9aLEVBQUssR0FBSSxXQUFXWSxPQUFPTyxFQUFZLE1BRzlEdEIsRUFBSzBCLEtBQUt2QixNQUtUSCxpQ0N4RE0sU0FBUzJCLEVBQWNDLEVBQVU1QixHQUc5QyxJQUZBLElBQUk2QixFQUFTLEdBQ1RDLEVBQVksR0FDUDVHLEVBQUksRUFBR0EsRUFBSThFLEVBQUtwQyxPQUFRMUMsSUFBSyxDQUNwQyxJQUFJaUYsRUFBT0gsRUFBSzlFLEdBQ1pzRyxFQUFLckIsRUFBSyxHQUlWNEIsRUFBTyxDQUNUUCxHQUFJSSxFQUFXLElBQU0xRyxFQUNyQjhHLElBTFE3QixFQUFLLEdBTWI4QixNQUxVOUIsRUFBSyxHQU1mSyxVQUxjTCxFQUFLLElBT2hCMkIsRUFBVU4sR0FHYk0sRUFBVU4sR0FBSVUsTUFBTVIsS0FBS0ssR0FGekJGLEVBQU9ILEtBQUtJLEVBQVVOLEdBQU0sQ0FBRUEsR0FBSUEsRUFBSVUsTUFBTyxDQUFDSCxLQUtsRCxPQUFPRixTQ3pCVC9HLEVBQUFVLEVBQUEyRyxFQUFBLDRCQUFBQyxJQVFBLElBQUFDLEVBQUEsb0JBQUFuRCxTQUVBLHVCQUFBb0QsZUFDQUQsRUFDQSxVQUFBRSxNQUNBLDJKQWtCQSxJQUFBQyxFQUFBLEdBUUFDLEVBQUFKLElBQUFuRCxTQUFBdUQsTUFBQXZELFNBQUF3RCxxQkFBQSxZQUNBQyxFQUFBLEtBQ0FDLEVBQUEsRUFDQUMsR0FBQSxFQUNBQyxFQUFBLGFBQ0FDLEVBQUEsS0FDQUMsRUFBQSxrQkFJQUMsRUFBQSxvQkFBQWxFLFdBQUEsZUFBQW1FLEtBQUFuRSxVQUFBb0UsVUFBQUMsZUFFZSxTQUFBaEIsRUFBQVIsRUFBQTVCLEVBQUFxRCxFQUFBQyxHQUNmVCxFQUFBUSxFQUVBTixFQUFBTyxHQUFBLEdBRUEsSUFBQXpCLEVBQWVGLEVBQVlDLEVBQUE1QixHQUczQixPQUZBdUQsRUFBQTFCLEdBRUEsU0FBQTJCLEdBRUEsSUFEQSxJQUFBQyxFQUFBLEdBQ0F2SSxFQUFBLEVBQW1CQSxFQUFBMkcsRUFBQWpFLE9BQW1CMUMsSUFBQSxDQUN0QyxJQUFBaUYsRUFBQTBCLEVBQUEzRyxJQUNBd0ksRUFBQWxCLEVBQUFyQyxFQUFBcUIsS0FDQW1DLE9BQ0FGLEVBQUEvQixLQUFBZ0MsR0FFQUYsRUFFQUQsRUFEQTFCLEVBQWVGLEVBQVlDLEVBQUE0QixJQUczQjNCLEVBQUEsR0FFQSxJQUFBM0csRUFBQSxFQUFtQkEsRUFBQXVJLEVBQUE3RixPQUFzQjFDLElBQUEsQ0FDekMsSUFBQXdJLEVBQ0EsUUFEQUEsRUFBQUQsRUFBQXZJLElBQ0F5SSxLQUFBLENBQ0EsUUFBQUMsRUFBQSxFQUF1QkEsRUFBQUYsRUFBQXhCLE1BQUF0RSxPQUEyQmdHLElBQ2xERixFQUFBeEIsTUFBQTBCLFlBRUFwQixFQUFBa0IsRUFBQWxDLE9BTUEsU0FBQStCLEVBQUExQixHQUNBLFFBQUEzRyxFQUFBLEVBQWlCQSxFQUFBMkcsRUFBQWpFLE9BQW1CMUMsSUFBQSxDQUNwQyxJQUFBaUYsRUFBQTBCLEVBQUEzRyxHQUNBd0ksRUFBQWxCLEVBQUFyQyxFQUFBcUIsSUFDQSxHQUFBa0MsRUFBQSxDQUNBQSxFQUFBQyxPQUNBLFFBQUFDLEVBQUEsRUFBcUJBLEVBQUFGLEVBQUF4QixNQUFBdEUsT0FBMkJnRyxJQUNoREYsRUFBQXhCLE1BQUEwQixHQUFBekQsRUFBQStCLE1BQUEwQixJQUVBLEtBQVlBLEVBQUF6RCxFQUFBK0IsTUFBQXRFLE9BQXVCZ0csSUFDbkNGLEVBQUF4QixNQUFBUixLQUFBbUMsRUFBQTFELEVBQUErQixNQUFBMEIsS0FFQUYsRUFBQXhCLE1BQUF0RSxPQUFBdUMsRUFBQStCLE1BQUF0RSxTQUNBOEYsRUFBQXhCLE1BQUF0RSxPQUFBdUMsRUFBQStCLE1BQUF0RSxZQUVLLENBQ0wsSUFBQXNFLEVBQUEsR0FDQSxJQUFBMEIsRUFBQSxFQUFxQkEsRUFBQXpELEVBQUErQixNQUFBdEUsT0FBdUJnRyxJQUM1QzFCLEVBQUFSLEtBQUFtQyxFQUFBMUQsRUFBQStCLE1BQUEwQixLQUVBcEIsRUFBQXJDLEVBQUFxQixJQUFBLENBQThCQSxHQUFBckIsRUFBQXFCLEdBQUFtQyxLQUFBLEVBQUF6QixXQUs5QixTQUFBNEIsSUFDQSxJQUFBQyxFQUFBN0UsU0FBQThFLGNBQUEsU0FHQSxPQUZBRCxFQUFBRSxLQUFBLFdBQ0F4QixFQUFBeUIsWUFBQUgsR0FDQUEsRUFHQSxTQUFBRixFQUFBbkcsR0FDQSxJQUFBeUcsRUFBQUMsRUFDQUwsRUFBQTdFLFNBQUFtRixjQUFBLFNBQUFyQixFQUFBLE1BQUF0RixFQUFBOEQsR0FBQSxNQUVBLEdBQUF1QyxFQUFBLENBQ0EsR0FBQWxCLEVBR0EsT0FBQUMsRUFPQWlCLEVBQUFPLFdBQUFDLFlBQUFSLEdBSUEsR0FBQWQsRUFBQSxDQUVBLElBQUF1QixFQUFBNUIsSUFDQW1CLEVBQUFwQixNQUFBbUIsS0FDQUssRUFBQU0sRUFBQS9ILEtBQUEsS0FBQXFILEVBQUFTLEdBQUEsR0FDQUosRUFBQUssRUFBQS9ILEtBQUEsS0FBQXFILEVBQUFTLEdBQUEsUUFHQVQsRUFBQUQsSUFDQUssRUFnREEsU0FBQUosRUFBQXJHLEdBQ0EsSUFBQXNFLEVBQUF0RSxFQUFBc0UsSUFDQUMsRUFBQXZFLEVBQUF1RSxNQUNBekIsRUFBQTlDLEVBQUE4QyxVQUVBeUIsR0FDQThCLEVBQUFXLGFBQUEsUUFBQXpDLEdBRUFjLEVBQUE0QixPQUNBWixFQUFBVyxhQUFBMUIsRUFBQXRGLEVBQUE4RCxJQUdBaEIsSUFHQXdCLEdBQUEsbUJBQUF4QixFQUFBUyxRQUFBLFNBRUFlLEdBQUEsdURBQXlEMUIsS0FBQUksU0FBQUMsbUJBQUFDLEtBQUFDLFVBQUFMLE1BQUEsT0FHekQsR0FBQXVELEVBQUFhLFdBQ0FiLEVBQUFhLFdBQUFDLFFBQUE3QyxNQUNHLENBQ0gsS0FBQStCLEVBQUFlLFlBQ0FmLEVBQUFRLFlBQUFSLEVBQUFlLFlBRUFmLEVBQUFHLFlBQUFoRixTQUFBNkYsZUFBQS9DLE1BMUVBdEYsS0FBQSxLQUFBcUgsR0FDQUssRUFBQSxXQUNBTCxFQUFBTyxXQUFBQyxZQUFBUixJQU1BLE9BRkFJLEVBQUF6RyxHQUVBLFNBQUFzSCxHQUNBLEdBQUFBLEVBQUEsQ0FDQSxHQUFBQSxFQUFBaEQsTUFBQXRFLEVBQUFzRSxLQUNBZ0QsRUFBQS9DLFFBQUF2RSxFQUFBdUUsT0FDQStDLEVBQUF4RSxZQUFBOUMsRUFBQThDLFVBQ0EsT0FFQTJELEVBQUF6RyxFQUFBc0gsUUFFQVosS0FLQSxJQUNBYSxFQURBQyxHQUNBRCxFQUFBLEdBRUEsU0FBQUUsRUFBQUMsR0FFQSxPQURBSCxFQUFBRSxHQUFBQyxFQUNBSCxFQUFBSSxPQUFBQyxTQUFBbEUsS0FBQSxRQUlBLFNBQUFxRCxFQUFBVixFQUFBb0IsRUFBQWYsRUFBQTFHLEdBQ0EsSUFBQXNFLEVBQUFvQyxFQUFBLEdBQUExRyxFQUFBc0UsSUFFQSxHQUFBK0IsRUFBQWEsV0FDQWIsRUFBQWEsV0FBQUMsUUFBQUssRUFBQUMsRUFBQW5ELE9BQ0csQ0FDSCxJQUFBdUQsRUFBQXJHLFNBQUE2RixlQUFBL0MsR0FDQXdELEVBQUF6QixFQUFBeUIsV0FDQUEsRUFBQUwsSUFBQXBCLEVBQUFRLFlBQUFpQixFQUFBTCxJQUNBSyxFQUFBNUgsT0FDQW1HLEVBQUEwQixhQUFBRixFQUFBQyxFQUFBTCxJQUVBcEIsRUFBQUcsWUFBQXFCLG9DQzVMQSxTQUFBRyxFQUFBQzs7Ozs7O0FBT0EsSUFBSUMsRUFBY2hLLE9BQU9pSyxPQUFPLElBSWhDLFNBQVNDLEVBQVNDLEdBQ2hCLE9BQU9BLFFBR1QsU0FBU0MsRUFBT0QsR0FDZCxPQUFPQSxRQUdULFNBQVNFLEVBQVFGLEdBQ2YsT0FBYSxJQUFOQSxFQVVULFNBQVNHLEVBQWEvSixHQUNwQixNQUNtQixpQkFBVkEsR0FDVSxpQkFBVkEsR0FFVSxpQkFBVkEsR0FDVSxrQkFBVkEsRUFTWCxTQUFTb0IsRUFBVUcsR0FDakIsT0FBZSxPQUFSQSxHQUErQixpQkFBUkEsRUFNaEMsSUFBSXlJLEVBQVl2SyxPQUFPa0IsVUFBVU0sU0FVakMsU0FBU2dKLEVBQWUxSSxHQUN0QixNQUErQixvQkFBeEJ5SSxFQUFVOUssS0FBS3FDLEdBR3hCLFNBQVMySSxFQUFVTixHQUNqQixNQUE2QixvQkFBdEJJLEVBQVU5SyxLQUFLMEssR0FNeEIsU0FBU08sRUFBbUJoSixHQUMxQixJQUFJWCxFQUFJNEosV0FBV0MsT0FBT2xKLElBQzFCLE9BQU9YLEdBQUssR0FBSzhKLEtBQUtDLE1BQU0vSixLQUFPQSxHQUFLZ0ssU0FBU3JKLEdBR25ELFNBQVNzSixFQUFXdEosR0FDbEIsT0FDRTBJLEVBQU0xSSxJQUNjLG1CQUFiQSxFQUFJdUosTUFDVSxtQkFBZHZKLEVBQUl3SixNQU9mLFNBQVMxSixFQUFVRSxHQUNqQixPQUFjLE1BQVBBLEVBQ0gsR0FDQXlKLE1BQU0xSixRQUFRQyxJQUFTOEksRUFBYzlJLElBQVFBLEVBQUlGLFdBQWErSSxFQUM1RHZGLEtBQUtDLFVBQVV2RCxFQUFLLEtBQU0sR0FDMUJrSixPQUFPbEosR0FPZixTQUFTMEosRUFBVTFKLEdBQ2pCLElBQUlYLEVBQUk0SixXQUFXakosR0FDbkIsT0FBTzJKLE1BQU10SyxHQUFLVyxFQUFNWCxFQU8xQixTQUFTdUssRUFDUHJILEVBQ0FzSCxHQUlBLElBRkEsSUFBSWpILEVBQU10RSxPQUFPWSxPQUFPLE1BQ3BCd0QsRUFBT0gsRUFBSXVILE1BQU0sS0FDWmxNLEVBQUksRUFBR0EsRUFBSThFLEVBQUtwQyxPQUFRMUMsSUFDL0JnRixFQUFJRixFQUFLOUUsS0FBTSxFQUVqQixPQUFPaU0sRUFDSCxTQUFVN0osR0FBTyxPQUFPNEMsRUFBSTVDLEVBQUk4RixnQkFDaEMsU0FBVTlGLEdBQU8sT0FBTzRDLEVBQUk1QyxJQU1mNEosRUFBUSxrQkFBa0IsR0FBN0MsSUFLSUcsRUFBc0JILEVBQVEsOEJBS2xDLFNBQVM5QyxFQUFRa0QsRUFBS25ILEdBQ3BCLEdBQUltSCxFQUFJMUosT0FBUSxDQUNkLElBQUl1SCxFQUFRbUMsRUFBSUMsUUFBUXBILEdBQ3hCLEdBQUlnRixHQUFTLEVBQ1gsT0FBT21DLEVBQUlFLE9BQU9yQyxFQUFPLElBUS9CLElBQUlwSSxFQUFpQm5CLE9BQU9rQixVQUFVQyxlQUN0QyxTQUFTMEssRUFBUS9KLEVBQUtqQixHQUNwQixPQUFPTSxFQUFlMUIsS0FBS3FDLEVBQUtqQixHQU1sQyxTQUFTaUwsRUFBUS9KLEdBQ2YsSUFBSWdLLEVBQVEvTCxPQUFPWSxPQUFPLE1BQzFCLE9BQVEsU0FBbUJxRCxHQUV6QixPQURVOEgsRUFBTTlILEtBQ0Q4SCxFQUFNOUgsR0FBT2xDLEVBQUdrQyxLQU9uQyxJQUFJK0gsRUFBYSxTQUNiQyxFQUFXSCxFQUFPLFNBQVU3SCxHQUM5QixPQUFPQSxFQUFJQyxRQUFROEgsRUFBWSxTQUFVRSxFQUFHdk0sR0FBSyxPQUFPQSxFQUFJQSxFQUFFd00sY0FBZ0IsT0FNNUVDLEVBQWFOLEVBQU8sU0FBVTdILEdBQ2hDLE9BQU9BLEVBQUlvSSxPQUFPLEdBQUdGLGNBQWdCbEksRUFBSXFJLE1BQU0sS0FNN0NDLEVBQWMsYUFDZEMsRUFBWVYsRUFBTyxTQUFVN0gsR0FDL0IsT0FBT0EsRUFBSUMsUUFBUXFJLEVBQWEsT0FBTy9FLGdCQThCekMsSUFBSTFHLEVBQU8yTCxTQUFTdkwsVUFBVUosS0FKOUIsU0FBcUJpQixFQUFJMkssR0FDdkIsT0FBTzNLLEVBQUdqQixLQUFLNEwsSUFmakIsU0FBdUIzSyxFQUFJMkssR0FDekIsU0FBU0MsRUFBUzlJLEdBQ2hCLElBQUl0RSxFQUFJbUUsVUFBVTFCLE9BQ2xCLE9BQU96QyxFQUNIQSxFQUFJLEVBQ0Z3QyxFQUFHNkssTUFBTUYsRUFBS2hKLFdBQ2QzQixFQUFHdEMsS0FBS2lOLEVBQUs3SSxHQUNmOUIsRUFBR3RDLEtBQUtpTixHQUlkLE9BREFDLEVBQVFFLFFBQVU5SyxFQUFHQyxPQUNkMkssR0FjVCxTQUFTRyxFQUFTMUksRUFBTTJJLEdBQ3RCQSxFQUFRQSxHQUFTLEVBR2pCLElBRkEsSUFBSXpOLEVBQUk4RSxFQUFLcEMsT0FBUytLLEVBQ2xCQyxFQUFNLElBQUk3QixNQUFNN0wsR0FDYkEsS0FDTDBOLEVBQUkxTixHQUFLOEUsRUFBSzlFLEVBQUl5TixHQUVwQixPQUFPQyxFQU1ULFNBQVNwSixFQUFRcUosRUFBSUMsR0FDbkIsSUFBSyxJQUFJck0sS0FBT3FNLEVBQ2RELEVBQUdwTSxHQUFPcU0sRUFBTXJNLEdBRWxCLE9BQU9vTSxFQU1ULFNBQVNFLEVBQVV6QixHQUVqQixJQURBLElBQUkwQixFQUFNLEdBQ0Q5TixFQUFJLEVBQUdBLEVBQUlvTSxFQUFJMUosT0FBUTFDLElBQzFCb00sRUFBSXBNLElBQ05zRSxFQUFPd0osRUFBSzFCLEVBQUlwTSxJQUdwQixPQUFPOE4sRUFVVCxTQUFTbEcsRUFBTXJELEVBQUdDLEVBQUduRSxJQUtyQixJQUFJME4sRUFBSyxTQUFVeEosRUFBR0MsRUFBR25FLEdBQUssT0FBTyxHQU9qQzJOLEVBQVcsU0FBVXBCLEdBQUssT0FBT0EsR0FNckMsU0FBU3FCLEVBQVkxSixFQUFHQyxHQUN0QixHQUFJRCxJQUFNQyxFQUFLLE9BQU8sRUFDdEIsSUFBSTBKLEVBQVk3TCxFQUFTa0MsR0FDckI0SixFQUFZOUwsRUFBU21DLEdBQ3pCLElBQUkwSixJQUFhQyxFQXdCVixPQUFLRCxJQUFjQyxHQUNqQjdDLE9BQU8vRyxLQUFPK0csT0FBTzlHLEdBeEI1QixJQUNFLElBQUk0SixFQUFXdkMsTUFBTTFKLFFBQVFvQyxHQUN6QjhKLEVBQVd4QyxNQUFNMUosUUFBUXFDLEdBQzdCLEdBQUk0SixHQUFZQyxFQUNkLE9BQU85SixFQUFFN0IsU0FBVzhCLEVBQUU5QixRQUFVNkIsRUFBRStKLE1BQU0sU0FBVUMsRUFBR3ZPLEdBQ25ELE9BQU9pTyxFQUFXTSxFQUFHL0osRUFBRXhFLE1BRXBCLEdBQUl1RSxhQUFhaUssTUFBUWhLLGFBQWFnSyxLQUMzQyxPQUFPakssRUFBRWtLLFlBQWNqSyxFQUFFaUssVUFDcEIsR0FBS0wsR0FBYUMsRUFRdkIsT0FBTyxFQVBQLElBQUlLLEVBQVFoTyxPQUFPaU8sS0FBS3BLLEdBQ3BCcUssRUFBUWxPLE9BQU9pTyxLQUFLbkssR0FDeEIsT0FBT2tLLEVBQU1oTSxTQUFXa00sRUFBTWxNLFFBQVVnTSxFQUFNSixNQUFNLFNBQVUvTSxHQUM1RCxPQUFPME0sRUFBVzFKLEVBQUVoRCxHQUFNaUQsRUFBRWpELE1BTWhDLE1BQU9nTixHQUVQLE9BQU8sR0FjYixTQUFTTSxFQUFjekMsRUFBS2hLLEdBQzFCLElBQUssSUFBSXBDLEVBQUksRUFBR0EsRUFBSW9NLEVBQUkxSixPQUFRMUMsSUFDOUIsR0FBSWlPLEVBQVc3QixFQUFJcE0sR0FBSW9DLEdBQVEsT0FBT3BDLEVBRXhDLE9BQVEsRUFNVixTQUFTOE8sRUFBTXJNLEdBQ2IsSUFBSXNNLEdBQVMsRUFDYixPQUFPLFdBQ0FBLElBQ0hBLEdBQVMsRUFDVHRNLEVBQUc2SyxNQUFNdkksS0FBTVgsYUFLckIsSUFBSTRLLEVBQVcsdUJBRVhDLEVBQWMsQ0FDaEIsWUFDQSxZQUNBLFVBR0VDLEVBQWtCLENBQ3BCLGVBQ0EsVUFDQSxjQUNBLFVBQ0EsZUFDQSxVQUNBLGdCQUNBLFlBQ0EsWUFDQSxjQUNBLGdCQUNBLGtCQU9FQyxFQUFVLENBS1pDLHNCQUF1QjFPLE9BQU9ZLE9BQU8sTUFLckMrTixRQUFRLEVBS1JDLGVBQWVDLEVBS2ZDLFVBQVVELEVBS1ZFLGFBQWEsRUFLYkMsYUFBYyxLQUtkQyxZQUFhLEtBS2JDLGdCQUFpQixHQU1qQkMsU0FBVW5QLE9BQU9ZLE9BQU8sTUFNeEJ3TyxjQUFlL0IsRUFNZmdDLGVBQWdCaEMsRUFNaEJpQyxpQkFBa0JqQyxFQUtsQmtDLGdCQUFpQnJJLEVBS2pCc0kscUJBQXNCbEMsRUFNdEJtQyxZQUFhcEMsRUFNYnFDLE9BQU8sRUFLUEMsZ0JBQWlCbkIsR0FVZm9CLEVBQWdCLDhKQWFwQixTQUFTQyxFQUFLL04sRUFBS2pCLEVBQUthLEVBQUt4QixHQUMzQkYsT0FBT0MsZUFBZTZCLEVBQUtqQixFQUFLLENBQzlCTixNQUFPbUIsRUFDUHhCLGFBQWNBLEVBQ2Q0UCxVQUFVLEVBQ1ZDLGNBQWMsSUFPbEIsSUFBSUMsRUFBUyxJQUFJQyxPQUFRLEtBQVFMLEVBQWN0SyxPQUFVLFdBa0J6RCxJQW1DSTRLLEVBbkNBQyxFQUFXLGFBQWUsR0FHMUJDLEVBQThCLG9CQUFYL00sT0FDbkJnTixFQUFrQyxvQkFBbEJDLGlCQUFtQ0EsY0FBY0MsU0FDakVDLEVBQWVILEdBQVVDLGNBQWNDLFNBQVMvSSxjQUNoRGlKLEVBQUtMLEdBQWEvTSxPQUFPRixVQUFVb0UsVUFBVUMsY0FDN0NrSixFQUFPRCxHQUFNLGVBQWVuSixLQUFLbUosR0FDakNFLEVBQVFGLEdBQU1BLEVBQUc5RSxRQUFRLFlBQWMsRUFDdkNpRixFQUFTSCxHQUFNQSxFQUFHOUUsUUFBUSxTQUFXLEVBRXJDa0YsR0FEYUosR0FBTUEsRUFBRzlFLFFBQVEsV0FDckI4RSxHQUFNLHVCQUF1Qm5KLEtBQUttSixJQUEwQixRQUFqQkQsR0FHcERNLElBRldMLEdBQU0sY0FBY25KLEtBQUttSixHQUN0QkEsR0FBTSxZQUFZbkosS0FBS21KLEdBQzlCQSxHQUFNQSxFQUFHTSxNQUFNLG1CQUd0QkMsR0FBZSxHQUFJQyxNQUVuQkMsSUFBa0IsRUFDdEIsR0FBSWQsRUFDRixJQUNFLElBQUllLEdBQU8sR0FDWG5SLE9BQU9DLGVBQWVrUixHQUFNLFVBQVksQ0FDdENoUixJQUFLLFdBRUgrUSxJQUFrQixLQUd0QjdOLE9BQU8rTixpQkFBaUIsZUFBZ0IsS0FBTUQsSUFDOUMsTUFBT3RELElBTVgsSUFBSXdELEdBQW9CLFdBV3RCLFlBVmtCQyxJQUFkcEIsSUFPQUEsR0FMR0UsSUFBY0MsUUFBNEIsSUFBWHZHLElBR3RCQSxFQUFNLFNBQWlELFdBQWxDQSxFQUFNLFFBQVl5SCxJQUFJQyxVQUtwRHRCLEdBSUxwQixHQUFXc0IsR0FBYS9NLE9BQU9vTyw2QkFHbkMsU0FBU0MsR0FBVUMsR0FDakIsTUFBdUIsbUJBQVRBLEdBQXVCLGNBQWNySyxLQUFLcUssRUFBS25RLFlBRy9ELElBSUlvUSxHQUpBQyxHQUNnQixvQkFBWHhSLFFBQTBCcVIsR0FBU3JSLFNBQ3ZCLG9CQUFaeVIsU0FBMkJKLEdBQVNJLFFBQVFDLFNBTW5ESCxHQUZpQixvQkFBUkksS0FBdUJOLEdBQVNNLEtBRWxDQSxJQUdjLFdBQ25CLFNBQVNBLElBQ1AzTixLQUFLNE4sSUFBTWpTLE9BQU9ZLE9BQU8sTUFZM0IsT0FWQW9SLEVBQUk5USxVQUFVZ1IsSUFBTSxTQUFjclIsR0FDaEMsT0FBeUIsSUFBbEJ3RCxLQUFLNE4sSUFBSXBSLElBRWxCbVIsRUFBSTlRLFVBQVVpUixJQUFNLFNBQWN0UixHQUNoQ3dELEtBQUs0TixJQUFJcFIsSUFBTyxHQUVsQm1SLEVBQUk5USxVQUFVa1IsTUFBUSxXQUNwQi9OLEtBQUs0TixJQUFNalMsT0FBT1ksT0FBTyxPQUdwQm9SLEVBZFksR0FvQnZCLElBQUlLLEdBQU9uTCxFQThGUG9MLEdBQU0sRUFNTkMsR0FBTSxXQUNSbE8sS0FBS3VCLEdBQUswTSxLQUNWak8sS0FBS21PLEtBQU8sSUFHZEQsR0FBSXJSLFVBQVV1UixPQUFTLFNBQWlCQyxHQUN0Q3JPLEtBQUttTyxLQUFLMU0sS0FBSzRNLElBR2pCSCxHQUFJclIsVUFBVXlSLFVBQVksU0FBb0JELEdBQzVDbEssRUFBT25FLEtBQUttTyxLQUFNRSxJQUdwQkgsR0FBSXJSLFVBQVUwUixPQUFTLFdBQ2pCTCxHQUFJTSxRQUNOTixHQUFJTSxPQUFPQyxPQUFPek8sT0FJdEJrTyxHQUFJclIsVUFBVTZSLE9BQVMsV0FFckIsSUFBSVAsRUFBT25PLEtBQUttTyxLQUFLbEcsUUFPckIsSUFBSyxJQUFJaE4sRUFBSSxFQUFHQyxFQUFJaVQsRUFBS3hRLE9BQVExQyxFQUFJQyxFQUFHRCxJQUN0Q2tULEVBQUtsVCxHQUFHaUosVUFPWmdLLEdBQUlNLE9BQVMsS0FDYixJQUFJRyxHQUFjLEdBRWxCLFNBQVNDLEdBQVlKLEdBQ25CRyxHQUFZbE4sS0FBSytNLEdBQ2pCTixHQUFJTSxPQUFTQSxFQUdmLFNBQVNLLEtBQ1BGLEdBQVlHLE1BQ1paLEdBQUlNLE9BQVNHLEdBQVlBLEdBQVloUixPQUFTLEdBS2hELElBQUlvUixHQUFRLFNBQ1ZDLEVBQ0FuTyxFQUNBb08sRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsR0FFQXRQLEtBQUtnUCxJQUFNQSxFQUNYaFAsS0FBS2EsS0FBT0EsRUFDWmIsS0FBS2lQLFNBQVdBLEVBQ2hCalAsS0FBS2tQLEtBQU9BLEVBQ1psUCxLQUFLbVAsSUFBTUEsRUFDWG5QLEtBQUsxRCxRQUFLMlEsRUFDVmpOLEtBQUtvUCxRQUFVQSxFQUNmcFAsS0FBS3VQLGVBQVl0QyxFQUNqQmpOLEtBQUt3UCxlQUFZdkMsRUFDakJqTixLQUFLeVAsZUFBWXhDLEVBQ2pCak4sS0FBS3hELElBQU1xRSxHQUFRQSxFQUFLckUsSUFDeEJ3RCxLQUFLcVAsaUJBQW1CQSxFQUN4QnJQLEtBQUswUCx1QkFBb0J6QyxFQUN6QmpOLEtBQUsyUCxZQUFTMUMsRUFDZGpOLEtBQUs0UCxLQUFNLEVBQ1g1UCxLQUFLNlAsVUFBVyxFQUNoQjdQLEtBQUs4UCxjQUFlLEVBQ3BCOVAsS0FBSytQLFdBQVksRUFDakIvUCxLQUFLZ1EsVUFBVyxFQUNoQmhRLEtBQUtpUSxRQUFTLEVBQ2RqUSxLQUFLc1AsYUFBZUEsRUFDcEJ0UCxLQUFLa1EsZUFBWWpELEVBQ2pCak4sS0FBS21RLG9CQUFxQixHQUd4QkMsR0FBcUIsQ0FBRUMsTUFBTyxDQUFFM0UsY0FBYyxJQUlsRDBFLEdBQW1CQyxNQUFNdlUsSUFBTSxXQUM3QixPQUFPa0UsS0FBSzBQLG1CQUdkL1QsT0FBTzJVLGlCQUFrQnZCLEdBQU1sUyxVQUFXdVQsSUFFMUMsSUFBSUcsR0FBbUIsU0FBVXJCLFFBQ2pCLElBQVRBLElBQWtCQSxFQUFPLElBRTlCLElBQUlzQixFQUFPLElBQUl6QixHQUdmLE9BRkF5QixFQUFLdEIsS0FBT0EsRUFDWnNCLEVBQUtULFdBQVksRUFDVlMsR0FHVCxTQUFTQyxHQUFpQnBULEdBQ3hCLE9BQU8sSUFBSTBSLFFBQU05QixPQUFXQSxPQUFXQSxFQUFXMUcsT0FBT2xKLElBTzNELFNBQVNxVCxHQUFZQyxHQUNuQixJQUFJQyxFQUFTLElBQUk3QixHQUNmNEIsRUFBTTNCLElBQ04yQixFQUFNOVAsS0FJTjhQLEVBQU0xQixVQUFZMEIsRUFBTTFCLFNBQVNoSCxRQUNqQzBJLEVBQU16QixLQUNOeUIsRUFBTXhCLElBQ053QixFQUFNdkIsUUFDTnVCLEVBQU10QixpQkFDTnNCLEVBQU1yQixjQVdSLE9BVEFzQixFQUFPdFUsR0FBS3FVLEVBQU1yVSxHQUNsQnNVLEVBQU9mLFNBQVdjLEVBQU1kLFNBQ3hCZSxFQUFPcFUsSUFBTW1VLEVBQU1uVSxJQUNuQm9VLEVBQU9iLFVBQVlZLEVBQU1aLFVBQ3pCYSxFQUFPckIsVUFBWW9CLEVBQU1wQixVQUN6QnFCLEVBQU9wQixVQUFZbUIsRUFBTW5CLFVBQ3pCb0IsRUFBT25CLFVBQVlrQixFQUFNbEIsVUFDekJtQixFQUFPVixVQUFZUyxFQUFNVCxVQUN6QlUsRUFBT1osVUFBVyxFQUNYWSxFQVFULElBQUlDLEdBQWEvSixNQUFNakssVUFDbkJpVSxHQUFlblYsT0FBT1ksT0FBT3NVLElBRVosQ0FDbkIsT0FDQSxNQUNBLFFBQ0EsVUFDQSxTQUNBLE9BQ0EsV0FNYXJULFFBQVEsU0FBVXVULEdBRS9CLElBQUlDLEVBQVdILEdBQVdFLEdBQzFCdkYsRUFBSXNGLEdBQWNDLEVBQVEsV0FFeEIsSUFEQSxJQUFJRSxFQUFPLEdBQUlDLEVBQU03UixVQUFVMUIsT0FDdkJ1VCxLQUFRRCxFQUFNQyxHQUFRN1IsVUFBVzZSLEdBRXpDLElBRUlDLEVBRkFoUyxFQUFTNlIsRUFBU3pJLE1BQU12SSxLQUFNaVIsR0FDOUJHLEVBQUtwUixLQUFLcVIsT0FFZCxPQUFRTixHQUNOLElBQUssT0FDTCxJQUFLLFVBQ0hJLEVBQVdGLEVBQ1gsTUFDRixJQUFLLFNBQ0hFLEVBQVdGLEVBQUtoSixNQUFNLEdBTTFCLE9BSElrSixHQUFZQyxFQUFHRSxhQUFhSCxHQUVoQ0MsRUFBR0csSUFBSTdDLFNBQ0F2UCxNQU1YLElBQUlxUyxHQUFZN1YsT0FBTzhWLG9CQUFvQlgsSUFNdkNZLElBQWdCLEVBRXBCLFNBQVNDLEdBQWlCelYsR0FDeEJ3VixHQUFnQnhWLEVBU2xCLElBQUkwVixHQUFXLFNBQW1CMVYsR0FDaEM4RCxLQUFLOUQsTUFBUUEsRUFDYjhELEtBQUt1UixJQUFNLElBQUlyRCxHQUNmbE8sS0FBSzZSLFFBQVUsRUFDZnJHLEVBQUl0UCxFQUFPLFNBQVU4RCxNQUNqQjhHLE1BQU0xSixRQUFRbEIsSUFDWjRQLEVBc0NSLFNBQXVCMEMsRUFBUXNELEdBRTdCdEQsRUFBT3VELFVBQVlELEVBdkNmRSxDQUFhOVYsRUFBTzRVLElBZ0QxQixTQUFzQnRDLEVBQVFzRCxFQUFLbEksR0FDakMsSUFBSyxJQUFJM08sRUFBSSxFQUFHQyxFQUFJME8sRUFBS2pNLE9BQVExQyxFQUFJQyxFQUFHRCxJQUFLLENBQzNDLElBQUl1QixFQUFNb04sRUFBSzNPLEdBQ2Z1USxFQUFJZ0QsRUFBUWhTLEVBQUtzVixFQUFJdFYsS0FqRG5CeVYsQ0FBWS9WLEVBQU80VSxHQUFjVSxJQUVuQ3hSLEtBQUtzUixhQUFhcFYsSUFFbEI4RCxLQUFLa1MsS0FBS2hXLElBc0RkLFNBQVNpVyxHQUFTalcsRUFBT2tXLEdBSXZCLElBQUloQixFQUhKLEdBQUs5VCxFQUFTcEIsTUFBVUEsYUFBaUI2UyxJQWtCekMsT0FkSXZILEVBQU90TCxFQUFPLFdBQWFBLEVBQU1tVixrQkFBa0JPLEdBQ3JEUixFQUFLbFYsRUFBTW1WLE9BRVhLLEtBQ0MxRSxPQUNBbEcsTUFBTTFKLFFBQVFsQixJQUFVaUssRUFBY2pLLEtBQ3ZDUCxPQUFPMFcsYUFBYW5XLEtBQ25CQSxFQUFNb1csU0FFUGxCLEVBQUssSUFBSVEsR0FBUzFWLElBRWhCa1csR0FBY2hCLEdBQ2hCQSxFQUFHUyxVQUVFVCxFQU1ULFNBQVNtQixHQUNQOVUsRUFDQWpCLEVBQ0FhLEVBQ0FtVixFQUNBQyxHQUVBLElBQUlsQixFQUFNLElBQUlyRCxHQUVWdFIsRUFBV2pCLE9BQU8rVyx5QkFBeUJqVixFQUFLakIsR0FDcEQsSUFBSUksSUFBc0MsSUFBMUJBLEVBQVM4TyxhQUF6QixDQUtBLElBQUlqUSxFQUFTbUIsR0FBWUEsRUFBU2QsSUFDOUI2VyxFQUFTL1YsR0FBWUEsRUFBU2dSLElBQzVCblMsSUFBVWtYLEdBQWdDLElBQXJCdFQsVUFBVTFCLFNBQ25DTixFQUFNSSxFQUFJakIsSUFHWixJQUFJb1csR0FBV0gsR0FBV04sR0FBUTlVLEdBQ2xDMUIsT0FBT0MsZUFBZTZCLEVBQUtqQixFQUFLLENBQzlCWCxZQUFZLEVBQ1o2UCxjQUFjLEVBQ2Q1UCxJQUFLLFdBQ0gsSUFBSUksRUFBUVQsRUFBU0EsRUFBT0wsS0FBS3FDLEdBQU9KLEVBVXhDLE9BVEk2USxHQUFJTSxTQUNOK0MsRUFBSWhELFNBQ0FxRSxJQUNGQSxFQUFRckIsSUFBSWhELFNBQ1J6SCxNQUFNMUosUUFBUWxCLElBc0c1QixTQUFTMlcsRUFBYTNXLEdBQ3BCLElBQUssSUFBSXNOLE9BQUssRUFBU3ZPLEVBQUksRUFBR0MsRUFBSWdCLEVBQU15QixPQUFRMUMsRUFBSUMsRUFBR0QsS0FDckR1TyxFQUFJdE4sRUFBTWpCLEtBQ0x1TyxFQUFFNkgsUUFBVTdILEVBQUU2SCxPQUFPRSxJQUFJaEQsU0FDMUJ6SCxNQUFNMUosUUFBUW9NLElBQ2hCcUosRUFBWXJKLEdBMUdOcUosQ0FBWTNXLEtBSVhBLEdBRVQwUixJQUFLLFNBQXlCa0YsR0FDNUIsSUFBSTVXLEVBQVFULEVBQVNBLEVBQU9MLEtBQUtxQyxHQUFPSixFQUVwQ3lWLElBQVc1VyxHQUFVNFcsR0FBV0EsR0FBVTVXLEdBQVVBLEdBUXBEVCxJQUFXa1gsSUFDWEEsRUFDRkEsRUFBT3ZYLEtBQUtxQyxFQUFLcVYsR0FFakJ6VixFQUFNeVYsRUFFUkYsR0FBV0gsR0FBV04sR0FBUVcsR0FDOUJ2QixFQUFJN0MsY0FVVixTQUFTZCxHQUFLWSxFQUFRaFMsRUFBS2EsR0FNekIsR0FBSXlKLE1BQU0xSixRQUFRb1IsSUFBV25JLEVBQWtCN0osR0FHN0MsT0FGQWdTLEVBQU83USxPQUFTNkksS0FBS3VNLElBQUl2RSxFQUFPN1EsT0FBUW5CLEdBQ3hDZ1MsRUFBT2pILE9BQU8vSyxFQUFLLEVBQUdhLEdBQ2ZBLEVBRVQsR0FBSWIsS0FBT2dTLEtBQVloUyxLQUFPYixPQUFPa0IsV0FFbkMsT0FEQTJSLEVBQU9oUyxHQUFPYSxFQUNQQSxFQUVULElBQUkrVCxFQUFNNUMsRUFBUTZDLE9BQ2xCLE9BQUk3QyxFQUFPOEQsUUFBV2xCLEdBQU1BLEVBQUdTLFFBS3RCeFUsRUFFSitULEdBSUxtQixHQUFrQm5CLEVBQUdsVixNQUFPTSxFQUFLYSxHQUNqQytULEVBQUdHLElBQUk3QyxTQUNBclIsSUFMTG1SLEVBQU9oUyxHQUFPYSxFQUNQQSxHQVVYLFNBQVMyVixHQUFLeEUsRUFBUWhTLEdBTXBCLEdBQUlzSyxNQUFNMUosUUFBUW9SLElBQVduSSxFQUFrQjdKLEdBQzdDZ1MsRUFBT2pILE9BQU8vSyxFQUFLLE9BRHJCLENBSUEsSUFBSTRVLEVBQU01QyxFQUFRNkMsT0FDZDdDLEVBQU84RCxRQUFXbEIsR0FBTUEsRUFBR1MsU0FPMUJySyxFQUFPZ0gsRUFBUWhTLFlBR2JnUyxFQUFPaFMsR0FDVDRVLEdBR0xBLEVBQUdHLElBQUk3QyxXQXBNVGtELEdBQVMvVSxVQUFVcVYsS0FBTyxTQUFlelUsR0FFdkMsSUFEQSxJQUFJbU0sRUFBT2pPLE9BQU9pTyxLQUFLbk0sR0FDZHhDLEVBQUksRUFBR0EsRUFBSTJPLEVBQUtqTSxPQUFRMUMsSUFDL0JzWCxHQUFrQjlVLEVBQUttTSxFQUFLM08sS0FPaEMyVyxHQUFTL1UsVUFBVXlVLGFBQWUsU0FBdUIyQixHQUN2RCxJQUFLLElBQUloWSxFQUFJLEVBQUdDLEVBQUkrWCxFQUFNdFYsT0FBUTFDLEVBQUlDLEVBQUdELElBQ3ZDa1gsR0FBUWMsRUFBTWhZLEtBZ05sQixJQUFJaVksR0FBUzlJLEVBQU9DLHNCQW9CcEIsU0FBUzhJLEdBQVd2SyxFQUFJd0ssR0FDdEIsSUFBS0EsRUFBUSxPQUFPeEssRUFPcEIsSUFOQSxJQUFJcE0sRUFBSzZXLEVBQU9DLEVBRVoxSixFQUFPNEQsR0FDUEMsUUFBUUMsUUFBUTBGLEdBQ2hCelgsT0FBT2lPLEtBQUt3SixHQUVQblksRUFBSSxFQUFHQSxFQUFJMk8sRUFBS2pNLE9BQVExQyxJQUduQixZQUZadUIsRUFBTW9OLEVBQUszTyxNQUdYb1ksRUFBUXpLLEVBQUdwTSxHQUNYOFcsRUFBVUYsRUFBSzVXLEdBQ1ZnTCxFQUFPb0IsRUFBSXBNLEdBR2Q2VyxJQUFVQyxHQUNWbk4sRUFBY2tOLElBQ2RsTixFQUFjbU4sSUFFZEgsR0FBVUUsRUFBT0MsR0FOakIxRixHQUFJaEYsRUFBSXBNLEVBQUs4VyxJQVNqQixPQUFPMUssRUFNVCxTQUFTMkssR0FDUEMsRUFDQUMsRUFDQUMsR0FFQSxPQUFLQSxFQW9CSSxXQUVMLElBQUlDLEVBQW1DLG1CQUFiRixFQUN0QkEsRUFBU3JZLEtBQUtzWSxFQUFJQSxHQUNsQkQsRUFDQUcsRUFBbUMsbUJBQWRKLEVBQ3JCQSxFQUFVcFksS0FBS3NZLEVBQUlBLEdBQ25CRixFQUNKLE9BQUlHLEVBQ0tSLEdBQVVRLEVBQWNDLEdBRXhCQSxHQTdCTkgsRUFHQUQsRUFRRSxXQUNMLE9BQU9MLEdBQ2UsbUJBQWJNLEVBQTBCQSxFQUFTclksS0FBSzRFLEtBQU1BLE1BQVF5VCxFQUN4QyxtQkFBZEQsRUFBMkJBLEVBQVVwWSxLQUFLNEUsS0FBTUEsTUFBUXdULElBVjFEQyxFQUhBRCxFQTJEYixTQUFTSyxHQUNQTCxFQUNBQyxHQUVBLElBQUkxSyxFQUFNMEssRUFDTkQsRUFDRUEsRUFBVTFTLE9BQU8yUyxHQUNqQjNNLE1BQU0xSixRQUFRcVcsR0FDWkEsRUFDQSxDQUFDQSxHQUNMRCxFQUNKLE9BQU96SyxFQUtULFNBQXNCK0ssR0FFcEIsSUFEQSxJQUFJL0ssRUFBTSxHQUNEOU4sRUFBSSxFQUFHQSxFQUFJNlksRUFBTW5XLE9BQVExQyxLQUNELElBQTNCOE4sRUFBSXpCLFFBQVF3TSxFQUFNN1ksS0FDcEI4TixFQUFJdEgsS0FBS3FTLEVBQU03WSxJQUduQixPQUFPOE4sRUFYSGdMLENBQVloTCxHQUNaQSxFQXdCTixTQUFTaUwsR0FDUFIsRUFDQUMsRUFDQUMsRUFDQWxYLEdBRUEsSUFBSXVNLEVBQU1wTixPQUFPWSxPQUFPaVgsR0FBYSxNQUNyQyxPQUFJQyxFQUVLbFUsRUFBT3dKLEVBQUswSyxHQUVaMUssRUF6RVhtSyxHQUFPclMsS0FBTyxTQUNaMlMsRUFDQUMsRUFDQUMsR0FFQSxPQUFLQSxFQWNFSCxHQUFjQyxFQUFXQyxFQUFVQyxHQWJwQ0QsR0FBZ0MsbUJBQWJBLEVBUWRELEVBRUZELEdBQWNDLEVBQVdDLElBbUNwQ3RKLEVBQWdCM00sUUFBUSxTQUFVeVcsR0FDaENmLEdBQU9lLEdBQVFKLEtBeUJqQjNKLEVBQVkxTSxRQUFRLFNBQVV3RyxHQUM1QmtQLEdBQU9sUCxFQUFPLEtBQU9nUSxLQVN2QmQsR0FBT3RHLE1BQVEsU0FDYjRHLEVBQ0FDLEVBQ0FDLEVBQ0FsWCxHQU1BLEdBSElnWCxJQUFjN0csS0FBZTZHLE9BQVl2RyxHQUN6Q3dHLElBQWE5RyxLQUFlOEcsT0FBV3hHLElBRXRDd0csRUFBWSxPQUFPOVgsT0FBT1ksT0FBT2lYLEdBQWEsTUFJbkQsSUFBS0EsRUFBYSxPQUFPQyxFQUN6QixJQUFJOUssRUFBTSxHQUVWLElBQUssSUFBSXVMLEtBRFQzVSxFQUFPb0osRUFBSzZLLEdBQ01DLEVBQVUsQ0FDMUIsSUFBSTlELEVBQVNoSCxFQUFJdUwsR0FDYjdELEVBQVFvRCxFQUFTUyxHQUNqQnZFLElBQVc3SSxNQUFNMUosUUFBUXVTLEtBQzNCQSxFQUFTLENBQUNBLElBRVpoSCxFQUFJdUwsR0FBU3ZFLEVBQ1RBLEVBQU83TyxPQUFPdVAsR0FDZHZKLE1BQU0xSixRQUFRaVQsR0FBU0EsRUFBUSxDQUFDQSxHQUV0QyxPQUFPMUgsR0FNVHVLLEdBQU9pQixNQUNQakIsR0FBT2tCLFFBQ1BsQixHQUFPbUIsT0FDUG5CLEdBQU9vQixTQUFXLFNBQ2hCZCxFQUNBQyxFQUNBQyxFQUNBbFgsR0FLQSxJQUFLZ1gsRUFBYSxPQUFPQyxFQUN6QixJQUFJOUssRUFBTWhOLE9BQU9ZLE9BQU8sTUFHeEIsT0FGQWdELEVBQU9vSixFQUFLNkssR0FDUkMsR0FBWWxVLEVBQU9vSixFQUFLOEssR0FDckI5SyxHQUVUdUssR0FBT3FCLFFBQVVoQixHQUtqQixJQUFJaUIsR0FBZSxTQUFVaEIsRUFBV0MsR0FDdEMsWUFBb0J4RyxJQUFid0csRUFDSEQsRUFDQUMsR0F5SE4sU0FBU2dCLEdBQ1A5RSxFQUNBVSxFQUNBcUQsR0FrQkEsR0FacUIsbUJBQVZyRCxJQUNUQSxFQUFRQSxFQUFNdk4sU0FwR2xCLFNBQXlCQSxFQUFTNFEsR0FDaEMsSUFBSVMsRUFBUXJSLEVBQVFxUixNQUNwQixHQUFLQSxFQUFMLENBQ0EsSUFDSWxaLEVBQUdvQyxFQURIMEwsRUFBTSxHQUVWLEdBQUlqQyxNQUFNMUosUUFBUStXLEdBRWhCLElBREFsWixFQUFJa1osRUFBTXhXLE9BQ0gxQyxLQUVjLGlCQURuQm9DLEVBQU04VyxFQUFNbFosTUFHVjhOLEVBRE9uQixFQUFTdkssSUFDSixDQUFFMkcsS0FBTSxZQUtuQixHQUFJbUMsRUFBY2dPLEdBQ3ZCLElBQUssSUFBSTNYLEtBQU8yWCxFQUNkOVcsRUFBTThXLEVBQU0zWCxHQUVadU0sRUFET25CLEVBQVNwTCxJQUNKMkosRUFBYzlJLEdBQ3RCQSxFQUNBLENBQUUyRyxLQUFNM0csR0FTaEJ5RixFQUFRcVIsTUFBUXBMLEdBd0VoQjJMLENBQWVyRSxHQWxFakIsU0FBMEJ2TixFQUFTNFEsR0FDakMsSUFBSVcsRUFBU3ZSLEVBQVF1UixPQUNyQixHQUFLQSxFQUFMLENBQ0EsSUFBSU0sRUFBYTdSLEVBQVF1UixPQUFTLEdBQ2xDLEdBQUl2TixNQUFNMUosUUFBUWlYLEdBQ2hCLElBQUssSUFBSXBaLEVBQUksRUFBR0EsRUFBSW9aLEVBQU8xVyxPQUFRMUMsSUFDakMwWixFQUFXTixFQUFPcFosSUFBTSxDQUFFbVksS0FBTWlCLEVBQU9wWixTQUVwQyxHQUFJa0wsRUFBY2tPLEdBQ3ZCLElBQUssSUFBSTdYLEtBQU82WCxFQUFRLENBQ3RCLElBQUloWCxFQUFNZ1gsRUFBTzdYLEdBQ2pCbVksRUFBV25ZLEdBQU8ySixFQUFjOUksR0FDNUJrQyxFQUFPLENBQUU2VCxLQUFNNVcsR0FBT2EsR0FDdEIsQ0FBRStWLEtBQU0vVixLQXNEaEJ1WCxDQUFnQnZFLEdBeENsQixTQUE4QnZOLEdBQzVCLElBQUkrUixFQUFPL1IsRUFBUWdTLFdBQ25CLEdBQUlELEVBQ0YsSUFBSyxJQUFJclksS0FBT3FZLEVBQU0sQ0FDcEIsSUFBSUUsRUFBU0YsRUFBS3JZLEdBQ0ksbUJBQVh1WSxJQUNURixFQUFLclksR0FBTyxDQUFFQyxLQUFNc1ksRUFBUTdRLE9BQVE2USxLQW1DMUNDLENBQW9CM0UsSUFNZkEsRUFBTTRFLFFBQ0w1RSxFQUFNNkUsVUFDUnZGLEVBQVM4RSxHQUFhOUUsRUFBUVUsRUFBTTZFLFFBQVN4QixJQUUzQ3JELEVBQU04RSxRQUNSLElBQUssSUFBSWxhLEVBQUksRUFBR0MsRUFBSW1WLEVBQU04RSxPQUFPeFgsT0FBUTFDLEVBQUlDLEVBQUdELElBQzlDMFUsRUFBUzhFLEdBQWE5RSxFQUFRVSxFQUFNOEUsT0FBT2xhLEdBQUl5WSxHQUtyRCxJQUNJbFgsRUFEQXNHLEVBQVUsR0FFZCxJQUFLdEcsS0FBT21ULEVBQ1Z5RixFQUFXNVksR0FFYixJQUFLQSxLQUFPNlQsRUFDTDdJLEVBQU9tSSxFQUFRblQsSUFDbEI0WSxFQUFXNVksR0FHZixTQUFTNFksRUFBWTVZLEdBQ25CLElBQUk2WSxFQUFRbkMsR0FBTzFXLElBQVFnWSxHQUMzQjFSLEVBQVF0RyxHQUFPNlksRUFBTTFGLEVBQU9uVCxHQUFNNlQsRUFBTTdULEdBQU1rWCxFQUFJbFgsR0FFcEQsT0FBT3NHLEVBUVQsU0FBU3dTLEdBQ1B4UyxFQUNBa0IsRUFDQXpDLEVBQ0FnVSxHQUdBLEdBQWtCLGlCQUFQaFUsRUFBWCxDQUdBLElBQUlpVSxFQUFTMVMsRUFBUWtCLEdBRXJCLEdBQUl3RCxFQUFPZ08sRUFBUWpVLEdBQU8sT0FBT2lVLEVBQU9qVSxHQUN4QyxJQUFJa1UsRUFBYzdOLEVBQVNyRyxHQUMzQixHQUFJaUcsRUFBT2dPLEVBQVFDLEdBQWdCLE9BQU9ELEVBQU9DLEdBQ2pELElBQUlDLEVBQWUzTixFQUFXME4sR0FDOUIsT0FBSWpPLEVBQU9nTyxFQUFRRSxHQUF3QkYsRUFBT0UsR0FFeENGLEVBQU9qVSxJQUFPaVUsRUFBT0MsSUFBZ0JELEVBQU9FLElBY3hELFNBQVNDLEdBQ1BuWixFQUNBb1osRUFDQUMsRUFDQW5DLEdBRUEsSUFBSW9DLEVBQU9GLEVBQVlwWixHQUNuQnVaLEdBQVV2TyxFQUFPcU8sRUFBV3JaLEdBQzVCTixFQUFRMlosRUFBVXJaLEdBRWxCd1osRUFBZUMsR0FBYTVRLFFBQVN5USxFQUFLOVIsTUFDOUMsR0FBSWdTLEdBQWdCLEVBQ2xCLEdBQUlELElBQVd2TyxFQUFPc08sRUFBTSxXQUMxQjVaLEdBQVEsT0FDSCxHQUFjLEtBQVZBLEdBQWdCQSxJQUFVaU0sRUFBVTNMLEdBQU0sQ0FHbkQsSUFBSTBaLEVBQWNELEdBQWExUCxPQUFRdVAsRUFBSzlSLE9BQ3hDa1MsRUFBYyxHQUFLRixFQUFlRSxLQUNwQ2hhLEdBQVEsR0FLZCxRQUFjK1EsSUFBVi9RLEVBQXFCLENBQ3ZCQSxFQXFCSixTQUE4QndYLEVBQUlvQyxFQUFNdFosR0FFdEMsSUFBS2dMLEVBQU9zTyxFQUFNLFdBQ2hCLE9BRUYsSUFBSXRLLEVBQU1zSyxFQUFLSyxRQUVYM0wsRUFVSixHQUFJa0osR0FBTUEsRUFBRzBDLFNBQVNQLGdCQUNXNUksSUFBL0J5RyxFQUFHMEMsU0FBU1AsVUFBVXJaLFNBQ0h5USxJQUFuQnlHLEVBQUcyQyxPQUFPN1osR0FFVixPQUFPa1gsRUFBRzJDLE9BQU83WixHQUluQixNQUFzQixtQkFBUmdQLEdBQTZDLGFBQXZCOEssR0FBUVIsRUFBSzlSLE1BQzdDd0gsRUFBSXBRLEtBQUtzWSxHQUNUbEksRUFoRE0rSyxDQUFvQjdDLEVBQUlvQyxFQUFNdFosR0FHdEMsSUFBSWdhLEVBQW9COUUsR0FDeEJDLElBQWdCLEdBQ2hCUSxHQUFRalcsR0FDUnlWLEdBQWdCNkUsR0FTbEIsT0FBT3RhLEVBc0hULFNBQVNvYSxHQUFTNVksR0FDaEIsSUFBSWdQLEVBQVFoUCxHQUFNQSxFQUFHUCxXQUFXdVAsTUFBTSxzQkFDdEMsT0FBT0EsRUFBUUEsRUFBTSxHQUFLLEdBRzVCLFNBQVMrSixHQUFZalgsRUFBR0MsR0FDdEIsT0FBTzZXLEdBQVE5VyxLQUFPOFcsR0FBUTdXLEdBR2hDLFNBQVN3VyxHQUFjalMsRUFBTTBTLEdBQzNCLElBQUs1UCxNQUFNMUosUUFBUXNaLEdBQ2pCLE9BQU9ELEdBQVdDLEVBQWUxUyxHQUFRLEdBQUssRUFFaEQsSUFBSyxJQUFJL0ksRUFBSSxFQUFHaVcsRUFBTXdGLEVBQWMvWSxPQUFRMUMsRUFBSWlXLEVBQUtqVyxJQUNuRCxHQUFJd2IsR0FBV0MsRUFBY3piLEdBQUkrSSxHQUMvQixPQUFPL0ksRUFHWCxPQUFRLEVBZ0RWLFNBQVMwYixHQUFhQyxFQUFLbEQsRUFBSW1ELEdBRzdCakksS0FDQSxJQUNFLEdBQUk4RSxFQUVGLElBREEsSUFBSW9ELEVBQU1wRCxFQUNGb0QsRUFBTUEsRUFBSUMsU0FBVSxDQUMxQixJQUFJakQsRUFBUWdELEVBQUlWLFNBQVNZLGNBQ3pCLEdBQUlsRCxFQUNGLElBQUssSUFBSTdZLEVBQUksRUFBR0EsRUFBSTZZLEVBQU1uVyxPQUFRMUMsSUFDaEMsSUFFRSxJQURvRCxJQUF0QzZZLEVBQU03WSxHQUFHRyxLQUFLMGIsRUFBS0YsRUFBS2xELEVBQUltRCxHQUMzQixPQUNmLE1BQU9yTixHQUNQeU4sR0FBa0J6TixFQUFHc04sRUFBSyx1QkFNcENHLEdBQWtCTCxFQUFLbEQsRUFBSW1ELEdBakI3QixRQW1CRWhJLE1BSUosU0FBU3FJLEdBQ1BDLEVBQ0EvSCxFQUNBNkIsRUFDQXlDLEVBQ0FtRCxHQUVBLElBQUk5TixFQUNKLEtBQ0VBLEVBQU1rSSxFQUFPa0csRUFBUTVPLE1BQU02RyxFQUFTNkIsR0FBUWtHLEVBQVEvYixLQUFLZ1UsTUFDN0NyRyxFQUFJdUosUUFBVTNMLEVBQVVvQyxLQUFTQSxFQUFJcU8sV0FDL0NyTyxFQUFJbEMsTUFBTSxTQUFVMkMsR0FBSyxPQUFPbU4sR0FBWW5OLEVBQUdrSyxFQUFJbUQsRUFBTyxzQkFHMUQ5TixFQUFJcU8sVUFBVyxHQUVqQixNQUFPNU4sR0FDUG1OLEdBQVluTixFQUFHa0ssRUFBSW1ELEdBRXJCLE9BQU85TixFQUdULFNBQVNrTyxHQUFtQkwsRUFBS2xELEVBQUltRCxHQUNuQyxHQUFJek0sRUFBT08sYUFDVCxJQUNFLE9BQU9QLEVBQU9PLGFBQWF2UCxLQUFLLEtBQU13YixFQUFLbEQsRUFBSW1ELEdBQy9DLE1BQU9yTixHQUdIQSxJQUFNb04sR0FDUlMsR0FBUzdOLEVBQUcsS0FBTSx1QkFJeEI2TixHQUFTVCxFQUFLbEQsRUFBSW1ELEdBR3BCLFNBQVNRLEdBQVVULEVBQUtsRCxFQUFJbUQsR0FLMUIsSUFBSzlLLElBQWFDLEdBQThCLG9CQUFac0wsUUFHbEMsTUFBTVYsRUFGTlUsUUFBUUMsTUFBTVgsR0FRbEIsSUF5QklZLEdBekJBQyxJQUFtQixFQUVuQkMsR0FBWSxHQUNaQyxJQUFVLEVBRWQsU0FBU0MsS0FDUEQsSUFBVSxFQUNWLElBQUlFLEVBQVNILEdBQVV6UCxNQUFNLEdBQzdCeVAsR0FBVS9aLE9BQVMsRUFDbkIsSUFBSyxJQUFJMUMsRUFBSSxFQUFHQSxFQUFJNGMsRUFBT2xhLE9BQVExQyxJQUNqQzRjLEVBQU81YyxLQXdCWCxHQUF1QixvQkFBWjZjLFNBQTJCekssR0FBU3lLLFNBQVUsQ0FDdkQsSUFBSS9hLEdBQUkrYSxRQUFRQyxVQUNoQlAsR0FBWSxXQUNWemEsR0FBRTZKLEtBQUtnUixJQU1IcEwsR0FBU3dMLFdBQVduVixJQUUxQjRVLElBQW1CLE9BQ2QsR0FBS3BMLEdBQW9DLG9CQUFyQjRMLG1CQUN6QjVLLEdBQVM0SyxtQkFFdUIseUNBQWhDQSxpQkFBaUI5YSxXQW9CakJxYSxRQUppQyxJQUFqQjlSLEdBQWdDMkgsR0FBUzNILEdBSTdDLFdBQ1ZBLEVBQWFrUyxLQUlILFdBQ1ZJLFdBQVdKLEdBQWdCLFFBekI1QixDQUlELElBQUlNLEdBQVUsRUFDVkMsR0FBVyxJQUFJRixpQkFBaUJMLElBQ2hDUSxHQUFXblosU0FBUzZGLGVBQWV5QixPQUFPMlIsS0FDOUNDLEdBQVNoRyxRQUFRaUcsR0FBVSxDQUN6QkMsZUFBZSxJQUVqQmIsR0FBWSxXQUNWVSxJQUFXQSxHQUFVLEdBQUssRUFDMUJFLEdBQVN2WCxLQUFPMEYsT0FBTzJSLEtBRXpCVCxJQUFtQixFQWVyQixTQUFTYSxHQUFVQyxFQUFJbFEsR0FDckIsSUFBSW1RLEVBaUJKLEdBaEJBZCxHQUFValcsS0FBSyxXQUNiLEdBQUk4VyxFQUNGLElBQ0VBLEVBQUduZCxLQUFLaU4sR0FDUixNQUFPbUIsR0FDUG1OLEdBQVluTixFQUFHbkIsRUFBSyxpQkFFYm1RLEdBQ1RBLEVBQVNuUSxLQUdSc1AsS0FDSEEsSUFBVSxFQUNWSCxPQUdHZSxHQUF5QixvQkFBWlQsUUFDaEIsT0FBTyxJQUFJQSxRQUFRLFNBQVVDLEdBQzNCUyxFQUFXVCxJQWlHakIsSUFBSVUsR0FBYyxJQUFJbEwsR0FPdEIsU0FBU21MLEdBQVVyYixJQUtuQixTQUFTc2IsRUFBV3RiLEVBQUt1YixHQUN2QixJQUFJM2QsRUFBRzJPLEVBQ1AsSUFBSWlQLEVBQU0vUixNQUFNMUosUUFBUUMsR0FDeEIsSUFBTXdiLElBQVF2YixFQUFTRCxJQUFTMUIsT0FBT21kLFNBQVN6YixJQUFRQSxhQUFlMFIsR0FDckUsT0FFRixHQUFJMVIsRUFBSWdVLE9BQVEsQ0FDZCxJQUFJMEgsRUFBUTFiLEVBQUlnVSxPQUFPRSxJQUFJaFEsR0FDM0IsR0FBSXFYLEVBQUsvSyxJQUFJa0wsR0FDWCxPQUVGSCxFQUFLOUssSUFBSWlMLEdBRVgsR0FBSUYsRUFFRixJQURBNWQsRUFBSW9DLEVBQUlNLE9BQ0QxQyxLQUFPMGQsRUFBVXRiLEVBQUlwQyxHQUFJMmQsUUFJaEMsSUFGQWhQLEVBQU9qTyxPQUFPaU8sS0FBS3ZNLEdBQ25CcEMsRUFBSTJPLEVBQUtqTSxPQUNGMUMsS0FBTzBkLEVBQVV0YixFQUFJdU0sRUFBSzNPLElBQUsyZCxHQXZCeENELENBQVV0YixFQUFLb2IsSUFDZkEsR0FBWTFLLFFBbURkLElBQUlpTCxHQUFpQnZSLEVBQU8sU0FBVWpNLEdBQ3BDLElBQUl5ZCxFQUE2QixNQUFuQnpkLEVBQUt3TSxPQUFPLEdBRXRCa1IsRUFBNkIsT0FEakMxZCxFQUFPeWQsRUFBVXpkLEVBQUt5TSxNQUFNLEdBQUt6TSxHQUNkd00sT0FBTyxHQUV0Qm1SLEVBQTZCLE9BRGpDM2QsRUFBTzBkLEVBQVUxZCxFQUFLeU0sTUFBTSxHQUFLek0sR0FDZHdNLE9BQU8sR0FFMUIsTUFBTyxDQUNMeE0sS0FGRkEsRUFBTzJkLEVBQVUzZCxFQUFLeU0sTUFBTSxHQUFLek0sRUFHL0J1TyxLQUFNbVAsRUFDTkMsUUFBU0EsRUFDVEYsUUFBU0EsS0FJYixTQUFTRyxHQUFpQkMsRUFBSzNGLEdBQzdCLFNBQVM0RixJQUNQLElBQUlDLEVBQWNsYSxVQUVkZ2EsRUFBTUMsRUFBUUQsSUFDbEIsSUFBSXZTLE1BQU0xSixRQUFRaWMsR0FPaEIsT0FBT25DLEdBQXdCbUMsRUFBSyxLQUFNaGEsVUFBV3FVLEVBQUksZ0JBTHpELElBREEsSUFBSTlDLEVBQVN5SSxFQUFJcFIsUUFDUmhOLEVBQUksRUFBR0EsRUFBSTJWLEVBQU9qVCxPQUFRMUMsSUFDakNpYyxHQUF3QnRHLEVBQU8zVixHQUFJLEtBQU1zZSxFQUFhN0YsRUFBSSxnQkFRaEUsT0FEQTRGLEVBQVFELElBQU1BLEVBQ1BDLEVBR1QsU0FBU0UsR0FDUEMsRUFDQUMsRUFDQTVMLEVBQ0E2TCxFQUNBQyxFQUNBbEcsR0FFQSxJQUFJbFksRUFBY3NiLEVBQUsrQyxFQUFLQyxFQUM1QixJQUFLdGUsS0FBUWllLEVBQ0YzQyxFQUFNMkMsRUFBR2plLEdBQ2xCcWUsRUFBTUgsRUFBTWxlLEdBQ1pzZSxFQUFRZCxHQUFleGQsR0FDbkJxSyxFQUFRaVIsS0FLRGpSLEVBQVFnVSxJQUNiaFUsRUFBUWlSLEVBQUl1QyxPQUNkdkMsRUFBTTJDLEVBQUdqZSxHQUFRNGQsR0FBZ0J0QyxFQUFLcEQsSUFFcEMxTixFQUFPOFQsRUFBTS9QLFFBQ2YrTSxFQUFNMkMsRUFBR2plLEdBQVFvZSxFQUFrQkUsRUFBTXRlLEtBQU1zYixFQUFLZ0QsRUFBTVgsVUFFNURyTCxFQUFJZ00sRUFBTXRlLEtBQU1zYixFQUFLZ0QsRUFBTVgsUUFBU1csRUFBTWIsUUFBU2EsRUFBTUMsU0FDaERqRCxJQUFRK0MsSUFDakJBLEVBQUlSLElBQU12QyxFQUNWMkMsRUFBR2plLEdBQVFxZSxJQUdmLElBQUtyZSxLQUFRa2UsRUFDUDdULEVBQVE0VCxFQUFHamUsS0FFYm1lLEdBREFHLEVBQVFkLEdBQWV4ZCxJQUNQQSxLQUFNa2UsRUFBTWxlLEdBQU9zZSxFQUFNWCxTQU8vQyxTQUFTYSxHQUFnQnhPLEVBQUt5TyxFQUFTaEcsR0FJckMsSUFBSXFGLEVBSEE5TixhQUFldUQsS0FDakJ2RCxFQUFNQSxFQUFJM0ssS0FBS29ULE9BQVN6SSxFQUFJM0ssS0FBS29ULEtBQU8sS0FHMUMsSUFBSWlHLEVBQVUxTyxFQUFJeU8sR0FFbEIsU0FBU0UsSUFDUGxHLEVBQUsxTCxNQUFNdkksS0FBTVgsV0FHakI4RSxFQUFPbVYsRUFBUUQsSUFBS2MsR0FHbEJ0VSxFQUFRcVUsR0FFVlosRUFBVUYsR0FBZ0IsQ0FBQ2UsSUFHdkJwVSxFQUFNbVUsRUFBUWIsTUFBUXJULEVBQU9rVSxFQUFRRSxTQUV2Q2QsRUFBVVksR0FDRmIsSUFBSTVYLEtBQUswWSxHQUdqQmIsRUFBVUYsR0FBZ0IsQ0FBQ2MsRUFBU0MsSUFJeENiLEVBQVFjLFFBQVMsRUFDakI1TyxFQUFJeU8sR0FBV1gsRUE4Q2pCLFNBQVNlLEdBQ1B0UixFQUNBdVIsRUFDQTlkLEVBQ0ErZCxFQUNBQyxHQUVBLEdBQUl6VSxFQUFNdVUsR0FBTyxDQUNmLEdBQUk5UyxFQUFPOFMsRUFBTTlkLEdBS2YsT0FKQXVNLEVBQUl2TSxHQUFPOGQsRUFBSzlkLEdBQ1hnZSxVQUNJRixFQUFLOWQsSUFFUCxFQUNGLEdBQUlnTCxFQUFPOFMsRUFBTUMsR0FLdEIsT0FKQXhSLEVBQUl2TSxHQUFPOGQsRUFBS0MsR0FDWEMsVUFDSUYsRUFBS0MsSUFFUCxFQUdYLE9BQU8sRUE4QlQsU0FBU0UsR0FBbUJ4TCxHQUMxQixPQUFPaEosRUFBWWdKLEdBQ2YsQ0FBQ3dCLEdBQWdCeEIsSUFDakJuSSxNQUFNMUosUUFBUTZSLEdBU3BCLFNBQVN5TCxFQUF3QnpMLEVBQVUwTCxHQUN6QyxJQUFJNVIsRUFBTSxHQUNWLElBQUk5TixFQUFHSyxFQUFHc2YsRUFBV0MsRUFDckIsSUFBSzVmLEVBQUksRUFBR0EsRUFBSWdVLEVBQVN0UixPQUFRMUMsSUFFM0I0SyxFQURKdkssRUFBSTJULEVBQVNoVSxLQUNrQixrQkFBTkssSUFDekJzZixFQUFZN1IsRUFBSXBMLE9BQVMsRUFDekJrZCxFQUFPOVIsRUFBSTZSLEdBRVA5VCxNQUFNMUosUUFBUTlCLEdBQ1pBLEVBQUVxQyxPQUFTLElBR1RtZCxJQUZKeGYsRUFBSW9mLEVBQXVCcGYsR0FBS3FmLEdBQWUsSUFBTSxJQUFNMWYsSUFFMUMsS0FBTzZmLEdBQVdELEtBQ2pDOVIsRUFBSTZSLEdBQWFuSyxHQUFnQm9LLEVBQUszTCxLQUFRNVQsRUFBRSxHQUFJNFQsTUFDcEQ1VCxFQUFFeWYsU0FFSmhTLEVBQUl0SCxLQUFLOEcsTUFBTVEsRUFBS3pOLElBRWIySyxFQUFZM0ssR0FDakJ3ZixHQUFXRCxHQUliOVIsRUFBSTZSLEdBQWFuSyxHQUFnQm9LLEVBQUszTCxLQUFPNVQsR0FDOUIsS0FBTkEsR0FFVHlOLEVBQUl0SCxLQUFLZ1AsR0FBZ0JuVixJQUd2QndmLEdBQVd4ZixJQUFNd2YsR0FBV0QsR0FFOUI5UixFQUFJNlIsR0FBYW5LLEdBQWdCb0ssRUFBSzNMLEtBQU81VCxFQUFFNFQsT0FHM0NsSixFQUFPaUosRUFBUytMLFdBQ2xCalYsRUFBTXpLLEVBQUUwVCxNQUNSbkosRUFBUXZLLEVBQUVrQixNQUNWdUosRUFBTTRVLEtBQ05yZixFQUFFa0IsSUFBTSxVQUFZbWUsRUFBYyxJQUFNMWYsRUFBSSxNQUU5QzhOLEVBQUl0SCxLQUFLbkcsS0FJZixPQUFPeU4sRUFyREQyUixDQUF1QnpMLFFBQ3ZCaEMsRUFHUixTQUFTNk4sR0FBWXRLLEdBQ25CLE9BQU96SyxFQUFNeUssSUFBU3pLLEVBQU15SyxFQUFLdEIsUUFueUVwQixJQW15RXFDc0IsRUFBS1QsVUFxRnpELFNBQVNrTCxHQUFlNUcsRUFBUVgsR0FDOUIsR0FBSVcsRUFBUSxDQU9WLElBTEEsSUFBSWxWLEVBQVN4RCxPQUFPWSxPQUFPLE1BQ3ZCcU4sRUFBTzRELEdBQ1BDLFFBQVFDLFFBQVEyRyxHQUNoQjFZLE9BQU9pTyxLQUFLeUssR0FFUHBaLEVBQUksRUFBR0EsRUFBSTJPLEVBQUtqTSxPQUFRMUMsSUFBSyxDQUNwQyxJQUFJdUIsRUFBTW9OLEVBQUszTyxHQUVmLEdBQVksV0FBUnVCLEVBQUosQ0FHQSxJQUZBLElBQUkwZSxFQUFhN0csRUFBTzdYLEdBQUs0VyxLQUN6Qm5TLEVBQVN5UyxFQUNOelMsR0FBUSxDQUNiLEdBQUlBLEVBQU9rYSxXQUFhM1QsRUFBT3ZHLEVBQU9rYSxVQUFXRCxHQUFhLENBQzVEL2IsRUFBTzNDLEdBQU95RSxFQUFPa2EsVUFBVUQsR0FDL0IsTUFFRmphLEVBQVNBLEVBQU84VixRQUVsQixJQUFLOVYsRUFDSCxHQUFJLFlBQWFvVCxFQUFPN1gsR0FBTSxDQUM1QixJQUFJNGUsRUFBaUIvRyxFQUFPN1gsR0FBSzJaLFFBQ2pDaFgsRUFBTzNDLEdBQWlDLG1CQUFuQjRlLEVBQ2pCQSxFQUFlaGdCLEtBQUtzWSxHQUNwQjBILE9BQ0s1USxHQUtmLE9BQU9yTCxHQVdYLFNBQVNrYyxHQUNQcE0sRUFDQUcsR0FFQSxJQUFLSCxJQUFhQSxFQUFTdFIsT0FDekIsTUFBTyxHQUdULElBREEsSUFBSTJkLEVBQVEsR0FDSHJnQixFQUFJLEVBQUdDLEVBQUkrVCxFQUFTdFIsT0FBUTFDLEVBQUlDLEVBQUdELElBQUssQ0FDL0MsSUFBSW9WLEVBQVFwQixFQUFTaFUsR0FDakI0RixFQUFPd1AsRUFBTXhQLEtBT2pCLEdBTElBLEdBQVFBLEVBQUswYSxPQUFTMWEsRUFBSzBhLE1BQU1DLGFBQzVCM2EsRUFBSzBhLE1BQU1DLEtBSWZuTCxFQUFNakIsVUFBWUEsR0FBV2lCLEVBQU1kLFlBQWNILElBQ3BEdk8sR0FBcUIsTUFBYkEsRUFBSzJhLE1BVVpGLEVBQU1uRixVQUFZbUYsRUFBTW5GLFFBQVUsS0FBSzFVLEtBQUs0TyxPQVQ3QyxDQUNBLElBQUk3VSxFQUFPcUYsRUFBSzJhLEtBQ1pBLEVBQVFGLEVBQU05ZixLQUFVOGYsRUFBTTlmLEdBQVEsSUFDeEIsYUFBZDZVLEVBQU1yQixJQUNSd00sRUFBSy9aLEtBQUs4RyxNQUFNaVQsRUFBTW5MLEVBQU1wQixVQUFZLElBRXhDdU0sRUFBSy9aLEtBQUs0TyxJQU9oQixJQUFLLElBQUlvTCxLQUFVSCxFQUNiQSxFQUFNRyxHQUFRbFMsTUFBTW1TLFlBQ2ZKLEVBQU1HLEdBR2pCLE9BQU9ILEVBR1QsU0FBU0ksR0FBY2xMLEdBQ3JCLE9BQVFBLEVBQUtULFlBQWNTLEVBQUtsQixjQUErQixNQUFka0IsRUFBS3RCLEtBS3hELFNBQVN5TSxHQUNQTCxFQUNBTSxFQUNBQyxHQUVBLElBQUk5UyxFQUNBK1MsRUFBaUJuZ0IsT0FBT2lPLEtBQUtnUyxHQUFhamUsT0FBUyxFQUNuRG9lLEVBQVdULElBQVVBLEVBQU1VLFNBQVdGLEVBQ3RDdGYsRUFBTThlLEdBQVNBLEVBQU1XLEtBQ3pCLEdBQUtYLEVBRUUsSUFBSUEsRUFBTVksWUFFZixPQUFPWixFQUFNWSxZQUNSLEdBQ0xILEdBQ0FGLEdBQ0FBLElBQWNsVyxHQUNkbkosSUFBUXFmLEVBQVVJLE9BQ2pCSCxJQUNBRCxFQUFVTSxXQUlYLE9BQU9OLEVBR1AsSUFBSyxJQUFJM0gsS0FEVG5MLEVBQU0sR0FDWXVTLEVBQ1pBLEVBQU1wSCxJQUF1QixNQUFiQSxFQUFNLEtBQ3hCbkwsRUFBSW1MLEdBQVNrSSxHQUFvQlIsRUFBYTFILEVBQU9vSCxFQUFNcEgsVUFuQi9EbkwsRUFBTSxHQXdCUixJQUFLLElBQUlzVCxLQUFTVCxFQUNWUyxLQUFTdFQsSUFDYkEsRUFBSXNULEdBQVNDLEdBQWdCVixFQUFhUyxJQVc5QyxPQU5JZixHQUFTM2YsT0FBTzBXLGFBQWFpSixLQUM5QkEsRUFBT1ksWUFBY25ULEdBRXhCeUMsRUFBSXpDLEVBQUssVUFBV2dULEdBQ3BCdlEsRUFBSXpDLEVBQUssT0FBUXZNLEdBQ2pCZ1AsRUFBSXpDLEVBQUssYUFBYytTLEdBQ2hCL1MsRUFHVCxTQUFTcVQsR0FBb0JSLEVBQWFwZixFQUFLa0IsR0FDN0MsSUFBSWlYLEVBQWEsV0FDZixJQUFJNUwsRUFBTTFKLFVBQVUxQixPQUFTRCxFQUFHNkssTUFBTSxLQUFNbEosV0FBYTNCLEVBQUcsSUFJNUQsT0FIQXFMLEVBQU1BLEdBQXNCLGlCQUFSQSxJQUFxQmpDLE1BQU0xSixRQUFRMkwsR0FDbkQsQ0FBQ0EsR0FDRDBSLEdBQWtCMVIsTUFFTCxJQUFmQSxFQUFJcEwsUUFDWSxJQUFmb0wsRUFBSXBMLFFBQWdCb0wsRUFBSSxHQUFHZ0gsZ0JBQzFCOUMsRUFDQWxFLEdBWU4sT0FQSXJMLEVBQUc2ZSxPQUNMNWdCLE9BQU9DLGVBQWVnZ0IsRUFBYXBmLEVBQUssQ0FDdENWLElBQUs2WSxFQUNMOVksWUFBWSxFQUNaNlAsY0FBYyxJQUdYaUosRUFHVCxTQUFTMkgsR0FBZ0JoQixFQUFPOWUsR0FDOUIsT0FBTyxXQUFjLE9BQU84ZSxFQUFNOWUsSUFRcEMsU0FBU2dnQixHQUNQbmYsRUFDQW9mLEdBRUEsSUFBSTlULEVBQUsxTixFQUFHQyxFQUFHME8sRUFBTXBOLEVBQ3JCLEdBQUlzSyxNQUFNMUosUUFBUUMsSUFBdUIsaUJBQVJBLEVBRS9CLElBREFzTCxFQUFNLElBQUk3QixNQUFNekosRUFBSU0sUUFDZjFDLEVBQUksRUFBR0MsRUFBSW1DLEVBQUlNLE9BQVExQyxFQUFJQyxFQUFHRCxJQUNqQzBOLEVBQUkxTixHQUFLd2hCLEVBQU9wZixFQUFJcEMsR0FBSUEsUUFFckIsR0FBbUIsaUJBQVJvQyxFQUVoQixJQURBc0wsRUFBTSxJQUFJN0IsTUFBTXpKLEdBQ1hwQyxFQUFJLEVBQUdBLEVBQUlvQyxFQUFLcEMsSUFDbkIwTixFQUFJMU4sR0FBS3doQixFQUFPeGhCLEVBQUksRUFBR0EsUUFFcEIsR0FBSXFDLEVBQVNELEdBQ2xCLEdBQUltUSxJQUFhblEsRUFBSXJCLE9BQU8wZ0IsVUFBVyxDQUNyQy9ULEVBQU0sR0FHTixJQUZBLElBQUkrVCxFQUFXcmYsRUFBSXJCLE9BQU8wZ0IsWUFDdEJ2ZCxFQUFTdWQsRUFBU0MsUUFDZHhkLEVBQU95ZCxNQUNialUsRUFBSWxILEtBQUtnYixFQUFPdGQsRUFBT2pELE1BQU95TSxFQUFJaEwsU0FDbEN3QixFQUFTdWQsRUFBU0MsWUFLcEIsSUFGQS9TLEVBQU9qTyxPQUFPaU8sS0FBS3ZNLEdBQ25Cc0wsRUFBTSxJQUFJN0IsTUFBTThDLEVBQUtqTSxRQUNoQjFDLEVBQUksRUFBR0MsRUFBSTBPLEVBQUtqTSxPQUFRMUMsRUFBSUMsRUFBR0QsSUFDbEN1QixFQUFNb04sRUFBSzNPLEdBQ1gwTixFQUFJMU4sR0FBS3doQixFQUFPcGYsRUFBSWIsR0FBTUEsRUFBS3ZCLEdBUXJDLE9BSks4SyxFQUFNNEMsS0FDVEEsRUFBTSxJQUVQQSxFQUFLcVMsVUFBVyxFQUNWclMsRUFRVCxTQUFTa1UsR0FDUHJoQixFQUNBc2hCLEVBQ0EzSSxFQUNBNEksR0FFQSxJQUNJQyxFQURBQyxFQUFlamQsS0FBS2tkLGFBQWExaEIsR0FFakN5aEIsR0FDRjlJLEVBQVFBLEdBQVMsR0FDYjRJLElBT0Y1SSxFQUFRNVUsRUFBT0EsRUFBTyxHQUFJd2QsR0FBYTVJLElBRXpDNkksRUFBUUMsRUFBYTlJLElBQVUySSxHQUUvQkUsRUFBUWhkLEtBQUttZCxPQUFPM2hCLElBQVNzaEIsRUFHL0IsSUFBSXRPLEVBQVMyRixHQUFTQSxFQUFNcUgsS0FDNUIsT0FBSWhOLEVBQ0t4TyxLQUFLb2QsZUFBZSxXQUFZLENBQUU1QixLQUFNaE4sR0FBVXdPLEdBRWxEQSxFQVNYLFNBQVNLLEdBQWU5YixHQUN0QixPQUFPK1QsR0FBYXRWLEtBQUtvVyxTQUFVLFVBQVc3VSxJQUFhMEgsRUFLN0QsU0FBU3FVLEdBQWVDLEVBQVFDLEdBQzlCLE9BQUkxVyxNQUFNMUosUUFBUW1nQixJQUNtQixJQUE1QkEsRUFBT2pXLFFBQVFrVyxHQUVmRCxJQUFXQyxFQVN0QixTQUFTQyxHQUNQQyxFQUNBbGhCLEVBQ0FtaEIsRUFDQUMsRUFDQUMsR0FFQSxJQUFJQyxFQUFnQjFULEVBQU9VLFNBQVN0TyxJQUFRbWhCLEVBQzVDLE9BQUlFLEdBQWtCRCxJQUFpQnhULEVBQU9VLFNBQVN0TyxHQUM5QzhnQixHQUFjTyxFQUFnQkQsR0FDNUJFLEVBQ0ZSLEdBQWNRLEVBQWVKLEdBQzNCRSxFQUNGelYsRUFBVXlWLEtBQWtCcGhCLE9BRDlCLEVBVVQsU0FBU3VoQixHQUNQbGQsRUFDQW1PLEVBQ0E5UyxFQUNBOGhCLEVBQ0FDLEdBRUEsR0FBSS9oQixFQUNGLEdBQUtvQixFQUFTcEIsR0FLUCxDQUlMLElBQUlvZSxFQUhBeFQsTUFBTTFKLFFBQVFsQixLQUNoQkEsRUFBUTRNLEVBQVM1TSxJQUduQixJQUFJZ2lCLEVBQU8sU0FBVzFoQixHQUNwQixHQUNVLFVBQVJBLEdBQ1EsVUFBUkEsR0FDQTRLLEVBQW9CNUssR0FFcEI4ZCxFQUFPelosTUFDRixDQUNMLElBQUltRCxFQUFPbkQsRUFBSzBhLE9BQVMxYSxFQUFLMGEsTUFBTXZYLEtBQ3BDc1csRUFBTzBELEdBQVU1VCxFQUFPZ0IsWUFBWTRELEVBQUtoTCxFQUFNeEgsR0FDM0NxRSxFQUFLc2QsV0FBYXRkLEVBQUtzZCxTQUFXLElBQ2xDdGQsRUFBSzBhLFFBQVUxYSxFQUFLMGEsTUFBUSxJQUVsQyxJQUFJNkMsRUFBZXhXLEVBQVNwTCxHQUN4QjZoQixFQUFnQmxXLEVBQVUzTCxHQUN4QjRoQixLQUFnQjlELEdBQVcrRCxLQUFpQi9ELElBQ2hEQSxFQUFLOWQsR0FBT04sRUFBTU0sR0FFZHloQixLQUNPcGQsRUFBSzRZLEtBQU81WSxFQUFLNFksR0FBSyxLQUMzQixVQUFZamQsR0FBUSxTQUFVOGhCLEdBQ2hDcGlCLEVBQU1NLEdBQU84aEIsTUFNckIsSUFBSyxJQUFJOWhCLEtBQU9OLEVBQU9naUIsRUFBTTFoQixRQUdqQyxPQUFPcUUsRUFRVCxTQUFTMGQsR0FDUHJaLEVBQ0FzWixHQUVBLElBQUkvVyxFQUFTekgsS0FBS3llLGVBQWlCemUsS0FBS3llLGFBQWUsSUFDbkRDLEVBQU9qWCxFQUFPdkMsR0FHbEIsT0FBSXdaLElBQVNGLEVBQ0pFLEdBUVRDLEdBTEFELEVBQU9qWCxFQUFPdkMsR0FBU2xGLEtBQUtvVyxTQUFTd0ksZ0JBQWdCMVosR0FBTzlKLEtBQzFENEUsS0FBSzZlLGFBQ0wsS0FDQTdlLE1BRWdCLGFBQWVrRixHQUFRLEdBQ2xDd1osR0FPVCxTQUFTSSxHQUNQSixFQUNBeFosRUFDQTFJLEdBR0EsT0FEQW1pQixHQUFXRCxFQUFPLFdBQWF4WixHQUFTMUksRUFBTyxJQUFNQSxFQUFPLEtBQU0sR0FDM0RraUIsRUFHVCxTQUFTQyxHQUNQRCxFQUNBbGlCLEVBQ0F5VCxHQUVBLEdBQUluSixNQUFNMUosUUFBUXNoQixHQUNoQixJQUFLLElBQUl6akIsRUFBSSxFQUFHQSxFQUFJeWpCLEVBQUsvZ0IsT0FBUTFDLElBQzNCeWpCLEVBQUt6akIsSUFBeUIsaUJBQVp5akIsRUFBS3pqQixJQUN6QjhqQixHQUFlTCxFQUFLempCLEdBQUt1QixFQUFNLElBQU12QixFQUFJZ1YsUUFJN0M4TyxHQUFlTCxFQUFNbGlCLEVBQUt5VCxHQUk5QixTQUFTOE8sR0FBZ0J2TyxFQUFNaFUsRUFBS3lULEdBQ2xDTyxFQUFLWCxVQUFXLEVBQ2hCVyxFQUFLaFUsSUFBTUEsRUFDWGdVLEVBQUtQLE9BQVNBLEVBS2hCLFNBQVMrTyxHQUFxQm5lLEVBQU0zRSxHQUNsQyxHQUFJQSxFQUNGLEdBQUtpSyxFQUFjakssR0FLWixDQUNMLElBQUl1ZCxFQUFLNVksRUFBSzRZLEdBQUs1WSxFQUFLNFksR0FBS2xhLEVBQU8sR0FBSXNCLEVBQUs0WSxJQUFNLEdBQ25ELElBQUssSUFBSWpkLEtBQU9OLEVBQU8sQ0FDckIsSUFBSStpQixFQUFXeEYsRUFBR2pkLEdBQ2QwaUIsRUFBT2hqQixFQUFNTSxHQUNqQmlkLEVBQUdqZCxHQUFPeWlCLEVBQVcsR0FBR25lLE9BQU9tZSxFQUFVQyxHQUFRQSxRQUl2RCxPQUFPcmUsRUFLVCxTQUFTc2UsR0FDUDlGLEVBQ0F0USxFQUVBcVcsRUFDQUMsR0FFQXRXLEVBQU1BLEdBQU8sQ0FBRWlULFNBQVVvRCxHQUN6QixJQUFLLElBQUlua0IsRUFBSSxFQUFHQSxFQUFJb2UsRUFBSTFiLE9BQVExQyxJQUFLLENBQ25DLElBQUl1Z0IsRUFBT25DLEVBQUlwZSxHQUNYNkwsTUFBTTFKLFFBQVFvZSxHQUNoQjJELEdBQW1CM0QsRUFBTXpTLEVBQUtxVyxHQUNyQjVELElBRUxBLEVBQUtlLFFBQ1BmLEVBQUs5ZCxHQUFHNmUsT0FBUSxHQUVsQnhULEVBQUl5UyxFQUFLaGYsS0FBT2dmLEVBQUs5ZCxJQU16QixPQUhJMmhCLElBQ0R0VyxFQUFLa1QsS0FBT29ELEdBRVJ0VyxFQUtULFNBQVN1VyxHQUFpQkMsRUFBU0MsR0FDakMsSUFBSyxJQUFJdmtCLEVBQUksRUFBR0EsRUFBSXVrQixFQUFPN2hCLE9BQVExQyxHQUFLLEVBQUcsQ0FDekMsSUFBSXVCLEVBQU1nakIsRUFBT3ZrQixHQUNFLGlCQUFSdUIsR0FBb0JBLElBQzdCK2lCLEVBQVFDLEVBQU92a0IsSUFBTXVrQixFQUFPdmtCLEVBQUksSUFTcEMsT0FBT3NrQixFQU1ULFNBQVNFLEdBQWlCdmpCLEVBQU93akIsR0FDL0IsTUFBd0IsaUJBQVZ4akIsRUFBcUJ3akIsRUFBU3hqQixFQUFRQSxFQUt0RCxTQUFTeWpCLEdBQXNCblIsR0FDN0JBLEVBQU9vUixHQUFLZCxHQUNadFEsRUFBT3FSLEdBQUs5WSxFQUNaeUgsRUFBT3NSLEdBQUszaUIsRUFDWnFSLEVBQU91UixHQUFLdkQsR0FDWmhPLEVBQU93UixHQUFLbkQsR0FDWnJPLEVBQU95UixHQUFLL1csRUFDWnNGLEVBQU9oTixHQUFLc0ksRUFDWjBFLEVBQU8wUixHQUFLM0IsR0FDWi9QLEVBQU8yUixHQUFLOUMsR0FDWjdPLEVBQU80UixHQUFLM0MsR0FDWmpQLEVBQU82UixHQUFLdEMsR0FDWnZQLEVBQU84UixHQUFLN1AsR0FDWmpDLEVBQU8rUixHQUFLaFEsR0FDWi9CLEVBQU9nUyxHQUFLckIsR0FDWjNRLEVBQU9pUyxHQUFLekIsR0FDWnhRLEVBQU9rUyxHQUFLcEIsR0FDWjlRLEVBQU9tUyxHQUFLbEIsR0FLZCxTQUFTbUIsR0FDUC9mLEVBQ0FzVCxFQUNBbEYsRUFDQVUsRUFDQXJDLEdBRUEsSUFLSXVULEVBTEFDLEVBQVM5Z0IsS0FFVDhDLEVBQVV3SyxFQUFLeEssUUFJZjBFLEVBQU9tSSxFQUFRLFNBQ2pCa1IsRUFBWWxsQixPQUFPWSxPQUFPb1QsSUFFaEJvUixVQUFZcFIsR0FLdEJrUixFQUFZbFIsRUFFWkEsRUFBU0EsRUFBT29SLFdBRWxCLElBQUlDLEVBQWFoYixFQUFPbEQsRUFBUW1lLFdBQzVCQyxHQUFxQkYsRUFFekJoaEIsS0FBS2EsS0FBT0EsRUFDWmIsS0FBS21VLE1BQVFBLEVBQ2JuVSxLQUFLaVAsU0FBV0EsRUFDaEJqUCxLQUFLMlAsT0FBU0EsRUFDZDNQLEtBQUttaEIsVUFBWXRnQixFQUFLNFksSUFBTTlULEVBQzVCM0YsS0FBS29oQixXQUFhbkcsR0FBY25ZLEVBQVF1UixPQUFRMUUsR0FDaEQzUCxLQUFLc2IsTUFBUSxXQU9YLE9BTkt3RixFQUFPM0QsUUFDVnhCLEdBQ0U5YSxFQUFLd2dCLFlBQ0xQLEVBQU8zRCxPQUFTOUIsR0FBYXBNLEVBQVVVLElBR3BDbVIsRUFBTzNELFFBR2hCeGhCLE9BQU9DLGVBQWVvRSxLQUFNLGNBQWdCLENBQzFDbkUsWUFBWSxFQUNaQyxJQUFLLFdBQ0gsT0FBTzZmLEdBQXFCOWEsRUFBS3dnQixZQUFhcmhCLEtBQUtzYixZQUtuRDBGLElBRUZoaEIsS0FBS29XLFNBQVd0VCxFQUVoQjlDLEtBQUttZCxPQUFTbmQsS0FBS3NiLFFBQ25CdGIsS0FBS2tkLGFBQWV2QixHQUFxQjlhLEVBQUt3Z0IsWUFBYXJoQixLQUFLbWQsU0FHOURyYSxFQUFRd2UsU0FDVnRoQixLQUFLdWhCLEdBQUssU0FBVS9oQixFQUFHQyxFQUFHbkUsRUFBR0MsR0FDM0IsSUFBSW9WLEVBQVE1TSxHQUFjOGMsRUFBV3JoQixFQUFHQyxFQUFHbkUsRUFBR0MsRUFBRzJsQixHQUtqRCxPQUpJdlEsSUFBVTdKLE1BQU0xSixRQUFRdVQsS0FDMUJBLEVBQU1sQixVQUFZM00sRUFBUXdlLFNBQzFCM1EsRUFBTXBCLFVBQVlJLEdBRWJnQixHQUdUM1EsS0FBS3VoQixHQUFLLFNBQVUvaEIsRUFBR0MsRUFBR25FLEVBQUdDLEdBQUssT0FBT3dJLEdBQWM4YyxFQUFXcmhCLEVBQUdDLEVBQUduRSxFQUFHQyxFQUFHMmxCLElBK0NsRixTQUFTTSxHQUE4QjdRLEVBQU85UCxFQUFNZ2dCLEVBQVcvZCxFQUFTMmUsR0FJdEUsSUFBSUMsRUFBUWhSLEdBQVdDLEdBU3ZCLE9BUkErUSxFQUFNblMsVUFBWXNSLEVBQ2xCYSxFQUFNbFMsVUFBWTFNLEVBSWRqQyxFQUFLMmEsUUFDTmtHLEVBQU03Z0IsT0FBUzZnQixFQUFNN2dCLEtBQU8sS0FBSzJhLEtBQU8zYSxFQUFLMmEsTUFFekNrRyxFQUdULFNBQVNDLEdBQVkvWSxFQUFJd0ssR0FDdkIsSUFBSyxJQUFJNVcsS0FBTzRXLEVBQ2R4SyxFQUFHaEIsRUFBU3BMLElBQVE0VyxFQUFLNVcsR0E3RDdCbWpCLEdBQXFCaUIsR0FBd0IvakIsV0EwRTdDLElBQUkra0IsR0FBc0IsQ0FDeEJDLEtBQU0sU0FBZWxSLEVBQU9tUixHQUMxQixHQUNFblIsRUFBTWpCLG9CQUNMaUIsRUFBTWpCLGtCQUFrQnFTLGNBQ3pCcFIsRUFBTTlQLEtBQUttaEIsVUFDWCxDQUVBLElBQUlDLEVBQWN0UixFQUNsQmlSLEdBQW9CTSxTQUFTRCxFQUFhQSxPQUNyQyxFQUNPdFIsRUFBTWpCLGtCQTBKeEIsU0FDRWlCLEVBQ0FoQixHQUVBLElBQUk3TSxFQUFVLENBQ1pxZixjQUFjLEVBQ2RDLGFBQWN6UixFQUNkaEIsT0FBUUEsR0FHTjBTLEVBQWlCMVIsRUFBTTlQLEtBQUt3aEIsZUFDNUJ0YyxFQUFNc2MsS0FDUnZmLEVBQVEyWixPQUFTNEYsRUFBZTVGLE9BQ2hDM1osRUFBUThiLGdCQUFrQnlELEVBQWV6RCxpQkFFM0MsT0FBTyxJQUFJak8sRUFBTXRCLGlCQUFpQi9CLEtBQUt4SyxHQXpLR3dmLENBQ3BDM1IsRUFDQTRSLEtBRUlDLE9BQU9WLEVBQVluUixFQUFNeEIsU0FBTWxDLEVBQVc2VSxLQUlwREksU0FBVSxTQUFtQk8sRUFBVTlSLEdBQ3JDLElBQUk3TixFQUFVNk4sRUFBTXRCLGtCQWs4QnhCLFNBQ0VxRSxFQUNBbUMsRUFDQXNMLEVBQ0F1QixFQUNBQyxHQUVJblksRUFVSixJQUFJb1ksRUFBaUJGLEVBQVk3aEIsS0FBS3dnQixZQUNsQ3dCLEVBQWlCblAsRUFBR3dKLGFBQ3BCNEYsS0FDREYsSUFBbUJBLEVBQWU1RyxTQUNsQzZHLElBQW1CbGQsSUFBZ0JrZCxFQUFlN0csU0FDbEQ0RyxHQUFrQmxQLEVBQUd3SixhQUFhakIsT0FBUzJHLEVBQWUzRyxNQU16RDhHLEtBQ0ZKLEdBQ0FqUCxFQUFHMEMsU0FBUzRNLGlCQUNaRixHQUdGcFAsRUFBRzBDLFNBQVNnTSxhQUFlTSxFQUMzQmhQLEVBQUd1UCxPQUFTUCxFQUVSaFAsRUFBR3dQLFNBQ0x4UCxFQUFHd1AsT0FBT3ZULE9BQVMrUyxHQVdyQixHQVRBaFAsRUFBRzBDLFNBQVM0TSxnQkFBa0JMLEVBSzlCalAsRUFBR3lQLE9BQVNULEVBQVk3aEIsS0FBSzBhLE9BQVM1VixFQUN0QytOLEVBQUcwUCxXQUFhakMsR0FBYXhiLEVBR3pCa1EsR0FBYW5DLEVBQUcwQyxTQUFTakMsTUFBTyxDQUNsQ3hDLElBQWdCLEdBR2hCLElBRkEsSUFBSXdDLEVBQVFULEVBQUcyQyxPQUNYZ04sRUFBVzNQLEVBQUcwQyxTQUFTa04sV0FBYSxHQUMvQnJvQixFQUFJLEVBQUdBLEVBQUlvb0IsRUFBUzFsQixPQUFRMUMsSUFBSyxDQUN4QyxJQUFJdUIsRUFBTTZtQixFQUFTcG9CLEdBQ2YyYSxFQUFjbEMsRUFBRzBDLFNBQVNqQyxNQUM5QkEsRUFBTTNYLEdBQU9tWixHQUFhblosRUFBS29aLEVBQWFDLEVBQVduQyxHQUV6RC9CLElBQWdCLEdBRWhCK0IsRUFBRzBDLFNBQVNQLFVBQVlBLEVBSTFCc0wsRUFBWUEsR0FBYXhiLEVBQ3pCLElBQUk0ZCxFQUFlN1AsRUFBRzBDLFNBQVNvTixpQkFDL0I5UCxFQUFHMEMsU0FBU29OLGlCQUFtQnJDLEVBQy9Cc0MsR0FBeUIvUCxFQUFJeU4sRUFBV29DLEdBR3BDUixJQUNGclAsRUFBR3lKLE9BQVM5QixHQUFhc0gsRUFBZ0JELEVBQVl0VCxTQUNyRHNFLEVBQUdnUSxnQkFHRGxaLEVBM2dDRm1aLENBRFloVCxFQUFNakIsa0JBQW9CK1MsRUFBUy9TLGtCQUc3QzVNLEVBQVErUyxVQUNSL1MsRUFBUXFlLFVBQ1J4USxFQUNBN04sRUFBUW1NLFdBSVoyVSxPQUFRLFNBQWlCalQsR0FDdkIsSUFtc0M4QitDLEVBbnNDMUJ0RSxFQUFVdUIsRUFBTXZCLFFBQ2hCTSxFQUFvQmlCLEVBQU1qQixrQkFDekJBLEVBQWtCbVUsYUFDckJuVSxFQUFrQm1VLFlBQWEsRUFDL0JDLEdBQVNwVSxFQUFtQixZQUUxQmlCLEVBQU05UCxLQUFLbWhCLFlBQ1Q1UyxFQUFReVUsYUE0ckNnQm5RLEVBdHJDRmhFLEdBeXJDM0JxVSxXQUFZLEVBQ2ZDLEdBQWtCdmlCLEtBQUtpUyxJQXhyQ2pCdVEsR0FBdUJ2VSxHQUFtQixLQUtoRHdVLFFBQVMsU0FBa0J2VCxHQUN6QixJQUFJakIsRUFBb0JpQixFQUFNakIsa0JBQ3pCQSxFQUFrQnFTLGVBQ2hCcFIsRUFBTTlQLEtBQUttaEIsVUF3Z0N0QixTQUFTbUMsRUFBMEJ6USxFQUFJMFEsR0FDckMsR0FBSUEsSUFDRjFRLEVBQUcyUSxpQkFBa0IsRUFDakJDLEdBQWlCNVEsSUFDbkIsT0FHSixJQUFLQSxFQUFHcVEsVUFBVyxDQUNqQnJRLEVBQUdxUSxXQUFZLEVBQ2YsSUFBSyxJQUFJOW9CLEVBQUksRUFBR0EsRUFBSXlZLEVBQUc2USxVQUFVNW1CLE9BQVExQyxJQUN2Q2twQixFQUF5QnpRLEVBQUc2USxVQUFVdHBCLElBRXhDNm9CLEdBQVNwUSxFQUFJLGdCQWpoQ1R5USxDQUF5QnpVLEdBQW1CLEdBRjVDQSxFQUFrQjhVLGNBUXRCQyxHQUFlOW9CLE9BQU9pTyxLQUFLZ1ksSUFFL0IsU0FBUzhDLEdBQ1BwWCxFQUNBek0sRUFDQXVPLEVBQ0FILEVBQ0FELEdBRUEsSUFBSW5KLEVBQVF5SCxHQUFaLENBSUEsSUFBSXFYLEVBQVd2VixFQUFRZ0gsU0FBU25CLE1BU2hDLEdBTkkzWCxFQUFTZ1EsS0FDWEEsRUFBT3FYLEVBQVNwbEIsT0FBTytOLElBS0wsbUJBQVRBLEVBQVgsQ0FRQSxJQUFJZ0MsRUFDSixHQUFJekosRUFBUXlILEVBQUtzWCxXQUdGM1gsS0FEYkssRUF5WkosU0FDRXVYLEVBQ0FGLEdBRUEsR0FBSTNlLEVBQU82ZSxFQUFRdE4sUUFBVXhSLEVBQU04ZSxFQUFRQyxXQUN6QyxPQUFPRCxFQUFRQyxVQUdqQixHQUFJL2UsRUFBTThlLEVBQVFFLFVBQ2hCLE9BQU9GLEVBQVFFLFNBR2pCLElBQUlDLEVBQVFDLEdBQ1JELEdBQVNqZixFQUFNOGUsRUFBUUssVUFBOEMsSUFBbkNMLEVBQVFLLE9BQU81ZCxRQUFRMGQsSUFFM0RILEVBQVFLLE9BQU96akIsS0FBS3VqQixHQUd0QixHQUFJaGYsRUFBTzZlLEVBQVFNLFVBQVlwZixFQUFNOGUsRUFBUU8sYUFDM0MsT0FBT1AsRUFBUU8sWUFHakIsR0FBSUosSUFBVWpmLEVBQU04ZSxFQUFRSyxRQUFTLENBQ25DLElBQUlBLEVBQVNMLEVBQVFLLE9BQVMsQ0FBQ0YsR0FDM0JLLEdBQU8sRUFDUEMsRUFBZSxLQUNmQyxFQUFlLEtBRWpCUCxFQUFPUSxJQUFJLGlCQUFrQixXQUFjLE9BQU9yaEIsRUFBTytnQixFQUFRRixLQUVuRSxJQUFJUyxFQUFjLFNBQVVDLEdBQzFCLElBQUssSUFBSXpxQixFQUFJLEVBQUdDLEVBQUlncUIsRUFBT3ZuQixPQUFRMUMsRUFBSUMsRUFBR0QsSUFDdkNpcUIsRUFBT2pxQixHQUFJeW9CLGVBR1ZnQyxJQUNGUixFQUFPdm5CLE9BQVMsRUFDSyxPQUFqQjJuQixJQUNGSyxhQUFhTCxHQUNiQSxFQUFlLE1BRUksT0FBakJDLElBQ0ZJLGFBQWFKLEdBQ2JBLEVBQWUsUUFLakJ4TixFQUFVaE8sRUFBSyxTQUFVaEIsR0FFM0I4YixFQUFRRSxTQUFXYSxHQUFXN2MsRUFBSzRiLEdBRzlCVSxFQUdISCxFQUFPdm5CLE9BQVMsRUFGaEI4bkIsR0FBWSxLQU1aSSxFQUFTOWIsRUFBSyxTQUFVK2IsR0FLdEIvZixFQUFNOGUsRUFBUUMsYUFDaEJELEVBQVF0TixPQUFRLEVBQ2hCa08sR0FBWSxNQUlaMWMsRUFBTThiLEVBQVE5TSxFQUFTOE4sR0ErQzNCLE9BN0NJdm9CLEVBQVN5TCxLQUNQcEMsRUFBVW9DLEdBRVJsRCxFQUFRZ2YsRUFBUUUsV0FDbEJoYyxFQUFJbkMsS0FBS21SLEVBQVM4TixHQUVYbGYsRUFBVW9DLEVBQUlnZCxhQUN2QmhkLEVBQUlnZCxVQUFVbmYsS0FBS21SLEVBQVM4TixHQUV4QjlmLEVBQU1nRCxFQUFJd08sU0FDWnNOLEVBQVFDLFVBQVljLEdBQVc3YyxFQUFJd08sTUFBT29OLElBR3hDNWUsRUFBTWdELEVBQUlvYyxXQUNaTixFQUFRTyxZQUFjUSxHQUFXN2MsRUFBSW9jLFFBQVNSLEdBQzVCLElBQWQ1YixFQUFJaWQsTUFDTm5CLEVBQVFNLFNBQVUsRUFFbEJHLEVBQWV0TixXQUFXLFdBQ3hCc04sRUFBZSxLQUNYemYsRUFBUWdmLEVBQVFFLFdBQWFsZixFQUFRZ2YsRUFBUXROLFNBQy9Dc04sRUFBUU0sU0FBVSxFQUNsQk0sR0FBWSxLQUViMWMsRUFBSWlkLE9BQVMsTUFJaEJqZ0IsRUFBTWdELEVBQUlrZCxXQUNaVixFQUFldk4sV0FBVyxXQUN4QnVOLEVBQWUsS0FDWDFmLEVBQVFnZixFQUFRRSxXQUNsQmMsRUFHTSxPQUdQOWMsRUFBSWtkLFlBS2JaLEdBQU8sRUFFQVIsRUFBUU0sUUFDWE4sRUFBUU8sWUFDUlAsRUFBUUUsVUFqaEJMbUIsQ0FEUDVXLEVBQWVoQyxFQUM0QnFYLElBS3pDLE9BdVlOLFNBQ0VFLEVBQ0Foa0IsRUFDQXVPLEVBQ0FILEVBQ0FELEdBRUEsSUFBSXdCLEVBQU9ELEtBR1gsT0FGQUMsRUFBS2xCLGFBQWV1VixFQUNwQnJVLEVBQUtOLFVBQVksQ0FBRXJQLEtBQU1BLEVBQU11TyxRQUFTQSxFQUFTSCxTQUFVQSxFQUFVRCxJQUFLQSxHQUNuRXdCLEVBalpJMlYsQ0FDTDdXLEVBQ0F6TyxFQUNBdU8sRUFDQUgsRUFDQUQsR0FLTm5PLEVBQU9BLEdBQVEsR0FJZnVsQixHQUEwQjlZLEdBR3RCdkgsRUFBTWxGLEVBQUt3bEIsUUF3RmpCLFNBQXlCdmpCLEVBQVNqQyxHQUNoQyxJQUFJaVYsRUFBUWhULEVBQVF1akIsT0FBU3ZqQixFQUFRdWpCLE1BQU12USxNQUFTLFFBQ2hEZ0UsRUFBU2hYLEVBQVF1akIsT0FBU3ZqQixFQUFRdWpCLE1BQU12TSxPQUFVLFNBQ3BEalosRUFBSzBhLFFBQVUxYSxFQUFLMGEsTUFBUSxLQUFLekYsR0FBUWpWLEVBQUt3bEIsTUFBTW5xQixNQUN0RCxJQUFJdWQsRUFBSzVZLEVBQUs0WSxLQUFPNVksRUFBSzRZLEdBQUssSUFDM0J3RixFQUFXeEYsRUFBR0ssR0FDZHdNLEVBQVd6bEIsRUFBS3dsQixNQUFNQyxTQUN0QnZnQixFQUFNa1osSUFFTm5ZLE1BQU0xSixRQUFRNmhCLElBQ3NCLElBQWhDQSxFQUFTM1gsUUFBUWdmLEdBQ2pCckgsSUFBYXFILEtBRWpCN00sRUFBR0ssR0FBUyxDQUFDd00sR0FBVXhsQixPQUFPbWUsSUFHaEN4RixFQUFHSyxHQUFTd00sRUF2R1pDLENBQWVqWixFQUFLeEssUUFBU2pDLEdBSS9CLElBQUlnVixFQXI4Qk4sU0FDRWhWLEVBQ0F5TSxFQUNBMEIsR0FLQSxJQUFJNEcsRUFBY3RJLEVBQUt4SyxRQUFRcVIsTUFDL0IsSUFBSXRPLEVBQVErUCxHQUFaLENBR0EsSUFBSTdNLEVBQU0sR0FDTndTLEVBQVExYSxFQUFLMGEsTUFDYnBILEVBQVF0VCxFQUFLc1QsTUFDakIsR0FBSXBPLEVBQU13VixJQUFVeFYsRUFBTW9PLEdBQ3hCLElBQUssSUFBSTNYLEtBQU9vWixFQUFhLENBQzNCLElBQUkyRSxFQUFTcFMsRUFBVTNMLEdBaUJ2QjZkLEdBQVV0UixFQUFLb0wsRUFBTzNYLEVBQUsrZCxHQUFRLElBQ25DRixHQUFVdFIsRUFBS3dTLEVBQU8vZSxFQUFLK2QsR0FBUSxHQUd2QyxPQUFPeFIsR0ErNUJTeWQsQ0FBMEIzbEIsRUFBTXlNLEdBR2hELEdBQUl0SCxFQUFPc0gsRUFBS3hLLFFBQVEyakIsWUFDdEIsT0F4TUosU0FDRW5aLEVBQ0F1SSxFQUNBaFYsRUFDQWdnQixFQUNBNVIsR0FFQSxJQUFJbk0sRUFBVXdLLEVBQUt4SyxRQUNmcVIsRUFBUSxHQUNSeUIsRUFBYzlTLEVBQVFxUixNQUMxQixHQUFJcE8sRUFBTTZQLEdBQ1IsSUFBSyxJQUFJcFosS0FBT29aLEVBQ2R6QixFQUFNM1gsR0FBT21aLEdBQWFuWixFQUFLb1osRUFBYUMsR0FBYWxRLFFBR3ZESSxFQUFNbEYsRUFBSzBhLFFBQVVvRyxHQUFXeE4sRUFBT3RULEVBQUswYSxPQUM1Q3hWLEVBQU1sRixFQUFLc1QsUUFBVXdOLEdBQVd4TixFQUFPdFQsRUFBS3NULE9BR2xELElBQUlzTixFQUFnQixJQUFJYixHQUN0Qi9mLEVBQ0FzVCxFQUNBbEYsRUFDQTRSLEVBQ0F2VCxHQUdFcUQsRUFBUTdOLEVBQVEyWixPQUFPcmhCLEtBQUssS0FBTXFtQixFQUFjRixHQUFJRSxHQUV4RCxHQUFJOVEsYUFBaUI1QixHQUNuQixPQUFPeVMsR0FBNkI3USxFQUFPOVAsRUFBTTRnQixFQUFjOVIsT0FBUTdNLEdBQ2xFLEdBQUlnRSxNQUFNMUosUUFBUXVULEdBQVEsQ0FHL0IsSUFGQSxJQUFJK1YsRUFBU2pNLEdBQWtCOUosSUFBVSxHQUNyQzVILEVBQU0sSUFBSWpDLE1BQU00ZixFQUFPL29CLFFBQ2xCMUMsRUFBSSxFQUFHQSxFQUFJeXJCLEVBQU8vb0IsT0FBUTFDLElBQ2pDOE4sRUFBSTlOLEdBQUt1bUIsR0FBNkJrRixFQUFPenJCLEdBQUk0RixFQUFNNGdCLEVBQWM5UixPQUFRN00sR0FFL0UsT0FBT2lHLEdBbUtBNGQsQ0FBMEJyWixFQUFNdUksRUFBV2hWLEVBQU11TyxFQUFTSCxHQUtuRSxJQUFJa1MsRUFBWXRnQixFQUFLNFksR0FLckIsR0FGQTVZLEVBQUs0WSxHQUFLNVksRUFBSytsQixTQUVYNWdCLEVBQU9zSCxFQUFLeEssUUFBUStqQixVQUFXLENBS2pDLElBQUlyTCxFQUFPM2EsRUFBSzJhLEtBQ2hCM2EsRUFBTyxHQUNIMmEsSUFDRjNhLEVBQUsyYSxLQUFPQSxJQXFDbEIsU0FBZ0MzYSxHQUU5QixJQURBLElBQUlpVCxFQUFRalQsRUFBS29ULE9BQVNwVCxFQUFLb1QsS0FBTyxJQUM3QmhaLEVBQUksRUFBR0EsRUFBSXdwQixHQUFhOW1CLE9BQVExQyxJQUFLLENBQzVDLElBQUl1QixFQUFNaW9CLEdBQWF4cEIsR0FDbkJna0IsRUFBV25MLEVBQU10WCxHQUNqQnNxQixFQUFVbEYsR0FBb0JwbEIsR0FDOUJ5aUIsSUFBYTZILEdBQWE3SCxHQUFZQSxFQUFTOEgsVUFDakRqVCxFQUFNdFgsR0FBT3lpQixFQUFXK0gsR0FBWUYsRUFBUzdILEdBQVk2SCxJQXZDN0RHLENBQXNCcG1CLEdBR3RCLElBQUlyRixFQUFPOFIsRUFBS3hLLFFBQVF0SCxNQUFRd1QsRUFRaEMsT0FQWSxJQUFJRCxHQUNiLGlCQUFvQnpCLEVBQUtzWCxLQUFRcHBCLEVBQVEsSUFBTUEsRUFBUSxJQUN4RHFGLE9BQU1vTSxPQUFXQSxPQUFXQSxFQUFXbUMsRUFDdkMsQ0FBRTlCLEtBQU1BLEVBQU11SSxVQUFXQSxFQUFXc0wsVUFBV0EsRUFBV25TLElBQUtBLEVBQUtDLFNBQVVBLEdBQzlFSyxLQW9DSixTQUFTMFgsR0FBYUUsRUFBSUMsR0FDeEIsSUFBSS9NLEVBQVMsU0FBVTVhLEVBQUdDLEdBRXhCeW5CLEVBQUcxbkIsRUFBR0MsR0FDTjBuQixFQUFHM25CLEVBQUdDLElBR1IsT0FEQTJhLEVBQU8yTSxTQUFVLEVBQ1YzTSxFQTJCVCxJQUFJZ04sR0FBbUIsRUFDbkJDLEdBQW1CLEVBSXZCLFNBQVN0akIsR0FDUHFMLEVBQ0FKLEVBQ0FuTyxFQUNBb08sRUFDQXFZLEVBQ0FDLEdBVUEsT0FSSXpnQixNQUFNMUosUUFBUXlELElBQVNvRixFQUFZcEYsTUFDckN5bUIsRUFBb0JyWSxFQUNwQkEsRUFBV3BPLEVBQ1hBLE9BQU9vTSxHQUVMakgsRUFBT3VoQixLQUNURCxFQUFvQkQsSUFLeEIsU0FDRWpZLEVBQ0FKLEVBQ0FuTyxFQUNBb08sRUFDQXFZLEdBRUEsR0FBSXZoQixFQUFNbEYsSUFBU2tGLEVBQU9sRixFQUFNd1EsUUFNOUIsT0FBT2QsS0FHTHhLLEVBQU1sRixJQUFTa0YsRUFBTWxGLEVBQUsybUIsTUFDNUJ4WSxFQUFNbk8sRUFBSzJtQixJQUViLElBQUt4WSxFQUVILE9BQU91QixLQUdML0YsRUFZQTFELE1BQU0xSixRQUFRNlIsSUFDTyxtQkFBaEJBLEVBQVMsTUFFaEJwTyxFQUFPQSxHQUFRLElBQ1Z3Z0IsWUFBYyxDQUFFbEwsUUFBU2xILEVBQVMsSUFDdkNBLEVBQVN0UixPQUFTLEdBRWhCMnBCLElBQXNCRCxHQUN4QnBZLEVBQVd3TCxHQUFrQnhMLEdBQ3BCcVksSUFBc0JGLEtBQy9CblksRUFwaUNKLFNBQWtDQSxHQUNoQyxJQUFLLElBQUloVSxFQUFJLEVBQUdBLEVBQUlnVSxFQUFTdFIsT0FBUTFDLElBQ25DLEdBQUk2TCxNQUFNMUosUUFBUTZSLEVBQVNoVSxJQUN6QixPQUFPNkwsTUFBTWpLLFVBQVVpRSxPQUFPeUgsTUFBTSxHQUFJMEcsR0FHNUMsT0FBT0EsRUE4aENNd1ksQ0FBd0J4WSxJQUVyQyxJQUFJMEIsRUFBT3JVLEVBQ1gsR0FBbUIsaUJBQVIwUyxFQUFrQixDQUMzQixJQUFJMUIsRUFDSmhSLEVBQU04UyxFQUFRNlQsUUFBVTdULEVBQVE2VCxPQUFPM21CLElBQU84TixFQUFPYyxnQkFBZ0I4RCxHQUduRTJCLEVBRkV2RyxFQUFPVyxjQUFjaUUsR0FFZixJQUFJRCxHQUNWM0UsRUFBT2UscUJBQXFCNkQsR0FBTW5PLEVBQU1vTyxPQUN4Q2hDLE9BQVdBLEVBQVdtQyxHQUVidk8sR0FBU0EsRUFBSzZtQixNQUFRM2hCLEVBQU11SCxFQUFPZ0ksR0FBYWxHLEVBQVFnSCxTQUFVLGFBQWNwSCxJQU9uRixJQUFJRCxHQUNWQyxFQUFLbk8sRUFBTW9PLE9BQ1hoQyxPQUFXQSxFQUFXbUMsR0FQaEJzVixHQUFnQnBYLEVBQU16TSxFQUFNdU8sRUFBU0gsRUFBVUQsUUFZekQyQixFQUFRK1QsR0FBZ0IxVixFQUFLbk8sRUFBTXVPLEVBQVNILEdBRTlDLE9BQUluSSxNQUFNMUosUUFBUXVULEdBQ1RBLEVBQ0U1SyxFQUFNNEssSUFDWDVLLEVBQU16SixJQVFkLFNBQVNxckIsRUFBU2hYLEVBQU9yVSxFQUFJc3JCLEdBQzNCalgsRUFBTXJVLEdBQUtBLEVBQ08sa0JBQWRxVSxFQUFNM0IsTUFFUjFTLE9BQUsyUSxFQUNMMmEsR0FBUSxHQUVWLEdBQUk3aEIsRUFBTTRLLEVBQU0xQixVQUNkLElBQUssSUFBSWhVLEVBQUksRUFBR0MsRUFBSXlWLEVBQU0xQixTQUFTdFIsT0FBUTFDLEVBQUlDLEVBQUdELElBQUssQ0FDckQsSUFBSW9WLEVBQVFNLEVBQU0xQixTQUFTaFUsR0FDdkI4SyxFQUFNc0ssRUFBTXJCLE9BQ2RuSixFQUFRd0ssRUFBTS9ULEtBQVEwSixFQUFPNGhCLElBQXdCLFFBQWR2WCxFQUFNckIsTUFDN0MyWSxFQUFRdFgsRUFBTy9ULEVBQUlzckIsSUFwQk5ELENBQVFoWCxFQUFPclUsR0FDNUJ5SixFQUFNbEYsSUE0QmQsU0FBK0JBLEdBQ3pCdkQsRUFBU3VELEVBQUtnbkIsUUFDaEJuUCxHQUFTN1gsRUFBS2duQixPQUVadnFCLEVBQVN1RCxFQUFLaW5CLFFBQ2hCcFAsR0FBUzdYLEVBQUtpbkIsT0FqQ0tDLENBQXFCbG5CLEdBQ2pDOFAsR0FFQUosS0FwRkZ5WCxDQUFlNVksRUFBU0osRUFBS25PLEVBQU1vTyxFQUFVcVksR0EySnRELElBa1FJOVksR0FsUUF5VyxHQUEyQixLQTRFL0IsU0FBU1csR0FBWXFDLEVBQU1DLEdBT3pCLE9BTEVELEVBQUs1ckIsWUFDSm1SLElBQTBDLFdBQTdCeWEsRUFBS2pzQixPQUFPQyxnQkFFMUJnc0IsRUFBT0EsRUFBSzlSLFNBRVA3WSxFQUFTMnFCLEdBQ1pDLEVBQUszb0IsT0FBTzBvQixHQUNaQSxFQThJTixTQUFTOVgsR0FBb0JLLEdBQzNCLE9BQU9BLEVBQUtULFdBQWFTLEVBQUtsQixhQUtoQyxTQUFTNlksR0FBd0JsWixHQUMvQixHQUFJbkksTUFBTTFKLFFBQVE2UixHQUNoQixJQUFLLElBQUloVSxFQUFJLEVBQUdBLEVBQUlnVSxFQUFTdFIsT0FBUTFDLElBQUssQ0FDeEMsSUFBSUssRUFBSTJULEVBQVNoVSxHQUNqQixHQUFJOEssRUFBTXpLLEtBQU95SyxFQUFNekssRUFBRStULG1CQUFxQmMsR0FBbUI3VSxJQUMvRCxPQUFPQSxHQXNCZixTQUFTd1MsR0FBS2dNLEVBQU9wYyxHQUNuQjhRLEdBQU9nWCxJQUFJMUwsRUFBT3BjLEdBR3BCLFNBQVMwcUIsR0FBVXRPLEVBQU9wYyxHQUN4QjhRLEdBQU82WixLQUFLdk8sRUFBT3BjLEdBR3JCLFNBQVNrYyxHQUFtQkUsRUFBT3BjLEdBQ2pDLElBQUk0cUIsRUFBVTlaLEdBQ2QsT0FBTyxTQUFTK1osSUFDZCxJQUFJeGYsRUFBTXJMLEVBQUc2SyxNQUFNLEtBQU1sSixXQUNiLE9BQVIwSixHQUNGdWYsRUFBUUQsS0FBS3ZPLEVBQU95TyxJQUsxQixTQUFTOUUsR0FDUC9QLEVBQ0F5TixFQUNBb0MsR0FFQS9VLEdBQVNrRixFQUNUOEYsR0FBZ0IySCxFQUFXb0MsR0FBZ0IsR0FBSXpWLEdBQUtzYSxHQUFVeE8sR0FBbUJsRyxHQUNqRmxGLFFBQVN2QixFQWtHWCxJQUFJc1YsR0FBaUIsS0FHckIsU0FBU2lHLEdBQWtCOVUsR0FDekIsSUFBSStVLEVBQXFCbEcsR0FFekIsT0FEQUEsR0FBaUI3TyxFQUNWLFdBQ0w2TyxHQUFpQmtHLEdBMlFyQixTQUFTbkUsR0FBa0I1USxHQUN6QixLQUFPQSxJQUFPQSxFQUFLQSxFQUFHcUQsVUFDcEIsR0FBSXJELEVBQUdxUSxVQUFhLE9BQU8sRUFFN0IsT0FBTyxFQUdULFNBQVNFLEdBQXdCdlEsRUFBSTBRLEdBQ25DLEdBQUlBLEdBRUYsR0FEQTFRLEVBQUcyUSxpQkFBa0IsRUFDakJDLEdBQWlCNVEsR0FDbkIsWUFFRyxHQUFJQSxFQUFHMlEsZ0JBQ1osT0FFRixHQUFJM1EsRUFBR3FRLFdBQThCLE9BQWpCclEsRUFBR3FRLFVBQW9CLENBQ3pDclEsRUFBR3FRLFdBQVksRUFDZixJQUFLLElBQUk5b0IsRUFBSSxFQUFHQSxFQUFJeVksRUFBRzZRLFVBQVU1bUIsT0FBUTFDLElBQ3ZDZ3BCLEdBQXVCdlEsRUFBRzZRLFVBQVV0cEIsSUFFdEM2b0IsR0FBU3BRLEVBQUksY0FvQmpCLFNBQVNvUSxHQUFVcFEsRUFBSU8sR0FFckJyRixLQUNBLElBQUk4WixFQUFXaFYsRUFBRzBDLFNBQVNuQyxHQUN2QjRDLEVBQU81QyxFQUFPLFFBQ2xCLEdBQUl5VSxFQUNGLElBQUssSUFBSXp0QixFQUFJLEVBQUcwSSxFQUFJK2tCLEVBQVMvcUIsT0FBUTFDLEVBQUkwSSxFQUFHMUksSUFDMUNpYyxHQUF3QndSLEVBQVN6dEIsR0FBSXlZLEVBQUksS0FBTUEsRUFBSW1ELEdBR25EbkQsRUFBR2lWLGVBQ0xqVixFQUFHa1YsTUFBTSxRQUFVM1UsR0FFckJwRixLQUtGLElBRUlnYSxHQUFRLEdBQ1I3RSxHQUFvQixHQUNwQm5XLEdBQU0sR0FFTmliLElBQVUsRUFDVkMsSUFBVyxFQUNYN2pCLEdBQVEsRUFtQlosSUFBSThqQixHQUF3QixFQUd4QkMsR0FBU3hmLEtBQUt5ZixJQVFsQixHQUFJbmQsSUFBY00sRUFBTSxDQUN0QixJQUFJM0IsR0FBYzFMLE9BQU8wTCxZQUV2QkEsSUFDMkIsbUJBQXBCQSxHQUFZd2UsS0FDbkJELEtBQVdocUIsU0FBU2txQixZQUFZLFNBQVNDLFlBTXpDSCxHQUFTLFdBQWMsT0FBT3ZlLEdBQVl3ZSxRQU85QyxTQUFTRyxLQUdQLElBQUlDLEVBQVMvbkIsRUFjYixJQWhCQXluQixHQUF3QkMsS0FDeEJGLElBQVcsRUFXWEYsR0FBTVUsS0FBSyxTQUFVL3BCLEVBQUdDLEdBQUssT0FBT0QsRUFBRStCLEdBQUs5QixFQUFFOEIsS0FJeEMyRCxHQUFRLEVBQUdBLEdBQVEyakIsR0FBTWxyQixPQUFRdUgsTUFDcENva0IsRUFBVVQsR0FBTTNqQixLQUNKc2tCLFFBQ1ZGLEVBQVFFLFNBRVZqb0IsRUFBSytuQixFQUFRL25CLEdBQ2JzTSxHQUFJdE0sR0FBTSxLQUNWK25CLEVBQVFHLE1BbUJWLElBQUlDLEVBQWlCMUYsR0FBa0IvYixRQUNuQzBoQixFQUFlZCxHQUFNNWdCLFFBdEZ6Qi9DLEdBQVEyakIsR0FBTWxyQixPQUFTcW1CLEdBQWtCcm1CLE9BQVMsRUFDbERrUSxHQUFNLEdBSU5pYixHQUFVQyxJQUFXLEVBc0h2QixTQUE2QkYsR0FDM0IsSUFBSyxJQUFJNXRCLEVBQUksRUFBR0EsRUFBSTR0QixFQUFNbHJCLE9BQVExQyxJQUNoQzR0QixFQUFNNXRCLEdBQUc4b0IsV0FBWSxFQUNyQkUsR0FBdUI0RSxFQUFNNXRCLElBQUksR0FuQ25DMnVCLENBQW1CRixHQVVyQixTQUEyQmIsR0FDekIsSUFBSTV0QixFQUFJNHRCLEVBQU1sckIsT0FDZCxLQUFPMUMsS0FBSyxDQUNWLElBQUlxdUIsRUFBVVQsRUFBTTV0QixHQUNoQnlZLEVBQUs0VixFQUFRNVYsR0FDYkEsRUFBR21XLFdBQWFQLEdBQVc1VixFQUFHbVEsYUFBZW5RLEVBQUdxTyxjQUNsRCtCLEdBQVNwUSxFQUFJLFlBZmpCb1csQ0FBaUJILEdBSWJsZixJQUFZTCxFQUFPSyxVQUNyQkEsR0FBU3NmLEtBQUssU0FzRWxCLElBQUlDLEdBQVEsRUFPUkMsR0FBVSxTQUNadlcsRUFDQXdXLEVBQ0EzUixFQUNBelYsRUFDQXFuQixHQUVBbnFCLEtBQUswVCxHQUFLQSxFQUNOeVcsSUFDRnpXLEVBQUdtVyxTQUFXN3BCLE1BRWhCMFQsRUFBRzBXLFVBQVUzb0IsS0FBS3pCLE1BRWQ4QyxHQUNGOUMsS0FBS3FxQixPQUFTdm5CLEVBQVF1bkIsS0FDdEJycUIsS0FBS3NxQixPQUFTeG5CLEVBQVF3bkIsS0FDdEJ0cUIsS0FBS3VxQixPQUFTem5CLEVBQVF5bkIsS0FDdEJ2cUIsS0FBS3FsQixPQUFTdmlCLEVBQVF1aUIsS0FDdEJybEIsS0FBS3dwQixPQUFTMW1CLEVBQVEwbUIsUUFFdEJ4cEIsS0FBS3FxQixLQUFPcnFCLEtBQUtzcUIsS0FBT3RxQixLQUFLdXFCLEtBQU92cUIsS0FBS3FsQixNQUFPLEVBRWxEcmxCLEtBQUt1WSxHQUFLQSxFQUNWdlksS0FBS3VCLEtBQU95b0IsR0FDWmhxQixLQUFLd3FCLFFBQVMsRUFDZHhxQixLQUFLeXFCLE1BQVF6cUIsS0FBS3VxQixLQUNsQnZxQixLQUFLMHFCLEtBQU8sR0FDWjFxQixLQUFLMnFCLFFBQVUsR0FDZjNxQixLQUFLNHFCLE9BQVMsSUFBSXJkLEdBQ2xCdk4sS0FBSzZxQixVQUFZLElBQUl0ZCxHQUNyQnZOLEtBQUs4cUIsV0FFRCxHQUVtQixtQkFBWlosRUFDVGxxQixLQUFLdkUsT0FBU3l1QixHQUVkbHFCLEtBQUt2RSxPQWwzSFQsU0FBb0JzdkIsR0FDbEIsSUFBSXBmLEVBQU8xSSxLQUFLOG5CLEdBQWhCLENBR0EsSUFBSUMsRUFBV0QsRUFBSzVqQixNQUFNLEtBQzFCLE9BQU8sU0FBVTFKLEdBQ2YsSUFBSyxJQUFJeEMsRUFBSSxFQUFHQSxFQUFJK3ZCLEVBQVNydEIsT0FBUTFDLElBQUssQ0FDeEMsSUFBS3dDLEVBQU8sT0FDWkEsRUFBTUEsRUFBSXV0QixFQUFTL3ZCLElBRXJCLE9BQU93QyxJQXcySE93dEIsQ0FBVWYsR0FDbkJscUIsS0FBS3ZFLFNBQ1J1RSxLQUFLdkUsT0FBU29ILElBU2xCN0MsS0FBSzlELE1BQVE4RCxLQUFLdXFCLFVBQ2R0ZCxFQUNBak4sS0FBS2xFLE9BTVhtdUIsR0FBUXB0QixVQUFVZixJQUFNLFdBRXRCLElBQUlJLEVBREowUyxHQUFXNU8sTUFFWCxJQUFJMFQsRUFBSzFULEtBQUswVCxHQUNkLElBQ0V4WCxFQUFROEQsS0FBS3ZFLE9BQU9MLEtBQUtzWSxFQUFJQSxHQUM3QixNQUFPbEssR0FDUCxJQUFJeEosS0FBS3NxQixLQUdQLE1BQU05Z0IsRUFGTm1OLEdBQVluTixFQUFHa0ssRUFBSyx1QkFBMkIxVCxLQUFLOHFCLFdBQWMsS0FKdEUsUUFXTTlxQixLQUFLcXFCLE1BQ1AzUixHQUFTeGMsR0FFWDJTLEtBQ0E3TyxLQUFLa3JCLGNBRVAsT0FBT2h2QixHQU1UK3RCLEdBQVFwdEIsVUFBVTRSLE9BQVMsU0FBaUI4QyxHQUMxQyxJQUFJaFEsRUFBS2dRLEVBQUloUSxHQUNSdkIsS0FBSzZxQixVQUFVaGQsSUFBSXRNLEtBQ3RCdkIsS0FBSzZxQixVQUFVL2MsSUFBSXZNLEdBQ25CdkIsS0FBSzJxQixRQUFRbHBCLEtBQUs4UCxHQUNidlIsS0FBSzRxQixPQUFPL2MsSUFBSXRNLElBQ25CZ1EsRUFBSW5ELE9BQU9wTyxRQVFqQmlxQixHQUFRcHRCLFVBQVVxdUIsWUFBYyxXQUU5QixJQURBLElBQUlqd0IsRUFBSStFLEtBQUswcUIsS0FBSy9zQixPQUNYMUMsS0FBSyxDQUNWLElBQUlzVyxFQUFNdlIsS0FBSzBxQixLQUFLenZCLEdBQ2YrRSxLQUFLNnFCLFVBQVVoZCxJQUFJMEQsRUFBSWhRLEtBQzFCZ1EsRUFBSWpELFVBQVV0TyxNQUdsQixJQUFJbXJCLEVBQU1uckIsS0FBSzRxQixPQUNmNXFCLEtBQUs0cUIsT0FBUzVxQixLQUFLNnFCLFVBQ25CN3FCLEtBQUs2cUIsVUFBWU0sRUFDakJuckIsS0FBSzZxQixVQUFVOWMsUUFDZm9kLEVBQU1uckIsS0FBSzBxQixLQUNYMXFCLEtBQUswcUIsS0FBTzFxQixLQUFLMnFCLFFBQ2pCM3FCLEtBQUsycUIsUUFBVVEsRUFDZm5yQixLQUFLMnFCLFFBQVFodEIsT0FBUyxHQU94QnNzQixHQUFRcHRCLFVBQVVxSCxPQUFTLFdBRXJCbEUsS0FBS3VxQixLQUNQdnFCLEtBQUt5cUIsT0FBUSxFQUNKenFCLEtBQUtxbEIsS0FDZHJsQixLQUFLeXBCLE1BbktULFNBQXVCSCxHQUNyQixJQUFJL25CLEVBQUsrbkIsRUFBUS9uQixHQUNqQixHQUFlLE1BQVhzTSxHQUFJdE0sR0FBYSxDQUVuQixHQURBc00sR0FBSXRNLElBQU0sRUFDTHduQixHQUVFLENBSUwsSUFEQSxJQUFJOXRCLEVBQUk0dEIsR0FBTWxyQixPQUFTLEVBQ2hCMUMsRUFBSWlLLElBQVMyakIsR0FBTTV0QixHQUFHc0csR0FBSytuQixFQUFRL25CLElBQ3hDdEcsSUFFRjR0QixHQUFNdGhCLE9BQU90TSxFQUFJLEVBQUcsRUFBR3F1QixRQVJ2QlQsR0FBTXBuQixLQUFLNm5CLEdBV1JSLEtBQ0hBLElBQVUsRUFNVnhRLEdBQVMrUSxNQThJWCtCLENBQWFwckIsT0FRakJpcUIsR0FBUXB0QixVQUFVNHNCLElBQU0sV0FDdEIsR0FBSXpwQixLQUFLd3FCLE9BQVEsQ0FDZixJQUFJdHVCLEVBQVE4RCxLQUFLbEUsTUFDakIsR0FDRUksSUFBVThELEtBQUs5RCxPQUlmb0IsRUFBU3BCLElBQ1Q4RCxLQUFLcXFCLEtBQ0wsQ0FFQSxJQUFJZ0IsRUFBV3JyQixLQUFLOUQsTUFFcEIsR0FEQThELEtBQUs5RCxNQUFRQSxFQUNUOEQsS0FBS3NxQixLQUNQLElBQ0V0cUIsS0FBS3VZLEdBQUduZCxLQUFLNEUsS0FBSzBULEdBQUl4WCxFQUFPbXZCLEdBQzdCLE1BQU83aEIsR0FDUG1OLEdBQVluTixFQUFHeEosS0FBSzBULEdBQUsseUJBQTZCMVQsS0FBSzhxQixXQUFjLFVBRzNFOXFCLEtBQUt1WSxHQUFHbmQsS0FBSzRFLEtBQUswVCxHQUFJeFgsRUFBT212QixNQVVyQ3BCLEdBQVFwdEIsVUFBVXl1QixTQUFXLFdBQzNCdHJCLEtBQUs5RCxNQUFROEQsS0FBS2xFLE1BQ2xCa0UsS0FBS3lxQixPQUFRLEdBTWZSLEdBQVFwdEIsVUFBVTBSLE9BQVMsV0FFekIsSUFEQSxJQUFJdFQsRUFBSStFLEtBQUswcUIsS0FBSy9zQixPQUNYMUMsS0FDTCtFLEtBQUswcUIsS0FBS3p2QixHQUFHc1QsVUFPakIwYixHQUFRcHRCLFVBQVUwdUIsU0FBVyxXQUMzQixHQUFJdnJCLEtBQUt3cUIsT0FBUSxDQUlWeHFCLEtBQUswVCxHQUFHOFgsbUJBQ1hybkIsRUFBT25FLEtBQUswVCxHQUFHMFcsVUFBV3BxQixNQUc1QixJQURBLElBQUkvRSxFQUFJK0UsS0FBSzBxQixLQUFLL3NCLE9BQ1gxQyxLQUNMK0UsS0FBSzBxQixLQUFLenZCLEdBQUdxVCxVQUFVdE8sTUFFekJBLEtBQUt3cUIsUUFBUyxJQU1sQixJQUFJaUIsR0FBMkIsQ0FDN0I1dkIsWUFBWSxFQUNaNlAsY0FBYyxFQUNkNVAsSUFBSytHLEVBQ0wrSyxJQUFLL0ssR0FHUCxTQUFTMFosR0FBTy9OLEVBQVFrZCxFQUFXbHZCLEdBQ2pDaXZCLEdBQXlCM3ZCLElBQU0sV0FDN0IsT0FBT2tFLEtBQUswckIsR0FBV2x2QixJQUV6Qml2QixHQUF5QjdkLElBQU0sU0FBc0J2USxHQUNuRDJDLEtBQUswckIsR0FBV2x2QixHQUFPYSxHQUV6QjFCLE9BQU9DLGVBQWU0UyxFQUFRaFMsRUFBS2l2QixJQUdyQyxTQUFTRSxHQUFXalksR0FDbEJBLEVBQUcwVyxVQUFZLEdBQ2YsSUFBSXRkLEVBQU80RyxFQUFHMEMsU0FDVnRKLEVBQUtxSCxPQWFYLFNBQW9CVCxFQUFJa1ksR0FDdEIsSUFBSS9WLEVBQVluQyxFQUFHMEMsU0FBU1AsV0FBYSxHQUNyQzFCLEVBQVFULEVBQUcyQyxPQUFTLEdBR3BCek0sRUFBTzhKLEVBQUcwQyxTQUFTa04sVUFBWSxHQUNyQjVQLEVBQUdxRCxTQUdmcEYsSUFBZ0IsR0FFbEIsSUFBSXVNLEVBQU8sU0FBVzFoQixHQUNwQm9OLEVBQUtuSSxLQUFLakYsR0FDVixJQUFJTixFQUFReVosR0FBYW5aLEVBQUtvdkIsRUFBYy9WLEVBQVduQyxHQXVCckRuQixHQUFrQjRCLEVBQU8zWCxFQUFLTixHQUsxQk0sS0FBT2tYLEdBQ1g2SSxHQUFNN0ksRUFBSSxTQUFVbFgsSUFJeEIsSUFBSyxJQUFJQSxLQUFPb3ZCLEVBQWMxTixFQUFNMWhCLEdBQ3BDbVYsSUFBZ0IsR0E1REVrYSxDQUFVblksRUFBSTVHLEVBQUtxSCxPQUNqQ3JILEVBQUtzSCxTQW9OWCxTQUFzQlYsRUFBSVUsR0FDWlYsRUFBRzBDLFNBQVNqQyxNQUN4QixJQUFLLElBQUkzWCxLQUFPNFgsRUFzQmRWLEVBQUdsWCxHQUErQixtQkFBakI0WCxFQUFRNVgsR0FBc0JxRyxFQUFPcEcsRUFBSzJYLEVBQVE1WCxHQUFNa1gsR0E1T3ZEb1ksQ0FBWXBZLEVBQUk1RyxFQUFLc0gsU0FDckN0SCxFQUFLak0sS0E2RFgsU0FBbUI2UyxHQUNqQixJQUFJN1MsRUFBTzZTLEVBQUcwQyxTQUFTdlYsS0FJbEJzRixFQUhMdEYsRUFBTzZTLEVBQUdxWSxNQUF3QixtQkFBVGxyQixFQXdDM0IsU0FBa0JBLEVBQU02UyxHQUV0QjlFLEtBQ0EsSUFDRSxPQUFPL04sRUFBS3pGLEtBQUtzWSxFQUFJQSxHQUNyQixNQUFPbEssR0FFUCxPQURBbU4sR0FBWW5OLEVBQUdrSyxFQUFJLFVBQ1osR0FKVCxRQU1FN0UsTUFoREVtZCxDQUFRbnJCLEVBQU02UyxHQUNkN1MsR0FBUSxNQUVWQSxFQUFPLElBUVQsSUFBSStJLEVBQU9qTyxPQUFPaU8sS0FBSy9JLEdBQ25Cc1QsRUFBUVQsRUFBRzBDLFNBQVNqQyxNQUVwQmxaLEdBRFV5WSxFQUFHMEMsU0FBU2hDLFFBQ2xCeEssRUFBS2pNLFFBQ2IsS0FBTzFDLEtBQUssQ0FDVixJQUFJdUIsRUFBTW9OLEVBQUszTyxHQUNYdVAsRUFRQTJKLEdBQVMzTSxFQUFPMk0sRUFBTzNYLEtBenBJekJsQixTQUNTLE1BRFRBLEdBK3BJcUJrQixFQS9wSVYsSUFBSXl2QixXQUFXLEtBQ0gsS0FBTjN3QixHQStwSWpCaWhCLEdBQU03SSxFQUFJLFFBQVNsWCxJQWpxSXpCLElBQ01sQixFQW9xSUo2VyxHQUFRdFIsR0FBTSxHQW5HWnFyQixDQUFTeFksR0FFVHZCLEdBQVF1QixFQUFHcVksTUFBUSxJQUFJLEdBRXJCamYsRUFBS3dILFVBaUhYLFNBQXVCWixFQUFJWSxHQUV6QixJQUFJNlgsRUFBV3pZLEVBQUcwWSxrQkFBb0J6d0IsT0FBT1ksT0FBTyxNQUVoRDh2QixFQUFRcmYsS0FFWixJQUFLLElBQUl4USxLQUFPOFgsRUFBVSxDQUN4QixJQUFJZ1ksRUFBVWhZLEVBQVM5WCxHQUNuQmYsRUFBNEIsbUJBQVo2d0IsRUFBeUJBLEVBQVVBLEVBQVF4d0IsSUFDM0QwTyxFQU9DNmhCLElBRUhGLEVBQVMzdkIsR0FBTyxJQUFJeXRCLEdBQ2xCdlcsRUFDQWpZLEdBQVVvSCxFQUNWQSxFQUNBMHBCLEtBT0UvdkIsS0FBT2tYLEdBQ1g4WSxHQUFlOVksRUFBSWxYLEVBQUs4dkIsSUEvSVBHLENBQWEvWSxFQUFJNUcsRUFBS3dILFVBQ3ZDeEgsRUFBS0YsT0FBU0UsRUFBS0YsUUFBVUQsSUF5T25DLFNBQW9CK0csRUFBSTlHLEdBQ3RCLElBQUssSUFBSXBRLEtBQU9vUSxFQUFPLENBQ3JCLElBQUl1SyxFQUFVdkssRUFBTXBRLEdBQ3BCLEdBQUlzSyxNQUFNMUosUUFBUStaLEdBQ2hCLElBQUssSUFBSWxjLEVBQUksRUFBR0EsRUFBSWtjLEVBQVF4WixPQUFRMUMsSUFDbEN5eEIsR0FBY2haLEVBQUlsWCxFQUFLMmEsRUFBUWxjLFNBR2pDeXhCLEdBQWNoWixFQUFJbFgsRUFBSzJhLElBaFB6QndWLENBQVVqWixFQUFJNUcsRUFBS0YsT0E2R3ZCLElBQUkyZixHQUF5QixDQUFFaEMsTUFBTSxHQTJDckMsU0FBU2lDLEdBQ1BoZSxFQUNBaFMsRUFDQTh2QixHQUVBLElBQUlNLEdBQWU1ZixLQUNJLG1CQUFac2YsR0FDVGIsR0FBeUIzdkIsSUFBTTh3QixFQUMzQkMsR0FBcUJyd0IsR0FDckJzd0IsR0FBb0JSLEdBQ3hCYixHQUF5QjdkLElBQU0vSyxJQUUvQjRvQixHQUF5QjN2QixJQUFNd3dCLEVBQVF4d0IsSUFDbkM4d0IsSUFBaUMsSUFBbEJOLEVBQVE1a0IsTUFDckJtbEIsR0FBcUJyd0IsR0FDckJzd0IsR0FBb0JSLEVBQVF4d0IsS0FDOUIrRyxFQUNKNG9CLEdBQXlCN2QsSUFBTTBlLEVBQVExZSxLQUFPL0ssR0FXaERsSCxPQUFPQyxlQUFlNFMsRUFBUWhTLEVBQUtpdkIsSUFHckMsU0FBU29CLEdBQXNCcndCLEdBQzdCLE9BQU8sV0FDTCxJQUFJOHNCLEVBQVV0cEIsS0FBS29zQixtQkFBcUJwc0IsS0FBS29zQixrQkFBa0I1dkIsR0FDL0QsR0FBSThzQixFQU9GLE9BTklBLEVBQVFtQixPQUNWbkIsRUFBUWdDLFdBRU5wZCxHQUFJTSxRQUNOOGEsRUFBUS9hLFNBRUgrYSxFQUFRcHRCLE9BS3JCLFNBQVM0d0IsR0FBb0JwdkIsR0FDM0IsT0FBTyxXQUNMLE9BQU9BLEVBQUd0QyxLQUFLNEUsS0FBTUEsT0E2Q3pCLFNBQVMwc0IsR0FDUGhaLEVBQ0F3VyxFQUNBL1MsRUFDQXJVLEdBU0EsT0FQSXFELEVBQWNnUixLQUNoQnJVLEVBQVVxVSxFQUNWQSxFQUFVQSxFQUFRQSxTQUVHLGlCQUFaQSxJQUNUQSxFQUFVekQsRUFBR3lELElBRVJ6RCxFQUFHcVosT0FBTzdDLEVBQVMvUyxFQUFTclUsR0F3RHJDLElBQUlrcUIsR0FBUSxFQWdGWixTQUFTNUcsR0FBMkI5WSxHQUNsQyxJQUFJeEssRUFBVXdLLEVBQUt4SyxRQUNuQixHQUFJd0ssRUFBSzJmLE1BQU8sQ0FDZCxJQUFJQyxFQUFlOUcsR0FBMEI5WSxFQUFLMmYsT0FFbEQsR0FBSUMsSUFEcUI1ZixFQUFLNGYsYUFDVyxDQUd2QzVmLEVBQUs0ZixhQUFlQSxFQUVwQixJQUFJQyxFQWNWLFNBQWlDN2YsR0FDL0IsSUFBSThmLEVBQ0FDLEVBQVMvZixFQUFLeEssUUFDZHdxQixFQUFTaGdCLEVBQUtpZ0IsY0FDbEIsSUFBSyxJQUFJL3dCLEtBQU82d0IsRUFDVkEsRUFBTzd3QixLQUFTOHdCLEVBQU85d0IsS0FDcEI0d0IsSUFBWUEsRUFBVyxJQUM1QkEsRUFBUzV3QixHQUFPNndCLEVBQU83d0IsSUFHM0IsT0FBTzR3QixFQXhCbUJJLENBQXVCbGdCLEdBRXpDNmYsR0FDRjV0QixFQUFPK04sRUFBS21nQixjQUFlTixJQUU3QnJxQixFQUFVd0ssRUFBS3hLLFFBQVUyUixHQUFheVksRUFBYzVmLEVBQUttZ0IsZ0JBQzdDanlCLE9BQ1ZzSCxFQUFRNHFCLFdBQVc1cUIsRUFBUXRILE1BQVE4UixJQUl6QyxPQUFPeEssRUFnQlQsU0FBUzZxQixHQUFLN3FCLEdBTVo5QyxLQUFLNHRCLE1BQU05cUIsR0EwQ2IsU0FBUytxQixHQUFZRixHQU1uQkEsRUFBSS9JLElBQU0sRUFDVixJQUFJQSxFQUFNLEVBS1YrSSxFQUFJcHVCLE9BQVMsU0FBVWt1QixHQUNyQkEsRUFBZ0JBLEdBQWlCLEdBQ2pDLElBQUlLLEVBQVE5dEIsS0FDUit0QixFQUFVRCxFQUFNbEosSUFDaEJvSixFQUFjUCxFQUFjUSxRQUFVUixFQUFjUSxNQUFRLElBQ2hFLEdBQUlELEVBQVlELEdBQ2QsT0FBT0MsRUFBWUQsR0FHckIsSUFBSXZ5QixFQUFPaXlCLEVBQWNqeUIsTUFBUXN5QixFQUFNaHJCLFFBQVF0SCxLQUsvQyxJQUFJMHlCLEVBQU0sU0FBdUJwckIsR0FDL0I5QyxLQUFLNHRCLE1BQU05cUIsSUE2Q2IsT0EzQ0FvckIsRUFBSXJ4QixVQUFZbEIsT0FBT1ksT0FBT3V4QixFQUFNanhCLFlBQ3RCc3hCLFlBQWNELEVBQzVCQSxFQUFJdEosSUFBTUEsSUFDVnNKLEVBQUlwckIsUUFBVTJSLEdBQ1pxWixFQUFNaHJCLFFBQ04ycUIsR0FFRlMsRUFBRyxNQUFZSixFQUtYSSxFQUFJcHJCLFFBQVFxUixPQW1DcEIsU0FBc0JpYSxHQUNwQixJQUFJamEsRUFBUWlhLEVBQUt0ckIsUUFBUXFSLE1BQ3pCLElBQUssSUFBSTNYLEtBQU8yWCxFQUNkb0ksR0FBTTZSLEVBQUt2eEIsVUFBVyxTQUFVTCxHQXJDOUI2eEIsQ0FBWUgsR0FFVkEsRUFBSXByQixRQUFRd1IsVUF1Q3BCLFNBQXlCOFosR0FDdkIsSUFBSTlaLEVBQVc4WixFQUFLdHJCLFFBQVF3UixTQUM1QixJQUFLLElBQUk5WCxLQUFPOFgsRUFDZGtZLEdBQWU0QixFQUFLdnhCLFVBQVdMLEVBQUs4WCxFQUFTOVgsSUF6QzNDOHhCLENBQWVKLEdBSWpCQSxFQUFJM3VCLE9BQVN1dUIsRUFBTXZ1QixPQUNuQjJ1QixFQUFJSyxNQUFRVCxFQUFNUyxNQUNsQkwsRUFBSU0sSUFBTVYsRUFBTVUsSUFJaEJ0a0IsRUFBWTFNLFFBQVEsU0FBVXdHLEdBQzVCa3FCLEVBQUlscUIsR0FBUThwQixFQUFNOXBCLEtBR2hCeEksSUFDRjB5QixFQUFJcHJCLFFBQVE0cUIsV0FBV2x5QixHQUFRMHlCLEdBTWpDQSxFQUFJaEIsYUFBZVksRUFBTWhyQixRQUN6Qm9yQixFQUFJVCxjQUFnQkEsRUFDcEJTLEVBQUlYLGNBQWdCaHVCLEVBQU8sR0FBSTJ1QixFQUFJcHJCLFNBR25Da3JCLEVBQVlELEdBQVdHLEVBQ2hCQSxHQXNEWCxTQUFTTyxHQUFrQjNoQixHQUN6QixPQUFPQSxJQUFTQSxFQUFLUSxLQUFLeEssUUFBUXRILE1BQVFzUixFQUFLa0MsS0FHakQsU0FBUzBmLEdBQVNDLEVBQVNuekIsR0FDekIsT0FBSXNMLE1BQU0xSixRQUFRdXhCLEdBQ1RBLEVBQVFybkIsUUFBUTlMLElBQVMsRUFDSixpQkFBWm16QixFQUNUQSxFQUFReG5CLE1BQU0sS0FBS0csUUFBUTlMLElBQVMsSUFDbEM0SyxFQUFTdW9CLElBQ1hBLEVBQVExckIsS0FBS3pILEdBTXhCLFNBQVNvekIsR0FBWUMsRUFBbUJ6cEIsR0FDdEMsSUFBSXNDLEVBQVFtbkIsRUFBa0JubkIsTUFDMUJrQyxFQUFPaWxCLEVBQWtCamxCLEtBQ3pCc1osRUFBUzJMLEVBQWtCM0wsT0FDL0IsSUFBSyxJQUFJMW1CLEtBQU9rTCxFQUFPLENBQ3JCLElBQUlvbkIsRUFBYXBuQixFQUFNbEwsR0FDdkIsR0FBSXN5QixFQUFZLENBQ2QsSUFBSXR6QixFQUFPaXpCLEdBQWlCSyxFQUFXemYsa0JBQ25DN1QsSUFBUzRKLEVBQU81SixJQUNsQnV6QixHQUFnQnJuQixFQUFPbEwsRUFBS29OLEVBQU1zWixLQU0xQyxTQUFTNkwsR0FDUHJuQixFQUNBbEwsRUFDQW9OLEVBQ0FvbEIsR0FFQSxJQUFJQyxFQUFZdm5CLEVBQU1sTCxJQUNsQnl5QixHQUFlRCxHQUFXQyxFQUFVamdCLE1BQVFnZ0IsRUFBUWhnQixLQUN0RGlnQixFQUFVdmYsa0JBQWtCOFUsV0FFOUI5YyxFQUFNbEwsR0FBTyxLQUNiMkgsRUFBT3lGLEVBQU1wTixJQTNVZixTQUFvQm14QixHQUNsQkEsRUFBSTl3QixVQUFVK3dCLE1BQVEsU0FBVTlxQixHQUM5QixJQUFJNFEsRUFBSzFULEtBRVQwVCxFQUFHd2IsS0FBT2xDLEtBV1Z0WixFQUFHcEIsUUFBUyxFQUVSeFAsR0FBV0EsRUFBUXFmLGFBMEMzQixTQUFnQ3pPLEVBQUk1USxHQUNsQyxJQUFJZ0ssRUFBTzRHLEVBQUcwQyxTQUFXemEsT0FBT1ksT0FBT21YLEVBQUd5YSxZQUFZcnJCLFNBRWxENGYsRUFBYzVmLEVBQVFzZixhQUMxQnRWLEVBQUs2QyxPQUFTN00sRUFBUTZNLE9BQ3RCN0MsRUFBS3NWLGFBQWVNLEVBRXBCLElBQUl5TSxFQUF3QnpNLEVBQVlyVCxpQkFDeEN2QyxFQUFLK0ksVUFBWXNaLEVBQXNCdFosVUFDdkMvSSxFQUFLMFcsaUJBQW1CMkwsRUFBc0JoTyxVQUM5Q3JVLEVBQUtrVyxnQkFBa0JtTSxFQUFzQmxnQixTQUM3Q25DLEVBQUtzaUIsY0FBZ0JELEVBQXNCbmdCLElBRXZDbE0sRUFBUTJaLFNBQ1YzUCxFQUFLMlAsT0FBUzNaLEVBQVEyWixPQUN0QjNQLEVBQUs4UixnQkFBa0I5YixFQUFROGIsaUJBckQ3QnlRLENBQXNCM2IsRUFBSTVRLEdBRTFCNFEsRUFBRzBDLFNBQVczQixHQUNaMlIsR0FBMEIxUyxFQUFHeWEsYUFDN0JyckIsR0FBVyxHQUNYNFEsR0FPRkEsRUFBR21MLGFBQWVuTCxFQUdwQkEsRUFBRzRiLE1BQVE1YixFQXBrQ2YsU0FBd0JBLEdBQ3RCLElBQUk1USxFQUFVNFEsRUFBRzBDLFNBR2J6RyxFQUFTN00sRUFBUTZNLE9BQ3JCLEdBQUlBLElBQVc3TSxFQUFRK2pCLFNBQVUsQ0FDL0IsS0FBT2xYLEVBQU95RyxTQUFTeVEsVUFBWWxYLEVBQU9vSCxTQUN4Q3BILEVBQVNBLEVBQU9vSCxRQUVsQnBILEVBQU80VSxVQUFVOWlCLEtBQUtpUyxHQUd4QkEsRUFBR3FELFFBQVVwSCxFQUNiK0QsRUFBRzZiLE1BQVE1ZixFQUFTQSxFQUFPNGYsTUFBUTdiLEVBRW5DQSxFQUFHNlEsVUFBWSxHQUNmN1EsRUFBRzhiLE1BQVEsR0FFWDliLEVBQUdtVyxTQUFXLEtBQ2RuVyxFQUFHcVEsVUFBWSxLQUNmclEsRUFBRzJRLGlCQUFrQixFQUNyQjNRLEVBQUdtUSxZQUFhLEVBQ2hCblEsRUFBR3FPLGNBQWUsRUFDbEJyTyxFQUFHOFgsbUJBQW9CLEVBOGlDckJpRSxDQUFjL2IsR0F2dENsQixTQUFxQkEsR0FDbkJBLEVBQUdnYyxRQUFVL3pCLE9BQU9ZLE9BQU8sTUFDM0JtWCxFQUFHaVYsZUFBZ0IsRUFFbkIsSUFBSXhILEVBQVl6TixFQUFHMEMsU0FBU29OLGlCQUN4QnJDLEdBQ0ZzQyxHQUF5Qi9QLEVBQUl5TixHQWt0QzdCd08sQ0FBV2pjLEdBbi9DZixTQUFxQkEsR0FDbkJBLEVBQUd3UCxPQUFTLEtBQ1p4UCxFQUFHK0ssYUFBZSxLQUNsQixJQUFJM2IsRUFBVTRRLEVBQUcwQyxTQUNic00sRUFBY2hQLEVBQUd1UCxPQUFTbmdCLEVBQVFzZixhQUNsQ1gsRUFBZ0JpQixHQUFlQSxFQUFZdFQsUUFDL0NzRSxFQUFHeUosT0FBUzlCLEdBQWF2WSxFQUFRa2dCLGdCQUFpQnZCLEdBQ2xEL04sRUFBR3dKLGFBQWV2WCxFQUtsQitOLEVBQUc2TixHQUFLLFNBQVUvaEIsRUFBR0MsRUFBR25FLEVBQUdDLEdBQUssT0FBT3dJLEdBQWMyUCxFQUFJbFUsRUFBR0MsRUFBR25FLEVBQUdDLEdBQUcsSUFHckVtWSxFQUFHMEosZUFBaUIsU0FBVTVkLEVBQUdDLEVBQUduRSxFQUFHQyxHQUFLLE9BQU93SSxHQUFjMlAsRUFBSWxVLEVBQUdDLEVBQUduRSxFQUFHQyxHQUFHLElBSWpGLElBQUlxMEIsRUFBYWxOLEdBQWVBLEVBQVk3aEIsS0FXMUMwUixHQUFrQm1CLEVBQUksU0FBVWtjLEdBQWNBLEVBQVdyVSxPQUFTNVYsRUFBYSxNQUFNLEdBQ3JGNE0sR0FBa0JtQixFQUFJLGFBQWM1USxFQUFRMGdCLGtCQUFvQjdkLEVBQWEsTUFBTSxHQXE5Q25Ga3FCLENBQVduYyxHQUNYb1EsR0FBU3BRLEVBQUksZ0JBNWdGakIsU0FBeUJBLEdBQ3ZCLElBQUl2VSxFQUFTOGIsR0FBY3ZILEVBQUcwQyxTQUFTL0IsT0FBUVgsR0FDM0N2VSxJQUNGd1MsSUFBZ0IsR0FDaEJoVyxPQUFPaU8sS0FBS3pLLEdBQVEzQixRQUFRLFNBQVVoQixHQVlsQytWLEdBQWtCbUIsRUFBSWxYLEVBQUsyQyxFQUFPM0MsTUFHdENtVixJQUFnQixJQTAvRWhCbWUsQ0FBZXBjLEdBQ2ZpWSxHQUFValksR0F2aEZkLFNBQXNCQSxHQUNwQixJQUFJYSxFQUFVYixFQUFHMEMsU0FBUzdCLFFBQ3RCQSxJQUNGYixFQUFHeUgsVUFBK0IsbUJBQVo1RyxFQUNsQkEsRUFBUW5aLEtBQUtzWSxHQUNiYSxHQW1oRkp3YixDQUFZcmMsR0FDWm9RLEdBQVNwUSxFQUFJLFdBU1RBLEVBQUcwQyxTQUFTNFosSUFDZHRjLEVBQUc4TyxPQUFPOU8sRUFBRzBDLFNBQVM0WixLQXNFNUJDLENBQVV0QyxJQW5MVixTQUFxQkEsR0FJbkIsSUFBSXVDLEVBQVUsQ0FDZEEsSUFBYyxXQUFjLE9BQU9sd0IsS0FBSytyQixRQUNwQ29FLEVBQVcsQ0FDZkEsSUFBZSxXQUFjLE9BQU9ud0IsS0FBS3FXLFNBYXpDMWEsT0FBT0MsZUFBZSt4QixFQUFJOXdCLFVBQVcsUUFBU3F6QixHQUM5Q3YwQixPQUFPQyxlQUFlK3hCLEVBQUk5d0IsVUFBVyxTQUFVc3pCLEdBRS9DeEMsRUFBSTl3QixVQUFVdXpCLEtBQU94aUIsR0FDckIrZixFQUFJOXdCLFVBQVV3ekIsUUFBVXJkLEdBRXhCMmEsRUFBSTl3QixVQUFVa3dCLE9BQVMsU0FDckI3QyxFQUNBM1IsRUFDQXpWLEdBR0EsR0FBSXFELEVBQWNvUyxHQUNoQixPQUFPbVUsR0FGQTFzQixLQUVrQmtxQixFQUFTM1IsRUFBSXpWLElBRXhDQSxFQUFVQSxHQUFXLElBQ2J3bkIsTUFBTyxFQUNmLElBQUloQixFQUFVLElBQUlXLEdBTlRqcUIsS0FNcUJrcUIsRUFBUzNSLEVBQUl6VixHQUMzQyxHQUFJQSxFQUFRd3RCLFVBQ1YsSUFDRS9YLEVBQUduZCxLQVRFNEUsS0FTT3NwQixFQUFRcHRCLE9BQ3BCLE1BQU9xYixHQUNQWixHQUFZWSxFQVhQdlgsS0FXbUIsbUNBQXVDc3BCLEVBQVF3QixXQUFjLEtBR3pGLE9BQU8sV0FDTHhCLEVBQVFpQyxhQXNJZGdGLENBQVc1QyxJQXZ3Q1gsU0FBc0JBLEdBQ3BCLElBQUk2QyxFQUFTLFNBQ2I3QyxFQUFJOXdCLFVBQVUyb0IsSUFBTSxTQUFVMUwsRUFBT3BjLEdBQ25DLElBQUlnVyxFQUFLMVQsS0FDVCxHQUFJOEcsTUFBTTFKLFFBQVEwYyxHQUNoQixJQUFLLElBQUk3ZSxFQUFJLEVBQUdDLEVBQUk0ZSxFQUFNbmMsT0FBUTFDLEVBQUlDLEVBQUdELElBQ3ZDeVksRUFBRzhSLElBQUkxTCxFQUFNN2UsR0FBSXlDLFFBR2xCZ1csRUFBR2djLFFBQVE1VixLQUFXcEcsRUFBR2djLFFBQVE1VixHQUFTLEtBQUtyWSxLQUFLL0QsR0FHakQ4eUIsRUFBT3Z0QixLQUFLNlcsS0FDZHBHLEVBQUdpVixlQUFnQixHQUd2QixPQUFPalYsR0FHVGlhLEVBQUk5d0IsVUFBVTR6QixNQUFRLFNBQVUzVyxFQUFPcGMsR0FDckMsSUFBSWdXLEVBQUsxVCxLQUNULFNBQVN5WixJQUNQL0YsRUFBRzJVLEtBQUt2TyxFQUFPTCxHQUNmL2IsRUFBRzZLLE1BQU1tTCxFQUFJclUsV0FJZixPQUZBb2EsRUFBRy9iLEdBQUtBLEVBQ1JnVyxFQUFHOFIsSUFBSTFMLEVBQU9MLEdBQ1AvRixHQUdUaWEsRUFBSTl3QixVQUFVd3JCLEtBQU8sU0FBVXZPLEVBQU9wYyxHQUNwQyxJQUFJZ1csRUFBSzFULEtBRVQsSUFBS1gsVUFBVTFCLE9BRWIsT0FEQStWLEVBQUdnYyxRQUFVL3pCLE9BQU9ZLE9BQU8sTUFDcEJtWCxFQUdULEdBQUk1TSxNQUFNMUosUUFBUTBjLEdBQVEsQ0FDeEIsSUFBSyxJQUFJNFcsRUFBTSxFQUFHeDFCLEVBQUk0ZSxFQUFNbmMsT0FBUSt5QixFQUFNeDFCLEVBQUd3MUIsSUFDM0NoZCxFQUFHMlUsS0FBS3ZPLEVBQU00VyxHQUFNaHpCLEdBRXRCLE9BQU9nVyxFQUdULElBU0k2RSxFQVRBb1ksRUFBTWpkLEVBQUdnYyxRQUFRNVYsR0FDckIsSUFBSzZXLEVBQ0gsT0FBT2pkLEVBRVQsSUFBS2hXLEVBRUgsT0FEQWdXLEVBQUdnYyxRQUFRNVYsR0FBUyxLQUNicEcsRUFLVCxJQURBLElBQUl6WSxFQUFJMDFCLEVBQUloekIsT0FDTDFDLEtBRUwsSUFEQXNkLEVBQUtvWSxFQUFJMTFCLE1BQ0V5QyxHQUFNNmEsRUFBRzdhLEtBQU9BLEVBQUksQ0FDN0JpekIsRUFBSXBwQixPQUFPdE0sRUFBRyxHQUNkLE1BR0osT0FBT3lZLEdBR1RpYSxFQUFJOXdCLFVBQVUrckIsTUFBUSxTQUFVOU8sR0FDOUIsSUFBSXBHLEVBQUsxVCxLQWFMMndCLEVBQU1qZCxFQUFHZ2MsUUFBUTVWLEdBQ3JCLEdBQUk2VyxFQUFLLENBQ1BBLEVBQU1BLEVBQUloekIsT0FBUyxFQUFJOEssRUFBUWtvQixHQUFPQSxFQUd0QyxJQUZBLElBQUkxZixFQUFPeEksRUFBUXBKLFVBQVcsR0FDMUJ3WCxFQUFPLHNCQUF5QmlELEVBQVEsSUFDbkM3ZSxFQUFJLEVBQUdDLEVBQUl5MUIsRUFBSWh6QixPQUFRMUMsRUFBSUMsRUFBR0QsSUFDckNpYyxHQUF3QnlaLEVBQUkxMUIsR0FBSXlZLEVBQUl6QyxFQUFNeUMsRUFBSW1ELEdBR2xELE9BQU9uRCxHQStxQ1hrZCxDQUFZakQsSUFwb0NaLFNBQXlCQSxHQUN2QkEsRUFBSTl3QixVQUFVZzBCLFFBQVUsU0FBVWxnQixFQUFPbVIsR0FDdkMsSUFBSXBPLEVBQUsxVCxLQUNMOHdCLEVBQVNwZCxFQUFHcWQsSUFDWkMsRUFBWXRkLEVBQUd3UCxPQUNmK04sRUFBd0J6SSxHQUFrQjlVLEdBQzlDQSxFQUFHd1AsT0FBU3ZTLEVBUVYrQyxFQUFHcWQsSUFMQUMsRUFLTXRkLEVBQUd3ZCxVQUFVRixFQUFXcmdCLEdBSHhCK0MsRUFBR3dkLFVBQVV4ZCxFQUFHcWQsSUFBS3BnQixFQUFPbVIsR0FBVyxHQUtsRG1QLElBRUlILElBQ0ZBLEVBQU9LLFFBQVUsTUFFZnpkLEVBQUdxZCxNQUNMcmQsRUFBR3FkLElBQUlJLFFBQVV6ZCxHQUdmQSxFQUFHdVAsUUFBVXZQLEVBQUdxRCxTQUFXckQsRUFBR3VQLFNBQVd2UCxFQUFHcUQsUUFBUW1NLFNBQ3REeFAsRUFBR3FELFFBQVFnYSxJQUFNcmQsRUFBR3FkLE1BTXhCcEQsRUFBSTl3QixVQUFVNm1CLGFBQWUsV0FDbEIxakIsS0FDRjZwQixVQURFN3BCLEtBRUo2cEIsU0FBUzNsQixVQUloQnlwQixFQUFJOXdCLFVBQVUybkIsU0FBVyxXQUN2QixJQUFJOVEsRUFBSzFULEtBQ1QsSUFBSTBULEVBQUc4WCxrQkFBUCxDQUdBMUgsR0FBU3BRLEVBQUksaUJBQ2JBLEVBQUc4WCxtQkFBb0IsRUFFdkIsSUFBSTdiLEVBQVMrRCxFQUFHcUQsU0FDWnBILEdBQVdBLEVBQU82YixtQkFBc0I5WCxFQUFHMEMsU0FBU3lRLFVBQ3REMWlCLEVBQU93TCxFQUFPNFUsVUFBVzdRLEdBR3ZCQSxFQUFHbVcsVUFDTG5XLEVBQUdtVyxTQUFTMEIsV0FHZCxJQURBLElBQUl0d0IsRUFBSXlZLEVBQUcwVyxVQUFVenNCLE9BQ2QxQyxLQUNMeVksRUFBRzBXLFVBQVVudkIsR0FBR3N3QixXQUlkN1gsRUFBR3FZLE1BQU0xYSxRQUNYcUMsRUFBR3FZLE1BQU0xYSxPQUFPUSxVQUdsQjZCLEVBQUdxTyxjQUFlLEVBRWxCck8sRUFBR3dkLFVBQVV4ZCxFQUFHd1AsT0FBUSxNQUV4QlksR0FBU3BRLEVBQUksYUFFYkEsRUFBRzJVLE9BRUMzVSxFQUFHcWQsTUFDTHJkLEVBQUdxZCxJQUFJSSxRQUFVLE1BR2Z6ZCxFQUFHdVAsU0FDTHZQLEVBQUd1UCxPQUFPdFQsT0FBUyxRQXVqQ3pCeWhCLENBQWV6RCxJQXZpRGYsU0FBc0JBLEdBRXBCaE8sR0FBcUJnTyxFQUFJOXdCLFdBRXpCOHdCLEVBQUk5d0IsVUFBVXcwQixVQUFZLFNBQVUzekIsR0FDbEMsT0FBTzRhLEdBQVM1YSxFQUFJc0MsT0FHdEIydEIsRUFBSTl3QixVQUFVeTBCLFFBQVUsV0FDdEIsSUFpQkkzZ0IsRUFqQkErQyxFQUFLMVQsS0FDTHV4QixFQUFNN2QsRUFBRzBDLFNBQ1RxRyxFQUFTOFUsRUFBSTlVLE9BQ2IyRixFQUFlbVAsRUFBSW5QLGFBRW5CQSxJQUNGMU8sRUFBR3dKLGFBQWV2QixHQUNoQnlHLEVBQWF2aEIsS0FBS3dnQixZQUNsQjNOLEVBQUd5SixPQUNIekosRUFBR3dKLGVBTVB4SixFQUFHdVAsT0FBU2IsRUFHWixJQUlFNkMsR0FBMkJ2UixFQUMzQi9DLEVBQVE4TCxFQUFPcmhCLEtBQUtzWSxFQUFHbUwsYUFBY25MLEVBQUcwSixnQkFDeEMsTUFBTzVULEdBQ1BtTixHQUFZbk4sRUFBR2tLLEVBQUksVUFZakIvQyxFQUFRK0MsRUFBR3dQLE9BbkJmLFFBc0JFK0IsR0FBMkIsS0FtQjdCLE9BaEJJbmUsTUFBTTFKLFFBQVF1VCxJQUEyQixJQUFqQkEsRUFBTWhULFNBQ2hDZ1QsRUFBUUEsRUFBTSxJQUdWQSxhQUFpQjVCLEtBUXJCNEIsRUFBUUosTUFHVkksRUFBTWhCLE9BQVN5UyxFQUNSelIsR0FvK0NYNmdCLENBQVk3RCxJQThNWixJQUFJOEQsR0FBZSxDQUFDbHJCLE9BQVFxRixPQUFROUUsT0FpRmhDNHFCLEdBQW9CLENBQ3RCQyxVQWhGYyxDQUNkbjJCLEtBQU0sYUFDTnFyQixVQUFVLEVBRVYxUyxNQUFPLENBQ0x5ZCxRQUFTSCxHQUNUSSxRQUFTSixHQUNUMWUsSUFBSyxDQUFDeE0sT0FBUXVyQixTQUdoQkMsUUFBUyxXQUNQL3hCLEtBQUswSCxNQUFRL0wsT0FBT1ksT0FBTyxNQUMzQnlELEtBQUs0SixLQUFPLElBR2Rvb0IsVUFBVyxXQUNULElBQUssSUFBSXgxQixLQUFPd0QsS0FBSzBILE1BQ25CcW5CLEdBQWdCL3VCLEtBQUswSCxNQUFPbEwsRUFBS3dELEtBQUs0SixPQUkxQ3FvQixRQUFTLFdBQ1AsSUFBSW5SLEVBQVM5Z0IsS0FFYkEsS0FBSytzQixPQUFPLFVBQVcsU0FBVTF2QixHQUMvQnV4QixHQUFXOU4sRUFBUSxTQUFVdGxCLEdBQVEsT0FBT2t6QixHQUFRcnhCLEVBQUs3QixPQUUzRHdFLEtBQUsrc0IsT0FBTyxVQUFXLFNBQVUxdkIsR0FDL0J1eEIsR0FBVzlOLEVBQVEsU0FBVXRsQixHQUFRLE9BQVFrekIsR0FBUXJ4QixFQUFLN0IsUUFJOURpaEIsT0FBUSxXQUNOLElBQUlqQixFQUFPeGIsS0FBS21kLE9BQU9oSCxRQUNuQnhGLEVBQVF3WCxHQUF1QjNNLEdBQy9Cbk0sRUFBbUJzQixHQUFTQSxFQUFNdEIsaUJBQ3RDLEdBQUlBLEVBQWtCLENBRXBCLElBQUk3VCxFQUFPaXpCLEdBQWlCcGYsR0FFeEJ1aUIsRUFETTV4QixLQUNRNHhCLFFBQ2RDLEVBRk03eEIsS0FFUTZ4QixRQUNsQixHQUVHRCxLQUFhcDJCLElBQVNrekIsR0FBUWtELEVBQVNwMkIsS0FFdkNxMkIsR0FBV3IyQixHQUFRa3pCLEdBQVFtRCxFQUFTcjJCLEdBRXJDLE9BQU9tVixFQUdULElBQ0lqSixFQURRMUgsS0FDTTBILE1BQ2RrQyxFQUZRNUosS0FFSzRKLEtBQ2JwTixFQUFtQixNQUFibVUsRUFBTW5VLElBR1o2UyxFQUFpQi9CLEtBQUtzWCxLQUFPdlYsRUFBaUJMLElBQU8sS0FBUUssRUFBaUJMLElBQVEsSUFDdEYyQixFQUFNblUsSUFDTmtMLEVBQU1sTCxJQUNSbVUsRUFBTWpCLGtCQUFvQmhJLEVBQU1sTCxHQUFLa1Qsa0JBRXJDdkwsRUFBT3lGLEVBQU1wTixHQUNib04sRUFBS25JLEtBQUtqRixLQUVWa0wsRUFBTWxMLEdBQU9tVSxFQUNiL0csRUFBS25JLEtBQUtqRixHQUVOd0QsS0FBSytTLEtBQU9uSixFQUFLak0sT0FBU3UwQixTQUFTbHlCLEtBQUsrUyxNQUMxQ2djLEdBQWdCcm5CLEVBQU9rQyxFQUFLLEdBQUlBLEVBQU01SixLQUFLa2pCLFNBSS9DdlMsRUFBTTlQLEtBQUttaEIsV0FBWSxFQUV6QixPQUFPclIsR0FBVTZLLEdBQVFBLEVBQUssT0FVbEMsU0FBd0JtUyxHQUV0QixJQUFJd0UsRUFBWSxDQUNoQkEsSUFBZ0IsV0FBYyxPQUFPL25CLElBUXJDek8sT0FBT0MsZUFBZSt4QixFQUFLLFNBQVV3RSxHQUtyQ3hFLEVBQUl5RSxLQUFPLENBQ1Rwa0IsS0FBTUEsR0FDTnpPLE9BQVFBLEVBQ1JrVixhQUFjQSxHQUNkNGQsZUFBZ0I5ZixJQUdsQm9iLEVBQUkvZixJQUFNQSxHQUNWK2YsRUFBSTJFLE9BQVN0ZixHQUNiMmEsRUFBSXJWLFNBQVdBLEdBR2ZxVixFQUFJNEUsV0FBYSxTQUFVOTBCLEdBRXpCLE9BREEwVSxHQUFRMVUsR0FDREEsR0FHVGt3QixFQUFJN3FCLFFBQVVuSCxPQUFPWSxPQUFPLE1BQzVCMk4sRUFBWTFNLFFBQVEsU0FBVXdHLEdBQzVCMnBCLEVBQUk3cUIsUUFBUWtCLEVBQU8sS0FBT3JJLE9BQU9ZLE9BQU8sUUFLMUNveEIsRUFBSTdxQixRQUFRbVMsTUFBUTBZLEVBRXBCcHVCLEVBQU9vdUIsRUFBSTdxQixRQUFRNHFCLFdBQVlnRSxJQTNVakMsU0FBa0IvRCxHQUNoQkEsRUFBSWEsSUFBTSxTQUFVZ0UsR0FDbEIsSUFBSUMsRUFBb0J6eUIsS0FBSzB5QixvQkFBc0IxeUIsS0FBSzB5QixrQkFBb0IsSUFDNUUsR0FBSUQsRUFBaUJuckIsUUFBUWtyQixJQUFXLEVBQ3RDLE9BQU94eUIsS0FJVCxJQUFJaVIsRUFBT3hJLEVBQVFwSixVQUFXLEdBUTlCLE9BUEE0UixFQUFLMGhCLFFBQVEzeUIsTUFDaUIsbUJBQW5Cd3lCLEVBQU9JLFFBQ2hCSixFQUFPSSxRQUFRcnFCLE1BQU1pcUIsRUFBUXZoQixHQUNGLG1CQUFYdWhCLEdBQ2hCQSxFQUFPanFCLE1BQU0sS0FBTTBJLEdBRXJCd2hCLEVBQWlCaHhCLEtBQUsrd0IsR0FDZnh5QixNQTZUVDZ5QixDQUFRbEYsR0F2VFYsU0FBc0JBLEdBQ3BCQSxFQUFJWSxNQUFRLFNBQVVBLEdBRXBCLE9BREF2dUIsS0FBSzhDLFFBQVUyUixHQUFhelUsS0FBSzhDLFFBQVN5ckIsR0FDbkN2dUIsTUFxVFQ4eUIsQ0FBWW5GLEdBQ1pFLEdBQVdGLEdBcE5iLFNBQTZCQSxHQUkzQnpqQixFQUFZMU0sUUFBUSxTQUFVd0csR0FDNUIycEIsRUFBSTNwQixHQUFRLFNBQ1Z6QyxFQUNBd3hCLEdBRUEsT0FBS0EsR0FPVSxjQUFUL3VCLEdBQXdCbUMsRUFBYzRzQixLQUN4Q0EsRUFBV3YzQixLQUFPdTNCLEVBQVd2M0IsTUFBUStGLEVBQ3JDd3hCLEVBQWEveUIsS0FBSzhDLFFBQVFtUyxNQUFNMVYsT0FBT3d6QixJQUU1QixjQUFUL3VCLEdBQThDLG1CQUFmK3VCLElBQ2pDQSxFQUFhLENBQUV0MkIsS0FBTXMyQixFQUFZN3VCLE9BQVE2dUIsSUFFM0MveUIsS0FBSzhDLFFBQVFrQixFQUFPLEtBQUt6QyxHQUFNd3hCLEVBQ3hCQSxHQWRBL3lCLEtBQUs4QyxRQUFRa0IsRUFBTyxLQUFLekMsTUEyTXRDeXhCLENBQW1CckYsR0FHckJzRixDQUFjdEYsSUFFZGh5QixPQUFPQyxlQUFlK3hCLEdBQUk5d0IsVUFBVyxZQUFhLENBQ2hEZixJQUFLa1IsS0FHUHJSLE9BQU9DLGVBQWUreEIsR0FBSTl3QixVQUFXLGNBQWUsQ0FDbERmLElBQUssV0FFSCxPQUFPa0UsS0FBS2lqQixRQUFVampCLEtBQUtpakIsT0FBT2lRLGNBS3RDdjNCLE9BQU9DLGVBQWUreEIsR0FBSywwQkFBMkIsQ0FDcER6eEIsTUFBTzBrQixLQUdUK00sR0FBSXdGLFFBQVUsU0FNZCxJQUFJbm9CLEdBQWlCL0QsRUFBUSxlQUd6Qm1zQixHQUFjbnNCLEVBQVEseUNBVXRCb3NCLEdBQW1CcHNCLEVBQVEsd0NBRTNCcXNCLEdBQThCcnNCLEVBQVEsc0NBRXRDc3NCLEdBQXlCLFNBQVUvMkIsRUFBS04sR0FDMUMsT0FBT3MzQixHQUFpQnQzQixJQUFvQixVQUFWQSxFQUM5QixRQUVRLG9CQUFSTSxHQUE2QjgyQixHQUE0QnAzQixHQUN2REEsRUFDQSxRQUdKdTNCLEdBQWdCeHNCLEVBQ2xCLHdZQVFFeXNCLEdBQVUsK0JBRVZDLEdBQVUsU0FBVW40QixHQUN0QixNQUEwQixNQUFuQkEsRUFBS3dNLE9BQU8sSUFBbUMsVUFBckJ4TSxFQUFLeU0sTUFBTSxFQUFHLElBRzdDMnJCLEdBQWUsU0FBVXA0QixHQUMzQixPQUFPbTRCLEdBQVFuNEIsR0FBUUEsRUFBS3lNLE1BQU0sRUFBR3pNLEVBQUttQyxRQUFVLElBR2xENjFCLEdBQW1CLFNBQVVuMkIsR0FDL0IsT0FBYyxNQUFQQSxJQUF1QixJQUFSQSxHQUt4QixTQUFTdzJCLEdBQWtCbGpCLEdBSXpCLElBSEEsSUFBSTlQLEVBQU84UCxFQUFNOVAsS0FDYndELEVBQWFzTSxFQUNibWpCLEVBQVluakIsRUFDVDVLLEVBQU0rdEIsRUFBVXBrQixxQkFDckJva0IsRUFBWUEsRUFBVXBrQixrQkFBa0J3VCxTQUN2QjRRLEVBQVVqekIsT0FDekJBLEVBQU9rekIsR0FBZUQsRUFBVWp6QixLQUFNQSxJQUcxQyxLQUFPa0YsRUFBTTFCLEVBQWFBLEVBQVdzTCxTQUMvQnRMLEdBQWNBLEVBQVd4RCxPQUMzQkEsRUFBT2t6QixHQUFlbHpCLEVBQU13RCxFQUFXeEQsT0FHM0MsT0FZRixTQUNFbXpCLEVBQ0FDLEdBRUEsR0FBSWx1QixFQUFNaXVCLElBQWdCanVCLEVBQU1rdUIsR0FDOUIsT0FBT256QixHQUFPa3pCLEVBQWFFLEdBQWVELElBRzVDLE1BQU8sR0FwQkFFLENBQVl0ekIsRUFBS216QixZQUFhbnpCLEVBQUtpbkIsT0FHNUMsU0FBU2lNLEdBQWdCMWpCLEVBQU9WLEdBQzlCLE1BQU8sQ0FDTHFrQixZQUFhbHpCLEdBQU91UCxFQUFNMmpCLFlBQWFya0IsRUFBT3FrQixhQUM5Q2xNLE1BQU8vaEIsRUFBTXNLLEVBQU15WCxPQUNmLENBQUN6WCxFQUFNeVgsTUFBT25ZLEVBQU9tWSxPQUNyQm5ZLEVBQU9tWSxPQWVmLFNBQVNobkIsR0FBUXRCLEVBQUdDLEdBQ2xCLE9BQU9ELEVBQUlDLEVBQUtELEVBQUksSUFBTUMsRUFBS0QsRUFBS0MsR0FBSyxHQUczQyxTQUFTeTBCLEdBQWdCaDRCLEdBQ3ZCLE9BQUk0SyxNQUFNMUosUUFBUWxCLEdBYXBCLFNBQXlCQSxHQUd2QixJQUZBLElBQ0lrNEIsRUFEQXJyQixFQUFNLEdBRUQ5TixFQUFJLEVBQUdDLEVBQUlnQixFQUFNeUIsT0FBUTFDLEVBQUlDLEVBQUdELElBQ25DOEssRUFBTXF1QixFQUFjRixHQUFlaDRCLEVBQU1qQixNQUF3QixLQUFoQm01QixJQUMvQ3JyQixJQUFPQSxHQUFPLEtBQ2xCQSxHQUFPcXJCLEdBR1gsT0FBT3JyQixFQXJCRXNyQixDQUFlbjRCLEdBRXBCb0IsRUFBU3BCLEdBc0JmLFNBQTBCQSxHQUN4QixJQUFJNk0sRUFBTSxHQUNWLElBQUssSUFBSXZNLEtBQU9OLEVBQ1ZBLEVBQU1NLEtBQ0p1TSxJQUFPQSxHQUFPLEtBQ2xCQSxHQUFPdk0sR0FHWCxPQUFPdU0sRUE3QkV1ckIsQ0FBZ0JwNEIsR0FFSixpQkFBVkEsRUFDRkEsRUFHRixHQTRCVCxJQUFJcTRCLEdBQWUsQ0FDakJDLElBQUssNkJBQ0xDLEtBQU0sc0NBR0pDLEdBQVl6dEIsRUFDZCxzbkJBZUUwdEIsR0FBUTF0QixFQUNWLGtOQUdBLEdBR0U4RCxHQUFnQixTQUFVaUUsR0FDNUIsT0FBTzBsQixHQUFVMWxCLElBQVEybEIsR0FBTTNsQixJQWNqQyxJQUFJNGxCLEdBQXNCajVCLE9BQU9ZLE9BQU8sTUEwQnhDLElBQUlzNEIsR0FBa0I1dEIsRUFBUSw2Q0FnRjlCLElBQUk2dEIsR0FBdUJuNUIsT0FBT2lLLE9BQU8sQ0FDdkM3QixjQXpERixTQUEwQmd4QixFQUFTcGtCLEdBQ2pDLElBQUl4QixFQUFNbFEsU0FBUzhFLGNBQWNneEIsR0FDakMsTUFBZ0IsV0FBWkEsRUFDSzVsQixHQUdMd0IsRUFBTTlQLE1BQVE4UCxFQUFNOVAsS0FBSzBhLFlBQXVDdE8sSUFBOUIwRCxFQUFNOVAsS0FBSzBhLE1BQU15WixVQUNyRDdsQixFQUFJMUssYUFBYSxXQUFZLFlBRXhCMEssSUFpRFA4bEIsZ0JBOUNGLFNBQTBCQyxFQUFXSCxHQUNuQyxPQUFPOTFCLFNBQVNnMkIsZ0JBQWdCVixHQUFhVyxHQUFZSCxJQThDekRqd0IsZUEzQ0YsU0FBeUJvSyxHQUN2QixPQUFPalEsU0FBUzZGLGVBQWVvSyxJQTJDL0JpbUIsY0F4Q0YsU0FBd0JqbUIsR0FDdEIsT0FBT2pRLFNBQVNrMkIsY0FBY2ptQixJQXdDOUIxSixhQXJDRixTQUF1Qm5CLEVBQVkrd0IsRUFBU0MsR0FDMUNoeEIsRUFBV21CLGFBQWE0dkIsRUFBU0MsSUFxQ2pDL3dCLFlBbENGLFNBQXNCa00sRUFBTUgsR0FDMUJHLEVBQUtsTSxZQUFZK0wsSUFrQ2pCcE0sWUEvQkYsU0FBc0J1TSxFQUFNSCxHQUMxQkcsRUFBS3ZNLFlBQVlvTSxJQStCakJoTSxXQTVCRixTQUFxQm1NLEdBQ25CLE9BQU9BLEVBQUtuTSxZQTRCWml4QixZQXpCRixTQUFzQjlrQixHQUNwQixPQUFPQSxFQUFLOGtCLGFBeUJaUCxRQXRCRixTQUFrQnZrQixHQUNoQixPQUFPQSxFQUFLdWtCLFNBc0JaUSxlQW5CRixTQUF5Qi9rQixFQUFNdEIsR0FDN0JzQixFQUFLZ2xCLFlBQWN0bUIsR0FtQm5CdW1CLGNBaEJGLFNBQXdCamxCLEVBQU1rbEIsR0FDNUJsbEIsRUFBSy9MLGFBQWFpeEIsRUFBUyxPQW9CekJuRSxHQUFNLENBQ1JoMUIsT0FBUSxTQUFpQnNMLEVBQUc4SSxHQUMxQmdsQixHQUFZaGxCLElBRWR6TSxPQUFRLFNBQWlCdWUsRUFBVTlSLEdBQzdCOFIsRUFBUzVoQixLQUFLMHdCLE1BQVE1Z0IsRUFBTTlQLEtBQUswd0IsTUFDbkNvRSxHQUFZbFQsR0FBVSxHQUN0QmtULEdBQVlobEIsS0FHaEJ1VCxRQUFTLFNBQWtCdlQsR0FDekJnbEIsR0FBWWhsQixHQUFPLEtBSXZCLFNBQVNnbEIsR0FBYWhsQixFQUFPaWxCLEdBQzNCLElBQUlwNUIsRUFBTW1VLEVBQU05UCxLQUFLMHdCLElBQ3JCLEdBQUt4ckIsRUFBTXZKLEdBQVgsQ0FFQSxJQUFJa1gsRUFBSy9DLEVBQU12QixRQUNYbWlCLEVBQU01Z0IsRUFBTWpCLG1CQUFxQmlCLEVBQU14QixJQUN2Q3pMLEVBQU9nUSxFQUFHOGIsTUFDVm9HLEVBQ0U5dUIsTUFBTTFKLFFBQVFzRyxFQUFLbEgsSUFDckIySCxFQUFPVCxFQUFLbEgsR0FBTSswQixHQUNUN3RCLEVBQUtsSCxLQUFTKzBCLElBQ3ZCN3RCLEVBQUtsSCxRQUFPeVEsR0FHVjBELEVBQU05UCxLQUFLZzFCLFNBQ1IvdUIsTUFBTTFKLFFBQVFzRyxFQUFLbEgsSUFFYmtILEVBQUtsSCxHQUFLOEssUUFBUWlxQixHQUFPLEdBRWxDN3RCLEVBQUtsSCxHQUFLaUYsS0FBSzh2QixHQUhmN3RCLEVBQUtsSCxHQUFPLENBQUMrMEIsR0FNZjd0QixFQUFLbEgsR0FBTyswQixHQWlCbEIsSUFBSXVFLEdBQVksSUFBSS9tQixHQUFNLEdBQUksR0FBSSxJQUU5QitFLEdBQVEsQ0FBQyxTQUFVLFdBQVksU0FBVSxTQUFVLFdBRXZELFNBQVNpaUIsR0FBV3YyQixFQUFHQyxHQUNyQixPQUNFRCxFQUFFaEQsTUFBUWlELEVBQUVqRCxNQUVSZ0QsRUFBRXdQLE1BQVF2UCxFQUFFdVAsS0FDWnhQLEVBQUV1USxZQUFjdFEsRUFBRXNRLFdBQ2xCaEssRUFBTXZHLEVBQUVxQixRQUFVa0YsRUFBTXRHLEVBQUVvQixPQVdsQyxTQUF3QnJCLEVBQUdDLEdBQ3pCLEdBQWMsVUFBVkQsRUFBRXdQLElBQW1CLE9BQU8sRUFDaEMsSUFBSS9ULEVBQ0ErNkIsRUFBUWp3QixFQUFNOUssRUFBSXVFLEVBQUVxQixPQUFTa0YsRUFBTTlLLEVBQUlBLEVBQUVzZ0IsUUFBVXRnQixFQUFFK0ksS0FDckRpeUIsRUFBUWx3QixFQUFNOUssRUFBSXdFLEVBQUVvQixPQUFTa0YsRUFBTTlLLEVBQUlBLEVBQUVzZ0IsUUFBVXRnQixFQUFFK0ksS0FDekQsT0FBT2d5QixJQUFVQyxHQUFTcEIsR0FBZ0JtQixJQUFVbkIsR0FBZ0JvQixHQWY5REMsQ0FBYzEyQixFQUFHQyxJQUVqQnVHLEVBQU94RyxFQUFFMlEscUJBQ1QzUSxFQUFFOFAsZUFBaUI3UCxFQUFFNlAsY0FDckJ6SixFQUFRcEcsRUFBRTZQLGFBQWFpSSxRQWMvQixTQUFTNGUsR0FBbUJsbkIsRUFBVW1uQixFQUFVQyxHQUM5QyxJQUFJcDdCLEVBQUd1QixFQUNIeUQsRUFBTSxHQUNWLElBQUtoRixFQUFJbTdCLEVBQVVuN0IsR0FBS283QixJQUFVcDdCLEVBRTVCOEssRUFESnZKLEVBQU15UyxFQUFTaFUsR0FBR3VCLE9BQ0F5RCxFQUFJekQsR0FBT3ZCLEdBRS9CLE9BQU9nRixFQXF0QlQsSUFBSTZVLEdBQWEsQ0FDZnZZLE9BQVErNUIsR0FDUnB5QixPQUFRb3lCLEdBQ1JwUyxRQUFTLFNBQTJCdlQsR0FDbEMybEIsR0FBaUIzbEIsRUFBT21sQixNQUk1QixTQUFTUSxHQUFrQjdULEVBQVU5UixJQUMvQjhSLEVBQVM1aEIsS0FBS2lVLFlBQWNuRSxFQUFNOVAsS0FBS2lVLGFBSzdDLFNBQWtCMk4sRUFBVTlSLEdBQzFCLElBUUluVSxFQUFLKzVCLEVBQVFDLEVBUmJDLEVBQVdoVSxJQUFhcVQsR0FDeEJZLEVBQVkvbEIsSUFBVW1sQixHQUN0QmEsRUFBVUMsR0FBc0JuVSxFQUFTNWhCLEtBQUtpVSxXQUFZMk4sRUFBU3JULFNBQ25FeW5CLEVBQVVELEdBQXNCam1CLEVBQU05UCxLQUFLaVUsV0FBWW5FLEVBQU12QixTQUU3RDBuQixFQUFpQixHQUNqQkMsRUFBb0IsR0FHeEIsSUFBS3Y2QixLQUFPcTZCLEVBQ1ZOLEVBQVNJLEVBQVFuNkIsR0FDakJnNkIsRUFBTUssRUFBUXI2QixHQUNUKzVCLEdBUUhDLEVBQUluTCxTQUFXa0wsRUFBT3I2QixNQUN0QnM2QixFQUFJUSxPQUFTVCxFQUFPVSxJQUNwQkMsR0FBV1YsRUFBSyxTQUFVN2xCLEVBQU84UixHQUM3QitULEVBQUlockIsS0FBT2dyQixFQUFJaHJCLElBQUkyckIsa0JBQ3JCSixFQUFrQnQxQixLQUFLKzBCLEtBVnpCVSxHQUFXVixFQUFLLE9BQVE3bEIsRUFBTzhSLEdBQzNCK1QsRUFBSWhyQixLQUFPZ3JCLEVBQUlockIsSUFBSTJGLFVBQ3JCMmxCLEVBQWVyMUIsS0FBSyswQixJQWExQixHQUFJTSxFQUFlbjVCLE9BQVEsQ0FDekIsSUFBSXk1QixFQUFhLFdBQ2YsSUFBSyxJQUFJbjhCLEVBQUksRUFBR0EsRUFBSTY3QixFQUFlbjVCLE9BQVExQyxJQUN6Q2k4QixHQUFXSixFQUFlNzdCLEdBQUksV0FBWTBWLEVBQU84UixJQUdqRGdVLEVBQ0Z6YyxHQUFlckosRUFBTyxTQUFVeW1CLEdBRWhDQSxJQUlBTCxFQUFrQnA1QixRQUNwQnFjLEdBQWVySixFQUFPLFlBQWEsV0FDakMsSUFBSyxJQUFJMVYsRUFBSSxFQUFHQSxFQUFJODdCLEVBQWtCcDVCLE9BQVExQyxJQUM1Q2k4QixHQUFXSCxFQUFrQjk3QixHQUFJLG1CQUFvQjBWLEVBQU84UixLQUtsRSxJQUFLZ1UsRUFDSCxJQUFLajZCLEtBQU9tNkIsRUFDTEUsRUFBUXI2QixJQUVYMDZCLEdBQVdQLEVBQVFuNkIsR0FBTSxTQUFVaW1CLEVBQVVBLEVBQVVpVSxHQTNEM0Q3RixDQUFRcE8sRUFBVTlSLEdBaUV0QixJQUFJMG1CLEdBQWlCMTdCLE9BQU9ZLE9BQU8sTUFFbkMsU0FBU3E2QixHQUNQL2hCLEVBQ0FuQixHQUVBLElBS0l6WSxFQUFHdTdCLEVBTEh6dEIsRUFBTXBOLE9BQU9ZLE9BQU8sTUFDeEIsSUFBS3NZLEVBRUgsT0FBTzlMLEVBR1QsSUFBSzlOLEVBQUksRUFBR0EsRUFBSTRaLEVBQUtsWCxPQUFRMUMsS0FDM0J1N0IsRUFBTTNoQixFQUFLNVosSUFDRnE4QixZQUVQZCxFQUFJYyxVQUFZRCxJQUVsQnR1QixFQUFJd3VCLEdBQWNmLElBQVFBLEVBQzFCQSxFQUFJaHJCLElBQU04SixHQUFhNUIsRUFBRzBDLFNBQVUsYUFBY29nQixFQUFJaDdCLE1BR3hELE9BQU91TixFQUdULFNBQVN3dUIsR0FBZWYsR0FDdEIsT0FBT0EsRUFBSWdCLFNBQWFoQixFQUFJaDdCLEtBQVEsSUFBT0csT0FBT2lPLEtBQUs0c0IsRUFBSWMsV0FBYSxJQUFJbjJCLEtBQUssS0FHbkYsU0FBUysxQixHQUFZVixFQUFLdmlCLEVBQU10RCxFQUFPOFIsRUFBVWlVLEdBQy9DLElBQUloNUIsRUFBSzg0QixFQUFJaHJCLEtBQU9nckIsRUFBSWhyQixJQUFJeUksR0FDNUIsR0FBSXZXLEVBQ0YsSUFDRUEsRUFBR2lULEVBQU14QixJQUFLcW5CLEVBQUs3bEIsRUFBTzhSLEVBQVVpVSxHQUNwQyxNQUFPbHRCLEdBQ1BtTixHQUFZbk4sRUFBR21ILEVBQU12QixRQUFVLGFBQWdCb25CLEVBQUloN0IsS0FBUSxJQUFNeVksRUFBTyxVQUs5RSxJQUFJd2pCLEdBQWMsQ0FDaEJsRyxHQUNBemMsSUFLRixTQUFTNGlCLEdBQWFqVixFQUFVOVIsR0FDOUIsSUFBSTdELEVBQU82RCxFQUFNdEIsaUJBQ2pCLEtBQUl0SixFQUFNK0csS0FBNEMsSUFBbkNBLEVBQUtRLEtBQUt4SyxRQUFRNjBCLGNBR2pDOXhCLEVBQVE0YyxFQUFTNWhCLEtBQUswYSxRQUFVMVYsRUFBUThLLEVBQU05UCxLQUFLMGEsUUFBdkQsQ0FHQSxJQUFJL2UsRUFBS3NhLEVBQ0wzSCxFQUFNd0IsRUFBTXhCLElBQ1p5b0IsRUFBV25WLEVBQVM1aEIsS0FBSzBhLE9BQVMsR0FDbENBLEVBQVE1SyxFQUFNOVAsS0FBSzBhLE9BQVMsR0FNaEMsSUFBSy9lLEtBSkR1SixFQUFNd1YsRUFBTWxLLFVBQ2RrSyxFQUFRNUssRUFBTTlQLEtBQUswYSxNQUFRaGMsRUFBTyxHQUFJZ2MsSUFHNUJBLEVBQ1Z6RSxFQUFNeUUsRUFBTS9lLEdBQ05vN0IsRUFBU3A3QixLQUNIc2EsR0FDVitnQixHQUFRMW9CLEVBQUszUyxFQUFLc2EsR0FTdEIsSUFBS3RhLEtBSEE2UCxHQUFRRSxJQUFXZ1AsRUFBTXJmLFFBQVUwN0IsRUFBUzE3QixPQUMvQzI3QixHQUFRMW9CLEVBQUssUUFBU29NLEVBQU1yZixPQUVsQjA3QixFQUNOL3hCLEVBQVEwVixFQUFNL2UsTUFDWm0zQixHQUFRbjNCLEdBQ1YyUyxFQUFJMm9CLGtCQUFrQnBFLEdBQVNFLEdBQWFwM0IsSUFDbEM2MkIsR0FBaUI3MkIsSUFDM0IyUyxFQUFJNG9CLGdCQUFnQnY3QixLQU01QixTQUFTcTdCLEdBQVM3SCxFQUFJeHpCLEVBQUtOLEdBQ3JCOHpCLEVBQUcrRSxRQUFRenRCLFFBQVEsTUFBUSxFQUM3QjB3QixHQUFZaEksRUFBSXh6QixFQUFLTixHQUNadTNCLEdBQWNqM0IsR0FHbkJnM0IsR0FBaUJ0M0IsR0FDbkI4ekIsRUFBRytILGdCQUFnQnY3QixJQUluQk4sRUFBZ0Isb0JBQVJNLEdBQTRDLFVBQWZ3ekIsRUFBRytFLFFBQ3BDLE9BQ0F2NEIsRUFDSnd6QixFQUFHdnJCLGFBQWFqSSxFQUFLTixJQUVkbTNCLEdBQWlCNzJCLEdBQzFCd3pCLEVBQUd2ckIsYUFBYWpJLEVBQUsrMkIsR0FBdUIvMkIsRUFBS04sSUFDeEN5M0IsR0FBUW4zQixHQUNiZzNCLEdBQWlCdDNCLEdBQ25COHpCLEVBQUc4SCxrQkFBa0JwRSxHQUFTRSxHQUFhcDNCLElBRTNDd3pCLEVBQUdpSSxlQUFldkUsR0FBU2wzQixFQUFLTixHQUdsQzg3QixHQUFZaEksRUFBSXh6QixFQUFLTixHQUl6QixTQUFTODdCLEdBQWFoSSxFQUFJeHpCLEVBQUtOLEdBQzdCLEdBQUlzM0IsR0FBaUJ0M0IsR0FDbkI4ekIsRUFBRytILGdCQUFnQnY3QixPQUNkLENBS0wsR0FDRTZQLElBQVNDLEdBQ00sYUFBZjBqQixFQUFHK0UsU0FDSyxnQkFBUnY0QixHQUFtQyxLQUFWTixJQUFpQjh6QixFQUFHa0ksT0FDN0MsQ0FDQSxJQUFJQyxFQUFVLFNBQVUzdUIsR0FDdEJBLEVBQUU0dUIsMkJBQ0ZwSSxFQUFHcUksb0JBQW9CLFFBQVNGLElBRWxDbkksRUFBR2pqQixpQkFBaUIsUUFBU29yQixHQUU3Qm5JLEVBQUdrSSxRQUFTLEVBRWRsSSxFQUFHdnJCLGFBQWFqSSxFQUFLTixJQUl6QixJQUFJcWYsR0FBUSxDQUNWaGYsT0FBUW03QixHQUNSeHpCLE9BQVF3ekIsSUFLVixTQUFTWSxHQUFhN1YsRUFBVTlSLEdBQzlCLElBQUlxZixFQUFLcmYsRUFBTXhCLElBQ1h0TyxFQUFPOFAsRUFBTTlQLEtBQ2IwM0IsRUFBVTlWLEVBQVM1aEIsS0FDdkIsS0FDRWdGLEVBQVFoRixFQUFLbXpCLGNBQ2JudUIsRUFBUWhGLEVBQUtpbkIsU0FDWGppQixFQUFRMHlCLElBQ04xeUIsRUFBUTB5QixFQUFRdkUsY0FDaEJudUIsRUFBUTB5QixFQUFRelEsU0FMdEIsQ0FZQSxJQUFJMFEsRUFBTTNFLEdBQWlCbGpCLEdBR3ZCOG5CLEVBQWtCekksRUFBRzBJLG1CQUNyQjN5QixFQUFNMHlCLEtBQ1JELEVBQU0xM0IsR0FBTzAzQixFQUFLdEUsR0FBZXVFLEtBSS9CRCxJQUFReEksRUFBRzJJLGFBQ2IzSSxFQUFHdnJCLGFBQWEsUUFBUyt6QixHQUN6QnhJLEVBQUcySSxXQUFhSCxJQUlwQixJQXlDSUksR0F6Q0FDLEdBQVEsQ0FDVnQ4QixPQUFRKzdCLEdBQ1JwMEIsT0FBUW8wQixJQWFOUSxHQUFjLE1BQ2RDLEdBQXVCLE1BMkIzQixTQUFTQyxHQUFxQmxmLEVBQU8zQyxFQUFTZ0MsR0FDNUMsSUFBSW1QLEVBQVVzUSxHQUNkLE9BQU8sU0FBU3JRLElBQ2QsSUFBSXhmLEVBQU1vTyxFQUFRNU8sTUFBTSxLQUFNbEosV0FDbEIsT0FBUjBKLEdBQ0Zrd0IsR0FBU25mLEVBQU95TyxFQUFhcFAsRUFBU21QLElBUTVDLElBQUk0USxHQUFrQnpoQixNQUFzQmhMLElBQVFxbEIsT0FBT3JsQixHQUFLLEtBQU8sSUFFdkUsU0FBUzBzQixHQUNQMzlCLEVBQ0EyYixFQUNBZ0MsRUFDQUYsR0FRQSxHQUFJaWdCLEdBQWlCLENBQ25CLElBQUlFLEVBQW9CcFEsR0FDcEJoWSxFQUFXbUcsRUFDZkEsRUFBVW5HLEVBQVNxb0IsU0FBVyxTQUFVN3ZCLEdBQ3RDLEdBSUVBLEVBQUVnRixTQUFXaEYsRUFBRTh2QixlQUVmOXZCLEVBQUU0ZixXQUFhZ1EsR0FJZjV2QixFQUFFNGYsV0FBYSxHQUlmNWYsRUFBRWdGLE9BQU8rcUIsZ0JBQWtCdDZCLFNBRTNCLE9BQU8rUixFQUFTekksTUFBTXZJLEtBQU1YLFlBSWxDdTVCLEdBQVM3ckIsaUJBQ1B2UixFQUNBMmIsRUFDQXRLLEdBQ0ksQ0FBRXNNLFFBQVNBLEVBQVNGLFFBQVNBLEdBQzdCRSxHQUlSLFNBQVM4ZixHQUNQejlCLEVBQ0EyYixFQUNBZ0MsRUFDQW1QLElBRUNBLEdBQVdzUSxJQUFVUCxvQkFDcEI3OEIsRUFDQTJiLEVBQVFraUIsVUFBWWxpQixFQUNwQmdDLEdBSUosU0FBU3FnQixHQUFvQi9XLEVBQVU5UixHQUNyQyxJQUFJOUssRUFBUTRjLEVBQVM1aEIsS0FBSzRZLE1BQU81VCxFQUFROEssRUFBTTlQLEtBQUs0WSxJQUFwRCxDQUdBLElBQUlBLEVBQUs5SSxFQUFNOVAsS0FBSzRZLElBQU0sR0FDdEJDLEVBQVErSSxFQUFTNWhCLEtBQUs0WSxJQUFNLEdBQ2hDbWYsR0FBV2pvQixFQUFNeEIsSUFsR25CLFNBQTBCc0ssR0FFeEIsR0FBSTFULEVBQU0wVCxFQUFHcWYsS0FBZSxDQUUxQixJQUFJaGYsRUFBUXpOLEVBQU8sU0FBVyxRQUM5Qm9OLEVBQUdLLEdBQVMsR0FBR2haLE9BQU8yWSxFQUFHcWYsSUFBY3JmLEVBQUdLLElBQVUsV0FDN0NMLEVBQUdxZixJQUtSL3lCLEVBQU0wVCxFQUFHc2YsT0FDWHRmLEVBQUdnZ0IsT0FBUyxHQUFHMzRCLE9BQU8yWSxFQUFHc2YsSUFBdUJ0ZixFQUFHZ2dCLFFBQVUsV0FDdERoZ0IsRUFBR3NmLEtBc0ZaVyxDQUFnQmpnQixHQUNoQkQsR0FBZ0JDLEVBQUlDLEVBQU95ZixHQUFPRixHQUFVRCxHQUFxQnJvQixFQUFNdkIsU0FDdkV3cEIsUUFBVzNyQixHQUdiLElBT0kwc0IsR0FQQUMsR0FBUyxDQUNYcjlCLE9BQVFpOUIsR0FDUnQxQixPQUFRczFCLElBT1YsU0FBU0ssR0FBZ0JwWCxFQUFVOVIsR0FDakMsSUFBSTlLLEVBQVE0YyxFQUFTNWhCLEtBQUtzZCxZQUFhdFksRUFBUThLLEVBQU05UCxLQUFLc2QsVUFBMUQsQ0FHQSxJQUFJM2hCLEVBQUtzYSxFQUNMM0gsRUFBTXdCLEVBQU14QixJQUNaMnFCLEVBQVdyWCxFQUFTNWhCLEtBQUtzZCxVQUFZLEdBQ3JDaEssRUFBUXhELEVBQU05UCxLQUFLc2QsVUFBWSxHQU1uQyxJQUFLM2hCLEtBSkR1SixFQUFNb08sRUFBTTlDLFVBQ2Q4QyxFQUFReEQsRUFBTTlQLEtBQUtzZCxTQUFXNWUsRUFBTyxHQUFJNFUsSUFHL0IybEIsRUFDSnQ5QixLQUFPMlgsSUFDWGhGLEVBQUkzUyxHQUFPLElBSWYsSUFBS0EsS0FBTzJYLEVBQU8sQ0FLakIsR0FKQTJDLEVBQU0zQyxFQUFNM1gsR0FJQSxnQkFBUkEsR0FBaUMsY0FBUkEsRUFBcUIsQ0FFaEQsR0FESW1VLEVBQU0xQixXQUFZMEIsRUFBTTFCLFNBQVN0UixPQUFTLEdBQzFDbVosSUFBUWdqQixFQUFTdDlCLEdBQVEsU0FHQyxJQUExQjJTLEVBQUk1SixXQUFXNUgsUUFDakJ3UixFQUFJN0ssWUFBWTZLLEVBQUk1SixXQUFXLElBSW5DLEdBQVksVUFBUi9JLEdBQW1DLGFBQWhCMlMsRUFBSTRsQixRQUF3QixDQUdqRDVsQixFQUFJNHFCLE9BQVNqakIsRUFFYixJQUFJa2pCLEVBQVNuMEIsRUFBUWlSLEdBQU8sR0FBS3ZRLE9BQU91USxHQUNwQ21qQixHQUFrQjlxQixFQUFLNnFCLEtBQ3pCN3FCLEVBQUlqVCxNQUFRODlCLFFBRVQsR0FBWSxjQUFSeDlCLEdBQXVCbTRCLEdBQU14bEIsRUFBSTRsQixVQUFZbHZCLEVBQVFzSixFQUFJK3FCLFdBQVksRUFFOUVQLEdBQWVBLElBQWdCMTZCLFNBQVM4RSxjQUFjLFFBQ3pDbTJCLFVBQVksUUFBVXBqQixFQUFNLFNBRXpDLElBREEsSUFBSTBkLEVBQU1tRixHQUFhOTBCLFdBQ2hCc0ssRUFBSXRLLFlBQ1RzSyxFQUFJN0ssWUFBWTZLLEVBQUl0SyxZQUV0QixLQUFPMnZCLEVBQUkzdkIsWUFDVHNLLEVBQUlsTCxZQUFZdXdCLEVBQUkzdkIsaUJBRWpCLEdBS0xpUyxJQUFRZ2pCLEVBQVN0OUIsR0FJakIsSUFDRTJTLEVBQUkzUyxHQUFPc2EsRUFDWCxNQUFPdE4sT0FRZixTQUFTeXdCLEdBQW1COXFCLEVBQUtnckIsR0FDL0IsT0FBU2hyQixFQUFJaXJCLFlBQ0ssV0FBaEJqckIsRUFBSTRsQixTQU1SLFNBQStCNWxCLEVBQUtnckIsR0FHbEMsSUFBSUUsR0FBYSxFQUdqQixJQUFNQSxFQUFhcDdCLFNBQVNxN0IsZ0JBQWtCbnJCLEVBQU8sTUFBTzNGLElBQzVELE9BQU82d0IsR0FBY2xyQixFQUFJalQsUUFBVWkrQixFQVpqQ0ksQ0FBcUJwckIsRUFBS2dyQixJQWU5QixTQUErQmhyQixFQUFLMkQsR0FDbEMsSUFBSTVXLEVBQVFpVCxFQUFJalQsTUFDWm83QixFQUFZbm9CLEVBQUlxckIsWUFDcEIsR0FBSXowQixFQUFNdXhCLEdBQVksQ0FDcEIsR0FBSUEsRUFBVW1ELE9BQ1osT0FBTzF6QixFQUFTN0ssS0FBVzZLLEVBQVMrTCxHQUV0QyxHQUFJd2tCLEVBQVUzM0IsS0FDWixPQUFPekQsRUFBTXlELFNBQVdtVCxFQUFPblQsT0FHbkMsT0FBT3pELElBQVU0VyxFQXpCZjRuQixDQUFxQnZyQixFQUFLZ3JCLElBNEI5QixJQUFJaGMsR0FBVyxDQUNiNWhCLE9BQVFzOUIsR0FDUjMxQixPQUFRMjFCLElBS05jLEdBQWlCbHpCLEVBQU8sU0FBVTdDLEdBQ3BDLElBQUltRSxFQUFNLEdBRU42eEIsRUFBb0IsUUFPeEIsT0FOQWgyQixFQUFRdUMsTUFGWSxpQkFFUzNKLFFBQVEsU0FBVTBDLEdBQzdDLEdBQUlBLEVBQU0sQ0FDUixJQUFJaXJCLEVBQU1qckIsRUFBS2lILE1BQU15ekIsR0FDckJ6UCxFQUFJeHRCLE9BQVMsSUFBTW9MLEVBQUlvaUIsRUFBSSxHQUFHeHJCLFFBQVV3ckIsRUFBSSxHQUFHeHJCLFdBRzVDb0osSUFJVCxTQUFTOHhCLEdBQW9CaDZCLEdBQzNCLElBQUlnbkIsRUFBUWlULEdBQXNCajZCLEVBQUtnbkIsT0FHdkMsT0FBT2huQixFQUFLazZCLFlBQ1J4N0IsRUFBT3NCLEVBQUtrNkIsWUFBYWxULEdBQ3pCQSxFQUlOLFNBQVNpVCxHQUF1QkUsR0FDOUIsT0FBSWwwQixNQUFNMUosUUFBUTQ5QixHQUNUbHlCLEVBQVNreUIsR0FFVSxpQkFBakJBLEVBQ0ZMLEdBQWVLLEdBRWpCQSxFQXVDVCxJQXlCSUMsR0F6QkFDLEdBQVcsTUFDWEMsR0FBYyxpQkFDZEMsR0FBVSxTQUFVcEwsRUFBSXgwQixFQUFNNkIsR0FFaEMsR0FBSTY5QixHQUFTajRCLEtBQUt6SCxHQUNoQncwQixFQUFHbkksTUFBTXdULFlBQVk3L0IsRUFBTTZCLFFBQ3RCLEdBQUk4OUIsR0FBWWw0QixLQUFLNUYsR0FDMUIyeUIsRUFBR25JLE1BQU13VCxZQUFZbHpCLEVBQVUzTSxHQUFPNkIsRUFBSXdDLFFBQVFzN0IsR0FBYSxJQUFLLGlCQUMvRCxDQUNMLElBQUlHLEVBQWlCQyxHQUFVLy9CLEdBQy9CLEdBQUlzTCxNQUFNMUosUUFBUUMsR0FJaEIsSUFBSyxJQUFJcEMsRUFBSSxFQUFHaVcsRUFBTTdULEVBQUlNLE9BQVExQyxFQUFJaVcsRUFBS2pXLElBQ3pDKzBCLEVBQUduSSxNQUFNeVQsR0FBa0JqK0IsRUFBSXBDLFFBR2pDKzBCLEVBQUduSSxNQUFNeVQsR0FBa0JqK0IsSUFLN0JtK0IsR0FBYyxDQUFDLFNBQVUsTUFBTyxNQUdoQ0QsR0FBWTl6QixFQUFPLFNBQVVxTyxHQUcvQixHQUZBbWxCLEdBQWFBLElBQWNoOEIsU0FBUzhFLGNBQWMsT0FBTzhqQixNQUU1QyxZQURiL1IsRUFBT2xPLEVBQVNrTyxLQUNVQSxLQUFRbWxCLEdBQ2hDLE9BQU9ubEIsRUFHVCxJQURBLElBQUkybEIsRUFBVTNsQixFQUFLOU4sT0FBTyxHQUFHRixjQUFnQmdPLEVBQUs3TixNQUFNLEdBQy9DaE4sRUFBSSxFQUFHQSxFQUFJdWdDLEdBQVk3OUIsT0FBUTFDLElBQUssQ0FDM0MsSUFBSU8sRUFBT2dnQyxHQUFZdmdDLEdBQUt3Z0MsRUFDNUIsR0FBSWpnQyxLQUFReS9CLEdBQ1YsT0FBT3ovQixLQUtiLFNBQVNrZ0MsR0FBYWpaLEVBQVU5UixHQUM5QixJQUFJOVAsRUFBTzhQLEVBQU05UCxLQUNiMDNCLEVBQVU5VixFQUFTNWhCLEtBRXZCLEtBQUlnRixFQUFRaEYsRUFBS2s2QixjQUFnQmwxQixFQUFRaEYsRUFBS2duQixRQUM1Q2hpQixFQUFRMHlCLEVBQVF3QyxjQUFnQmwxQixFQUFRMHlCLEVBQVExUSxRQURsRCxDQU1BLElBQUkvUSxFQUFLdGIsRUFDTHcwQixFQUFLcmYsRUFBTXhCLElBQ1h3c0IsRUFBaUJwRCxFQUFRd0MsWUFDekJhLEVBQWtCckQsRUFBUXNELGlCQUFtQnRELEVBQVExUSxPQUFTLEdBRzlEaVUsRUFBV0gsR0FBa0JDLEVBRTdCL1QsRUFBUWlULEdBQXNCbnFCLEVBQU05UCxLQUFLZ25CLFFBQVUsR0FLdkRsWCxFQUFNOVAsS0FBS2c3QixnQkFBa0I5MUIsRUFBTThoQixFQUFNeFcsUUFDckM5UixFQUFPLEdBQUlzb0IsR0FDWEEsRUFFSixJQUFJa1UsRUFwR04sU0FBbUJwckIsRUFBT3FyQixHQUN4QixJQUNJQyxFQURBbHpCLEVBQU0sR0FHVixHQUFJaXpCLEVBRUYsSUFEQSxJQUFJbEksRUFBWW5qQixFQUNUbWpCLEVBQVVwa0Isb0JBQ2Zva0IsRUFBWUEsRUFBVXBrQixrQkFBa0J3VCxTQUV6QjRRLEVBQVVqekIsT0FDdEJvN0IsRUFBWXBCLEdBQW1CL0csRUFBVWp6QixRQUUxQ3RCLEVBQU93SixFQUFLa3pCLElBS2JBLEVBQVlwQixHQUFtQmxxQixFQUFNOVAsUUFDeEN0QixFQUFPd0osRUFBS2t6QixHQUlkLElBREEsSUFBSTUzQixFQUFhc00sRUFDVHRNLEVBQWFBLEVBQVdzTCxRQUMxQnRMLEVBQVd4RCxPQUFTbzdCLEVBQVlwQixHQUFtQngyQixFQUFXeEQsUUFDaEV0QixFQUFPd0osRUFBS2t6QixHQUdoQixPQUFPbHpCLEVBeUVRbXpCLENBQVN2ckIsR0FBTyxHQUUvQixJQUFLblYsS0FBUXNnQyxFQUNQajJCLEVBQVFrMkIsRUFBU3ZnQyxLQUNuQjQvQixHQUFRcEwsRUFBSXgwQixFQUFNLElBR3RCLElBQUtBLEtBQVF1Z0MsR0FDWGpsQixFQUFNaWxCLEVBQVN2Z0MsTUFDSHNnQyxFQUFTdGdDLElBRW5CNC9CLEdBQVFwTCxFQUFJeDBCLEVBQWEsTUFBUHNiLEVBQWMsR0FBS0EsSUFLM0MsSUFBSStRLEdBQVEsQ0FDVnRyQixPQUFRbS9CLEdBQ1J4M0IsT0FBUXczQixJQUtOUyxHQUFlLE1BTW5CLFNBQVNDLEdBQVVwTSxFQUFJd0ksR0FFckIsR0FBS0EsSUFBU0EsRUFBTUEsRUFBSTc0QixRQUt4QixHQUFJcXdCLEVBQUdxTSxVQUNEN0QsRUFBSWx4QixRQUFRLE1BQVEsRUFDdEJreEIsRUFBSXJ4QixNQUFNZzFCLElBQWMzK0IsUUFBUSxTQUFVbEMsR0FBSyxPQUFPMDBCLEVBQUdxTSxVQUFVdnVCLElBQUl4UyxLQUV2RTAwQixFQUFHcU0sVUFBVXZ1QixJQUFJMHFCLE9BRWQsQ0FDTCxJQUFJMWhCLEVBQU0sS0FBT2taLEVBQUdzTSxhQUFhLFVBQVksSUFBTSxJQUMvQ3hsQixFQUFJeFAsUUFBUSxJQUFNa3hCLEVBQU0sS0FBTyxHQUNqQ3hJLEVBQUd2ckIsYUFBYSxTQUFVcVMsRUFBTTBoQixHQUFLNzRCLFNBUzNDLFNBQVM0OEIsR0FBYXZNLEVBQUl3SSxHQUV4QixHQUFLQSxJQUFTQSxFQUFNQSxFQUFJNzRCLFFBS3hCLEdBQUlxd0IsRUFBR3FNLFVBQ0Q3RCxFQUFJbHhCLFFBQVEsTUFBUSxFQUN0Qmt4QixFQUFJcnhCLE1BQU1nMUIsSUFBYzMrQixRQUFRLFNBQVVsQyxHQUFLLE9BQU8wMEIsRUFBR3FNLFVBQVVsNEIsT0FBTzdJLEtBRTFFMDBCLEVBQUdxTSxVQUFVbDRCLE9BQU9xMEIsR0FFakJ4SSxFQUFHcU0sVUFBVTErQixRQUNoQnF5QixFQUFHK0gsZ0JBQWdCLGFBRWhCLENBR0wsSUFGQSxJQUFJamhCLEVBQU0sS0FBT2taLEVBQUdzTSxhQUFhLFVBQVksSUFBTSxJQUMvQ0UsRUFBTSxJQUFNaEUsRUFBTSxJQUNmMWhCLEVBQUl4UCxRQUFRazFCLElBQVEsR0FDekIxbEIsRUFBTUEsRUFBSWpYLFFBQVEyOEIsRUFBSyxNQUV6QjFsQixFQUFNQSxFQUFJblgsUUFFUnF3QixFQUFHdnJCLGFBQWEsUUFBU3FTLEdBRXpCa1osRUFBRytILGdCQUFnQixVQU96QixTQUFTMEUsR0FBbUIxbkIsR0FDMUIsR0FBS0EsRUFBTCxDQUlBLEdBQXNCLGlCQUFYQSxFQUFxQixDQUM5QixJQUFJaE0sRUFBTSxHQUtWLE9BSm1CLElBQWZnTSxFQUFPaFQsS0FDVHhDLEVBQU93SixFQUFLMnpCLEdBQWtCM25CLEVBQU92WixNQUFRLE1BRS9DK0QsRUFBT3dKLEVBQUtnTSxHQUNMaE0sRUFDRixNQUFzQixpQkFBWGdNLEVBQ1QybkIsR0FBa0IzbkIsUUFEcEIsR0FLVCxJQUFJMm5CLEdBQW9CajFCLEVBQU8sU0FBVWpNLEdBQ3ZDLE1BQU8sQ0FDTG1oQyxXQUFhbmhDLEVBQU8sU0FDcEJvaEMsYUFBZXBoQyxFQUFPLFlBQ3RCcWhDLGlCQUFtQnJoQyxFQUFPLGdCQUMxQnNoQyxXQUFhdGhDLEVBQU8sU0FDcEJ1aEMsYUFBZXZoQyxFQUFPLFlBQ3RCd2hDLGlCQUFtQnhoQyxFQUFPLG1CQUkxQnloQyxHQUFnQmx4QixJQUFjTyxFQUM5QjR3QixHQUFhLGFBQ2JDLEdBQVksWUFHWkMsR0FBaUIsYUFDakJDLEdBQXFCLGdCQUNyQkMsR0FBZ0IsWUFDaEJDLEdBQW9CLGVBQ3BCTixVQUU2Qmh3QixJQUEzQmpPLE9BQU93K0Isc0JBQ3dCdndCLElBQWpDak8sT0FBT3krQix3QkFFUEwsR0FBaUIsbUJBQ2pCQyxHQUFxQiw0QkFFT3B3QixJQUExQmpPLE9BQU8wK0IscUJBQ3VCendCLElBQWhDak8sT0FBTzIrQix1QkFFUEwsR0FBZ0Isa0JBQ2hCQyxHQUFvQix1QkFLeEIsSUFBSUssR0FBTTd4QixFQUNOL00sT0FBTzYrQixzQkFDTDcrQixPQUFPNitCLHNCQUFzQnBoQyxLQUFLdUMsUUFDbENnWixXQUN5QixTQUFVdGEsR0FBTSxPQUFPQSxLQUV0RCxTQUFTb2dDLEdBQVdwZ0MsR0FDbEJrZ0MsR0FBSSxXQUNGQSxHQUFJbGdDLEtBSVIsU0FBU3FnQyxHQUFvQi9OLEVBQUl3SSxHQUMvQixJQUFJd0YsRUFBb0JoTyxFQUFHMEkscUJBQXVCMUksRUFBRzBJLG1CQUFxQixJQUN0RXNGLEVBQWtCMTJCLFFBQVFreEIsR0FBTyxJQUNuQ3dGLEVBQWtCdjhCLEtBQUsrMkIsR0FDdkI0RCxHQUFTcE0sRUFBSXdJLElBSWpCLFNBQVN5RixHQUF1QmpPLEVBQUl3SSxHQUM5QnhJLEVBQUcwSSxvQkFDTHYwQixFQUFPNnJCLEVBQUcwSSxtQkFBb0JGLEdBRWhDK0QsR0FBWXZNLEVBQUl3SSxHQUdsQixTQUFTMEYsR0FDUGxPLEVBQ0FtTyxFQUNBNWxCLEdBRUEsSUFBSWdaLEVBQU02TSxHQUFrQnBPLEVBQUltTyxHQUM1Qm42QixFQUFPdXRCLEVBQUl2dEIsS0FDWGlpQixFQUFVc0wsRUFBSXRMLFFBQ2RvWSxFQUFZOU0sRUFBSThNLFVBQ3BCLElBQUtyNkIsRUFBUSxPQUFPdVUsSUFDcEIsSUFBSXVCLEVBQVE5VixJQUFTazVCLEdBQWFHLEdBQXFCRSxHQUNuRGUsRUFBUSxFQUNSQyxFQUFNLFdBQ1J2TyxFQUFHcUksb0JBQW9CdmUsRUFBTzBrQixHQUM5QmptQixLQUVFaW1CLEVBQVEsU0FBVWgxQixHQUNoQkEsRUFBRWdGLFNBQVd3aEIsS0FDVHNPLEdBQVNELEdBQ2JFLEtBSU52bUIsV0FBVyxXQUNMc21CLEVBQVFELEdBQ1ZFLEtBRUR0WSxFQUFVLEdBQ2IrSixFQUFHampCLGlCQUFpQitNLEVBQU8wa0IsR0FHN0IsSUFBSUMsR0FBYyx5QkFFbEIsU0FBU0wsR0FBbUJwTyxFQUFJbU8sR0FDOUIsSUFTSW42QixFQVRBcEMsRUFBUzVDLE9BQU8wL0IsaUJBQWlCMU8sR0FFakMyTyxHQUFvQi84QixFQUFPdzdCLEdBQWlCLFVBQVksSUFBSWoyQixNQUFNLE1BQ2xFeTNCLEdBQXVCaDlCLEVBQU93N0IsR0FBaUIsYUFBZSxJQUFJajJCLE1BQU0sTUFDeEUwM0IsRUFBb0JDLEdBQVdILEVBQWtCQyxHQUNqREcsR0FBbUJuOUIsRUFBTzA3QixHQUFnQixVQUFZLElBQUluMkIsTUFBTSxNQUNoRTYzQixHQUFzQnA5QixFQUFPMDdCLEdBQWdCLGFBQWUsSUFBSW4yQixNQUFNLE1BQ3RFODNCLEVBQW1CSCxHQUFXQyxFQUFpQkMsR0FHL0MvWSxFQUFVLEVBQ1ZvWSxFQUFZLEVBOEJoQixPQTVCSUYsSUFBaUJqQixHQUNmMkIsRUFBb0IsSUFDdEI3NkIsRUFBT2s1QixHQUNQalgsRUFBVTRZLEVBQ1ZSLEVBQVlPLEVBQW9CamhDLFFBRXpCd2dDLElBQWlCaEIsR0FDdEI4QixFQUFtQixJQUNyQmo3QixFQUFPbTVCLEdBQ1BsWCxFQUFVZ1osRUFDVlosRUFBWVcsRUFBbUJyaEMsUUFTakMwZ0MsR0FMQXI2QixHQURBaWlCLEVBQVV6ZixLQUFLdU0sSUFBSThyQixFQUFtQkksSUFDckIsRUFDYkosRUFBb0JJLEVBQ2xCL0IsR0FDQUMsR0FDRixNQUVBbjVCLElBQVNrNUIsR0FDUDBCLEVBQW9CamhDLE9BQ3BCcWhDLEVBQW1CcmhDLE9BQ3JCLEVBS0MsQ0FDTHFHLEtBQU1BLEVBQ05paUIsUUFBU0EsRUFDVG9ZLFVBQVdBLEVBQ1hhLGFBTkFsN0IsSUFBU2s1QixJQUNUdUIsR0FBWXg3QixLQUFLckIsRUFBT3c3QixHQUFpQixjQVM3QyxTQUFTMEIsR0FBWUssRUFBUUMsR0FFM0IsS0FBT0QsRUFBT3hoQyxPQUFTeWhDLEVBQVV6aEMsUUFDL0J3aEMsRUFBU0EsRUFBT3IrQixPQUFPcStCLEdBR3pCLE9BQU8zNEIsS0FBS3VNLElBQUl4SyxNQUFNLEtBQU02MkIsRUFBVW4vQixJQUFJLFNBQVUxRSxFQUFHTixHQUNyRCxPQUFPb2tDLEdBQUs5akMsR0FBSzhqQyxHQUFLRixFQUFPbGtDLE9BUWpDLFNBQVNva0MsR0FBTXJpQyxHQUNiLE9BQWtELElBQTNDODBCLE9BQU85MEIsRUFBRWlMLE1BQU0sR0FBSSxHQUFHcEksUUFBUSxJQUFLLE1BSzVDLFNBQVN5L0IsR0FBTzN1QixFQUFPNHVCLEdBQ3JCLElBQUl2UCxFQUFLcmYsRUFBTXhCLElBR1hwSixFQUFNaXFCLEVBQUd3UCxZQUNYeFAsRUFBR3dQLFNBQVNDLFdBQVksRUFDeEJ6UCxFQUFHd1AsWUFHTCxJQUFJMytCLEVBQU80N0IsR0FBa0I5ckIsRUFBTTlQLEtBQUs2K0IsWUFDeEMsSUFBSTc1QixFQUFRaEYsS0FLUmtGLEVBQU1pcUIsRUFBRzJQLFdBQTZCLElBQWhCM1AsRUFBRzRQLFNBQTdCLENBNEJBLElBeEJBLElBQUk3OUIsRUFBTWxCLEVBQUtrQixJQUNYaUMsRUFBT25ELEVBQUttRCxLQUNaMjRCLEVBQWE5N0IsRUFBSzg3QixXQUNsQkMsRUFBZS83QixFQUFLKzdCLGFBQ3BCQyxFQUFtQmg4QixFQUFLZzhCLGlCQUN4QmdELEVBQWNoL0IsRUFBS2cvQixZQUNuQkMsRUFBZ0JqL0IsRUFBS2kvQixjQUNyQkMsRUFBb0JsL0IsRUFBS2svQixrQkFDekJDLEVBQWNuL0IsRUFBS20vQixZQUNuQlYsRUFBUXorQixFQUFLeStCLE1BQ2JXLEVBQWFwL0IsRUFBS28vQixXQUNsQkMsRUFBaUJyL0IsRUFBS3EvQixlQUN0QkMsRUFBZXQvQixFQUFLcy9CLGFBQ3BCQyxFQUFTdi9CLEVBQUt1L0IsT0FDZEMsRUFBY3gvQixFQUFLdy9CLFlBQ25CQyxFQUFrQnovQixFQUFLeS9CLGdCQUN2QkMsRUFBVzEvQixFQUFLMC9CLFNBTWhCbnhCLEVBQVVtVCxHQUNWaWUsRUFBaUJqZSxHQUFlVSxPQUM3QnVkLEdBQWtCQSxFQUFlN3dCLFFBQ3RDUCxFQUFVb3hCLEVBQWVweEIsUUFDekJveEIsRUFBaUJBLEVBQWU3d0IsT0FHbEMsSUFBSTh3QixHQUFZcnhCLEVBQVF5VSxhQUFlbFQsRUFBTWIsYUFFN0MsSUFBSTJ3QixHQUFhTCxHQUFxQixLQUFYQSxFQUEzQixDQUlBLElBQUlNLEVBQWFELEdBQVlaLEVBQ3pCQSxFQUNBbEQsRUFDQWdFLEVBQWNGLEdBQVlWLEVBQzFCQSxFQUNBbEQsRUFDQStELEVBQVVILEdBQVlYLEVBQ3RCQSxFQUNBbEQsRUFFQWlFLEVBQWtCSixHQUNqQk4sR0FDREgsRUFDQWMsRUFBWUwsR0FDTyxtQkFBWEwsRUFBd0JBLEVBQ2hDZCxFQUNBeUIsRUFBaUJOLEdBQ2hCSixHQUNESixFQUNBZSxFQUFxQlAsR0FDcEJILEdBQ0RKLEVBRUFlLEVBQXdCbDZCLEVBQzFCekosRUFBU2lqQyxHQUNMQSxFQUFTakIsTUFDVGlCLEdBR0YvMUIsRUFJSixJQUFJMDJCLEdBQXFCLElBQVJuL0IsSUFBa0J1SyxFQUMvQjYwQixFQUFtQkMsR0FBdUJOLEdBRTFDdm9CLEVBQUt5WCxFQUFHMlAsU0FBVzUxQixFQUFLLFdBQ3RCbTNCLElBQ0ZqRCxHQUFzQmpPLEVBQUk0USxHQUMxQjNDLEdBQXNCak8sRUFBSTJRLElBRXhCcG9CLEVBQUdrbkIsV0FDRHlCLEdBQ0ZqRCxHQUFzQmpPLEVBQUkwUSxHQUU1Qk0sR0FBc0JBLEVBQW1CaFIsSUFFekMrUSxHQUFrQkEsRUFBZS9RLEdBRW5DQSxFQUFHMlAsU0FBVyxPQUdYaHZCLEVBQU05UCxLQUFLd2dDLE1BRWRybkIsR0FBZXJKLEVBQU8sU0FBVSxXQUM5QixJQUFJaEIsRUFBU3FnQixFQUFHM3JCLFdBQ1ppOUIsRUFBYzN4QixHQUFVQSxFQUFPNHhCLFVBQVk1eEIsRUFBTzR4QixTQUFTNXdCLEVBQU1uVSxLQUNqRThrQyxHQUNGQSxFQUFZdHlCLE1BQVEyQixFQUFNM0IsS0FDMUJzeUIsRUFBWW55QixJQUFJcXdCLFVBRWhCOEIsRUFBWW55QixJQUFJcXdCLFdBRWxCc0IsR0FBYUEsRUFBVTlRLEVBQUl6WCxLQUsvQnNvQixHQUFtQkEsRUFBZ0I3USxHQUMvQmtSLElBQ0ZuRCxHQUFtQi9OLEVBQUkwUSxHQUN2QjNDLEdBQW1CL04sRUFBSTJRLEdBQ3ZCN0MsR0FBVSxXQUNSRyxHQUFzQmpPLEVBQUkwUSxHQUNyQm5vQixFQUFHa25CLFlBQ04xQixHQUFtQi9OLEVBQUk0USxHQUNsQk8sSUFDQ0ssR0FBZ0JQLEdBQ2xCanBCLFdBQVdPLEVBQUkwb0IsR0FFZi9DLEdBQW1CbE8sRUFBSWhzQixFQUFNdVUsUUFPbkM1SCxFQUFNOVAsS0FBS3dnQyxPQUNiOUIsR0FBaUJBLElBQ2pCdUIsR0FBYUEsRUFBVTlRLEVBQUl6WCxJQUd4QjJvQixHQUFlQyxHQUNsQjVvQixNQUlKLFNBQVNrcEIsR0FBTzl3QixFQUFPK3dCLEdBQ3JCLElBQUkxUixFQUFLcmYsRUFBTXhCLElBR1hwSixFQUFNaXFCLEVBQUcyUCxZQUNYM1AsRUFBRzJQLFNBQVNGLFdBQVksRUFDeEJ6UCxFQUFHMlAsWUFHTCxJQUFJOStCLEVBQU80N0IsR0FBa0I5ckIsRUFBTTlQLEtBQUs2K0IsWUFDeEMsR0FBSTc1QixFQUFRaEYsSUFBeUIsSUFBaEJtdkIsRUFBRzRQLFNBQ3RCLE9BQU84QixJQUlULElBQUkzN0IsRUFBTWlxQixFQUFHd1AsVUFBYixDQUlBLElBQUl6OUIsRUFBTWxCLEVBQUtrQixJQUNYaUMsRUFBT25ELEVBQUttRCxLQUNaODRCLEVBQWFqOEIsRUFBS2k4QixXQUNsQkMsRUFBZWw4QixFQUFLazhCLGFBQ3BCQyxFQUFtQm44QixFQUFLbThCLGlCQUN4QjJFLEVBQWM5Z0MsRUFBSzhnQyxZQUNuQkYsRUFBUTVnQyxFQUFLNGdDLE1BQ2JHLEVBQWEvZ0MsRUFBSytnQyxXQUNsQkMsRUFBaUJoaEMsRUFBS2doQyxlQUN0QkMsRUFBYWpoQyxFQUFLaWhDLFdBQ2xCdkIsRUFBVzEvQixFQUFLMC9CLFNBRWhCVyxHQUFxQixJQUFSbi9CLElBQWtCdUssRUFDL0I2MEIsRUFBbUJDLEdBQXVCSyxHQUUxQ00sRUFBd0JoN0IsRUFDMUJ6SixFQUFTaWpDLEdBQ0xBLEVBQVNrQixNQUNUbEIsR0FHRi8xQixFQUlKLElBQUkrTixFQUFLeVgsRUFBR3dQLFNBQVd6MUIsRUFBSyxXQUN0QmltQixFQUFHM3JCLFlBQWMyckIsRUFBRzNyQixXQUFXazlCLFdBQ2pDdlIsRUFBRzNyQixXQUFXazlCLFNBQVM1d0IsRUFBTW5VLEtBQU8sTUFFbEMwa0MsSUFDRmpELEdBQXNCak8sRUFBSStNLEdBQzFCa0IsR0FBc0JqTyxFQUFJZ04sSUFFeEJ6a0IsRUFBR2tuQixXQUNEeUIsR0FDRmpELEdBQXNCak8sRUFBSThNLEdBRTVCK0UsR0FBa0JBLEVBQWU3UixLQUVqQzBSLElBQ0FFLEdBQWNBLEVBQVc1UixJQUUzQkEsRUFBR3dQLFNBQVcsT0FHWnNDLEVBQ0ZBLEVBQVdFLEdBRVhBLElBR0YsU0FBU0EsSUFFSHpwQixFQUFHa25CLGFBSUY5dUIsRUFBTTlQLEtBQUt3Z0MsTUFBUXJSLEVBQUczckIsY0FDeEIyckIsRUFBRzNyQixXQUFXazlCLFdBQWF2UixFQUFHM3JCLFdBQVdrOUIsU0FBVyxLQUFNNXdCLEVBQU1uVSxLQUFRbVUsR0FFM0VneEIsR0FBZUEsRUFBWTNSLEdBQ3ZCa1IsSUFDRm5ELEdBQW1CL04sRUFBSThNLEdBQ3ZCaUIsR0FBbUIvTixFQUFJZ04sR0FDdkJjLEdBQVUsV0FDUkcsR0FBc0JqTyxFQUFJOE0sR0FDckJ2a0IsRUFBR2tuQixZQUNOMUIsR0FBbUIvTixFQUFJK00sR0FDbEJvRSxJQUNDSyxHQUFnQk8sR0FDbEIvcEIsV0FBV08sRUFBSXdwQixHQUVmN0QsR0FBbUJsTyxFQUFJaHNCLEVBQU11VSxRQU12Q2twQixHQUFTQSxFQUFNelIsRUFBSXpYLEdBQ2Qyb0IsR0FBZUMsR0FDbEI1b0IsTUFzQk4sU0FBU2lwQixHQUFpQm5rQyxHQUN4QixNQUFzQixpQkFBUkEsSUFBcUIySixNQUFNM0osR0FTM0MsU0FBUytqQyxHQUF3QjFqQyxHQUMvQixHQUFJbUksRUFBUW5JLEdBQ1YsT0FBTyxFQUVULElBQUl1a0MsRUFBYXZrQyxFQUFHMmIsSUFDcEIsT0FBSXRULEVBQU1rOEIsR0FFRGIsR0FDTHQ2QixNQUFNMUosUUFBUTZrQyxHQUNWQSxFQUFXLEdBQ1hBLElBR0V2a0MsRUFBRzhLLFNBQVc5SyxFQUFHQyxRQUFVLEVBSXZDLFNBQVN1a0MsR0FBUXI2QixFQUFHOEksSUFDTSxJQUFwQkEsRUFBTTlQLEtBQUt3Z0MsTUFDYi9CLEdBQU0zdUIsR0FJVixJQTRCSXd4QixHQWo3REosU0FBOEJDLEdBQzVCLElBQUlubkMsRUFBRzBJLEVBQ0hndEIsRUFBTSxHQUVOeDFCLEVBQVVpbkMsRUFBUWpuQyxRQUNsQjI1QixFQUFVc04sRUFBUXROLFFBRXRCLElBQUs3NUIsRUFBSSxFQUFHQSxFQUFJNlksR0FBTW5XLFNBQVUxQyxFQUU5QixJQURBMDFCLEVBQUk3YyxHQUFNN1ksSUFBTSxHQUNYMEksRUFBSSxFQUFHQSxFQUFJeEksRUFBUXdDLFNBQVVnRyxFQUM1Qm9DLEVBQU01SyxFQUFRd0ksR0FBR21RLEdBQU03WSxNQUN6QjAxQixFQUFJN2MsR0FBTTdZLElBQUl3RyxLQUFLdEcsRUFBUXdJLEdBQUdtUSxHQUFNN1ksS0FtQjFDLFNBQVNvbkMsRUFBWXJTLEdBQ25CLElBQUlyZ0IsRUFBU21sQixFQUFRendCLFdBQVcyckIsR0FFNUJqcUIsRUFBTTRKLElBQ1JtbEIsRUFBUXh3QixZQUFZcUwsRUFBUXFnQixHQXNCaEMsU0FBU3NTLEVBQ1AzeEIsRUFDQTR4QixFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBejlCLEdBWUEsR0FWSWEsRUFBTTRLLEVBQU14QixNQUFRcEosRUFBTTQ4QixLQU01Qmh5QixFQUFRZ3lCLEVBQVd6OUIsR0FBU3dMLEdBQVdDLElBR3pDQSxFQUFNYixjQUFnQjR5QixHQWlEeEIsU0FBMEIveEIsRUFBTzR4QixFQUFvQkMsRUFBV0MsR0FDOUQsSUFBSXhuQyxFQUFJMFYsRUFBTTlQLEtBQ2QsR0FBSWtGLEVBQU05SyxHQUFJLENBQ1osSUFBSTJuQyxFQUFnQjc4QixFQUFNNEssRUFBTWpCLG9CQUFzQnpVLEVBQUUrbUIsVUFReEQsR0FQSWpjLEVBQU05SyxFQUFJQSxFQUFFZ1osT0FBU2xPLEVBQU05SyxFQUFJQSxFQUFFNG1CLE9BQ25DNW1CLEVBQUUwVixHQUFPLEdBTVA1SyxFQUFNNEssRUFBTWpCLG1CQU1kLE9BTEFtekIsRUFBY2x5QixFQUFPNHhCLEdBQ3JCM2UsRUFBTzRlLEVBQVc3eEIsRUFBTXhCLElBQUtzekIsR0FDekJ6OEIsRUFBTzQ4QixJQTBCakIsU0FBOEJqeUIsRUFBTzR4QixFQUFvQkMsRUFBV0MsR0FPbEUsSUFOQSxJQUFJeG5DLEVBS0E2bkMsRUFBWW55QixFQUNUbXlCLEVBQVVwekIsbUJBRWYsR0FEQW96QixFQUFZQSxFQUFVcHpCLGtCQUFrQndULE9BQ3BDbmQsRUFBTTlLLEVBQUk2bkMsRUFBVWppQyxPQUFTa0YsRUFBTTlLLEVBQUlBLEVBQUV5a0MsWUFBYSxDQUN4RCxJQUFLemtDLEVBQUksRUFBR0EsRUFBSTAxQixFQUFJb1MsU0FBU3BsQyxTQUFVMUMsRUFDckMwMUIsRUFBSW9TLFNBQVM5bkMsR0FBRzY2QixHQUFXZ04sR0FFN0JQLEVBQW1COWdDLEtBQUtxaEMsR0FDeEIsTUFLSmxmLEVBQU80ZSxFQUFXN3hCLEVBQU14QixJQUFLc3pCLEdBNUN2Qk8sQ0FBb0JyeUIsRUFBTzR4QixFQUFvQkMsRUFBV0MsSUFFckQsR0FqRVAvZCxDQUFnQi9ULEVBQU80eEIsRUFBb0JDLEVBQVdDLEdBQTFELENBSUEsSUFBSTVoQyxFQUFPOFAsRUFBTTlQLEtBQ2JvTyxFQUFXMEIsRUFBTTFCLFNBQ2pCRCxFQUFNMkIsRUFBTTNCLElBQ1pqSixFQUFNaUosSUFlUjJCLEVBQU14QixJQUFNd0IsRUFBTXJVLEdBQ2R3NEIsRUFBUUcsZ0JBQWdCdGtCLEVBQU1yVSxHQUFJMFMsR0FDbEM4bEIsRUFBUS93QixjQUFjaUwsRUFBSzJCLEdBQy9Cc3lCLEVBQVN0eUIsR0FJUHV5QixFQUFldnlCLEVBQU8xQixFQUFVc3pCLEdBQzVCeDhCLEVBQU1sRixJQUNSc2lDLEVBQWtCeHlCLEVBQU80eEIsR0FFM0IzZSxFQUFPNGUsRUFBVzd4QixFQUFNeEIsSUFBS3N6QixJQU10Qno4QixFQUFPMkssRUFBTVosWUFDdEJZLEVBQU14QixJQUFNMmxCLEVBQVFLLGNBQWN4a0IsRUFBTXpCLE1BQ3hDMFUsRUFBTzRlLEVBQVc3eEIsRUFBTXhCLElBQUtzekIsS0FFN0I5eEIsRUFBTXhCLElBQU0ybEIsRUFBUWh3QixlQUFlNkwsRUFBTXpCLE1BQ3pDMFUsRUFBTzRlLEVBQVc3eEIsRUFBTXhCLElBQUtzekIsS0EwQmpDLFNBQVNJLEVBQWVseUIsRUFBTzR4QixHQUN6Qng4QixFQUFNNEssRUFBTTlQLEtBQUt1aUMsaUJBQ25CYixFQUFtQjlnQyxLQUFLOEcsTUFBTWc2QixFQUFvQjV4QixFQUFNOVAsS0FBS3VpQyxlQUM3RHp5QixFQUFNOVAsS0FBS3VpQyxjQUFnQixNQUU3Qnp5QixFQUFNeEIsSUFBTXdCLEVBQU1qQixrQkFBa0JxaEIsSUFDaENzUyxFQUFZMXlCLElBQ2R3eUIsRUFBa0J4eUIsRUFBTzR4QixHQUN6QlUsRUFBU3R5QixLQUlUZ2xCLEdBQVlobEIsR0FFWjR4QixFQUFtQjlnQyxLQUFLa1AsSUEwQjVCLFNBQVNpVCxFQUFRalUsRUFBUVIsRUFBS20wQixHQUN4QnY5QixFQUFNNEosS0FDSjVKLEVBQU11OUIsR0FDSnhPLEVBQVF6d0IsV0FBV2kvQixLQUFZM3pCLEdBQ2pDbWxCLEVBQVF0dkIsYUFBYW1LLEVBQVFSLEVBQUttMEIsR0FHcEN4TyxFQUFRN3dCLFlBQVkwTCxFQUFRUixJQUtsQyxTQUFTK3pCLEVBQWdCdnlCLEVBQU8xQixFQUFVc3pCLEdBQ3hDLEdBQUl6N0IsTUFBTTFKLFFBQVE2UixHQUloQixJQUFLLElBQUloVSxFQUFJLEVBQUdBLEVBQUlnVSxFQUFTdFIsU0FBVTFDLEVBQ3JDcW5DLEVBQVVyekIsRUFBU2hVLEdBQUlzbkMsRUFBb0I1eEIsRUFBTXhCLElBQUssTUFBTSxFQUFNRixFQUFVaFUsUUFFckVnTCxFQUFZMEssRUFBTXpCLE9BQzNCNGxCLEVBQVE3d0IsWUFBWTBNLEVBQU14QixJQUFLMmxCLEVBQVFod0IsZUFBZXlCLE9BQU9vSyxFQUFNekIsUUFJdkUsU0FBU20wQixFQUFhMXlCLEdBQ3BCLEtBQU9BLEVBQU1qQixtQkFDWGlCLEVBQVFBLEVBQU1qQixrQkFBa0J3VCxPQUVsQyxPQUFPbmQsRUFBTTRLLEVBQU0zQixLQUdyQixTQUFTbTBCLEVBQW1CeHlCLEVBQU80eEIsR0FDakMsSUFBSyxJQUFJN1IsRUFBTSxFQUFHQSxFQUFNQyxFQUFJcDBCLE9BQU9vQixTQUFVK3lCLEVBQzNDQyxFQUFJcDBCLE9BQU9tMEIsR0FBS29GLEdBQVdubEIsR0FHekI1SyxFQURKOUssRUFBSTBWLEVBQU05UCxLQUFLb1QsUUFFVGxPLEVBQU05SyxFQUFFc0IsU0FBV3RCLEVBQUVzQixPQUFPdTVCLEdBQVdubEIsR0FDdkM1SyxFQUFNOUssRUFBRTJvQixTQUFXMmUsRUFBbUI5Z0MsS0FBS2tQLElBT25ELFNBQVNzeUIsRUFBVXR5QixHQUNqQixJQUFJMVYsRUFDSixHQUFJOEssRUFBTTlLLEVBQUkwVixFQUFNbEIsV0FDbEJxbEIsRUFBUVcsY0FBYzlrQixFQUFNeEIsSUFBS2xVLFFBR2pDLElBREEsSUFBSXNvQyxFQUFXNXlCLEVBQ1I0eUIsR0FDRHg5QixFQUFNOUssRUFBSXNvQyxFQUFTbjBCLFVBQVlySixFQUFNOUssRUFBSUEsRUFBRW1iLFNBQVNrTCxXQUN0RHdULEVBQVFXLGNBQWM5a0IsRUFBTXhCLElBQUtsVSxHQUVuQ3NvQyxFQUFXQSxFQUFTNXpCLE9BSXBCNUosRUFBTTlLLEVBQUlzbkIsS0FDWnRuQixJQUFNMFYsRUFBTXZCLFNBQ1puVSxJQUFNMFYsRUFBTXBCLFdBQ1p4SixFQUFNOUssRUFBSUEsRUFBRW1iLFNBQVNrTCxXQUVyQndULEVBQVFXLGNBQWM5a0IsRUFBTXhCLElBQUtsVSxHQUlyQyxTQUFTdW9DLEVBQVdoQixFQUFXQyxFQUFRL2IsRUFBUStjLEVBQVVwTixFQUFRa00sR0FDL0QsS0FBT2tCLEdBQVlwTixJQUFVb04sRUFDM0JuQixFQUFVNWIsRUFBTytjLEdBQVdsQixFQUFvQkMsRUFBV0MsR0FBUSxFQUFPL2IsRUFBUStjLEdBSXRGLFNBQVNDLEVBQW1CL3lCLEdBQzFCLElBQUkxVixFQUFHMEksRUFDSDlDLEVBQU84UCxFQUFNOVAsS0FDakIsR0FBSWtGLEVBQU1sRixHQUVSLElBRElrRixFQUFNOUssRUFBSTRGLEVBQUtvVCxPQUFTbE8sRUFBTTlLLEVBQUlBLEVBQUVpcEIsVUFBWWpwQixFQUFFMFYsR0FDakQxVixFQUFJLEVBQUdBLEVBQUkwMUIsRUFBSXpNLFFBQVF2bUIsU0FBVTFDLEVBQUswMUIsRUFBSXpNLFFBQVFqcEIsR0FBRzBWLEdBRTVELEdBQUk1SyxFQUFNOUssRUFBSTBWLEVBQU0xQixVQUNsQixJQUFLdEwsRUFBSSxFQUFHQSxFQUFJZ04sRUFBTTFCLFNBQVN0UixTQUFVZ0csRUFDdkMrL0IsRUFBa0IveUIsRUFBTTFCLFNBQVN0TCxJQUt2QyxTQUFTZ2dDLEVBQWNuQixFQUFXOWIsRUFBUStjLEVBQVVwTixHQUNsRCxLQUFPb04sR0FBWXBOLElBQVVvTixFQUFVLENBQ3JDLElBQUlHLEVBQUtsZCxFQUFPK2MsR0FDWjE5QixFQUFNNjlCLEtBQ0o3OUIsRUFBTTY5QixFQUFHNTBCLE1BQ1g2MEIsRUFBMEJELEdBQzFCRixFQUFrQkUsSUFFbEJ2QixFQUFXdUIsRUFBR3owQixPQU10QixTQUFTMDBCLEVBQTJCbHpCLEVBQU8rd0IsR0FDekMsR0FBSTM3QixFQUFNMjdCLElBQU8zN0IsRUFBTTRLLEVBQU05UCxNQUFPLENBQ2xDLElBQUk1RixFQUNBa21CLEVBQVl3UCxFQUFJeHNCLE9BQU94RyxPQUFTLEVBYXBDLElBWklvSSxFQUFNMjdCLEdBR1JBLEVBQUd2Z0IsV0FBYUEsRUFHaEJ1Z0IsRUF0Uk4sU0FBcUJvQyxFQUFVM2lCLEdBQzdCLFNBQVN4SCxJQUN1QixLQUF4QkEsRUFBVXdILFdBQ2RraEIsRUFBV3lCLEdBSWYsT0FEQW5xQixFQUFVd0gsVUFBWUEsRUFDZnhILEVBK1FFb3FCLENBQVdwekIsRUFBTXhCLElBQUtnUyxHQUd6QnBiLEVBQU05SyxFQUFJMFYsRUFBTWpCLG9CQUFzQjNKLEVBQU05SyxFQUFJQSxFQUFFaW9CLFNBQVduZCxFQUFNOUssRUFBRTRGLE9BQ3ZFZ2pDLEVBQTBCNW9DLEVBQUd5bUMsR0FFMUJ6bUMsRUFBSSxFQUFHQSxFQUFJMDFCLEVBQUl4c0IsT0FBT3hHLFNBQVUxQyxFQUNuQzAxQixFQUFJeHNCLE9BQU9sSixHQUFHMFYsRUFBTyt3QixHQUVuQjM3QixFQUFNOUssRUFBSTBWLEVBQU05UCxLQUFLb1QsT0FBU2xPLEVBQU05SyxFQUFJQSxFQUFFa0osUUFDNUNsSixFQUFFMFYsRUFBTyt3QixHQUVUQSxTQUdGVyxFQUFXMXhCLEVBQU14QixLQThGckIsU0FBUzYwQixFQUFjeHpCLEVBQU15ekIsRUFBT3Y3QixFQUFPNjFCLEdBQ3pDLElBQUssSUFBSXRqQyxFQUFJeU4sRUFBT3pOLEVBQUlzakMsRUFBS3RqQyxJQUFLLENBQ2hDLElBQUlLLEVBQUkyb0MsRUFBTWhwQyxHQUNkLEdBQUk4SyxFQUFNekssSUFBTXk2QixHQUFVdmxCLEVBQU1sVixHQUFNLE9BQU9MLEdBSWpELFNBQVNpcEMsRUFDUHpoQixFQUNBOVIsRUFDQTR4QixFQUNBSSxFQUNBejlCLEVBQ0FpL0IsR0FFQSxHQUFJMWhCLElBQWE5UixFQUFqQixDQUlJNUssRUFBTTRLLEVBQU14QixNQUFRcEosRUFBTTQ4QixLQUU1Qmh5QixFQUFRZ3lCLEVBQVd6OUIsR0FBU3dMLEdBQVdDLElBR3pDLElBQUl4QixFQUFNd0IsRUFBTXhCLElBQU1zVCxFQUFTdFQsSUFFL0IsR0FBSW5KLEVBQU95YyxFQUFTdFMsb0JBQ2RwSyxFQUFNNEssRUFBTXJCLGFBQWF5VixVQUMzQnFmLEVBQVEzaEIsRUFBU3RULElBQUt3QixFQUFPNHhCLEdBRTdCNXhCLEVBQU1SLG9CQUFxQixPQVMvQixHQUFJbkssRUFBTzJLLEVBQU1kLFdBQ2Y3SixFQUFPeWMsRUFBUzVTLFdBQ2hCYyxFQUFNblUsTUFBUWltQixFQUFTam1CLE1BQ3RCd0osRUFBTzJLLEVBQU1YLFdBQWFoSyxFQUFPMkssRUFBTVYsU0FFeENVLEVBQU1qQixrQkFBb0IrUyxFQUFTL1Msc0JBTHJDLENBU0EsSUFBSXpVLEVBQ0E0RixFQUFPOFAsRUFBTTlQLEtBQ2JrRixFQUFNbEYsSUFBU2tGLEVBQU05SyxFQUFJNEYsRUFBS29ULE9BQVNsTyxFQUFNOUssRUFBSUEsRUFBRWluQixXQUNyRGpuQixFQUFFd25CLEVBQVU5UixHQUdkLElBQUlzekIsRUFBUXhoQixFQUFTeFQsU0FDakIyMEIsRUFBS2p6QixFQUFNMUIsU0FDZixHQUFJbEosRUFBTWxGLElBQVN3aUMsRUFBWTF5QixHQUFRLENBQ3JDLElBQUsxVixFQUFJLEVBQUdBLEVBQUkwMUIsRUFBSXpzQixPQUFPdkcsU0FBVTFDLEVBQUswMUIsRUFBSXpzQixPQUFPakosR0FBR3duQixFQUFVOVIsR0FDOUQ1SyxFQUFNOUssRUFBSTRGLEVBQUtvVCxPQUFTbE8sRUFBTTlLLEVBQUlBLEVBQUVpSixTQUFXakosRUFBRXduQixFQUFVOVIsR0FFN0Q5SyxFQUFROEssRUFBTXpCLE1BQ1puSixFQUFNaytCLElBQVVsK0IsRUFBTTY5QixHQUNwQkssSUFBVUwsR0F4SnBCLFNBQXlCcEIsRUFBV3lCLEVBQU9JLEVBQU85QixFQUFvQjRCLEdBb0JwRSxJQW5CQSxJQVFJRyxFQUFhQyxFQUFVQyxFQVJ2QkMsRUFBYyxFQUNkQyxFQUFjLEVBQ2RDLEVBQVlWLEVBQU10bUMsT0FBUyxFQUMzQmluQyxFQUFnQlgsRUFBTSxHQUN0QlksRUFBY1osRUFBTVUsR0FDcEJHLEVBQVlULEVBQU0xbUMsT0FBUyxFQUMzQm9uQyxFQUFnQlYsRUFBTSxHQUN0QlcsRUFBY1gsRUFBTVMsR0FNcEJHLEdBQVdkLEVBTVJNLEdBQWVFLEdBQWFELEdBQWVJLEdBQzVDai9CLEVBQVErK0IsR0FDVkEsRUFBZ0JYLElBQVFRLEdBQ2Y1K0IsRUFBUWcvQixHQUNqQkEsRUFBY1osSUFBUVUsR0FDYjVPLEdBQVU2TyxFQUFlRyxJQUNsQ2IsRUFBV1UsRUFBZUcsRUFBZXhDLEVBQW9COEIsRUFBT0ssR0FDcEVFLEVBQWdCWCxJQUFRUSxHQUN4Qk0sRUFBZ0JWLElBQVFLLElBQ2YzTyxHQUFVOE8sRUFBYUcsSUFDaENkLEVBQVdXLEVBQWFHLEVBQWF6QyxFQUFvQjhCLEVBQU9TLEdBQ2hFRCxFQUFjWixJQUFRVSxHQUN0QkssRUFBY1gsSUFBUVMsSUFDYi9PLEdBQVU2TyxFQUFlSSxJQUNsQ2QsRUFBV1UsRUFBZUksRUFBYXpDLEVBQW9COEIsRUFBT1MsR0FDbEVHLEdBQVduUSxFQUFRdHZCLGFBQWFnOUIsRUFBV29DLEVBQWN6MUIsSUFBSzJsQixFQUFRUSxZQUFZdVAsRUFBWTExQixNQUM5RnkxQixFQUFnQlgsSUFBUVEsR0FDeEJPLEVBQWNYLElBQVFTLElBQ2IvTyxHQUFVOE8sRUFBYUUsSUFDaENiLEVBQVdXLEVBQWFFLEVBQWV4QyxFQUFvQjhCLEVBQU9LLEdBQ2xFTyxHQUFXblEsRUFBUXR2QixhQUFhZzlCLEVBQVdxQyxFQUFZMTFCLElBQUt5MUIsRUFBY3oxQixLQUMxRTAxQixFQUFjWixJQUFRVSxHQUN0QkksRUFBZ0JWLElBQVFLLEtBRXBCNytCLEVBQVF5K0IsS0FBZ0JBLEVBQWNuTyxHQUFrQjhOLEVBQU9RLEVBQWFFLElBSTVFOStCLEVBSEowK0IsRUFBV3grQixFQUFNZy9CLEVBQWN2b0MsS0FDM0I4bkMsRUFBWVMsRUFBY3ZvQyxLQUMxQnduQyxFQUFhZSxFQUFlZCxFQUFPUSxFQUFhRSxJQUVsRHJDLEVBQVV5QyxFQUFleEMsRUFBb0JDLEVBQVdvQyxFQUFjejFCLEtBQUssRUFBT2sxQixFQUFPSyxHQUdyRjNPLEdBREp5TyxFQUFjUCxFQUFNTSxHQUNPUSxJQUN6QmIsRUFBV00sRUFBYU8sRUFBZXhDLEVBQW9COEIsRUFBT0ssR0FDbEVULEVBQU1NLFFBQVl0M0IsRUFDbEJnNEIsR0FBV25RLEVBQVF0dkIsYUFBYWc5QixFQUFXZ0MsRUFBWXIxQixJQUFLeTFCLEVBQWN6MUIsTUFHMUVtekIsRUFBVXlDLEVBQWV4QyxFQUFvQkMsRUFBV29DLEVBQWN6MUIsS0FBSyxFQUFPazFCLEVBQU9LLEdBRzdGSyxFQUFnQlYsSUFBUUssSUFHeEJELEVBQWNFLEVBRWhCbkIsRUFBVWhCLEVBREQzOEIsRUFBUXcrQixFQUFNUyxFQUFZLElBQU0sS0FBT1QsRUFBTVMsRUFBWSxHQUFHMzFCLElBQ3hDazFCLEVBQU9LLEVBQWFJLEVBQVd2QyxHQUNuRG1DLEVBQWNJLEdBQ3ZCbkIsRUFBYW5CLEVBQVd5QixFQUFPUSxFQUFhRSxHQW9GdEJPLENBQWUvMUIsRUFBSzgwQixFQUFPTCxFQUFJckIsRUFBb0I0QixHQUM5RHArQixFQUFNNjlCLElBSVg3OUIsRUFBTTBjLEVBQVN2VCxPQUFTNGxCLEVBQVFTLGVBQWVwbUIsRUFBSyxJQUN4RHEwQixFQUFVcjBCLEVBQUssS0FBTXkwQixFQUFJLEVBQUdBLEVBQUdqbUMsT0FBUyxFQUFHNGtDLElBQ2xDeDhCLEVBQU1rK0IsR0FDZk4sRUFBYXgwQixFQUFLODBCLEVBQU8sRUFBR0EsRUFBTXRtQyxPQUFTLEdBQ2xDb0ksRUFBTTBjLEVBQVN2VCxPQUN4QjRsQixFQUFRUyxlQUFlcG1CLEVBQUssSUFFckJzVCxFQUFTdlQsT0FBU3lCLEVBQU16QixNQUNqQzRsQixFQUFRUyxlQUFlcG1CLEVBQUt3QixFQUFNekIsTUFFaENuSixFQUFNbEYsSUFDSmtGLEVBQU05SyxFQUFJNEYsRUFBS29ULE9BQVNsTyxFQUFNOUssRUFBSUEsRUFBRWtxQyxZQUFjbHFDLEVBQUV3bkIsRUFBVTlSLEtBSXRFLFNBQVN5MEIsRUFBa0J6MEIsRUFBT2tZLEVBQU93YyxHQUd2QyxHQUFJci9CLEVBQU9xL0IsSUFBWXQvQixFQUFNNEssRUFBTWhCLFFBQ2pDZ0IsRUFBTWhCLE9BQU85TyxLQUFLdWlDLGNBQWdCdmEsT0FFbEMsSUFBSyxJQUFJNXRCLEVBQUksRUFBR0EsRUFBSTR0QixFQUFNbHJCLFNBQVUxQyxFQUNsQzR0QixFQUFNNXRCLEdBQUc0RixLQUFLb1QsS0FBSzJQLE9BQU9pRixFQUFNNXRCLElBS3RDLElBS0lxcUMsRUFBbUJyK0IsRUFBUSwyQ0FHL0IsU0FBU205QixFQUFTajFCLEVBQUt3QixFQUFPNHhCLEVBQW9CZ0QsR0FDaEQsSUFBSXRxQyxFQUNBK1QsRUFBTTJCLEVBQU0zQixJQUNabk8sRUFBTzhQLEVBQU05UCxLQUNib08sRUFBVzBCLEVBQU0xQixTQUlyQixHQUhBczJCLEVBQVNBLEdBQVcxa0MsR0FBUUEsRUFBSzZtQixJQUNqQy9XLEVBQU14QixJQUFNQSxFQUVSbkosRUFBTzJLLEVBQU1aLFlBQWNoSyxFQUFNNEssRUFBTXJCLGNBRXpDLE9BREFxQixFQUFNUixvQkFBcUIsR0FDcEIsRUFRVCxHQUFJcEssRUFBTWxGLEtBQ0prRixFQUFNOUssRUFBSTRGLEVBQUtvVCxPQUFTbE8sRUFBTTlLLEVBQUlBLEVBQUU0bUIsT0FBUzVtQixFQUFFMFYsR0FBTyxHQUN0RDVLLEVBQU05SyxFQUFJMFYsRUFBTWpCLG9CQUdsQixPQURBbXpCLEVBQWNseUIsRUFBTzR4QixJQUNkLEVBR1gsR0FBSXg4QixFQUFNaUosR0FBTSxDQUNkLEdBQUlqSixFQUFNa0osR0FFUixHQUFLRSxFQUFJcTJCLGdCQUlQLEdBQUl6L0IsRUFBTTlLLEVBQUk0RixJQUFTa0YsRUFBTTlLLEVBQUlBLEVBQUVrakIsV0FBYXBZLEVBQU05SyxFQUFJQSxFQUFFaS9CLFlBQzFELEdBQUlqL0IsSUFBTWtVLEVBQUkrcUIsVUFXWixPQUFPLE1BRUosQ0FJTCxJQUZBLElBQUl1TCxHQUFnQixFQUNoQjNSLEVBQVkza0IsRUFBSXRLLFdBQ1g2ckIsRUFBTSxFQUFHQSxFQUFNemhCLEVBQVN0UixPQUFRK3lCLElBQU8sQ0FDOUMsSUFBS29ELElBQWNzUSxFQUFRdFEsRUFBVzdrQixFQUFTeWhCLEdBQU02UixFQUFvQmdELEdBQVMsQ0FDaEZFLEdBQWdCLEVBQ2hCLE1BRUYzUixFQUFZQSxFQUFVd0IsWUFJeEIsSUFBS21RLEdBQWlCM1IsRUFVcEIsT0FBTyxPQXhDWG9QLEVBQWV2eUIsRUFBTzFCLEVBQVVzekIsR0E2Q3BDLEdBQUl4OEIsRUFBTWxGLEdBQU8sQ0FDZixJQUFJNmtDLEdBQWEsRUFDakIsSUFBSyxJQUFJbHBDLEtBQU9xRSxFQUNkLElBQUt5a0MsRUFBaUI5b0MsR0FBTSxDQUMxQmtwQyxHQUFhLEVBQ2J2QyxFQUFrQnh5QixFQUFPNHhCLEdBQ3pCLE9BR0NtRCxHQUFjN2tDLEVBQUksT0FFckI2WCxHQUFTN1gsRUFBSSxhQUdSc08sRUFBSXRPLE9BQVM4UCxFQUFNekIsT0FDNUJDLEVBQUl0TyxLQUFPOFAsRUFBTXpCLE1BRW5CLE9BQU8sRUFjVCxPQUFPLFNBQWdCdVQsRUFBVTlSLEVBQU9tUixFQUFXcWlCLEdBQ2pELElBQUl0K0IsRUFBUThLLEdBQVosQ0FLQSxJQTdsQm9CeEIsRUE2bEJoQncyQixHQUFpQixFQUNqQnBELEVBQXFCLEdBRXpCLEdBQUkxOEIsRUFBUTRjLEdBRVZrakIsR0FBaUIsRUFDakJyRCxFQUFVM3hCLEVBQU80eEIsT0FDWixDQUNMLElBQUlxRCxFQUFnQjcvQixFQUFNMGMsRUFBU21kLFVBQ25DLElBQUtnRyxHQUFpQjdQLEdBQVV0VCxFQUFVOVIsR0FFeEN1ekIsRUFBV3poQixFQUFVOVIsRUFBTzR4QixFQUFvQixLQUFNLEtBQU00QixPQUN2RCxDQUNMLEdBQUl5QixFQUFlLENBUWpCLEdBSjBCLElBQXRCbmpCLEVBQVNtZCxVQUFrQm5kLEVBQVNvakIsYUFBYTU3QixLQUNuRHdZLEVBQVNzVixnQkFBZ0I5dEIsR0FDekI2WCxHQUFZLEdBRVY5YixFQUFPOGIsSUFDTHNpQixFQUFRM2hCLEVBQVU5UixFQUFPNHhCLEdBRTNCLE9BREE2QyxFQUFpQnowQixFQUFPNHhCLEdBQW9CLEdBQ3JDOWYsRUFybkJHdFQsRUFrb0JTc1QsRUFBdkJBLEVBam9CQyxJQUFJMVQsR0FBTStsQixFQUFRQyxRQUFRNWxCLEdBQUtoTSxjQUFlLEdBQUksUUFBSThKLEVBQVdrQyxHQXFvQnBFLElBQUkyMkIsRUFBU3JqQixFQUFTdFQsSUFDbEJxekIsRUFBWTFOLEVBQVF6d0IsV0FBV3loQyxHQWNuQyxHQVhBeEQsRUFDRTN4QixFQUNBNHhCLEVBSUF1RCxFQUFPdEcsU0FBVyxLQUFPZ0QsRUFDekIxTixFQUFRUSxZQUFZd1EsSUFJbEIvL0IsRUFBTTRLLEVBQU1oQixRQUdkLElBRkEsSUFBSTR6QixFQUFXNXlCLEVBQU1oQixPQUNqQm8yQixFQUFZMUMsRUFBWTF5QixHQUNyQjR5QixHQUFVLENBQ2YsSUFBSyxJQUFJdG9DLEVBQUksRUFBR0EsRUFBSTAxQixFQUFJek0sUUFBUXZtQixTQUFVMUMsRUFDeEMwMUIsRUFBSXpNLFFBQVFqcEIsR0FBR3NvQyxHQUdqQixHQURBQSxFQUFTcDBCLElBQU13QixFQUFNeEIsSUFDakI0MkIsRUFBVyxDQUNiLElBQUssSUFBSXJWLEVBQU0sRUFBR0EsRUFBTUMsRUFBSXAwQixPQUFPb0IsU0FBVSt5QixFQUMzQ0MsRUFBSXAwQixPQUFPbTBCLEdBQUtvRixHQUFXeU4sR0FLN0IsSUFBSTNmLEVBQVMyZixFQUFTMWlDLEtBQUtvVCxLQUFLMlAsT0FDaEMsR0FBSUEsRUFBT3hKLE9BRVQsSUFBSyxJQUFJNHJCLEVBQU0sRUFBR0EsRUFBTXBpQixFQUFPdkssSUFBSTFiLE9BQVFxb0MsSUFDekNwaUIsRUFBT3ZLLElBQUkyc0IsVUFJZnJRLEdBQVk0TixHQUVkQSxFQUFXQSxFQUFTNXpCLE9BS3BCNUosRUFBTXk4QixHQUNSbUIsRUFBYW5CLEVBQVcsQ0FBQy9mLEdBQVcsRUFBRyxHQUM5QjFjLEVBQU0wYyxFQUFTelQsTUFDeEIwMEIsRUFBa0JqaEIsSUFNeEIsT0FEQTJpQixFQUFpQnowQixFQUFPNHhCLEVBQW9Cb0QsR0FDckNoMUIsRUFBTXhCLElBbkdQcEosRUFBTTBjLElBQWFpaEIsRUFBa0JqaEIsSUF3MENuQ3dqQixDQUFvQixDQUFFblIsUUFBU0EsR0FBUzM1QixRQWY5QixDQUNwQm9nQixHQUNBc2QsR0FDQWUsR0FDQXpiLEdBQ0EwSixHQWxCZTliLEVBQVksQ0FDM0J4UCxPQUFRMmxDLEdBQ1JhLFNBQVViLEdBQ1YvOUIsT0FBUSxTQUFvQndNLEVBQU8rd0IsSUFFVCxJQUFwQi93QixFQUFNOVAsS0FBS3dnQyxLQUNiSSxHQUFNOXdCLEVBQU8rd0IsR0FFYkEsTUFHRixJQWUwQjVnQyxPQUFPMjJCLE1BVWpDbnJCLEdBRUZyTixTQUFTOE4saUJBQWlCLGtCQUFtQixXQUMzQyxJQUFJaWpCLEVBQUsvd0IsU0FBU3E3QixjQUNkdEssR0FBTUEsRUFBR2tXLFFBQ1hDLEdBQVFuVyxFQUFJLFdBS2xCLElBQUlvVyxHQUFZLENBQ2RqMUIsU0FBVSxTQUFtQjZlLEVBQUlxVyxFQUFTMTFCLEVBQU84UixHQUM3QixXQUFkOVIsRUFBTTNCLEtBRUp5VCxFQUFTdFQsTUFBUXNULEVBQVN0VCxJQUFJbTNCLFVBQ2hDdHNCLEdBQWVySixFQUFPLFlBQWEsV0FDakN5MUIsR0FBVWpQLGlCQUFpQm5ILEVBQUlxVyxFQUFTMTFCLEtBRzFDNDFCLEdBQVl2VyxFQUFJcVcsRUFBUzExQixFQUFNdkIsU0FFakM0Z0IsRUFBR3NXLFVBQVksR0FBR3JtQyxJQUFJN0UsS0FBSzQwQixFQUFHbHRCLFFBQVMwakMsTUFDaEIsYUFBZDcxQixFQUFNM0IsS0FBc0I2bEIsR0FBZ0I3RSxFQUFHaHNCLFNBQ3hEZ3NCLEVBQUd3SyxZQUFjNkwsRUFBUS9PLFVBQ3BCK08sRUFBUS9PLFVBQVUvTSxPQUNyQnlGLEVBQUdqakIsaUJBQWlCLG1CQUFvQjA1QixJQUN4Q3pXLEVBQUdqakIsaUJBQWlCLGlCQUFrQjI1QixJQUt0QzFXLEVBQUdqakIsaUJBQWlCLFNBQVUyNUIsSUFFMUJwNkIsSUFDRjBqQixFQUFHa1csUUFBUyxNQU1wQi9PLGlCQUFrQixTQUEyQm5ILEVBQUlxVyxFQUFTMTFCLEdBQ3hELEdBQWtCLFdBQWRBLEVBQU0zQixJQUFrQixDQUMxQnUzQixHQUFZdlcsRUFBSXFXLEVBQVMxMUIsRUFBTXZCLFNBSy9CLElBQUl1M0IsRUFBYzNXLEVBQUdzVyxVQUNqQk0sRUFBYTVXLEVBQUdzVyxVQUFZLEdBQUdybUMsSUFBSTdFLEtBQUs0MEIsRUFBR2x0QixRQUFTMGpDLElBQ3hELEdBQUlJLEVBQVdDLEtBQUssU0FBVW5yQyxFQUFHVCxHQUFLLE9BQVFpTyxFQUFXeE4sRUFBR2lyQyxFQUFZMXJDLE9BR3REKzBCLEVBQUdnRixTQUNmcVIsRUFBUW5xQyxNQUFNMnFDLEtBQUssU0FBVS9nQyxHQUFLLE9BQU9naEMsR0FBb0JoaEMsRUFBRzhnQyxLQUNoRVAsRUFBUW5xQyxRQUFVbXFDLEVBQVFoYixVQUFZeWIsR0FBb0JULEVBQVFucUMsTUFBTzBxQyxLQUUzRVQsR0FBUW5XLEVBQUksYUFPdEIsU0FBU3VXLEdBQWF2VyxFQUFJcVcsRUFBUzN5QixHQUNqQ3F6QixHQUFvQi9XLEVBQUlxVyxFQUFTM3lCLElBRTdCckgsR0FBUUUsSUFDVnlMLFdBQVcsV0FDVCt1QixHQUFvQi9XLEVBQUlxVyxFQUFTM3lCLElBQ2hDLEdBSVAsU0FBU3F6QixHQUFxQi9XLEVBQUlxVyxFQUFTM3lCLEdBQ3pDLElBQUl4WCxFQUFRbXFDLEVBQVFucUMsTUFDaEI4cUMsRUFBYWhYLEVBQUdnRixTQUNwQixJQUFJZ1MsR0FBZWxnQyxNQUFNMUosUUFBUWxCLEdBQWpDLENBU0EsSUFEQSxJQUFJK3FDLEVBQVVDLEVBQ0xqc0MsRUFBSSxFQUFHQyxFQUFJODBCLEVBQUdsdEIsUUFBUW5GLE9BQVExQyxFQUFJQyxFQUFHRCxJQUU1QyxHQURBaXNDLEVBQVNsWCxFQUFHbHRCLFFBQVE3SCxHQUNoQityQyxFQUNGQyxFQUFXbjlCLEVBQWE1TixFQUFPc3FDLEdBQVNVLEtBQVksRUFDaERBLEVBQU9ELFdBQWFBLElBQ3RCQyxFQUFPRCxTQUFXQSxRQUdwQixHQUFJLzlCLEVBQVdzOUIsR0FBU1UsR0FBU2hyQyxHQUkvQixZQUhJOHpCLEVBQUdtWCxnQkFBa0Jsc0MsSUFDdkIrMEIsRUFBR21YLGNBQWdCbHNDLElBTXRCK3JDLElBQ0hoWCxFQUFHbVgsZUFBaUIsSUFJeEIsU0FBU0wsR0FBcUI1cUMsRUFBTzRHLEdBQ25DLE9BQU9BLEVBQVF5RyxNQUFNLFNBQVU3TixHQUFLLE9BQVF3TixFQUFXeE4sRUFBR1EsS0FHNUQsU0FBU3NxQyxHQUFVVSxHQUNqQixNQUFPLFdBQVlBLEVBQ2ZBLEVBQU9uTixPQUNQbU4sRUFBT2hyQyxNQUdiLFNBQVN1cUMsR0FBb0JqOUIsR0FDM0JBLEVBQUVnRixPQUFPNHJCLFdBQVksRUFHdkIsU0FBU3NNLEdBQWtCbDlCLEdBRXBCQSxFQUFFZ0YsT0FBTzRyQixZQUNkNXdCLEVBQUVnRixPQUFPNHJCLFdBQVksRUFDckIrTCxHQUFRMzhCLEVBQUVnRixPQUFRLFVBR3BCLFNBQVMyM0IsR0FBU25XLEVBQUloc0IsR0FDcEIsSUFBSXdGLEVBQUl2SyxTQUFTa3FCLFlBQVksY0FDN0IzZixFQUFFNDlCLFVBQVVwakMsR0FBTSxHQUFNLEdBQ3hCZ3NCLEVBQUdxWCxjQUFjNzlCLEdBTW5CLFNBQVM4OUIsR0FBWTMyQixHQUNuQixPQUFPQSxFQUFNakIsbUJBQXVCaUIsRUFBTTlQLE1BQVM4UCxFQUFNOVAsS0FBSzYrQixXQUUxRC91QixFQURBMjJCLEdBQVczMkIsRUFBTWpCLGtCQUFrQndULFFBSXpDLElBdURJcWtCLEdBQXFCLENBQ3ZCbGhCLE1BQU8rZixHQUNQL0UsS0F6RFMsQ0FDVDVrQyxLQUFNLFNBQWV1ekIsRUFBSXVCLEVBQUs1Z0IsR0FDNUIsSUFBSXpVLEVBQVFxMUIsRUFBSXIxQixNQUdac3JDLEdBREo3MkIsRUFBUTIyQixHQUFXMzJCLElBQ085UCxNQUFROFAsRUFBTTlQLEtBQUs2K0IsV0FDekMrSCxFQUFrQnpYLEVBQUcwWCxtQkFDRixTQUFyQjFYLEVBQUduSSxNQUFNOGYsUUFBcUIsR0FBSzNYLEVBQUduSSxNQUFNOGYsUUFDMUN6ckMsR0FBU3NyQyxHQUNYNzJCLEVBQU05UCxLQUFLd2dDLE1BQU8sRUFDbEIvQixHQUFNM3VCLEVBQU8sV0FDWHFmLEVBQUduSSxNQUFNOGYsUUFBVUYsS0FHckJ6WCxFQUFHbkksTUFBTThmLFFBQVV6ckMsRUFBUXVyQyxFQUFrQixRQUlqRHZqQyxPQUFRLFNBQWlCOHJCLEVBQUl1QixFQUFLNWdCLEdBQ2hDLElBQUl6VSxFQUFRcTFCLEVBQUlyMUIsT0FJWEEsSUFIVXExQixFQUFJbEcsWUFJbkIxYSxFQUFRMjJCLEdBQVczMkIsSUFDTzlQLE1BQVE4UCxFQUFNOVAsS0FBSzYrQixZQUUzQy91QixFQUFNOVAsS0FBS3dnQyxNQUFPLEVBQ2RubEMsRUFDRm9qQyxHQUFNM3VCLEVBQU8sV0FDWHFmLEVBQUduSSxNQUFNOGYsUUFBVTNYLEVBQUcwWCxxQkFHeEJqRyxHQUFNOXdCLEVBQU8sV0FDWHFmLEVBQUduSSxNQUFNOGYsUUFBVSxVQUl2QjNYLEVBQUduSSxNQUFNOGYsUUFBVXpyQyxFQUFROHpCLEVBQUcwWCxtQkFBcUIsU0FJdkRFLE9BQVEsU0FDTjVYLEVBQ0FxVyxFQUNBMTFCLEVBQ0E4UixFQUNBaVUsR0FFS0EsSUFDSDFHLEVBQUduSSxNQUFNOGYsUUFBVTNYLEVBQUcwWCx1QkFZeEJHLEdBQWtCLENBQ3BCcnNDLEtBQU0rSyxPQUNONjVCLE9BQVEvNkIsUUFDUnRELElBQUtzRCxRQUNMakosS0FBTW1LLE9BQ052QyxLQUFNdUMsT0FDTm8yQixXQUFZcDJCLE9BQ1p1MkIsV0FBWXYyQixPQUNacTJCLGFBQWNyMkIsT0FDZHcyQixhQUFjeDJCLE9BQ2RzMkIsaUJBQWtCdDJCLE9BQ2xCeTJCLGlCQUFrQnoyQixPQUNsQnM1QixZQUFhdDVCLE9BQ2J3NUIsa0JBQW1CeDVCLE9BQ25CdTVCLGNBQWV2NUIsT0FDZmc2QixTQUFVLENBQUN6TyxPQUFRdnJCLE9BQVE1SyxTQUs3QixTQUFTbXNDLEdBQWNuM0IsR0FDckIsSUFBSW8zQixFQUFjcDNCLEdBQVNBLEVBQU10QixpQkFDakMsT0FBSTA0QixHQUFlQSxFQUFZejZCLEtBQUt4SyxRQUFRK2pCLFNBQ25DaWhCLEdBQWEzZixHQUF1QjRmLEVBQVk5NEIsV0FFaEQwQixFQUlYLFNBQVNxM0IsR0FBdUIvZixHQUM5QixJQUFJcG5CLEVBQU8sR0FDUGlDLEVBQVVtbEIsRUFBSzdSLFNBRW5CLElBQUssSUFBSTVaLEtBQU9zRyxFQUFRK1MsVUFDdEJoVixFQUFLckUsR0FBT3lyQixFQUFLenJCLEdBSW5CLElBQUkya0IsRUFBWXJlLEVBQVEwZ0IsaUJBQ3hCLElBQUssSUFBSXRQLEtBQVNpTixFQUNoQnRnQixFQUFLK0csRUFBU3NNLElBQVVpTixFQUFVak4sR0FFcEMsT0FBT3JULEVBR1QsU0FBU29uQyxHQUFhQyxFQUFHQyxHQUN2QixHQUFJLGlCQUFpQmxsQyxLQUFLa2xDLEVBQVNuNUIsS0FDakMsT0FBT2s1QixFQUFFLGFBQWMsQ0FDckIvekIsTUFBT2cwQixFQUFTOTRCLGlCQUFpQndHLFlBaUJ2QyxJQUFJdXlCLEdBQWdCLFNBQVU5c0MsR0FBSyxPQUFPQSxFQUFFMFQsS0FBT21CLEdBQW1CN1UsSUFFbEUrc0MsR0FBbUIsU0FBVTlzQyxHQUFLLE1BQWtCLFNBQVhBLEVBQUVDLE1BRTNDOHNDLEdBQWEsQ0FDZjlzQyxLQUFNLGFBQ04yWSxNQUFPMHpCLEdBQ1BoaEIsVUFBVSxFQUVWcEssT0FBUSxTQUFpQnlyQixHQUN2QixJQUFJcG5CLEVBQVM5Z0IsS0FFVGlQLEVBQVdqUCxLQUFLbWQsT0FBT2hILFFBQzNCLEdBQUtsSCxJQUtMQSxFQUFXQSxFQUFTN0osT0FBT2dqQyxLQUVienFDLE9BQWQsQ0FLSTZNLEVBUUosSUFBSXBPLEVBQU80RCxLQUFLNUQsS0FHWm9PLEVBU0osSUFBSTI5QixFQUFXbDVCLEVBQVMsR0FJeEIsR0E3REosU0FBOEIwQixHQUM1QixLQUFRQSxFQUFRQSxFQUFNaEIsUUFDcEIsR0FBSWdCLEVBQU05UCxLQUFLNitCLFdBQ2IsT0FBTyxFQTBETDZJLENBQW9Cdm9DLEtBQUtpakIsUUFDM0IsT0FBT2tsQixFQUtULElBQUk5M0IsRUFBUXkzQixHQUFhSyxHQUV6QixJQUFLOTNCLEVBQ0gsT0FBTzgzQixFQUdULEdBQUlub0MsS0FBS3dvQyxTQUNQLE9BQU9QLEdBQVlDLEVBQUdDLEdBTXhCLElBQUk1bUMsRUFBSyxnQkFBbUJ2QixLQUFLa3ZCLEtBQVEsSUFDekM3ZSxFQUFNN1QsSUFBbUIsTUFBYjZULEVBQU03VCxJQUNkNlQsRUFBTU4sVUFDSnhPLEVBQUssVUFDTEEsRUFBSzhPLEVBQU1yQixJQUNiL0ksRUFBWW9LLEVBQU03VCxLQUNtQixJQUFsQytKLE9BQU84SixFQUFNN1QsS0FBSzhLLFFBQVEvRixHQUFZOE8sRUFBTTdULElBQU0rRSxFQUFLOE8sRUFBTTdULElBQzlENlQsRUFBTTdULElBRVosSUFBSXFFLEdBQVF3UCxFQUFNeFAsT0FBU3dQLEVBQU14UCxLQUFPLEtBQUs2K0IsV0FBYXNJLEdBQXNCaG9DLE1BQzVFeW9DLEVBQWN6b0MsS0FBS2tqQixPQUNuQndsQixFQUFXWixHQUFhVyxHQVE1QixHQUpJcDRCLEVBQU14UCxLQUFLaVUsWUFBY3pFLEVBQU14UCxLQUFLaVUsV0FBVyt4QixLQUFLd0IsTUFDdERoNEIsRUFBTXhQLEtBQUt3Z0MsTUFBTyxHQUlsQnFILEdBQ0FBLEVBQVM3bkMsT0E3RmYsU0FBc0J3UCxFQUFPcTRCLEdBQzNCLE9BQU9BLEVBQVNsc0MsTUFBUTZULEVBQU03VCxLQUFPa3NDLEVBQVMxNUIsTUFBUXFCLEVBQU1yQixJQTZGdkQyNUIsQ0FBWXQ0QixFQUFPcTRCLEtBQ25CdjRCLEdBQW1CdTRCLE1BRWxCQSxFQUFTaDVCLG9CQUFxQmc1QixFQUFTaDVCLGtCQUFrQndULE9BQU9uVCxXQUNsRSxDQUdBLElBQUl3b0IsRUFBVW1RLEVBQVM3bkMsS0FBSzYrQixXQUFhbmdDLEVBQU8sR0FBSXNCLEdBRXBELEdBQWEsV0FBVHpFLEVBT0YsT0FMQTRELEtBQUt3b0MsVUFBVyxFQUNoQnh1QixHQUFldWUsRUFBUyxhQUFjLFdBQ3BDelgsRUFBTzBuQixVQUFXLEVBQ2xCMW5CLEVBQU80QyxpQkFFRnVrQixHQUFZQyxFQUFHQyxHQUNqQixHQUFhLFdBQVQvckMsRUFBbUIsQ0FDNUIsR0FBSStULEdBQW1CRSxHQUNyQixPQUFPbzRCLEVBRVQsSUFBSUcsRUFDQTVHLEVBQWUsV0FBYzRHLEtBQ2pDNXVCLEdBQWVuWixFQUFNLGFBQWNtaEMsR0FDbkNob0IsR0FBZW5aLEVBQU0saUJBQWtCbWhDLEdBQ3ZDaG9CLEdBQWV1ZSxFQUFTLGFBQWMsU0FBVWtKLEdBQVNtSCxFQUFlbkgsS0FJNUUsT0FBTzBHLEtBTVBoMEIsR0FBUTVVLEVBQU8sQ0FDakJ5UCxJQUFLekksT0FDTHNpQyxVQUFXdGlDLFFBQ1ZzaEMsSUF3SUgsU0FBU2lCLEdBQWdCeHRDLEdBRW5CQSxFQUFFNlQsSUFBSTQ1QixTQUNSenRDLEVBQUU2VCxJQUFJNDVCLFVBR0p6dEMsRUFBRTZULElBQUl3d0IsVUFDUnJrQyxFQUFFNlQsSUFBSXd3QixXQUlWLFNBQVNxSixHQUFnQjF0QyxHQUN2QkEsRUFBRXVGLEtBQUtvb0MsT0FBUzN0QyxFQUFFNlQsSUFBSSs1Qix3QkFHeEIsU0FBU0MsR0FBa0I3dEMsR0FDekIsSUFBSTh0QyxFQUFTOXRDLEVBQUV1RixLQUFLd29DLElBQ2hCSixFQUFTM3RDLEVBQUV1RixLQUFLb29DLE9BQ2hCSyxFQUFLRixFQUFPRyxLQUFPTixFQUFPTSxLQUMxQkMsRUFBS0osRUFBT0ssSUFBTVIsRUFBT1EsSUFDN0IsR0FBSUgsR0FBTUUsRUFBSSxDQUNabHVDLEVBQUV1RixLQUFLNm9DLE9BQVEsRUFDZixJQUFJMXNDLEVBQUkxQixFQUFFNlQsSUFBSTBZLE1BQ2Q3cUIsRUFBRTJzQyxVQUFZM3NDLEVBQUU0c0MsZ0JBQWtCLGFBQWVOLEVBQUssTUFBUUUsRUFBSyxNQUNuRXhzQyxFQUFFNnNDLG1CQUFxQixhQTlKcEIxMUIsR0FBTS9YLEtBa0tiLElBQUkwdEMsR0FBcUIsQ0FDdkJ4QixXQUFZQSxHQUNaeUIsZ0JBbEtvQixDQUNwQjUxQixNQUFPQSxHQUVQNjFCLFlBQWEsV0FDWCxJQUFJbHBCLEVBQVM5Z0IsS0FFVGtFLEVBQVNsRSxLQUFLNndCLFFBQ2xCN3dCLEtBQUs2d0IsUUFBVSxTQUFVbGdCLEVBQU9tUixHQUM5QixJQUFJbVAsRUFBd0J6SSxHQUFrQjFILEdBRTlDQSxFQUFPb1EsVUFDTHBRLEVBQU9vQyxPQUNQcEMsRUFBT21wQixNQUNQLEdBQ0EsR0FFRm5wQixFQUFPb0MsT0FBU3BDLEVBQU9tcEIsS0FDdkJoWixJQUNBL3NCLEVBQU85SSxLQUFLMGxCLEVBQVFuUSxFQUFPbVIsS0FJL0JyRixPQUFRLFNBQWlCeXJCLEdBUXZCLElBUEEsSUFBSWw1QixFQUFNaFAsS0FBS2dQLEtBQU9oUCxLQUFLaWpCLE9BQU9waUIsS0FBS21PLEtBQU8sT0FDMUMvTyxFQUFNdEUsT0FBT1ksT0FBTyxNQUNwQjJ0QyxFQUFlbHFDLEtBQUtrcUMsYUFBZWxxQyxLQUFLaVAsU0FDeENrN0IsRUFBY25xQyxLQUFLbWQsT0FBT2hILFNBQVcsR0FDckNsSCxFQUFXalAsS0FBS2lQLFNBQVcsR0FDM0JtN0IsRUFBaUJwQyxHQUFzQmhvQyxNQUVsQy9FLEVBQUksRUFBR0EsRUFBSWt2QyxFQUFZeHNDLE9BQVExQyxJQUFLLENBQzNDLElBQUlLLEVBQUk2dUMsRUFBWWx2QyxHQUNwQixHQUFJSyxFQUFFMFQsSUFDSixHQUFhLE1BQVQxVCxFQUFFa0IsS0FBb0QsSUFBckMrSixPQUFPakwsRUFBRWtCLEtBQUs4SyxRQUFRLFdBQ3pDMkgsRUFBU3hOLEtBQUtuRyxHQUNkMkUsRUFBSTNFLEVBQUVrQixLQUFPbEIsR0FDWEEsRUFBRXVGLE9BQVN2RixFQUFFdUYsS0FBTyxLQUFLNitCLFdBQWEwSyxRQVM5QyxHQUFJRixFQUFjLENBR2hCLElBRkEsSUFBSUQsRUFBTyxHQUNQSSxFQUFVLEdBQ0wzWixFQUFNLEVBQUdBLEVBQU13WixFQUFhdnNDLE9BQVEreUIsSUFBTyxDQUNsRCxJQUFJNFosRUFBTUosRUFBYXhaLEdBQ3ZCNFosRUFBSXpwQyxLQUFLNitCLFdBQWEwSyxFQUN0QkUsRUFBSXpwQyxLQUFLd29DLElBQU1pQixFQUFJbjdCLElBQUkrNUIsd0JBQ25CanBDLEVBQUlxcUMsRUFBSTl0QyxLQUNWeXRDLEVBQUt4b0MsS0FBSzZvQyxHQUVWRCxFQUFRNW9DLEtBQUs2b0MsR0FHakJ0cUMsS0FBS2lxQyxLQUFPL0IsRUFBRWw1QixFQUFLLEtBQU1pN0IsR0FDekJqcUMsS0FBS3FxQyxRQUFVQSxFQUdqQixPQUFPbkMsRUFBRWw1QixFQUFLLEtBQU1DLElBR3RCczdCLFFBQVMsV0FDUCxJQUFJdDdCLEVBQVdqUCxLQUFLa3FDLGFBQ2hCckIsRUFBWTdvQyxLQUFLNm9DLFlBQWU3b0MsS0FBS3hFLE1BQVEsS0FBTyxRQUNuRHlULEVBQVN0UixRQUFXcUMsS0FBS3dxQyxRQUFRdjdCLEVBQVMsR0FBR0UsSUFBSzA1QixLQU12RDU1QixFQUFTelIsUUFBUXNyQyxJQUNqQjc1QixFQUFTelIsUUFBUXdyQyxJQUNqQi81QixFQUFTelIsUUFBUTJyQyxJQUtqQm5wQyxLQUFLeXFDLFFBQVV4ckMsU0FBU3lyQyxLQUFLQyxhQUU3QjE3QixFQUFTelIsUUFBUSxTQUFVbEMsR0FDekIsR0FBSUEsRUFBRXVGLEtBQUs2b0MsTUFBTyxDQUNoQixJQUFJMVosRUFBSzEwQixFQUFFNlQsSUFDUG5TLEVBQUlnekIsRUFBR25JLE1BQ1hrVyxHQUFtQi9OLEVBQUk2WSxHQUN2QjdyQyxFQUFFMnNDLFVBQVkzc0MsRUFBRTRzQyxnQkFBa0I1c0MsRUFBRTZzQyxtQkFBcUIsR0FDekQ3WixFQUFHampCLGlCQUFpQnN3QixHQUFvQnJOLEVBQUcrWSxRQUFVLFNBQVN4d0IsRUFBSS9PLEdBQzVEQSxHQUFLQSxFQUFFZ0YsU0FBV3doQixHQUdqQnhtQixJQUFLLGFBQWF2RyxLQUFLdUcsRUFBRW9oQyxnQkFDNUI1YSxFQUFHcUksb0JBQW9CZ0YsR0FBb0I5a0IsR0FDM0N5WCxFQUFHK1ksUUFBVSxLQUNiOUssR0FBc0JqTyxFQUFJNlksV0FPcEN6MEIsUUFBUyxDQUNQbzJCLFFBQVMsU0FBa0J4YSxFQUFJNlksR0FFN0IsSUFBSzVMLEdBQ0gsT0FBTyxFQUdULEdBQUlqOUIsS0FBSzZxQyxTQUNQLE9BQU83cUMsS0FBSzZxQyxTQU9kLElBQUlucEIsRUFBUXNPLEVBQUc4YSxZQUNYOWEsRUFBRzBJLG9CQUNMMUksRUFBRzBJLG1CQUFtQmw3QixRQUFRLFNBQVVnN0IsR0FBTytELEdBQVk3YSxFQUFPOFcsS0FFcEU0RCxHQUFTMWEsRUFBT21uQixHQUNoQm5uQixFQUFNbUcsTUFBTThmLFFBQVUsT0FDdEIzbkMsS0FBSyt3QixJQUFJOXNCLFlBQVl5ZCxHQUNyQixJQUFJN0ssRUFBT3VuQixHQUFrQjFjLEdBRTdCLE9BREExaEIsS0FBSyt3QixJQUFJenNCLFlBQVlvZCxHQUNiMWhCLEtBQUs2cUMsU0FBV2gwQixFQUFLcW9CLGlCQXlDbkN2UixHQUFJdmpCLE9BQU9nQixZQXIzRk8sU0FBVTRELEVBQUtoTCxFQUFNK21DLEdBQ3JDLE1BQ1ksVUFBVEEsR0FBb0IzWCxHQUFZcGtCLElBQWtCLFdBQVRoTCxHQUNoQyxhQUFUK21DLEdBQStCLFdBQVIvN0IsR0FDZCxZQUFUKzdCLEdBQThCLFVBQVIvN0IsR0FDYixVQUFUKzdCLEdBQTRCLFVBQVIvN0IsR0FpM0Z6QjJlLEdBQUl2akIsT0FBT1csY0FBZ0JBLEdBQzNCNGlCLEdBQUl2akIsT0FBT1ksZUFBaUJBLEdBQzVCMmlCLEdBQUl2akIsT0FBT2MsZ0JBeHRGWCxTQUEwQjhELEdBQ3hCLE9BQUkybEIsR0FBTTNsQixHQUNELE1BSUcsU0FBUkEsRUFDSyxZQURULEdBbXRGRjJlLEdBQUl2akIsT0FBT2EsaUJBN3NGWCxTQUEyQitELEdBRXpCLElBQUtqRCxFQUNILE9BQU8sRUFFVCxHQUFJaEIsR0FBY2lFLEdBQ2hCLE9BQU8sRUFJVCxHQUZBQSxFQUFNQSxFQUFJN0wsY0FFc0IsTUFBNUJ5eEIsR0FBb0I1bEIsR0FDdEIsT0FBTzRsQixHQUFvQjVsQixHQUU3QixJQUFJZ2hCLEVBQUsvd0IsU0FBUzhFLGNBQWNpTCxHQUNoQyxPQUFJQSxFQUFJMUgsUUFBUSxNQUFRLEVBRWRzdEIsR0FBb0I1bEIsR0FDMUJnaEIsRUFBRzdCLGNBQWdCbnZCLE9BQU9nc0Msb0JBQzFCaGIsRUFBRzdCLGNBQWdCbnZCLE9BQU9pc0MsWUFHcEJyVyxHQUFvQjVsQixHQUFPLHFCQUFxQi9MLEtBQUsrc0IsRUFBRzd5QixhQTJyRnBFb0MsRUFBT291QixHQUFJN3FCLFFBQVFnUyxXQUFZeXlCLElBQy9CaG9DLEVBQU9vdUIsR0FBSTdxQixRQUFRNHFCLFdBQVlvYyxJQUcvQm5jLEdBQUk5d0IsVUFBVXEwQixVQUFZbmxCLEVBQVlvMkIsR0FBUXQvQixFQUc5QzhxQixHQUFJOXdCLFVBQVUybEIsT0FBUyxTQUNyQndOLEVBQ0FsTyxHQUdBLE9BOXlJRixTQUNFcE8sRUFDQXNjLEVBQ0FsTyxHQXlCQSxJQUFJb3BCLEVBMkNKLE9BbEVBeDNCLEVBQUdxZCxJQUFNZixFQUNKdGMsRUFBRzBDLFNBQVNxRyxTQUNmL0ksRUFBRzBDLFNBQVNxRyxPQUFTbE0sSUFtQnZCdVQsR0FBU3BRLEVBQUksZUFzQlh3M0IsRUFBa0IsV0FDaEJ4M0IsRUFBR21kLFFBQVFuZCxFQUFHNGQsVUFBV3hQLElBTzdCLElBQUltSSxHQUFRdlcsRUFBSXczQixFQUFpQnJvQyxFQUFNLENBQ3JDMm1CLE9BQVEsV0FDRjlWLEVBQUdtUSxhQUFlblEsRUFBR3FPLGNBQ3ZCK0IsR0FBU3BRLEVBQUksbUJBR2hCLEdBQ0hvTyxHQUFZLEVBSUssTUFBYnBPLEVBQUd1UCxTQUNMdlAsRUFBR21RLFlBQWEsRUFDaEJDLEdBQVNwUSxFQUFJLFlBRVJBLEVBdXVJQXkzQixDQUFlbnJDLEtBRHRCZ3dCLEVBQUtBLEdBQU1qa0IsRUEzckZiLFNBQWdCaWtCLEdBQ2QsR0FBa0IsaUJBQVBBLEVBQWlCLENBQzFCLElBQUlpWCxFQUFXaG9DLFNBQVNtRixjQUFjNHJCLEdBQ3RDLE9BQUtpWCxHQUlJaG9DLFNBQVM4RSxjQUFjLE9BSWhDLE9BQU9pc0IsRUFnckZjb2IsQ0FBTXBiLFFBQU0vaUIsRUFDSDZVLElBSzlCL1YsR0FDRmlNLFdBQVcsV0FDTDVOLEVBQU9LLFVBQ0xBLElBQ0ZBLEdBQVNzZixLQUFLLE9BQVE0RCxLQXNCekIsR0FLVUEsMkRDNXZRZixJQUFJMGQsRUFHSkEsRUFBSyxXQUNKLE9BQU9yckMsS0FESCxHQUlMLElBRUNxckMsRUFBSUEsR0FBSyxJQUFJampDLFNBQVMsY0FBYixHQUNSLE1BQU9vQixHQUVjLGlCQUFYeEssU0FBcUJxc0MsRUFBSXJzQyxRQU9yQ2hFLEVBQU9ELFFBQVVzd0MsbUJDaEJqQixJQUFBbHJDLEVBQWN0RixFQUFRLElBQ3RCLGlCQUFBc0YsTUFBQSxFQUE0Q25GLEVBQUFDLEVBQVNrRixFQUFBLE1BQ3JEQSxFQUFBbXJDLFNBQUF0d0MsRUFBQUQsUUFBQW9GLEVBQUFtckMsU0FHQXg5QixFQURValQsRUFBUSxHQUE2RHNiLFNBQy9FLFdBQUFoVyxHQUFBLHVCQ0xBLElBQUFBLEVBQWN0RixFQUFRLElBQ3RCLGlCQUFBc0YsTUFBQSxFQUE0Q25GLEVBQUFDLEVBQVNrRixFQUFBLE1BQ3JEQSxFQUFBbXJDLFNBQUF0d0MsRUFBQUQsUUFBQW9GLEVBQUFtckMsU0FHQXg5QixFQURValQsRUFBUSxHQUE2RHNiLFNBQy9FLFdBQUFoVyxHQUFBLHVCQ0xBLElBQUFBLEVBQWN0RixFQUFRLElBQ3RCLGlCQUFBc0YsTUFBQSxFQUE0Q25GLEVBQUFDLEVBQVNrRixFQUFBLE1BQ3JEQSxFQUFBbXJDLFNBQUF0d0MsRUFBQUQsUUFBQW9GLEVBQUFtckMsU0FHQXg5QixFQURValQsRUFBUSxHQUFnRXNiLFNBQ2xGLFdBQUFoVyxHQUFBLHVCQ0xBLElBQUFBLEVBQWN0RixFQUFRLElBQ3RCLGlCQUFBc0YsTUFBQSxFQUE0Q25GLEVBQUFDLEVBQVNrRixFQUFBLE1BQ3JEQSxFQUFBbXJDLFNBQUF0d0MsRUFBQUQsUUFBQW9GLEVBQUFtckMsU0FHQXg5QixFQURValQsRUFBUSxHQUFnRXNiLFNBQ2xGLFdBQUFoVyxHQUFBLHVCQ0xBLElBQUFBLEVBQWN0RixFQUFRLElBQ3RCLGlCQUFBc0YsTUFBQSxFQUE0Q25GLEVBQUFDLEVBQVNrRixFQUFBLE1BQ3JEQSxFQUFBbXJDLFNBQUF0d0MsRUFBQUQsUUFBQW9GLEVBQUFtckMsU0FHQXg5QixFQURValQsRUFBUSxHQUFnRXNiLFNBQ2xGLFdBQUFoVyxHQUFBLHVCQ0xBLElBQUFBLEVBQWN0RixFQUFRLElBQ3RCLGlCQUFBc0YsTUFBQSxFQUE0Q25GLEVBQUFDLEVBQVNrRixFQUFBLE1BQ3JEQSxFQUFBbXJDLFNBQUF0d0MsRUFBQUQsUUFBQW9GLEVBQUFtckMsU0FHQXg5QixFQURValQsRUFBUSxHQUFnRXNiLFNBQ2xGLFdBQUFoVyxHQUFBLHVCQ0xBLElBQUFBLEVBQWN0RixFQUFRLElBQ3RCLGlCQUFBc0YsTUFBQSxFQUE0Q25GLEVBQUFDLEVBQVNrRixFQUFBLE1BQ3JEQSxFQUFBbXJDLFNBQUF0d0MsRUFBQUQsUUFBQW9GLEVBQUFtckMsU0FHQXg5QixFQURValQsRUFBUSxHQUE2RHNiLFNBQy9FLFdBQUFoVyxHQUFBLHVCQ0xBLElBQUFBLEVBQWN0RixFQUFRLEtBQ3RCLGlCQUFBc0YsTUFBQSxFQUE0Q25GLEVBQUFDLEVBQVNrRixFQUFBLE1BQ3JEQSxFQUFBbXJDLFNBQUF0d0MsRUFBQUQsUUFBQW9GLEVBQUFtckMsU0FHQXg5QixFQURValQsRUFBUSxHQUE2RHNiLFNBQy9FLFdBQUFoVyxHQUFBLHFDQ1JBLFNBQUFzRixHQXlDQSxJQUtJOGxDLEdBTDJCLG9CQUFYdnNDLE9BQ2hCQSxZQUNrQixJQUFYeUcsRUFDTEEsRUFDQSxJQUNtQjJILDZCQThCekIsU0FBU28rQixFQUFjL3RDLEVBQUtDLEdBQzFCL0IsT0FBT2lPLEtBQUtuTSxHQUFLRCxRQUFRLFNBQVVoQixHQUFPLE9BQU9rQixFQUFHRCxFQUFJakIsR0FBTUEsS0FzQmhFLElBQUlpdkMsRUFBUyxTQUFpQkMsRUFBV0MsR0FDdkMzckMsS0FBSzJyQyxRQUFVQSxFQUVmM3JDLEtBQUs0ckMsVUFBWWp3QyxPQUFPWSxPQUFPLE1BRS9CeUQsS0FBSzZyQyxXQUFhSCxFQUNsQixJQUFJSSxFQUFXSixFQUFVSyxNQUd6Qi9yQyxLQUFLK3JDLE9BQTZCLG1CQUFiRCxFQUEwQkEsSUFBYUEsSUFBYSxJQUd2RTE3QixFQUFxQixDQUFFNDdCLFdBQVksQ0FBRXRnQyxjQUFjLElBRXZEMEUsRUFBbUI0N0IsV0FBV2x3QyxJQUFNLFdBQ2xDLFFBQVNrRSxLQUFLNnJDLFdBQVdHLFlBRzNCUCxFQUFPNXVDLFVBQVVvdkMsU0FBVyxTQUFtQnp2QyxFQUFLeEIsR0FDbERnRixLQUFLNHJDLFVBQVVwdkMsR0FBT3hCLEdBR3hCeXdDLEVBQU81dUMsVUFBVXlILFlBQWMsU0FBc0I5SCxVQUM1Q3dELEtBQUs0ckMsVUFBVXB2QyxJQUd4Qml2QyxFQUFPNXVDLFVBQVVxdkMsU0FBVyxTQUFtQjF2QyxHQUM3QyxPQUFPd0QsS0FBSzRyQyxVQUFVcHZDLElBR3hCaXZDLEVBQU81dUMsVUFBVXFILE9BQVMsU0FBaUJ3bkMsR0FDekMxckMsS0FBSzZyQyxXQUFXRyxXQUFhTixFQUFVTSxXQUNuQ04sRUFBVVMsVUFDWm5zQyxLQUFLNnJDLFdBQVdNLFFBQVVULEVBQVVTLFNBRWxDVCxFQUFVVSxZQUNacHNDLEtBQUs2ckMsV0FBV08sVUFBWVYsRUFBVVUsV0FFcENWLEVBQVVXLFVBQ1pyc0MsS0FBSzZyQyxXQUFXUSxRQUFVWCxFQUFVVyxVQUl4Q1osRUFBTzV1QyxVQUFVeXZDLGFBQWUsU0FBdUI1dUMsR0FDckQ4dEMsRUFBYXhyQyxLQUFLNHJDLFVBQVdsdUMsSUFHL0IrdEMsRUFBTzV1QyxVQUFVMHZDLGNBQWdCLFNBQXdCN3VDLEdBQ25Ec0MsS0FBSzZyQyxXQUFXUSxTQUNsQmIsRUFBYXhyQyxLQUFLNnJDLFdBQVdRLFFBQVMzdUMsSUFJMUMrdEMsRUFBTzV1QyxVQUFVMnZDLGNBQWdCLFNBQXdCOXVDLEdBQ25Ec0MsS0FBSzZyQyxXQUFXTSxTQUNsQlgsRUFBYXhyQyxLQUFLNnJDLFdBQVdNLFFBQVN6dUMsSUFJMUMrdEMsRUFBTzV1QyxVQUFVNHZDLGdCQUFrQixTQUEwQi91QyxHQUN2RHNDLEtBQUs2ckMsV0FBV08sV0FDbEJaLEVBQWF4ckMsS0FBSzZyQyxXQUFXTyxVQUFXMXVDLElBSTVDL0IsT0FBTzJVLGlCQUFrQm03QixFQUFPNXVDLFVBQVd1VCxHQUUzQyxJQUFJczhCLEVBQW1CLFNBQTJCQyxHQUVoRDNzQyxLQUFLNHNDLFNBQVMsR0FBSUQsR0FBZSxJQUduQ0QsRUFBaUI3dkMsVUFBVWYsSUFBTSxTQUFjaXZCLEdBQzdDLE9BQU9BLEVBQUs4aEIsT0FBTyxTQUFVN3hDLEVBQVF3QixHQUNuQyxPQUFPeEIsRUFBT2t4QyxTQUFTMXZDLElBQ3RCd0QsS0FBSzhzQyxPQUdWSixFQUFpQjd2QyxVQUFVa3dDLGFBQWUsU0FBdUJoaUIsR0FDL0QsSUFBSS92QixFQUFTZ0YsS0FBSzhzQyxLQUNsQixPQUFPL2hCLEVBQUs4aEIsT0FBTyxTQUFVM1gsRUFBVzE0QixHQUV0QyxPQUFPMDRCLElBRFBsNkIsRUFBU0EsRUFBT2t4QyxTQUFTMXZDLElBQ0V3dkMsV0FBYXh2QyxFQUFNLElBQU0sS0FDbkQsS0FHTGt3QyxFQUFpQjd2QyxVQUFVcUgsT0FBUyxTQUFtQnlvQyxJQW9DdkQsU0FBU3pvQyxFQUFRNm1CLEVBQU1paUIsRUFBY0MsR0FDL0J6aUMsRUFLSndpQyxFQUFhOW9DLE9BQU8rb0MsR0FHcEIsR0FBSUEsRUFBVTl4QyxRQUNaLElBQUssSUFBSXFCLEtBQU95d0MsRUFBVTl4QyxRQUFTLENBQ2pDLElBQUs2eEMsRUFBYWQsU0FBUzF2QyxHQU96QixjQUVGMEgsRUFDRTZtQixFQUFLanFCLE9BQU90RSxHQUNad3dDLEVBQWFkLFNBQVMxdkMsR0FDdEJ5d0MsRUFBVTl4QyxRQUFRcUIsS0ExRHhCMEgsQ0FBTyxHQUFJbEUsS0FBSzhzQyxLQUFNSCxJQUd4QkQsRUFBaUI3dkMsVUFBVSt2QyxTQUFXLFNBQW1CN2hCLEVBQU0yZ0IsRUFBV0MsR0FDdEUsSUFBSTdxQixFQUFTOWdCLFVBQ0ksSUFBWjJyQyxJQUFxQkEsR0FBVSxHQU10QyxJQUFJc0IsRUFBWSxJQUFJeEIsRUFBT0MsRUFBV0MsR0FDbEIsSUFBaEI1Z0IsRUFBS3B0QixPQUNQcUMsS0FBSzhzQyxLQUFPRyxFQUVDanRDLEtBQUtsRSxJQUFJaXZCLEVBQUs5aUIsTUFBTSxHQUFJLElBQzlCZ2tDLFNBQVNsaEIsRUFBS0EsRUFBS3B0QixPQUFTLEdBQUlzdkMsR0FJckN2QixFQUFVdndDLFNBQ1pxd0MsRUFBYUUsRUFBVXZ3QyxRQUFTLFNBQVUreEMsRUFBZ0Ixd0MsR0FDeERza0IsRUFBTzhyQixTQUFTN2hCLEVBQUtqcUIsT0FBT3RFLEdBQU0wd0MsRUFBZ0J2QixNQUt4RGUsRUFBaUI3dkMsVUFBVXN3QyxXQUFhLFNBQXFCcGlCLEdBQzNELElBQUlwYixFQUFTM1AsS0FBS2xFLElBQUlpdkIsRUFBSzlpQixNQUFNLEdBQUksSUFDakN6TCxFQUFNdXVCLEVBQUtBLEVBQUtwdEIsT0FBUyxHQUN4QmdTLEVBQU91OEIsU0FBUzF2QyxHQUFLbXZDLFNBRTFCaDhCLEVBQU9yTCxZQUFZOUgsSUFnQ3JCLElBeUNJbXhCLEVBRUosSUFBSXlmLEVBQVEsU0FBZ0J0cUMsR0FDMUIsSUFBSWdlLEVBQVM5Z0IsVUFDSSxJQUFaOEMsSUFBcUJBLEVBQVUsS0FLL0I2cUIsR0FBeUIsb0JBQVgzdUIsUUFBMEJBLE9BQU8ydUIsS0FDbERpRixFQUFRNXpCLE9BQU8ydUIsS0FTakIsSUFBSTBmLEVBQVV2cUMsRUFBUXVxQyxhQUEwQixJQUFaQSxJQUFxQkEsRUFBVSxJQUNuRSxJQUFJQyxFQUFTeHFDLEVBQVF3cUMsWUFBd0IsSUFBWEEsSUFBb0JBLEdBQVMsR0FHL0R0dEMsS0FBS3V0QyxhQUFjLEVBQ25CdnRDLEtBQUt3dEMsU0FBVzd4QyxPQUFPWSxPQUFPLE1BQzlCeUQsS0FBS3l0QyxtQkFBcUIsR0FDMUJ6dEMsS0FBSzB0QyxXQUFhL3hDLE9BQU9ZLE9BQU8sTUFDaEN5RCxLQUFLMnRDLGdCQUFrQmh5QyxPQUFPWSxPQUFPLE1BQ3JDeUQsS0FBSzR0QyxTQUFXLElBQUlsQixFQUFpQjVwQyxHQUNyQzlDLEtBQUs2dEMscUJBQXVCbHlDLE9BQU9ZLE9BQU8sTUFDMUN5RCxLQUFLOHRDLGFBQWUsR0FDcEI5dEMsS0FBSyt0QyxXQUFhLElBQUlwZ0IsRUFHdEIsSUFBSXFnQixFQUFRaHVDLEtBRVJpdUMsRUFETWp1QyxLQUNTaXVDLFNBQ2ZDLEVBRk1sdUMsS0FFT2t1QyxPQUNqQmx1QyxLQUFLaXVDLFNBQVcsU0FBd0JqcUMsRUFBTW1xQyxHQUM1QyxPQUFPRixFQUFTN3lDLEtBQUs0eUMsRUFBT2hxQyxFQUFNbXFDLElBRXBDbnVDLEtBQUtrdUMsT0FBUyxTQUFzQmxxQyxFQUFNbXFDLEVBQVNyckMsR0FDakQsT0FBT29yQyxFQUFPOXlDLEtBQUs0eUMsRUFBT2hxQyxFQUFNbXFDLEVBQVNyckMsSUFJM0M5QyxLQUFLc3RDLE9BQVNBLEVBRWQsSUFBSXZCLEVBQVEvckMsS0FBSzR0QyxTQUFTZCxLQUFLZixNQUsvQnFDLEVBQWNwdUMsS0FBTStyQyxFQUFPLEdBQUkvckMsS0FBSzR0QyxTQUFTZCxNQUk3Q3VCLEVBQWFydUMsS0FBTStyQyxHQUduQnNCLEVBQVE3dkMsUUFBUSxTQUFVZzFCLEdBQVUsT0FBT0EsRUFBTzFSLFdBRVg3VCxJQUFyQm5LLEVBQVEySCxTQUF5QjNILEVBQVEySCxTQUFXa2pCLEVBQUl2akIsT0FBT0ssV0FqVG5GLFNBQXdCdWpDLEdBQ2pCekMsSUFFTHlDLEVBQU1NLGFBQWUvQyxFQUVyQkEsRUFBWXhoQixLQUFLLFlBQWFpa0IsR0FFOUJ6QyxFQUFZOXhCLEdBQUcsdUJBQXdCLFNBQVU4MEIsR0FDL0NQLEVBQU1RLGFBQWFELEtBR3JCUCxFQUFNUyxVQUFVLFNBQVVDLEVBQVUzQyxHQUNsQ1IsRUFBWXhoQixLQUFLLGdCQUFpQjJrQixFQUFVM0MsTUF1UzVDNEMsQ0FBYzN1QyxPQUlkNHVDLEVBQXVCLENBQUU3QyxNQUFPLENBQUVyZ0MsY0FBYyxJQXVLcEQsU0FBU21qQyxFQUFrQm54QyxFQUFJeVEsR0FJN0IsT0FISUEsRUFBSzdHLFFBQVE1SixHQUFNLEdBQ3JCeVEsRUFBSzFNLEtBQUsvRCxHQUVMLFdBQ0wsSUFBSXpDLEVBQUlrVCxFQUFLN0csUUFBUTVKLEdBQ2pCekMsR0FBSyxHQUNQa1QsRUFBSzVHLE9BQU90TSxFQUFHLElBS3JCLFNBQVM2ekMsRUFBWWQsRUFBT2UsR0FDMUJmLEVBQU1SLFNBQVc3eEMsT0FBT1ksT0FBTyxNQUMvQnl4QyxFQUFNTixXQUFhL3hDLE9BQU9ZLE9BQU8sTUFDakN5eEMsRUFBTUwsZ0JBQWtCaHlDLE9BQU9ZLE9BQU8sTUFDdEN5eEMsRUFBTUgscUJBQXVCbHlDLE9BQU9ZLE9BQU8sTUFDM0MsSUFBSXd2QyxFQUFRaUMsRUFBTWpDLE1BRWxCcUMsRUFBY0osRUFBT2pDLEVBQU8sR0FBSWlDLEVBQU1KLFNBQVNkLE1BQU0sR0FFckR1QixFQUFhTCxFQUFPakMsRUFBT2dELEdBRzdCLFNBQVNWLEVBQWNMLEVBQU9qQyxFQUFPZ0QsR0FDbkMsSUFBSUMsRUFBUWhCLEVBQU1pQixJQUdsQmpCLEVBQU0zQixRQUFVLEdBQ2hCLElBQUk2QyxFQUFpQmxCLEVBQU1MLGdCQUN2QnI1QixFQUFXLEdBQ2ZrM0IsRUFBYTBELEVBQWdCLFNBQVV4eEMsRUFBSWxCLEdBSXpDOFgsRUFBUzlYLEdBcmRiLFNBQWtCa0IsRUFBSXU1QixHQUNwQixPQUFPLFdBQ0wsT0FBT3Y1QixFQUFHdTVCLElBbWRNa1ksQ0FBUXp4QyxFQUFJc3dDLEdBQzVCcnlDLE9BQU9DLGVBQWVveUMsRUFBTTNCLFFBQVM3dkMsRUFBSyxDQUN4Q1YsSUFBSyxXQUFjLE9BQU9reUMsRUFBTWlCLElBQUl6eUMsSUFDcENYLFlBQVksTUFPaEIsSUFBSXlPLEVBQVNxakIsRUFBSXZqQixPQUFPRSxPQUN4QnFqQixFQUFJdmpCLE9BQU9FLFFBQVMsRUFDcEIwakMsRUFBTWlCLElBQU0sSUFBSXRoQixFQUFJLENBQ2xCOXNCLEtBQU0sQ0FDSnV1QyxRQUFTckQsR0FFWHozQixTQUFVQSxJQUVacVosRUFBSXZqQixPQUFPRSxPQUFTQSxFQUdoQjBqQyxFQUFNVixRQTRMWixTQUEyQlUsR0FDekJBLEVBQU1pQixJQUFJbGlCLE9BQU8sV0FBYyxPQUFPL3NCLEtBQUsrckIsTUFBTXFqQixTQUFXLFdBQ3RENWtDLEdBR0gsQ0FBRTZmLE1BQU0sRUFBTWhGLE1BQU0sSUFoTXJCZ3FCLENBQWlCckIsR0FHZmdCLElBQ0VELEdBR0ZmLEVBQU1zQixZQUFZLFdBQ2hCTixFQUFNampCLE1BQU1xakIsUUFBVSxPQUcxQnpoQixFQUFJclYsU0FBUyxXQUFjLE9BQU8wMkIsRUFBTXhxQixjQUk1QyxTQUFTNHBCLEVBQWVKLEVBQU91QixFQUFXeGtCLEVBQU0vdkIsRUFBUSt6QyxHQUN0RCxJQUFJUyxHQUFVemtCLEVBQUtwdEIsT0FDZnUzQixFQUFZOFksRUFBTUosU0FBU2IsYUFBYWhpQixHQVE1QyxHQUxJL3ZCLEVBQU9neEMsYUFDVGdDLEVBQU1ILHFCQUFxQjNZLEdBQWFsNkIsSUFJckN3MEMsSUFBV1QsRUFBSyxDQUNuQixJQUFJVSxFQUFjQyxFQUFlSCxFQUFXeGtCLEVBQUs5aUIsTUFBTSxHQUFJLElBQ3ZEMG5DLEVBQWE1a0IsRUFBS0EsRUFBS3B0QixPQUFTLEdBQ3BDcXdDLEVBQU1zQixZQUFZLFdBQ2hCM2hCLEVBQUkvZixJQUFJNmhDLEVBQWFFLEVBQVkzMEMsRUFBTyt3QyxTQUk1QyxJQUFJNkQsRUFBUTUwQyxFQUFPb1UsUUEyQnJCLFNBQTJCNCtCLEVBQU85WSxFQUFXbkssR0FDM0MsSUFBSThrQixFQUE0QixLQUFkM2EsRUFFZDBhLEVBQVEsQ0FDVjNCLFNBQVU0QixFQUFjN0IsRUFBTUMsU0FBVyxTQUFVNkIsRUFBT0MsRUFBVTFzQyxHQUNsRSxJQUFJNE4sRUFBTysrQixFQUFpQkYsRUFBT0MsRUFBVTFzQyxHQUN6QzhxQyxFQUFVbDlCLEVBQUtrOUIsUUFDZnJyQyxFQUFVbU8sRUFBS25PLFFBQ2ZrQixFQUFPaU4sRUFBS2pOLEtBVWhCLE9BUktsQixHQUFZQSxFQUFRZ3FDLE9BQ3ZCOW9DLEVBQU9reEIsRUFBWWx4QixHQU9kZ3FDLEVBQU1DLFNBQVNqcUMsRUFBTW1xQyxJQUc5QkQsT0FBUTJCLEVBQWM3QixFQUFNRSxPQUFTLFNBQVU0QixFQUFPQyxFQUFVMXNDLEdBQzlELElBQUk0TixFQUFPKytCLEVBQWlCRixFQUFPQyxFQUFVMXNDLEdBQ3pDOHFDLEVBQVVsOUIsRUFBS2s5QixRQUNmcnJDLEVBQVVtTyxFQUFLbk8sUUFDZmtCLEVBQU9pTixFQUFLak4sS0FFWGxCLEdBQVlBLEVBQVFncUMsT0FDdkI5b0MsRUFBT2t4QixFQUFZbHhCLEdBT3JCZ3FDLEVBQU1FLE9BQU9scUMsRUFBTW1xQyxFQUFTcnJDLEtBaUJoQyxPQVhBbkgsT0FBTzJVLGlCQUFpQnMvQixFQUFPLENBQzdCdkQsUUFBUyxDQUNQdndDLElBQUsrekMsRUFDRCxXQUFjLE9BQU83QixFQUFNM0IsU0FDM0IsV0FBYyxPQVV4QixTQUEyQjJCLEVBQU85WSxHQUNoQyxJQUFJK2EsRUFBZSxHQUVmQyxFQUFXaGIsRUFBVXYzQixPQWlCekIsT0FoQkFoQyxPQUFPaU8sS0FBS29rQyxFQUFNM0IsU0FBUzd1QyxRQUFRLFNBQVV3RyxHQUUzQyxHQUFJQSxFQUFLaUUsTUFBTSxFQUFHaW9DLEtBQWNoYixFQUFoQyxDQUdBLElBQUlpYixFQUFZbnNDLEVBQUtpRSxNQUFNaW9DLEdBSzNCdjBDLE9BQU9DLGVBQWVxMEMsRUFBY0UsRUFBVyxDQUM3Q3IwQyxJQUFLLFdBQWMsT0FBT2t5QyxFQUFNM0IsUUFBUXJvQyxJQUN4Q25JLFlBQVksT0FJVG8wQyxFQTlCc0JHLENBQWlCcEMsRUFBTzlZLEtBRW5ENlcsTUFBTyxDQUNMandDLElBQUssV0FBYyxPQUFPNHpDLEVBQWUxQixFQUFNakMsTUFBT2hoQixPQUluRDZrQixFQS9Fc0JTLENBQWlCckMsRUFBTzlZLEVBQVduSyxHQUVoRS92QixFQUFPeXhDLGdCQUFnQixTQUFVaUMsRUFBVWx5QyxJQXVHN0MsU0FBMkJ3eEMsRUFBT2hxQyxFQUFNbVQsRUFBU3k0QixJQUNuQzVCLEVBQU1OLFdBQVcxcEMsS0FBVWdxQyxFQUFNTixXQUFXMXBDLEdBQVEsS0FDMUR2QyxLQUFLLFNBQWlDMHNDLEdBQzFDaDNCLEVBQVEvYixLQUFLNHlDLEVBQU80QixFQUFNN0QsTUFBT29DLEtBeEdqQ21DLENBQWlCdEMsRUFESTlZLEVBQVkxNEIsRUFDT2t5QyxFQUFVa0IsS0FHcEQ1MEMsRUFBT3d4QyxjQUFjLFNBQVUrRCxFQUFRL3pDLEdBQ3JDLElBQUl3SCxFQUFPdXNDLEVBQU96RCxLQUFPdHdDLEVBQU0wNEIsRUFBWTE0QixFQUN2QzJhLEVBQVVvNUIsRUFBT3A1QixTQUFXbzVCLEdBdUdwQyxTQUF5QnZDLEVBQU9ocUMsRUFBTW1ULEVBQVN5NEIsSUFDakM1QixFQUFNUixTQUFTeHBDLEtBQVVncUMsRUFBTVIsU0FBU3hwQyxHQUFRLEtBQ3REdkMsS0FBSyxTQUErQjBzQyxFQUFTNTFCLEdBQ2pELElBdm9CZ0JsYixFQXVvQlowTCxFQUFNb08sRUFBUS9iLEtBQUs0eUMsRUFBTyxDQUM1QkMsU0FBVTJCLEVBQU0zQixTQUNoQkMsT0FBUTBCLEVBQU0xQixPQUNkN0IsUUFBU3VELEVBQU12RCxRQUNmTixNQUFPNkQsRUFBTTdELE1BQ2J5RSxZQUFheEMsRUFBTTNCLFFBQ25Ca0QsVUFBV3ZCLEVBQU1qQyxPQUNoQm9DLEVBQVM1MUIsR0FJWixPQWxwQmdCbGIsRUErb0JEMEwsSUE5b0JpQixtQkFBYjFMLEVBQUl1SixPQStvQnJCbUMsRUFBTStPLFFBQVFDLFFBQVFoUCxJQUVwQmlsQyxFQUFNTSxhQUNEdmxDLEVBQUlsQyxNQUFNLFNBQVUrUCxHQUV6QixNQURBbzNCLEVBQU1NLGFBQWF2a0IsS0FBSyxhQUFjblQsR0FDaENBLElBR0Q3TixJQTFIVDBuQyxDQUFlekMsRUFBT2hxQyxFQUFNbVQsRUFBU3k0QixLQUd2QzUwQyxFQUFPdXhDLGNBQWMsU0FBVTl3QyxFQUFRZSxJQTRIekMsU0FBeUJ3eEMsRUFBT2hxQyxFQUFNMHNDLEVBQVdkLEdBQy9DLEdBQUk1QixFQUFNTCxnQkFBZ0IzcEMsR0FJeEIsY0FFRmdxQyxFQUFNTCxnQkFBZ0IzcEMsR0FBUSxTQUF3QmdxQyxHQUNwRCxPQUFPMEMsRUFDTGQsRUFBTTdELE1BQ042RCxFQUFNdkQsUUFDTjJCLEVBQU1qQyxNQUNOaUMsRUFBTTNCLFVBdElSc0UsQ0FBZTNDLEVBRE05WSxFQUFZMTRCLEVBQ0tmLEVBQVFtMEMsS0FHaEQ1MEMsRUFBT3N4QyxhQUFhLFNBQVVqOEIsRUFBTzdULEdBQ25DNHhDLEVBQWNKLEVBQU91QixFQUFXeGtCLEVBQUtqcUIsT0FBT3RFLEdBQU02VCxFQUFPMCtCLEtBK0k3RCxTQUFTVyxFQUFnQjNELEVBQU9oaEIsR0FDOUIsT0FBT0EsRUFBS3B0QixPQUNSb3RCLEVBQUs4aEIsT0FBTyxTQUFVZCxFQUFPdnZDLEdBQU8sT0FBT3V2QyxFQUFNdnZDLElBQVN1dkMsR0FDMURBLEVBR04sU0FBU2lFLEVBQWtCaHNDLEVBQU1tcUMsRUFBU3JyQyxHQWhzQjFDLElBQW1CckYsRUEyc0JqQixPQTFzQmUsUUFERUEsRUFpc0JKdUcsSUFoc0J5QixpQkFBUnZHLEdBZ3NCUnVHLEVBQUtBLE9BQ3pCbEIsRUFBVXFyQyxFQUNWQSxFQUFVbnFDLEVBQ1ZBLEVBQU9BLEVBQUtBLE1BT1AsQ0FBRUEsS0FBTUEsRUFBTW1xQyxRQUFTQSxFQUFTcnJDLFFBQVNBLEdBR2xELFNBQVM4dkIsRUFBU2dlLEdBQ1pqakIsR0FBT2lqQixJQUFTampCOzs7Ozs7QUExeEJ0QixTQUFxQkEsR0FHbkIsR0FGY21FLE9BQU9uRSxFQUFJd0YsUUFBUWhzQixNQUFNLEtBQUssS0FFN0IsRUFDYndtQixFQUFJWSxNQUFNLENBQUVzaUIsYUFBY0MsUUFDckIsQ0FHTCxJQUFJbGpCLEVBQVFELEVBQUk5d0IsVUFBVSt3QixNQUMxQkQsRUFBSTl3QixVQUFVK3dCLE1BQVEsU0FBVTlxQixRQUNiLElBQVpBLElBQXFCQSxFQUFVLElBRXBDQSxFQUFRK2UsS0FBTy9lLEVBQVErZSxLQUNuQixDQUFDaXZCLEdBQVVod0MsT0FBT2dDLEVBQVErZSxNQUMxQml2QixFQUNKbGpCLEVBQU14eUIsS0FBSzRFLEtBQU04QyxJQVFyQixTQUFTZ3VDLElBQ1AsSUFBSWh1QyxFQUFVOUMsS0FBS29XLFNBRWZ0VCxFQUFRa3JDLE1BQ1ZodUMsS0FBSyt3QyxPQUFrQyxtQkFBbEJqdUMsRUFBUWtyQyxNQUN6QmxyQyxFQUFRa3JDLFFBQ1JsckMsRUFBUWtyQyxNQUNIbHJDLEVBQVE2TSxRQUFVN00sRUFBUTZNLE9BQU9vaEMsU0FDMUMvd0MsS0FBSyt3QyxPQUFTanVDLEVBQVE2TSxPQUFPb2hDLFNBb3dCakNDLENBREFyakIsRUFBTWlqQixHQTliUmhDLEVBQXFCN0MsTUFBTWp3QyxJQUFNLFdBQy9CLE9BQU9rRSxLQUFLaXZDLElBQUlsakIsTUFBTXFqQixTQUd4QlIsRUFBcUI3QyxNQUFNbitCLElBQU0sU0FBVTlILEdBQ3JDMEUsR0FLTjRpQyxFQUFNdndDLFVBQVVxeEMsT0FBUyxTQUFpQjRCLEVBQU9DLEVBQVUxc0MsR0FDdkQsSUFBSXlkLEVBQVM5Z0IsS0FHWHV4QixFQUFNeWUsRUFBaUJGLEVBQU9DLEVBQVUxc0MsR0FDdENXLEVBQU91dEIsRUFBSXZ0QixLQUNYbXFDLEVBQVU1YyxFQUFJNGMsUUFHaEJPLEdBRlluZCxFQUFJenVCLFFBRUwsQ0FBRWtCLEtBQU1BLEVBQU1tcUMsUUFBU0EsSUFDbEM4QyxFQUFRanhDLEtBQUswdEMsV0FBVzFwQyxHQUN2Qml0QyxJQU1ManhDLEtBQUtzdkMsWUFBWSxXQUNmMkIsRUFBTXp6QyxRQUFRLFNBQXlCMlosR0FDckNBLEVBQVFnM0IsT0FHWm51QyxLQUFLOHRDLGFBQWF0d0MsUUFBUSxTQUFVNlEsR0FBTyxPQUFPQSxFQUFJcWdDLEVBQVU1dEIsRUFBT2lyQixXQWF6RXFCLEVBQU12d0MsVUFBVW94QyxTQUFXLFNBQW1CNkIsRUFBT0MsR0FDakQsSUFBSWp2QixFQUFTOWdCLEtBR1h1eEIsRUFBTXllLEVBQWlCRixFQUFPQyxHQUM1Qi9yQyxFQUFPdXRCLEVBQUl2dEIsS0FDWG1xQyxFQUFVNWMsRUFBSTRjLFFBRWhCb0MsRUFBUyxDQUFFdnNDLEtBQU1BLEVBQU1tcUMsUUFBU0EsR0FDaEM4QyxFQUFRanhDLEtBQUt3dEMsU0FBU3hwQyxHQUMxQixHQUFLaXRDLEVBQUwsQ0FPQSxJQUNFanhDLEtBQUt5dEMsbUJBQ0Zyb0MsT0FBTyxTQUFVaUosR0FBTyxPQUFPQSxFQUFJbWIsU0FDbkNoc0IsUUFBUSxTQUFVNlEsR0FBTyxPQUFPQSxFQUFJbWIsT0FBTyttQixFQUFRenZCLEVBQU9pckIsU0FDN0QsTUFBT3ZpQyxHQUNIZ0IsRUFVTixPQUpheW1DLEVBQU10ekMsT0FBUyxFQUN4Qm1hLFFBQVFvNUIsSUFBSUQsRUFBTWh4QyxJQUFJLFNBQVVrWCxHQUFXLE9BQU9BLEVBQVFnM0IsTUFDMUQ4QyxFQUFNLEdBQUc5QyxJQUVDdm5DLEtBQUssU0FBVW1DLEdBQzNCLElBQ0UrWCxFQUFPMnNCLG1CQUNKcm9DLE9BQU8sU0FBVWlKLEdBQU8sT0FBT0EsRUFBSThpQyxRQUNuQzN6QyxRQUFRLFNBQVU2USxHQUFPLE9BQU9BLEVBQUk4aUMsTUFBTVosRUFBUXp2QixFQUFPaXJCLFNBQzVELE1BQU92aUMsR0FDSGdCLEVBS04sT0FBT3pCLE1BSVhxa0MsRUFBTXZ3QyxVQUFVNHhDLFVBQVksU0FBb0Ivd0MsR0FDOUMsT0FBT214QyxFQUFpQm54QyxFQUFJc0MsS0FBSzh0QyxlQUduQ1YsRUFBTXZ3QyxVQUFVdTBDLGdCQUFrQixTQUEwQjF6QyxHQUUxRCxPQUFPbXhDLEVBRGtCLG1CQUFQbnhDLEVBQW9CLENBQUU4ckIsT0FBUTlyQixHQUFPQSxFQUN6QnNDLEtBQUt5dEMscUJBR3JDTCxFQUFNdndDLFVBQVUrUCxNQUFRLFNBQWdCblIsRUFBUThjLEVBQUl6VixHQUNoRCxJQUFJZ2UsRUFBUzlnQixLQUtmLE9BQU9BLEtBQUsrdEMsV0FBV2hoQixPQUFPLFdBQWMsT0FBT3R4QixFQUFPcWxCLEVBQU9pckIsTUFBT2pyQixFQUFPdXJCLFVBQWE5ekIsRUFBSXpWLElBR2xHc3FDLEVBQU12d0MsVUFBVTJ4QyxhQUFlLFNBQXVCekMsR0FDbEQsSUFBSWpyQixFQUFTOWdCLEtBRWZBLEtBQUtzdkMsWUFBWSxXQUNmeHVCLEVBQU9tdUIsSUFBSWxqQixNQUFNcWpCLFFBQVVyRCxLQUkvQnFCLEVBQU12d0MsVUFBVXcwQyxlQUFpQixTQUF5QnRtQixFQUFNMmdCLEVBQVc1b0MsUUFDdEQsSUFBWkEsSUFBcUJBLEVBQVUsSUFFbEIsaUJBQVRpb0IsSUFBcUJBLEVBQU8sQ0FBQ0EsSUFPeEMvcUIsS0FBSzR0QyxTQUFTaEIsU0FBUzdoQixFQUFNMmdCLEdBQzdCMEMsRUFBY3B1QyxLQUFNQSxLQUFLK3JDLE1BQU9oaEIsRUFBTS9xQixLQUFLNHRDLFNBQVM5eEMsSUFBSWl2QixHQUFPam9CLEVBQVF3dUMsZUFFdkVqRCxFQUFhcnVDLEtBQU1BLEtBQUsrckMsUUFHMUJxQixFQUFNdndDLFVBQVUwMEMsaUJBQW1CLFNBQTJCeG1CLEdBQzFELElBQUlqSyxFQUFTOWdCLEtBRUssaUJBQVQrcUIsSUFBcUJBLEVBQU8sQ0FBQ0EsSUFNeEMvcUIsS0FBSzR0QyxTQUFTVCxXQUFXcGlCLEdBQ3pCL3FCLEtBQUtzdkMsWUFBWSxXQUNmLElBQUlHLEVBQWNDLEVBQWU1dUIsRUFBT2lyQixNQUFPaGhCLEVBQUs5aUIsTUFBTSxHQUFJLElBQzlEMGxCLEVBQUkyRSxPQUFPbWQsRUFBYTFrQixFQUFLQSxFQUFLcHRCLE9BQVMsTUFFN0NteEMsRUFBVzl1QyxPQUdib3RDLEVBQU12d0MsVUFBVTIwQyxVQUFZLFNBQW9CQyxHQUM5Q3p4QyxLQUFLNHRDLFNBQVMxcEMsT0FBT3V0QyxHQUNyQjNDLEVBQVc5dUMsTUFBTSxJQUduQm90QyxFQUFNdndDLFVBQVV5eUMsWUFBYyxTQUFzQjV4QyxHQUNsRCxJQUFJZzBDLEVBQWExeEMsS0FBS3V0QyxZQUN0QnZ0QyxLQUFLdXRDLGFBQWMsRUFDbkI3dkMsSUFDQXNDLEtBQUt1dEMsWUFBY21FLEdBR3JCLzFDLE9BQU8yVSxpQkFBa0I4OEIsRUFBTXZ3QyxVQUFXK3hDLEdBcVMxQyxJQUFJK0MsRUFBV0MsRUFBbUIsU0FBVTFjLEVBQVcyYyxHQUNyRCxJQUFJOW9DLEVBQU0sR0F1QlYsT0F0QkErb0MsRUFBYUQsR0FBUXIwQyxRQUFRLFNBQVUrekIsR0FDckMsSUFBSS8wQixFQUFNKzBCLEVBQUkvMEIsSUFDVmEsRUFBTWswQixFQUFJbDBCLElBRWQwTCxFQUFJdk0sR0FBTyxXQUNULElBQUl1dkMsRUFBUS9yQyxLQUFLK3dDLE9BQU9oRixNQUNwQk0sRUFBVXJzQyxLQUFLK3dDLE9BQU8xRSxRQUMxQixHQUFJblgsRUFBVyxDQUNiLElBQUlsNkIsRUFBUysyQyxFQUFxQi94QyxLQUFLK3dDLE9BQVEsV0FBWTdiLEdBQzNELElBQUtsNkIsRUFDSCxPQUVGK3dDLEVBQVEvd0MsRUFBT29VLFFBQVEyOEIsTUFDdkJNLEVBQVVyeEMsRUFBT29VLFFBQVFpOUIsUUFFM0IsTUFBc0IsbUJBQVJodkMsRUFDVkEsRUFBSWpDLEtBQUs0RSxLQUFNK3JDLEVBQU9NLEdBQ3RCTixFQUFNMXVDLElBR1owTCxFQUFJdk0sR0FBS3cxQyxNQUFPLElBRVhqcEMsSUFTTGtwQyxFQUFlTCxFQUFtQixTQUFVMWMsRUFBV2tYLEdBQ3pELElBQUlyakMsRUFBTSxHQXVCVixPQXRCQStvQyxFQUFhMUYsR0FBVzV1QyxRQUFRLFNBQVUrekIsR0FDeEMsSUFBSS8wQixFQUFNKzBCLEVBQUkvMEIsSUFDVmEsRUFBTWswQixFQUFJbDBCLElBRWQwTCxFQUFJdk0sR0FBTyxXQUVULElBREEsSUFBSXlVLEVBQU8sR0FBSUMsRUFBTTdSLFVBQVUxQixPQUN2QnVULEtBQVFELEVBQU1DLEdBQVE3UixVQUFXNlIsR0FHekMsSUFBSWc5QixFQUFTbHVDLEtBQUsrd0MsT0FBTzdDLE9BQ3pCLEdBQUloWixFQUFXLENBQ2IsSUFBSWw2QixFQUFTKzJDLEVBQXFCL3hDLEtBQUsrd0MsT0FBUSxlQUFnQjdiLEdBQy9ELElBQUtsNkIsRUFDSCxPQUVGa3pDLEVBQVNsekMsRUFBT29VLFFBQVE4K0IsT0FFMUIsTUFBc0IsbUJBQVI3d0MsRUFDVkEsRUFBSWtMLE1BQU12SSxLQUFNLENBQUNrdUMsR0FBUXB0QyxPQUFPbVEsSUFDaENpOUIsRUFBTzNsQyxNQUFNdkksS0FBSyt3QyxPQUFRLENBQUMxekMsR0FBS3lELE9BQU9tUSxPQUd4Q2xJLElBU0xtcEMsRUFBYU4sRUFBbUIsU0FBVTFjLEVBQVdtWCxHQUN2RCxJQUFJdGpDLEVBQU0sR0FvQlYsT0FuQkErb0MsRUFBYXpGLEdBQVM3dUMsUUFBUSxTQUFVK3pCLEdBQ3RDLElBQUkvMEIsRUFBTSswQixFQUFJLzBCLElBQ1ZhLEVBQU1rMEIsRUFBSWwwQixJQUdkQSxFQUFNNjNCLEVBQVk3M0IsRUFDbEIwTCxFQUFJdk0sR0FBTyxXQUNULElBQUkwNEIsR0FBYzZjLEVBQXFCL3hDLEtBQUsrd0MsT0FBUSxhQUFjN2IsR0FPbEUsT0FBT2wxQixLQUFLK3dDLE9BQU8xRSxRQUFRaHZDLElBRzdCMEwsRUFBSXZNLEdBQUt3MUMsTUFBTyxJQUVYanBDLElBU0xvcEMsRUFBYVAsRUFBbUIsU0FBVTFjLEVBQVdpWCxHQUN2RCxJQUFJcGpDLEVBQU0sR0F1QlYsT0F0QkErb0MsRUFBYTNGLEdBQVMzdUMsUUFBUSxTQUFVK3pCLEdBQ3RDLElBQUkvMEIsRUFBTSswQixFQUFJLzBCLElBQ1ZhLEVBQU1rMEIsRUFBSWwwQixJQUVkMEwsRUFBSXZNLEdBQU8sV0FFVCxJQURBLElBQUl5VSxFQUFPLEdBQUlDLEVBQU03UixVQUFVMUIsT0FDdkJ1VCxLQUFRRCxFQUFNQyxHQUFRN1IsVUFBVzZSLEdBR3pDLElBQUkrOEIsRUFBV2p1QyxLQUFLK3dDLE9BQU85QyxTQUMzQixHQUFJL1ksRUFBVyxDQUNiLElBQUlsNkIsRUFBUysyQyxFQUFxQi94QyxLQUFLK3dDLE9BQVEsYUFBYzdiLEdBQzdELElBQUtsNkIsRUFDSCxPQUVGaXpDLEVBQVdqekMsRUFBT29VLFFBQVE2K0IsU0FFNUIsTUFBc0IsbUJBQVI1d0MsRUFDVkEsRUFBSWtMLE1BQU12SSxLQUFNLENBQUNpdUMsR0FBVW50QyxPQUFPbVEsSUFDbENnOUIsRUFBUzFsQyxNQUFNdkksS0FBSyt3QyxPQUFRLENBQUMxekMsR0FBS3lELE9BQU9tUSxPQUcxQ2xJLElBc0JULFNBQVMrb0MsRUFBYzd4QyxHQUNyQixPQUFPNkcsTUFBTTFKLFFBQVE2QyxHQUNqQkEsRUFBSUEsSUFBSSxTQUFVekQsR0FBTyxNQUFRLENBQUVBLElBQUtBLEVBQUthLElBQUtiLEtBQ2xEYixPQUFPaU8sS0FBSzNKLEdBQUtBLElBQUksU0FBVXpELEdBQU8sTUFBUSxDQUFFQSxJQUFLQSxFQUFLYSxJQUFLNEMsRUFBSXpELE1BUXpFLFNBQVNvMUMsRUFBb0JsMEMsR0FDM0IsT0FBTyxTQUFVdzNCLEVBQVdqMUIsR0FPMUIsTUFOeUIsaUJBQWRpMUIsR0FDVGoxQixFQUFNaTFCLEVBQ05BLEVBQVksSUFDd0MsTUFBM0NBLEVBQVVsdEIsT0FBT2t0QixFQUFVdjNCLE9BQVMsS0FDN0N1M0IsR0FBYSxLQUVSeDNCLEVBQUd3M0IsRUFBV2oxQixJQVd6QixTQUFTOHhDLEVBQXNCL0QsRUFBT29FLEVBQVFsZCxHQUs1QyxPQUphOFksRUFBTUgscUJBQXFCM1ksR0FPMUMsSUFBSW1kLEVBQVksQ0FDZGpGLE1BQU9BLEVBQ1B4YSxRQUFTQSxFQUNUTyxRQUFTLFFBQ1R3ZSxTQUFVQSxFQUNWTSxhQUFjQSxFQUNkQyxXQUFZQSxFQUNaQyxXQUFZQSxFQUNaRyx3QkE1RDRCLFNBQVVwZCxHQUFhLE1BQVEsQ0FDM0R5YyxTQUFVQSxFQUFTbDFDLEtBQUssS0FBTXk0QixHQUM5QmdkLFdBQVlBLEVBQVd6MUMsS0FBSyxLQUFNeTRCLEdBQ2xDK2MsYUFBY0EsRUFBYXgxQyxLQUFLLEtBQU15NEIsR0FDdENpZCxXQUFZQSxFQUFXMTFDLEtBQUssS0FBTXk0QixNQTJEckJtZCxzREM5K0JmcjNDLEVBQU9ELFFBQVUsU0FBYzJDLEVBQUlnQyxHQUNqQyxPQUFPLFdBRUwsSUFEQSxJQUFJdVIsRUFBTyxJQUFJbkssTUFBTXpILFVBQVUxQixRQUN0QjFDLEVBQUksRUFBR0EsRUFBSWdXLEVBQUt0VCxPQUFRMUMsSUFDL0JnVyxFQUFLaFcsR0FBS29FLFVBQVVwRSxHQUV0QixPQUFPeUMsRUFBRzZLLE1BQU03SSxFQUFTdVIsbUNDTjdCLElBQUlzaEMsRUFBUXQxQyxFQUFRLEdBRXBCLFNBQVN1MUMsRUFBT24xQyxHQUNkLE9BQU9xRCxtQkFBbUJyRCxHQUN4QndDLFFBQVEsUUFBUyxLQUNqQkEsUUFBUSxRQUFTLEtBQ2pCQSxRQUFRLE9BQVEsS0FDaEJBLFFBQVEsUUFBUyxLQUNqQkEsUUFBUSxPQUFRLEtBQ2hCQSxRQUFRLFFBQVMsS0FDakJBLFFBQVEsUUFBUyxLQVVyQjdFLEVBQU9ELFFBQVUsU0FBa0IwM0MsRUFBSzE0QixFQUFRMjRCLEdBRTlDLElBQUszNEIsRUFDSCxPQUFPMDRCLEVBR1QsSUFBSUUsRUFDSixHQUFJRCxFQUNGQyxFQUFtQkQsRUFBaUIzNEIsUUFDL0IsR0FBSXc0QixFQUFNNXpDLGtCQUFrQm9iLEdBQ2pDNDRCLEVBQW1CNTRCLEVBQU81YyxlQUNyQixDQUNMLElBQUk4RSxFQUFRLEdBRVpzd0MsRUFBTS8wQyxRQUFRdWMsRUFBUSxTQUFtQjFjLEVBQUtiLEdBQ3hDYSxVQUlBazFDLEVBQU1uMUMsUUFBUUMsR0FDaEJiLEdBQVksS0FFWmEsRUFBTSxDQUFDQSxHQUdUazFDLEVBQU0vMEMsUUFBUUgsRUFBSyxTQUFvQnlJLEdBQ2pDeXNDLEVBQU1qMEMsT0FBT3dILEdBQ2ZBLEVBQUlBLEVBQUU4c0MsY0FDR0wsRUFBTWoxQyxTQUFTd0ksS0FDeEJBLEVBQUluRixLQUFLQyxVQUFVa0YsSUFFckI3RCxFQUFNUixLQUFLK3dDLEVBQU9oMkMsR0FBTyxJQUFNZzJDLEVBQU8xc0MsU0FJMUM2c0MsRUFBbUIxd0MsRUFBTWQsS0FBSyxLQUdoQyxHQUFJd3hDLEVBQWtCLENBQ3BCLElBQUlFLEVBQWdCSixFQUFJbnJDLFFBQVEsTUFDVCxJQUFuQnVyQyxJQUNGSixFQUFNQSxFQUFJeHFDLE1BQU0sRUFBRzRxQyxJQUdyQkosS0FBOEIsSUFBdEJBLEVBQUluckMsUUFBUSxLQUFjLElBQU0sS0FBT3FyQyxFQUdqRCxPQUFPRixpQ0NuRVR6M0MsRUFBT0QsUUFBVSxTQUFrQm1CLEdBQ2pDLFNBQVVBLElBQVNBLEVBQU00MkMsNENDSDNCLFNBQUF0b0MsR0FFQSxJQUFJK25DLEVBQVF0MUMsRUFBUSxHQUNoQjgxQyxFQUFzQjkxQyxFQUFRLElBRTlCKzFDLEVBQXVCLENBQ3pCQyxlQUFnQixxQ0FHbEIsU0FBU0MsRUFBc0JDLEVBQVNqM0MsSUFDakNxMkMsRUFBTWwwQyxZQUFZODBDLElBQVlaLEVBQU1sMEMsWUFBWTgwQyxFQUFRLG1CQUMzREEsRUFBUSxnQkFBa0JqM0MsR0FpQjlCLElBWk1rM0MsRUFZRkMsRUFBVyxDQUNiRCxjQVh1QixJQUFaNW9DLEdBQXVFLHFCQUE1QzdPLE9BQU9rQixVQUFVTSxTQUFTL0IsS0FBS29QLEdBRW5FNG9DLEVBQVVuMkMsRUFBUSxJQUNpQixvQkFBbkJxMkMsaUJBRWhCRixFQUFVbjJDLEVBQVEsS0FFYm0yQyxHQU1QRyxpQkFBa0IsQ0FBQyxTQUEwQjF5QyxFQUFNc3lDLEdBR2pELE9BRkFKLEVBQW9CSSxFQUFTLFVBQzdCSixFQUFvQkksRUFBUyxnQkFDekJaLEVBQU0xMEMsV0FBV2dELElBQ25CMHhDLEVBQU0zMEMsY0FBY2lELElBQ3BCMHhDLEVBQU1yMUMsU0FBUzJELElBQ2YweEMsRUFBTTl6QyxTQUFTb0MsSUFDZjB4QyxFQUFNaDBDLE9BQU9zQyxJQUNiMHhDLEVBQU0vekMsT0FBT3FDLEdBRU5BLEVBRUwweEMsRUFBTXgwQyxrQkFBa0I4QyxHQUNuQkEsRUFBSzNDLE9BRVZxMEMsRUFBTTV6QyxrQkFBa0JrQyxJQUMxQnF5QyxFQUFzQkMsRUFBUyxtREFDeEJ0eUMsRUFBSzFELFlBRVZvMUMsRUFBTWoxQyxTQUFTdUQsSUFDakJxeUMsRUFBc0JDLEVBQVMsa0NBQ3hCeHlDLEtBQUtDLFVBQVVDLElBRWpCQSxJQUdUMnlDLGtCQUFtQixDQUFDLFNBQTJCM3lDLEdBRTdDLEdBQW9CLGlCQUFUQSxFQUNULElBQ0VBLEVBQU9GLEtBQUs4eUMsTUFBTTV5QyxHQUNsQixNQUFPMkksSUFFWCxPQUFPM0ksSUFPVG9sQixRQUFTLEVBRVR5dEIsZUFBZ0IsYUFDaEJDLGVBQWdCLGVBRWhCQyxrQkFBbUIsRUFFbkJDLGVBQWdCLFNBQXdCQyxHQUN0QyxPQUFPQSxHQUFVLEtBQU9BLEVBQVMsTUFJckNULEVBQVNGLFFBQVUsQ0FDakJZLE9BQVEsQ0FDTkMsT0FBVSxzQ0FJZHpCLEVBQU0vMEMsUUFBUSxDQUFDLFNBQVUsTUFBTyxRQUFTLFNBQTZCdVQsR0FDcEVzaUMsRUFBU0YsUUFBUXBpQyxHQUFVLEtBRzdCd2hDLEVBQU0vMEMsUUFBUSxDQUFDLE9BQVEsTUFBTyxTQUFVLFNBQStCdVQsR0FDckVzaUMsRUFBU0YsUUFBUXBpQyxHQUFVd2hDLEVBQU1yekMsTUFBTTh6QyxLQUd6Q2g0QyxFQUFPRCxRQUFVczRDLG9DQ2hHakIsSUFPSVksRUFDQUMsRUFSQTFwQyxFQUFVeFAsRUFBT0QsUUFBVSxHQVUvQixTQUFTbzVDLElBQ0wsTUFBTSxJQUFJN3hDLE1BQU0sbUNBRXBCLFNBQVM4eEMsSUFDTCxNQUFNLElBQUk5eEMsTUFBTSxxQ0FzQnBCLFNBQVMreEMsRUFBV0MsR0FDaEIsR0FBSUwsSUFBcUJqOEIsV0FFckIsT0FBT0EsV0FBV3M4QixFQUFLLEdBRzNCLElBQUtMLElBQXFCRSxJQUFxQkYsSUFBcUJqOEIsV0FFaEUsT0FEQWk4QixFQUFtQmo4QixXQUNaQSxXQUFXczhCLEVBQUssR0FFM0IsSUFFSSxPQUFPTCxFQUFpQkssRUFBSyxHQUMvQixNQUFNOXFDLEdBQ0osSUFFSSxPQUFPeXFDLEVBQWlCNzRDLEtBQUssS0FBTWs1QyxFQUFLLEdBQzFDLE1BQU05cUMsR0FFSixPQUFPeXFDLEVBQWlCNzRDLEtBQUs0RSxLQUFNczBDLEVBQUssTUF2Q25ELFdBQ0csSUFFUUwsRUFEc0IsbUJBQWZqOEIsV0FDWUEsV0FFQW04QixFQUV6QixNQUFPM3FDLEdBQ0x5cUMsRUFBbUJFLEVBRXZCLElBRVFELEVBRHdCLG1CQUFqQnZ1QixhQUNjQSxhQUVBeXVCLEVBRTNCLE1BQU81cUMsR0FDTDBxQyxFQUFxQkUsR0FqQjVCLEdBd0VELElBRUlHLEVBRkExckIsRUFBUSxHQUNSMnJCLEdBQVcsRUFFWEMsR0FBYyxFQUVsQixTQUFTQyxJQUNBRixHQUFhRCxJQUdsQkMsR0FBVyxFQUNQRCxFQUFhNTJDLE9BQ2JrckIsRUFBUTByQixFQUFhenpDLE9BQU8rbkIsR0FFNUI0ckIsR0FBYyxFQUVkNXJCLEVBQU1sckIsUUFDTmczQyxLQUlSLFNBQVNBLElBQ0wsSUFBSUgsRUFBSixDQUdBLElBQUl2dUIsRUFBVW91QixFQUFXSyxHQUN6QkYsR0FBVyxFQUdYLElBREEsSUFBSXRqQyxFQUFNMlgsRUFBTWxyQixPQUNWdVQsR0FBSyxDQUdQLElBRkFxakMsRUFBZTFyQixFQUNmQSxFQUFRLEtBQ0M0ckIsRUFBYXZqQyxHQUNkcWpDLEdBQ0FBLEVBQWFFLEdBQVlockIsTUFHakNnckIsR0FBYyxFQUNkdmpDLEVBQU0yWCxFQUFNbHJCLE9BRWhCNDJDLEVBQWUsS0FDZkMsR0FBVyxFQW5FZixTQUF5QkksR0FDckIsR0FBSVYsSUFBdUJ2dUIsYUFFdkIsT0FBT0EsYUFBYWl2QixHQUd4QixJQUFLVixJQUF1QkUsSUFBd0JGLElBQXVCdnVCLGFBRXZFLE9BREF1dUIsRUFBcUJ2dUIsYUFDZEEsYUFBYWl2QixHQUV4QixJQUVXVixFQUFtQlUsR0FDNUIsTUFBT3ByQyxHQUNMLElBRUksT0FBTzBxQyxFQUFtQjk0QyxLQUFLLEtBQU13NUMsR0FDdkMsTUFBT3ByQyxHQUdMLE9BQU8wcUMsRUFBbUI5NEMsS0FBSzRFLEtBQU00MEMsS0FnRDdDQyxDQUFnQjV1QixJQWlCcEIsU0FBUzZ1QixFQUFLUixFQUFLUyxHQUNmLzBDLEtBQUtzMEMsSUFBTUEsRUFDWHQwQyxLQUFLKzBDLE1BQVFBLEVBWWpCLFNBQVNseUMsS0E1QlQySCxFQUFROE4sU0FBVyxTQUFVZzhCLEdBQ3pCLElBQUlyakMsRUFBTyxJQUFJbkssTUFBTXpILFVBQVUxQixPQUFTLEdBQ3hDLEdBQUkwQixVQUFVMUIsT0FBUyxFQUNuQixJQUFLLElBQUkxQyxFQUFJLEVBQUdBLEVBQUlvRSxVQUFVMUIsT0FBUTFDLElBQ2xDZ1csRUFBS2hXLEVBQUksR0FBS29FLFVBQVVwRSxHQUdoQzR0QixFQUFNcG5CLEtBQUssSUFBSXF6QyxFQUFLUixFQUFLcmpDLElBQ0osSUFBakI0WCxFQUFNbHJCLFFBQWlCNjJDLEdBQ3ZCSCxFQUFXTSxJQVNuQkcsRUFBS2o0QyxVQUFVNHNCLElBQU0sV0FDakJ6cEIsS0FBS3MwQyxJQUFJL3JDLE1BQU0sS0FBTXZJLEtBQUsrMEMsUUFFOUJ2cUMsRUFBUXdxQyxNQUFRLFVBQ2hCeHFDLEVBQVF5cUMsU0FBVSxFQUNsQnpxQyxFQUFRMEMsSUFBTSxHQUNkMUMsRUFBUTBxQyxLQUFPLEdBQ2YxcUMsRUFBUTJvQixRQUFVLEdBQ2xCM29CLEVBQVEycUMsU0FBVyxHQUluQjNxQyxFQUFRaVAsR0FBSzVXLEVBQ2IySCxFQUFRNHFDLFlBQWN2eUMsRUFDdEIySCxFQUFRVCxLQUFPbEgsRUFDZjJILEVBQVE2cUMsSUFBTXh5QyxFQUNkMkgsRUFBUThxQyxlQUFpQnp5QyxFQUN6QjJILEVBQVErcUMsbUJBQXFCMXlDLEVBQzdCMkgsRUFBUXVmLEtBQU9sbkIsRUFDZjJILEVBQVFnckMsZ0JBQWtCM3lDLEVBQzFCMkgsRUFBUWlyQyxvQkFBc0I1eUMsRUFFOUIySCxFQUFRMlcsVUFBWSxTQUFVM2xCLEdBQVEsTUFBTyxJQUU3Q2dQLEVBQVE2N0IsUUFBVSxTQUFVN3FDLEdBQ3hCLE1BQU0sSUFBSThHLE1BQU0scUNBR3BCa0ksRUFBUWtyQyxJQUFNLFdBQWMsTUFBTyxLQUNuQ2xyQyxFQUFRbXJDLE1BQVEsU0FBVW5mLEdBQ3RCLE1BQU0sSUFBSWwwQixNQUFNLG1DQUVwQmtJLEVBQVFvckMsTUFBUSxXQUFhLE9BQU8saUNDckxwQyxJQUFJckQsRUFBUXQxQyxFQUFRLEdBQ2hCNDRDLEVBQVM1NEMsRUFBUSxJQUNqQjY0QyxFQUFXNzRDLEVBQVEsSUFDbkI4NEMsRUFBZTk0QyxFQUFRLElBQ3ZCKzRDLEVBQWtCLzRDLEVBQVEsSUFDMUJnNUMsRUFBY2g1QyxFQUFRLElBRTFCakMsRUFBT0QsUUFBVSxTQUFvQnFQLEdBQ25DLE9BQU8sSUFBSTBOLFFBQVEsU0FBNEJDLEVBQVM4TixHQUN0RCxJQUFJcXdCLEVBQWM5ckMsRUFBT3ZKLEtBQ3JCczFDLEVBQWlCL3JDLEVBQU8rb0MsUUFFeEJaLEVBQU0xMEMsV0FBV3E0QyxXQUNaQyxFQUFlLGdCQUd4QixJQUFJQyxFQUFVLElBQUk5QyxlQUdsQixHQUFJbHBDLEVBQU9pc0MsS0FBTSxDQUNmLElBQUlDLEVBQVdsc0MsRUFBT2lzQyxLQUFLQyxVQUFZLEdBQ25DQyxFQUFXbnNDLEVBQU9pc0MsS0FBS0UsVUFBWSxHQUN2Q0osRUFBZUssY0FBZ0IsU0FBV24yQyxLQUFLaTJDLEVBQVcsSUFBTUMsR0EwRWxFLEdBdkVBSCxFQUFRSyxLQUFLcnNDLEVBQU8yRyxPQUFPakosY0FBZWd1QyxFQUFTMXJDLEVBQU9xb0MsSUFBS3JvQyxFQUFPMlAsT0FBUTNQLEVBQU9zb0MsbUJBQW1CLEdBR3hHMEQsRUFBUW53QixRQUFVN2IsRUFBTzZiLFFBR3pCbXdCLEVBQVFNLG1CQUFxQixXQUMzQixHQUFLTixHQUFrQyxJQUF2QkEsRUFBUU8sYUFRRCxJQUFuQlAsRUFBUXRDLFFBQWtCc0MsRUFBUVEsYUFBd0QsSUFBekNSLEVBQVFRLFlBQVl0dkMsUUFBUSxVQUFqRixDQUtBLElBQUl1dkMsRUFBa0IsMEJBQTJCVCxFQUFVTCxFQUFhSyxFQUFRVSx5QkFBMkIsS0FFdkdDLEVBQVcsQ0FDYmwyQyxLQUZrQnVKLEVBQU80c0MsY0FBd0MsU0FBeEI1c0MsRUFBTzRzQyxhQUFpRFosRUFBUVcsU0FBL0JYLEVBQVFhLGFBR2xGbkQsT0FBUXNDLEVBQVF0QyxPQUNoQm9ELFdBQVlkLEVBQVFjLFdBQ3BCL0QsUUFBUzBELEVBQ1R6c0MsT0FBUUEsRUFDUmdzQyxRQUFTQSxHQUdYUCxFQUFPOTlCLEVBQVM4TixFQUFRa3hCLEdBR3hCWCxFQUFVLE9BSVpBLEVBQVFlLFFBQVUsV0FDWGYsSUFJTHZ3QixFQUFPb3dCLEVBQVksa0JBQW1CN3JDLEVBQVEsZUFBZ0Jnc0MsSUFHOURBLEVBQVUsT0FJWkEsRUFBUWdCLFFBQVUsV0FHaEJ2eEIsRUFBT293QixFQUFZLGdCQUFpQjdyQyxFQUFRLEtBQU1nc0MsSUFHbERBLEVBQVUsTUFJWkEsRUFBUWlCLFVBQVksV0FDbEJ4eEIsRUFBT293QixFQUFZLGNBQWdCN3JDLEVBQU82YixRQUFVLGNBQWU3YixFQUFRLGVBQ3pFZ3NDLElBR0ZBLEVBQVUsTUFNUjdELEVBQU0xekMsdUJBQXdCLENBQ2hDLElBQUl5NEMsRUFBVXI2QyxFQUFRLElBR2xCczZDLEdBQWFudEMsRUFBT290QyxpQkFBbUJ4QixFQUFnQjVyQyxFQUFPcW9DLE9BQVNyb0MsRUFBT3NwQyxlQUNoRjRELEVBQVFHLEtBQUtydEMsRUFBT3NwQyxxQkFDcEJ6bUMsRUFFRXNxQyxJQUNGcEIsRUFBZS9yQyxFQUFPdXBDLGdCQUFrQjRELEdBdUI1QyxHQWxCSSxxQkFBc0JuQixHQUN4QjdELEVBQU0vMEMsUUFBUTI0QyxFQUFnQixTQUEwQjk0QyxFQUFLYixRQUNoQyxJQUFoQjA1QyxHQUFxRCxpQkFBdEIxNUMsRUFBSTJHLHFCQUVyQ2d6QyxFQUFlMzVDLEdBR3RCNDVDLEVBQVFzQixpQkFBaUJsN0MsRUFBS2EsS0FNaEMrTSxFQUFPb3RDLGtCQUNUcEIsRUFBUW9CLGlCQUFrQixHQUl4QnB0QyxFQUFPNHNDLGFBQ1QsSUFDRVosRUFBUVksYUFBZTVzQyxFQUFPNHNDLGFBQzlCLE1BQU94dEMsR0FHUCxHQUE0QixTQUF4QlksRUFBTzRzQyxhQUNULE1BQU14dEMsRUFNNkIsbUJBQTlCWSxFQUFPdXRDLG9CQUNoQnZCLEVBQVFycEMsaUJBQWlCLFdBQVkzQyxFQUFPdXRDLG9CQUlQLG1CQUE1QnZ0QyxFQUFPd3RDLGtCQUFtQ3hCLEVBQVF5QixRQUMzRHpCLEVBQVF5QixPQUFPOXFDLGlCQUFpQixXQUFZM0MsRUFBT3d0QyxrQkFHakR4dEMsRUFBTzB0QyxhQUVUMXRDLEVBQU8wdEMsWUFBWUMsUUFBUW54QyxLQUFLLFNBQW9Cb3hDLEdBQzdDNUIsSUFJTEEsRUFBUTZCLFFBQ1JweUIsRUFBT215QixHQUVQNUIsRUFBVSxhQUlNbnBDLElBQWhCaXBDLElBQ0ZBLEVBQWMsTUFJaEJFLEVBQVE4QixLQUFLaEMsb0NDektqQixJQUFJaUMsRUFBZWw3QyxFQUFRLElBWTNCakMsRUFBT0QsUUFBVSxTQUFxQnE5QyxFQUFTaHVDLEVBQVFpdUMsRUFBTWpDLEVBQVNXLEdBQ3BFLElBQUl4L0IsRUFBUSxJQUFJalYsTUFBTTgxQyxHQUN0QixPQUFPRCxFQUFhNWdDLEVBQU9uTixFQUFRaXVDLEVBQU1qQyxFQUFTVyxrQ0NkcEQsSUFBSXhFLEVBQVF0MUMsRUFBUSxHQVVwQmpDLEVBQU9ELFFBQVUsU0FBcUJ1OUMsRUFBU0MsR0FFN0NBLEVBQVVBLEdBQVcsR0FDckIsSUFBSW51QyxFQUFTLEdBa0NiLE9BaENBbW9DLEVBQU0vMEMsUUFBUSxDQUFDLE1BQU8sU0FBVSxTQUFVLFFBQVMsU0FBMEJzWSxRQUM5QyxJQUFsQnlpQyxFQUFRemlDLEtBQ2pCMUwsRUFBTzBMLEdBQVF5aUMsRUFBUXppQyxNQUkzQnk4QixFQUFNLzBDLFFBQVEsQ0FBQyxVQUFXLE9BQVEsU0FBVSxTQUE2QnNZLEdBQ25FeThCLEVBQU1qMUMsU0FBU2k3QyxFQUFRemlDLElBQ3pCMUwsRUFBTzBMLEdBQVF5OEIsRUFBTWp6QyxVQUFVZzVDLEVBQVF4aUMsR0FBT3lpQyxFQUFRemlDLFNBQ3BCLElBQWxCeWlDLEVBQVF6aUMsR0FDeEIxTCxFQUFPMEwsR0FBUXlpQyxFQUFRemlDLEdBQ2R5OEIsRUFBTWoxQyxTQUFTZzdDLEVBQVF4aUMsSUFDaEMxTCxFQUFPMEwsR0FBUXk4QixFQUFNanpDLFVBQVVnNUMsRUFBUXhpQyxTQUNMLElBQWxCd2lDLEVBQVF4aUMsS0FDeEIxTCxFQUFPMEwsR0FBUXdpQyxFQUFReGlDLE1BSTNCeThCLEVBQU0vMEMsUUFBUSxDQUNaLFVBQVcsbUJBQW9CLG9CQUFxQixtQkFDcEQsVUFBVyxrQkFBbUIsVUFBVyxlQUFnQixpQkFDekQsaUJBQWtCLG1CQUFvQixxQkFBc0IsbUJBQzVELGlCQUFrQixlQUFnQixZQUFhLGFBQWMsY0FDN0QsY0FDQyxTQUEwQnNZLFFBQ0UsSUFBbEJ5aUMsRUFBUXppQyxHQUNqQjFMLEVBQU8wTCxHQUFReWlDLEVBQVF6aUMsUUFDVyxJQUFsQndpQyxFQUFReGlDLEtBQ3hCMUwsRUFBTzBMLEdBQVF3aUMsRUFBUXhpQyxNQUlwQjFMLGlDQ3pDVCxTQUFTb3VDLEVBQU9KLEdBQ2RwNEMsS0FBS280QyxRQUFVQSxFQUdqQkksRUFBTzM3QyxVQUFVTSxTQUFXLFdBQzFCLE1BQU8sVUFBWTZDLEtBQUtvNEMsUUFBVSxLQUFPcDRDLEtBQUtvNEMsUUFBVSxLQUcxREksRUFBTzM3QyxVQUFVaTJDLFlBQWEsRUFFOUI5M0MsRUFBT0QsUUFBVXk5QyxtQkNsQmpCeDlDLEVBQUFELFFBQWlCRixFQUFBa0MsRUFBdUIsd0RDQXhDL0IsRUFBQUQsUUFBaUJGLEVBQUFrQyxFQUF1Qix3RENBeEMvQixFQUFBRCxRQUFpQkYsRUFBQWtDLEVBQXVCLHFFQ0V4QyxJQUFJdzFDLEVBQVF0MUMsRUFBUSxHQUNoQlIsRUFBT1EsRUFBUSxJQUNmdzdDLEVBQVF4N0MsRUFBUSxJQUNoQnk3QyxFQUFjejdDLEVBQVEsSUFTMUIsU0FBUzA3QyxFQUFlQyxHQUN0QixJQUFJeHBDLEVBQVUsSUFBSXFwQyxFQUFNRyxHQUNwQkMsRUFBV3A4QyxFQUFLZzhDLEVBQU01N0MsVUFBVXU1QyxRQUFTaG5DLEdBUTdDLE9BTEFtakMsRUFBTWh6QyxPQUFPczVDLEVBQVVKLEVBQU01N0MsVUFBV3VTLEdBR3hDbWpDLEVBQU1oekMsT0FBT3M1QyxFQUFVenBDLEdBRWhCeXBDLEVBSVQsSUFBSUMsRUFBUUgsRUF0QkcxN0MsRUFBUSxLQXlCdkI2N0MsRUFBTUwsTUFBUUEsRUFHZEssRUFBTXY4QyxPQUFTLFNBQWdCdzhDLEdBQzdCLE9BQU9KLEVBQWVELEVBQVlJLEVBQU16RixTQUFVMEYsS0FJcERELEVBQU1OLE9BQVN2N0MsRUFBUSxJQUN2QjY3QyxFQUFNRSxZQUFjLzdDLEVBQVEsSUFDNUI2N0MsRUFBTUcsU0FBV2g4QyxFQUFRLElBR3pCNjdDLEVBQU01SCxJQUFNLFNBQWFnSSxHQUN2QixPQUFPcGhDLFFBQVFvNUIsSUFBSWdJLElBRXJCSixFQUFNSyxPQUFTbDhDLEVBQVEsSUFFdkJqQyxFQUFPRCxRQUFVKzlDLEVBR2pCOTlDLEVBQU9ELFFBQVFvYixRQUFVMmlDOzs7Ozs7O0FDN0N6Qjk5QyxFQUFPRCxRQUFVLFNBQW1CMEMsR0FDbEMsT0FBYyxNQUFQQSxHQUFrQyxNQUFuQkEsRUFBSTB3QixhQUNZLG1CQUE3QjF3QixFQUFJMHdCLFlBQVlqeEIsVUFBMkJPLEVBQUkwd0IsWUFBWWp4QixTQUFTTyxrQ0NQL0UsSUFBSTgwQyxFQUFRdDFDLEVBQVEsR0FDaEI2NEMsRUFBVzc0QyxFQUFRLElBQ25CbThDLEVBQXFCbjhDLEVBQVEsSUFDN0JvOEMsRUFBa0JwOEMsRUFBUSxJQUMxQnk3QyxFQUFjejdDLEVBQVEsSUFPMUIsU0FBU3c3QyxFQUFNTSxHQUNiLzRDLEtBQUtxekMsU0FBVzBGLEVBQ2hCLzRDLEtBQUtzNUMsYUFBZSxDQUNsQmxELFFBQVMsSUFBSWdELEVBQ2JyQyxTQUFVLElBQUlxQyxHQVNsQlgsRUFBTTU3QyxVQUFVdTVDLFFBQVUsU0FBaUJoc0MsR0FHbkIsaUJBQVhBLEdBQ1RBLEVBQVMvSyxVQUFVLElBQU0sSUFDbEJvekMsSUFBTXB6QyxVQUFVLEdBRXZCK0ssRUFBU0EsR0FBVSxJQUdyQkEsRUFBU3N1QyxFQUFZMTRDLEtBQUtxekMsU0FBVWpwQyxJQUM3QjJHLE9BQVMzRyxFQUFPMkcsT0FBUzNHLEVBQU8yRyxPQUFPNU4sY0FBZ0IsTUFHOUQsSUFBSW8yQyxFQUFRLENBQUNGLE9BQWlCcHNDLEdBQzFCOHFDLEVBQVVqZ0MsUUFBUUMsUUFBUTNOLEdBVTlCLElBUkFwSyxLQUFLczVDLGFBQWFsRCxRQUFRNTRDLFFBQVEsU0FBb0NnOEMsR0FDcEVELEVBQU01bUIsUUFBUTZtQixFQUFZQyxVQUFXRCxFQUFZRSxZQUduRDE1QyxLQUFLczVDLGFBQWF2QyxTQUFTdjVDLFFBQVEsU0FBa0NnOEMsR0FDbkVELEVBQU05M0MsS0FBSyszQyxFQUFZQyxVQUFXRCxFQUFZRSxZQUd6Q0gsRUFBTTU3QyxRQUNYbzZDLEVBQVVBLEVBQVFueEMsS0FBSzJ5QyxFQUFNeCtCLFFBQVN3K0IsRUFBTXgrQixTQUc5QyxPQUFPZzlCLEdBR1RVLEVBQU01N0MsVUFBVTg4QyxPQUFTLFNBQWdCdnZDLEdBRXZDLE9BREFBLEVBQVNzdUMsRUFBWTE0QyxLQUFLcXpDLFNBQVVqcEMsR0FDN0IwckMsRUFBUzFyQyxFQUFPcW9DLElBQUtyb0MsRUFBTzJQLE9BQVEzUCxFQUFPc29DLGtCQUFrQjd5QyxRQUFRLE1BQU8sS0FJckYweUMsRUFBTS8wQyxRQUFRLENBQUMsU0FBVSxNQUFPLE9BQVEsV0FBWSxTQUE2QnVULEdBRS9FMG5DLEVBQU01N0MsVUFBVWtVLEdBQVUsU0FBUzBoQyxFQUFLcm9DLEdBQ3RDLE9BQU9wSyxLQUFLbzJDLFFBQVE3RCxFQUFNcnpDLE1BQU1rTCxHQUFVLEdBQUksQ0FDNUMyRyxPQUFRQSxFQUNSMGhDLElBQUtBLFFBS1hGLEVBQU0vMEMsUUFBUSxDQUFDLE9BQVEsTUFBTyxTQUFVLFNBQStCdVQsR0FFckUwbkMsRUFBTTU3QyxVQUFVa1UsR0FBVSxTQUFTMGhDLEVBQUs1eEMsRUFBTXVKLEdBQzVDLE9BQU9wSyxLQUFLbzJDLFFBQVE3RCxFQUFNcnpDLE1BQU1rTCxHQUFVLEdBQUksQ0FDNUMyRyxPQUFRQSxFQUNSMGhDLElBQUtBLEVBQ0w1eEMsS0FBTUEsUUFLWjdGLEVBQU9ELFFBQVUwOUMsZ0NDbkZqQixJQUFJbEcsRUFBUXQxQyxFQUFRLEdBRXBCLFNBQVNtOEMsSUFDUHA1QyxLQUFLMG9CLFNBQVcsR0FXbEIwd0IsRUFBbUJ2OEMsVUFBVTJ4QixJQUFNLFNBQWFpckIsRUFBV0MsR0FLekQsT0FKQTE1QyxLQUFLMG9CLFNBQVNqbkIsS0FBSyxDQUNqQmc0QyxVQUFXQSxFQUNYQyxTQUFVQSxJQUVMMTVDLEtBQUswb0IsU0FBUy9xQixPQUFTLEdBUWhDeTdDLEVBQW1CdjhDLFVBQVUrOEMsTUFBUSxTQUFlcjRDLEdBQzlDdkIsS0FBSzBvQixTQUFTbm5CLEtBQ2hCdkIsS0FBSzBvQixTQUFTbm5CLEdBQU0sT0FZeEI2M0MsRUFBbUJ2OEMsVUFBVVcsUUFBVSxTQUFpQkUsR0FDdEQ2MEMsRUFBTS8wQyxRQUFRd0MsS0FBSzBvQixTQUFVLFNBQXdCd2YsR0FDekMsT0FBTkEsR0FDRnhxQyxFQUFHd3FDLE1BS1RsdEMsRUFBT0QsUUFBVXErQyxnQ0NqRGpCLElBQUk3RyxFQUFRdDFDLEVBQVEsR0FDaEI0OEMsRUFBZ0I1OEMsRUFBUSxJQUN4Qmc4QyxFQUFXaDhDLEVBQVEsSUFDbkJvMkMsRUFBV3AyQyxFQUFRLElBQ25CNjhDLEVBQWdCNzhDLEVBQVEsSUFDeEI4OEMsRUFBYzk4QyxFQUFRLElBSzFCLFNBQVMrOEMsRUFBNkI1dkMsR0FDaENBLEVBQU8wdEMsYUFDVDF0QyxFQUFPMHRDLFlBQVltQyxtQkFVdkJqL0MsRUFBT0QsUUFBVSxTQUF5QnFQLEdBa0N4QyxPQWpDQTR2QyxFQUE2QjV2QyxHQUd6QkEsRUFBTzh2QyxVQUFZSixFQUFjMXZDLEVBQU9xb0MsT0FDMUNyb0MsRUFBT3FvQyxJQUFNc0gsRUFBWTN2QyxFQUFPOHZDLFFBQVM5dkMsRUFBT3FvQyxNQUlsRHJvQyxFQUFPK29DLFFBQVUvb0MsRUFBTytvQyxTQUFXLEdBR25DL29DLEVBQU92SixLQUFPZzVDLEVBQ1p6dkMsRUFBT3ZKLEtBQ1B1SixFQUFPK29DLFFBQ1Avb0MsRUFBT21wQyxrQkFJVG5wQyxFQUFPK29DLFFBQVVaLEVBQU1yekMsTUFDckJrTCxFQUFPK29DLFFBQVFZLFFBQVUsR0FDekIzcEMsRUFBTytvQyxRQUFRL29DLEVBQU8yRyxTQUFXLEdBQ2pDM0csRUFBTytvQyxTQUFXLElBR3BCWixFQUFNLzBDLFFBQ0osQ0FBQyxTQUFVLE1BQU8sT0FBUSxPQUFRLE1BQU8sUUFBUyxVQUNsRCxTQUEyQnVULFVBQ2xCM0csRUFBTytvQyxRQUFRcGlDLE1BSVozRyxFQUFPZ3BDLFNBQVdDLEVBQVNELFNBRTFCaHBDLEdBQVF4RCxLQUFLLFNBQTZCbXdDLEdBVXZELE9BVEFpRCxFQUE2QjV2QyxHQUc3QjJzQyxFQUFTbDJDLEtBQU9nNUMsRUFDZDlDLEVBQVNsMkMsS0FDVGsyQyxFQUFTNUQsUUFDVC9vQyxFQUFPb3BDLG1CQUdGdUQsR0FDTixTQUE0Qmp4QixHQWM3QixPQWJLbXpCLEVBQVNuekIsS0FDWmswQixFQUE2QjV2QyxHQUd6QjBiLEdBQVVBLEVBQU9peEIsV0FDbkJqeEIsRUFBT2l4QixTQUFTbDJDLEtBQU9nNUMsRUFDckIvekIsRUFBT2l4QixTQUFTbDJDLEtBQ2hCaWxCLEVBQU9peEIsU0FBUzVELFFBQ2hCL29DLEVBQU9vcEMscUJBS04xN0IsUUFBUStOLE9BQU9DLG9DQ2pGMUIsSUFBSXlzQixFQUFRdDFDLEVBQVEsR0FVcEJqQyxFQUFPRCxRQUFVLFNBQXVCOEYsRUFBTXN5QyxFQUFTOTVCLEdBTXJELE9BSkFrNUIsRUFBTS8wQyxRQUFRNmIsRUFBSyxTQUFtQjNiLEdBQ3BDbUQsRUFBT25ELEVBQUdtRCxFQUFNc3lDLEtBR1h0eUMsaUNDaEJULElBQUkweEMsRUFBUXQxQyxFQUFRLEdBRXBCakMsRUFBT0QsUUFBVSxTQUE2Qm80QyxFQUFTN1gsR0FDckRpWCxFQUFNLzBDLFFBQVEyMUMsRUFBUyxTQUF1QmozQyxFQUFPVixHQUMvQ0EsSUFBUzgvQixHQUFrQjkvQixFQUFLc00sZ0JBQWtCd3pCLEVBQWV4ekIsZ0JBQ25FcXJDLEVBQVE3WCxHQUFrQnAvQixTQUNuQmkzQyxFQUFRMzNDLHFDQ05yQixJQUFJeTZDLEVBQWNoNUMsRUFBUSxJQVMxQmpDLEVBQU9ELFFBQVUsU0FBZ0JnZCxFQUFTOE4sRUFBUWt4QixHQUNoRCxJQUFJbEQsRUFBaUJrRCxFQUFTM3NDLE9BQU95cEMsZ0JBQ2hDQSxHQUFrQkEsRUFBZWtELEVBQVNqRCxRQUM3Qy83QixFQUFRZy9CLEdBRVJseEIsRUFBT293QixFQUNMLG1DQUFxQ2MsRUFBU2pELE9BQzlDaUQsRUFBUzNzQyxPQUNULEtBQ0Eyc0MsRUFBU1gsUUFDVFcsbUNDVE4vN0MsRUFBT0QsUUFBVSxTQUFzQndjLEVBQU9uTixFQUFRaXVDLEVBQU1qQyxFQUFTVyxHQTRCbkUsT0EzQkF4L0IsRUFBTW5OLE9BQVNBLEVBQ1hpdUMsSUFDRjlnQyxFQUFNOGdDLEtBQU9BLEdBR2Y5Z0MsRUFBTTYrQixRQUFVQSxFQUNoQjcrQixFQUFNdy9CLFNBQVdBLEVBQ2pCeC9CLEVBQU00aUMsY0FBZSxFQUVyQjVpQyxFQUFNNmlDLE9BQVMsV0FDYixNQUFPLENBRUxoQyxRQUFTcDRDLEtBQUtvNEMsUUFDZDU4QyxLQUFNd0UsS0FBS3hFLEtBRVg2K0MsWUFBYXI2QyxLQUFLcTZDLFlBQ2xCNWYsT0FBUXo2QixLQUFLeTZCLE9BRWI2ZixTQUFVdDZDLEtBQUtzNkMsU0FDZkMsV0FBWXY2QyxLQUFLdTZDLFdBQ2pCQyxhQUFjeDZDLEtBQUt3NkMsYUFDbkJDLE1BQU96NkMsS0FBS3k2QyxNQUVacndDLE9BQVFwSyxLQUFLb0ssT0FDYml1QyxLQUFNcjRDLEtBQUtxNEMsT0FHUjlnQyxpQ0N0Q1QsSUFBSWc3QixFQUFRdDFDLEVBQVEsR0FJaEJ5OUMsRUFBb0IsQ0FDdEIsTUFBTyxnQkFBaUIsaUJBQWtCLGVBQWdCLE9BQzFELFVBQVcsT0FBUSxPQUFRLG9CQUFxQixzQkFDaEQsZ0JBQWlCLFdBQVksZUFBZ0Isc0JBQzdDLFVBQVcsY0FBZSxjQWdCNUIxL0MsRUFBT0QsUUFBVSxTQUFzQm80QyxHQUNyQyxJQUNJMzJDLEVBQ0FhLEVBQ0FwQyxFQUhBMC9DLEVBQVMsR0FLYixPQUFLeEgsR0FFTFosRUFBTS8wQyxRQUFRMjFDLEVBQVFoc0MsTUFBTSxNQUFPLFNBQWdCeXpDLEdBS2pELEdBSkEzL0MsRUFBSTIvQyxFQUFLdHpDLFFBQVEsS0FDakI5SyxFQUFNKzFDLEVBQU01eUMsS0FBS2k3QyxFQUFLQyxPQUFPLEVBQUc1L0MsSUFBSWtJLGNBQ3BDOUYsRUFBTWsxQyxFQUFNNXlDLEtBQUtpN0MsRUFBS0MsT0FBTzUvQyxFQUFJLElBRTdCdUIsRUFBSyxDQUNQLEdBQUltK0MsRUFBT24rQyxJQUFRaytDLEVBQWtCcHpDLFFBQVE5SyxJQUFRLEVBQ25ELE9BR0FtK0MsRUFBT24rQyxHQURHLGVBQVJBLEdBQ2FtK0MsRUFBT24rQyxHQUFPbStDLEVBQU9uK0MsR0FBTyxJQUFJc0UsT0FBTyxDQUFDekQsSUFFekNzOUMsRUFBT24rQyxHQUFPbStDLEVBQU9uK0MsR0FBTyxLQUFPYSxFQUFNQSxLQUt0RHM5QyxHQW5CZ0JBLGlDQzlCekIsSUFBSXBJLEVBQVF0MUMsRUFBUSxHQUVwQmpDLEVBQU9ELFFBQ0x3M0MsRUFBTTF6Qyx1QkFJSCxXQUNDLElBRUlpOEMsRUFGQUMsRUFBTyxrQkFBa0I5M0MsS0FBS25FLFVBQVVvRSxXQUN4QzgzQyxFQUFpQi83QyxTQUFTOEUsY0FBYyxLQVM1QyxTQUFTazNDLEVBQVd4SSxHQUNsQixJQUFJeUksRUFBT3pJLEVBV1gsT0FUSXNJLElBRUZDLEVBQWV2MkMsYUFBYSxPQUFReTJDLEdBQ3BDQSxFQUFPRixFQUFlRSxNQUd4QkYsRUFBZXYyQyxhQUFhLE9BQVF5MkMsR0FHN0IsQ0FDTEEsS0FBTUYsRUFBZUUsS0FDckJDLFNBQVVILEVBQWVHLFNBQVdILEVBQWVHLFNBQVN0N0MsUUFBUSxLQUFNLElBQU0sR0FDaEZ1N0MsS0FBTUosRUFBZUksS0FDckJDLE9BQVFMLEVBQWVLLE9BQVNMLEVBQWVLLE9BQU94N0MsUUFBUSxNQUFPLElBQU0sR0FDM0V5YSxLQUFNMGdDLEVBQWUxZ0MsS0FBTzBnQyxFQUFlMWdDLEtBQUt6YSxRQUFRLEtBQU0sSUFBTSxHQUNwRXk3QyxTQUFVTixFQUFlTSxTQUN6QkMsS0FBTVAsRUFBZU8sS0FDckJDLFNBQWlELE1BQXRDUixFQUFlUSxTQUFTeHpDLE9BQU8sR0FDeENnekMsRUFBZVEsU0FDZixJQUFNUixFQUFlUSxVQVkzQixPQVJBVixFQUFZRyxFQUFXajhDLE9BQU95OEMsU0FBU1AsTUFRaEMsU0FBeUJRLEdBQzlCLElBQUlmLEVBQVVwSSxFQUFNcDBDLFNBQVN1OUMsR0FBZVQsRUFBV1MsR0FBY0EsRUFDckUsT0FBUWYsRUFBT1EsV0FBYUwsRUFBVUssVUFDbENSLEVBQU9TLE9BQVNOLEVBQVVNLE1BaERqQyxHQXNEUSxXQUNMLE9BQU8saUNDOURmLElBQUk3SSxFQUFRdDFDLEVBQVEsR0FFcEJqQyxFQUFPRCxRQUNMdzNDLEVBQU0xekMsdUJBSUssQ0FDTDg4QyxNQUFPLFNBQWVuZ0QsRUFBTVUsRUFBTzAvQyxFQUFTN3dCLEVBQU04d0IsRUFBUUMsR0FDeEQsSUFBSUMsRUFBUyxHQUNiQSxFQUFPdDZDLEtBQUtqRyxFQUFPLElBQU1rRixtQkFBbUJ4RSxJQUV4Q3EyQyxFQUFNbjBDLFNBQVN3OUMsSUFDakJHLEVBQU90NkMsS0FBSyxXQUFhLElBQUlnSSxLQUFLbXlDLEdBQVNJLGVBR3pDekosRUFBTXAwQyxTQUFTNHNCLElBQ2pCZ3hCLEVBQU90NkMsS0FBSyxRQUFVc3BCLEdBR3BCd25CLEVBQU1wMEMsU0FBUzA5QyxJQUNqQkUsRUFBT3Q2QyxLQUFLLFVBQVlvNkMsSUFHWCxJQUFYQyxHQUNGQyxFQUFPdDZDLEtBQUssVUFHZHhDLFNBQVM4OEMsT0FBU0EsRUFBTzU2QyxLQUFLLE9BR2hDczJDLEtBQU0sU0FBY2o4QyxHQUNsQixJQUFJa1IsRUFBUXpOLFNBQVM4OEMsT0FBT3J2QyxNQUFNLElBQUlkLE9BQU8sYUFBZXBRLEVBQU8sY0FDbkUsT0FBUWtSLEVBQVF1dkMsbUJBQW1CdnZDLEVBQU0sSUFBTSxNQUdqRHZJLE9BQVEsU0FBZ0IzSSxHQUN0QndFLEtBQUsyN0MsTUFBTW5nRCxFQUFNLEdBQUlpTyxLQUFLeWYsTUFBUSxTQU8vQixDQUNMeXlCLE1BQU8sYUFDUGxFLEtBQU0sV0FBa0IsT0FBTyxNQUMvQnR6QyxPQUFRLDRDQ3pDaEJuSixFQUFPRCxRQUFVLFNBQXVCMDNDLEdBSXRDLE1BQU8sZ0NBQWdDeHZDLEtBQUt3dkMsa0NDSDlDejNDLEVBQU9ELFFBQVUsU0FBcUJtL0MsRUFBU2dDLEdBQzdDLE9BQU9BLEVBQ0hoQyxFQUFRcjZDLFFBQVEsT0FBUSxJQUFNLElBQU1xOEMsRUFBWXI4QyxRQUFRLE9BQVEsSUFDaEVxNkMsaUNDVk4sSUFBSTFCLEVBQVN2N0MsRUFBUSxJQVFyQixTQUFTKzdDLEVBQVltRCxHQUNuQixHQUF3QixtQkFBYkEsRUFDVCxNQUFNLElBQUlDLFVBQVUsZ0NBR3RCLElBQUlDLEVBQ0pyOEMsS0FBSyszQyxRQUFVLElBQUlqZ0MsUUFBUSxTQUF5QkMsR0FDbERza0MsRUFBaUJ0a0MsSUFHbkIsSUFBSXVrQyxFQUFRdDhDLEtBQ1ptOEMsRUFBUyxTQUFnQi9ELEdBQ25Ca0UsRUFBTXgyQixTQUtWdzJCLEVBQU14MkIsT0FBUyxJQUFJMHlCLEVBQU9KLEdBQzFCaUUsRUFBZUMsRUFBTXgyQixXQU96Qmt6QixFQUFZbjhDLFVBQVVvOUMsaUJBQW1CLFdBQ3ZDLEdBQUlqNkMsS0FBSzhsQixPQUNQLE1BQU05bEIsS0FBSzhsQixRQVFma3pCLEVBQVkvM0MsT0FBUyxXQUNuQixJQUFJKzJDLEVBSUosTUFBTyxDQUNMc0UsTUFKVSxJQUFJdEQsRUFBWSxTQUFrQjE5QyxHQUM1QzA4QyxFQUFTMThDLElBSVQwOEMsT0FBUUEsSUFJWmg5QyxFQUFPRCxRQUFVaStDLGdDQ2xDakJoK0MsRUFBT0QsUUFBVSxTQUFnQnVyQixHQUMvQixPQUFPLFNBQWNqZixHQUNuQixPQUFPaWYsRUFBUy9kLE1BQU0sS0FBTWxCLHVCQ3hCaEMsU0FBQTVCLEdBQUEsSUFBSTgyQyxPQUEyQixJQUFYOTJDLEdBQTBCQSxHQUNqQixvQkFBVCsyQyxNQUF3QkEsTUFDaEN4OUMsT0FDUnVKLEVBQVFILFNBQVN2TCxVQUFVMEwsTUFpQi9CLFNBQVNrMEMsRUFBUWw3QyxFQUFJbTdDLEdBQ25CMThDLEtBQUsyOEMsSUFBTXA3QyxFQUNYdkIsS0FBSzQ4QyxTQUFXRixFQWZsQjNoRCxFQUFRaWQsV0FBYSxXQUNuQixPQUFPLElBQUl5a0MsRUFBUWwwQyxFQUFNbk4sS0FBSzRjLFdBQVl1a0MsRUFBT2w5QyxXQUFZc21CLGVBRS9ENXFCLEVBQVE4aEQsWUFBYyxXQUNwQixPQUFPLElBQUlKLEVBQVFsMEMsRUFBTW5OLEtBQUt5aEQsWUFBYU4sRUFBT2w5QyxXQUFZeTlDLGdCQUVoRS9oRCxFQUFRNHFCLGFBQ1I1cUIsRUFBUStoRCxjQUFnQixTQUFTNzJCLEdBQzNCQSxHQUNGQSxFQUFRODJCLFNBUVpOLEVBQVE1L0MsVUFBVW1nRCxNQUFRUCxFQUFRNS9DLFVBQVUwMEIsSUFBTSxhQUNsRGtyQixFQUFRNS9DLFVBQVVrZ0QsTUFBUSxXQUN4Qi84QyxLQUFLNDhDLFNBQVN4aEQsS0FBS21oRCxFQUFPdjhDLEtBQUsyOEMsTUFJakM1aEQsRUFBUWtpRCxPQUFTLFNBQVMvOEMsRUFBTWc5QyxHQUM5QnYzQixhQUFhemxCLEVBQUtpOUMsZ0JBQ2xCajlDLEVBQUtrOUMsYUFBZUYsR0FHdEJuaUQsRUFBUXNpRCxTQUFXLFNBQVNuOUMsR0FDMUJ5bEIsYUFBYXpsQixFQUFLaTlDLGdCQUNsQmo5QyxFQUFLazlDLGNBQWdCLEdBR3ZCcmlELEVBQVF1aUQsYUFBZXZpRCxFQUFReXZCLE9BQVMsU0FBU3RxQixHQUMvQ3lsQixhQUFhemxCLEVBQUtpOUMsZ0JBRWxCLElBQUlELEVBQVFoOUMsRUFBS2s5QyxhQUNiRixHQUFTLElBQ1hoOUMsRUFBS2k5QyxlQUFpQm5sQyxXQUFXLFdBQzNCOVgsRUFBS3E5QyxZQUNQcjlDLEVBQUtxOUMsY0FDTkwsS0FLUGpnRCxFQUFRLElBSVJsQyxFQUFRMkssYUFBZ0Msb0JBQVQ4MkMsTUFBd0JBLEtBQUs5MkMsbUJBQ2xCLElBQVhELEdBQTBCQSxFQUFPQyxjQUN4QzFGLE1BQVFBLEtBQUswRixhQUNyQzNLLEVBQVF5aUQsZUFBa0Msb0JBQVRoQixNQUF3QkEsS0FBS2dCLHFCQUNsQixJQUFYLzNDLEdBQTBCQSxFQUFPKzNDLGdCQUN4Q3g5QyxNQUFRQSxLQUFLdzlDLG1EQzlEdEMsU0FBQS8zQyxFQUFBK0UsSUFBQSxTQUFVL0UsRUFBUXdILEdBQ2YsYUFFQSxJQUFJeEgsRUFBT0MsYUFBWCxDQUlBLElBSUkrM0MsRUE2SElDLEVBWkFDLEVBckJBQyxFQUNBQyxFQWpHSkMsRUFBYSxFQUNiQyxFQUFnQixHQUNoQkMsR0FBd0IsRUFDeEJDLEVBQU14NEMsRUFBT3hHLFNBb0piaS9DLEVBQVd2aUQsT0FBT3dpRCxnQkFBa0J4aUQsT0FBT3dpRCxlQUFlMTRDLEdBQzlEeTRDLEVBQVdBLEdBQVlBLEVBQVNsbUMsV0FBYWttQyxFQUFXejRDLEVBR2YscUJBQXJDLEdBQUd0SSxTQUFTL0IsS0FBS3FLLEVBQU8rRSxTQXBGeEJpekMsRUFBb0IsU0FBU1csR0FDekI1ekMsRUFBUThOLFNBQVMsV0FBYytsQyxFQUFhRCxPQUlwRCxXQUdJLEdBQUkzNEMsRUFBTzY0QyxjQUFnQjc0QyxFQUFPODRDLGNBQWUsQ0FDN0MsSUFBSUMsR0FBNEIsRUFDNUJDLEVBQWVoNUMsRUFBT2k1QyxVQU0xQixPQUxBajVDLEVBQU9pNUMsVUFBWSxXQUNmRixHQUE0QixHQUVoQy80QyxFQUFPNjRDLFlBQVksR0FBSSxLQUN2Qjc0QyxFQUFPaTVDLFVBQVlELEVBQ1pELEdBd0VKRyxHQUlBbDVDLEVBQU9tNUMsaUJBOUNWakIsRUFBVSxJQUFJaUIsZ0JBQ1ZDLE1BQU1ILFVBQVksU0FBUzVrQyxHQUUvQnVrQyxFQURhdmtDLEVBQU1qWixPQUl2QjQ4QyxFQUFvQixTQUFTVyxHQUN6QlQsRUFBUW1CLE1BQU1SLFlBQVlGLEtBMkN2QkgsR0FBTyx1QkFBd0JBLEVBQUlsNkMsY0FBYyxXQXRDcEQyNUMsRUFBT08sRUFBSWMsZ0JBQ2Z0QixFQUFvQixTQUFTVyxHQUd6QixJQUFJWSxFQUFTZixFQUFJbDZDLGNBQWMsVUFDL0JpN0MsRUFBT3RJLG1CQUFxQixXQUN4QjJILEVBQWFELEdBQ2JZLEVBQU90SSxtQkFBcUIsS0FDNUJnSCxFQUFLcDVDLFlBQVkwNkMsR0FDakJBLEVBQVMsTUFFYnRCLEVBQUt6NUMsWUFBWSs2QyxLQUtyQnZCLEVBQW9CLFNBQVNXLEdBQ3pCcG1DLFdBQVdxbUMsRUFBYyxFQUFHRCxLQWxENUJSLEVBQWdCLGdCQUFrQnAzQyxLQUFLeTRDLFNBQVcsSUFDbERwQixFQUFrQixTQUFTL2pDLEdBQ3ZCQSxFQUFNN1ksU0FBV3dFLEdBQ0ssaUJBQWZxVSxFQUFNalosTUFDeUIsSUFBdENpWixFQUFNalosS0FBS3lHLFFBQVFzMkMsSUFDbkJTLEdBQWN2a0MsRUFBTWpaLEtBQUtvSCxNQUFNMjFDLEVBQWNqZ0QsVUFJakQ4SCxFQUFPc0gsaUJBQ1B0SCxFQUFPc0gsaUJBQWlCLFVBQVc4d0MsR0FBaUIsR0FFcERwNEMsRUFBT3k1QyxZQUFZLFlBQWFyQixHQUdwQ0osRUFBb0IsU0FBU1csR0FDekIzNEMsRUFBTzY0QyxZQUFZVixFQUFnQlEsRUFBUSxPQWdFbkRGLEVBQVN4NEMsYUExS1QsU0FBc0I0Z0IsR0FFSSxtQkFBYkEsSUFDVEEsRUFBVyxJQUFJbGUsU0FBUyxHQUFLa2UsSUFJL0IsSUFEQSxJQUFJclYsRUFBTyxJQUFJbkssTUFBTXpILFVBQVUxQixPQUFTLEdBQy9CMUMsRUFBSSxFQUFHQSxFQUFJZ1csRUFBS3RULE9BQVExQyxJQUM3QmdXLEVBQUtoVyxHQUFLb0UsVUFBVXBFLEVBQUksR0FHNUIsSUFBSWtrRCxFQUFPLENBQUU3NEIsU0FBVUEsRUFBVXJWLEtBQU1BLEdBR3ZDLE9BRkE4c0MsRUFBY0QsR0FBY3FCLEVBQzVCMUIsRUFBa0JLLEdBQ1hBLEtBNkpUSSxFQUFTVixlQUFpQkEsRUExSjFCLFNBQVNBLEVBQWVZLFVBQ2JMLEVBQWNLLEdBeUJ6QixTQUFTQyxFQUFhRCxHQUdsQixHQUFJSixFQUdBaG1DLFdBQVdxbUMsRUFBYyxFQUFHRCxPQUN6QixDQUNILElBQUllLEVBQU9wQixFQUFjSyxHQUN6QixHQUFJZSxFQUFNLENBQ05uQixHQUF3QixFQUN4QixLQWpDWixTQUFhbUIsR0FDVCxJQUFJNzRCLEVBQVc2NEIsRUFBSzc0QixTQUNoQnJWLEVBQU9rdUMsRUFBS2x1QyxLQUNoQixPQUFRQSxFQUFLdFQsUUFDYixLQUFLLEVBQ0Qyb0IsSUFDQSxNQUNKLEtBQUssRUFDREEsRUFBU3JWLEVBQUssSUFDZCxNQUNKLEtBQUssRUFDRHFWLEVBQVNyVixFQUFLLEdBQUlBLEVBQUssSUFDdkIsTUFDSixLQUFLLEVBQ0RxVixFQUFTclYsRUFBSyxHQUFJQSxFQUFLLEdBQUlBLEVBQUssSUFDaEMsTUFDSixRQUNJcVYsRUFBUy9kLE1BQU0wRSxFQUFXZ0UsSUFpQmxCd1ksQ0FBSTAxQixHQURSLFFBR0kzQixFQUFlWSxHQUNmSixHQUF3QixNQXZFM0MsQ0F5TGlCLG9CQUFUeEIsVUFBeUMsSUFBWC8yQyxFQUF5QnpGLEtBQU95RixFQUFTKzJDLDREQ3pMaEYsSUFBQTRDLEVBQUF2a0QsRUFBQSxHQUFBQSxFQUFBNkIsRUFBQTBpRCxHQUF5VixvQkNBelZwa0QsRUFBQUQsUUFBMkJGLEVBQVEsRUFBUkEsRUFBMkQsSUFFdEY0RyxLQUFBLENBQWN6RyxFQUFBQyxFQUFTLG1pRUFBaWlFLG1DQ0Z4akUsSUFBQW9rRCxFQUFBeGtELEVBQUEsR0FBQUEsRUFBQTZCLEVBQUEyaUQsR0FBeVYsb0JDQXpWcmtELEVBQUFELFFBQTJCRixFQUFRLEVBQVJBLEVBQTJELElBRXRGNEcsS0FBQSxDQUFjekcsRUFBQUMsRUFBUyw0N0ZBQTA3RixtQ0NGajlGLElBQUFxa0QsRUFBQXprRCxFQUFBLEdBQUFBLEVBQUE2QixFQUFBNGlELEdBQW9YLG9CQ0FwWHRrRCxFQUFBRCxRQUEyQkYsRUFBUSxFQUFSQSxFQUE4RCxJQUV6RjRHLEtBQUEsQ0FBY3pHLEVBQUFDLEVBQVMsd3VFQUFzdUUsbUNDRjd2RSxJQUFBc2tELEVBQUExa0QsRUFBQSxHQUFBQSxFQUFBNkIsRUFBQTZpRCxHQUFrWCxvQkNBbFh2a0QsRUFBQUQsUUFBMkJGLEVBQVEsRUFBUkEsRUFBOEQsSUFFekY0RyxLQUFBLENBQWN6RyxFQUFBQyxFQUFTLGl1QkFBK3RCLG1DQ0Z0dkIsSUFBQXVrRCxFQUFBM2tELEVBQUEsSUFBQUEsRUFBQTZCLEVBQUE4aUQsR0FBb1gsb0JDQXBYeGtELEVBQUFELFFBQTJCRixFQUFRLEVBQVJBLEVBQThELElBRXpGNEcsS0FBQSxDQUFjekcsRUFBQUMsRUFBUyxzNUVBQW81RSxtQ0NGMzZFLElBQUF3a0QsRUFBQTVrRCxFQUFBLElBQUFBLEVBQUE2QixFQUFBK2lELEdBQStXLG9CQ0EvV3prRCxFQUFBRCxRQUEyQkYsRUFBUSxFQUFSQSxFQUE4RCxJQUV6RjRHLEtBQUEsQ0FBY3pHLEVBQUFDLEVBQVMsczVFQUFvNUUsc0JDQzM2RSxJQUFBa0YsRUFBY3RGLEVBQVEsSUFDdEIsaUJBQUFzRixNQUFBLEVBQTRDbkYsRUFBQUMsRUFBU2tGLEVBQUEsTUFDckRBLEVBQUFtckMsU0FBQXR3QyxFQUFBRCxRQUFBb0YsRUFBQW1yQyxTQUdBeDlCLEVBRFVqVCxFQUFRLEdBQWdFc2IsU0FDbEYsV0FBQWhXLEdBQUEsdUJDUkFwRixFQUFBQyxFQUFBRCxRQUEyQkYsRUFBUSxFQUFSQSxFQUE4RCxHQUV6RixJQUFBNmtELEVBQWE3a0QsRUFBUSxJQUNyQjhrRCxFQUFBRCxFQUFzQzdrRCxFQUFRLEtBQzlDK2tELEVBQUFGLEVBQXNDN2tELEVBQVEsS0FDOUNnbEQsRUFBQUgsRUFBc0M3a0QsRUFBUSxLQUM5Q2lsRCxFQUFBSixFQUFzQzdrRCxFQUFRLEtBQzlDa2xELEVBQUFMLEVBQXNDN2tELEVBQVEsS0FDOUNtbEQsRUFBQU4sRUFBc0M3a0QsRUFBUSxLQUM5Q29sRCxFQUFBUCxFQUFzQzdrRCxFQUFRLEtBQzlDcWxELEVBQUFSLEVBQXNDN2tELEVBQVEsS0FDOUNzbEQsRUFBQVQsRUFBc0M3a0QsRUFBUSxLQUM5Q3VsRCxFQUFBVixFQUFzQzdrRCxFQUFRLEtBQzlDd2xELEVBQUFYLEVBQXVDN2tELEVBQVEsS0FDL0N5bEQsRUFBQVosRUFBdUM3a0QsRUFBUSxLQUMvQzBsRCxFQUFBYixFQUF1QzdrRCxFQUFRLEtBQy9DMmxELEVBQUFkLEVBQXVDN2tELEVBQVEsS0FDL0M0bEQsRUFBQWYsRUFBdUM3a0QsRUFBUSxLQUMvQzZsRCxFQUFBaEIsRUFBdUM3a0QsRUFBUSxLQUMvQzhsRCxFQUFBakIsRUFBdUM3a0QsRUFBUSxLQUMvQytsRCxFQUFBbEIsRUFBdUM3a0QsRUFBUSxLQUMvQ2dtRCxFQUFBbkIsRUFBdUM3a0QsRUFBUSxLQUMvQ2ltRCxFQUFBcEIsRUFBdUM3a0QsRUFBUSxLQUMvQ2ttRCxFQUFBckIsRUFBdUM3a0QsRUFBUSxLQUMvQ21tRCxFQUFBdEIsRUFBdUM3a0QsRUFBUSxLQUMvQ29tRCxFQUFBdkIsRUFBdUM3a0QsRUFBUSxLQUMvQ3FtRCxFQUFBeEIsRUFBdUM3a0QsRUFBUSxLQUMvQ3NtRCxFQUFBekIsRUFBdUM3a0QsRUFBUSxLQUMvQ3VtRCxFQUFBMUIsRUFBdUM3a0QsRUFBUSxJQUF5RCxXQUN4R3dtRCxFQUFBM0IsRUFBdUM3a0QsRUFBUSxLQUMvQ3ltRCxFQUFBNUIsRUFBdUM3a0QsRUFBUSxLQUMvQzBtRCxFQUFBN0IsRUFBdUM3a0QsRUFBUSxLQUMvQzJtRCxFQUFBOUIsRUFBdUM3a0QsRUFBUSxJQUF5RCxnQkFDeEc0bUQsRUFBQS9CLEVBQXVDN2tELEVBQVEsS0FDL0M2bUQsRUFBQWhDLEVBQXVDN2tELEVBQVEsSUFBMkQsV0FDMUc4bUQsRUFBQWpDLEVBQXVDN2tELEVBQVEsS0FDL0MrbUQsRUFBQWxDLEVBQXVDN2tELEVBQVEsS0FDL0NnbkQsRUFBQW5DLEVBQXVDN2tELEVBQVEsS0FDL0NpbkQsRUFBQXBDLEVBQXVDN2tELEVBQVEsSUFBMkQsZ0JBQzFHa25ELEVBQUFyQyxFQUF1QzdrRCxFQUFRLEtBQy9DbW5ELEVBQUF0QyxFQUF1QzdrRCxFQUFRLElBQTBELFdBQ3pHb25ELEVBQUF2QyxFQUF1QzdrRCxFQUFRLEtBQy9DcW5ELEVBQUF4QyxFQUF1QzdrRCxFQUFRLEtBQy9Dc25ELEVBQUF6QyxFQUF1QzdrRCxFQUFRLEtBQy9DdW5ELEVBQUExQyxFQUF1QzdrRCxFQUFRLElBQTBELGdCQUV6R0UsRUFBQTBHLEtBQUEsQ0FBY3pHLEVBQUFDLEVBQVMscTNNQUF3NE0wa0QsRUFBQSwwQkFBQUMsRUFBQSxpSUFBMk5ELEVBQUEsMEJBQUFDLEVBQUEsNkVBQXVLQyxFQUFBLDBCQUFBQyxFQUFBLHVJQUFpT0QsRUFBQSwwQkFBQUMsRUFBQSw2RUFBdUtDLEVBQUEsMEJBQUFDLEVBQUEsK0hBQXlORCxFQUFBLDBCQUFBQyxFQUFBLDZFQUF1S0MsRUFBQSwwQkFBQUMsRUFBQSxxSUFBK05ELEVBQUEsMEJBQUFDLEVBQUEsNkVBQXVLQyxFQUFBLDBCQUFBQyxFQUFBLDhIQUF3TkQsRUFBQSwwQkFBQUMsRUFBQSw2RUFBdUtDLEVBQUEsMEJBQUFDLEVBQUEsb0lBQWdPRCxFQUFBLDBCQUFBQyxFQUFBLDZFQUF5S0MsRUFBQSwwQkFBQUMsRUFBQSxnSUFBNE5ELEVBQUEsMEJBQUFDLEVBQUEsNkVBQXlLQyxFQUFBLDBCQUFBQyxFQUFBLHNJQUFrT0QsRUFBQSwwQkFBQUMsRUFBQSw2RUFBeUtDLEVBQUEsMEJBQUFDLEVBQUEsOEhBQTBORCxFQUFBLDBCQUFBQyxFQUFBLDZFQUF5S0MsRUFBQSwwQkFBQUMsRUFBQSxvSUFBZ09ELEVBQUEsMEJBQUFDLEVBQUEsNkVBQXlLQyxFQUFBLDBCQUFBQyxFQUFBLCtIQUEyTkQsRUFBQSwwQkFBQUMsRUFBQSw2RUFBeUtDLEVBQUEsMEJBQUFDLEVBQUEscUlBQWlPRCxFQUFBLDBCQUFBQyxFQUFBLG1sd0VBQXU0MUVDLEVBQUEsa0JBQWdEQyxFQUFBLHNDQUFBQyxFQUFBLDBCQUFBQyxFQUFBLHlCQUFBQyxFQUFBLDZCQUFBQyxFQUFBLHlhQUE2ckJDLEVBQUEsa0JBQWdEQyxFQUFBLHNDQUFBQyxFQUFBLDBCQUFBQyxFQUFBLHlCQUFBQyxFQUFBLDZCQUFBQyxFQUFBLHdhQUE0ckJDLEVBQUEsa0JBQWdEQyxFQUFBLHNDQUFBQyxFQUFBLDBCQUFBQyxFQUFBLHlCQUFBQyxFQUFBLDZCQUFBQyxFQUFBLHV2QkFBd2hDLG1DQzVDaHV3RnBuRCxFQUFPRCxRQUFVLFNBQVUwM0MsRUFBSzRQLEdBQzlCLE1BQW1CLGlCQUFSNVAsRUFDRkEsR0FJTCxlQUFleHZDLEtBQUt3dkMsS0FFdEJBLEVBQU1BLEVBQUl4cUMsTUFBTSxHQUFJLElBS2xCLGNBQWNoRixLQUFLd3ZDLElBQVE0UCxFQUN0QixJQUFLdmhELE9BQU8yeEMsRUFBSTV5QyxRQUFRLEtBQU0sT0FBT0EsUUFBUSxNQUFPLE9BQVEsS0FHOUQ0eUMscUJDbkJUejNDLEVBQUFELFFBQWlCRixFQUFBa0MsRUFBdUIsMERDQXhDL0IsRUFBQUQsUUFBaUJGLEVBQUFrQyxFQUF1Qix5RENBeEMvQixFQUFBRCxRQUFpQkYsRUFBQWtDLEVBQXVCLDBEQ0F4Qy9CLEVBQUFELFFBQWlCRixFQUFBa0MsRUFBdUIseURDQXhDL0IsRUFBQUQsUUFBaUJGLEVBQUFrQyxFQUF1QiwwRENBeEMvQixFQUFBRCxRQUFpQkYsRUFBQWtDLEVBQXVCLHlEQ0F4Qy9CLEVBQUFELFFBQWlCRixFQUFBa0MsRUFBdUIsMERDQXhDL0IsRUFBQUQsUUFBaUJGLEVBQUFrQyxFQUF1Qix5RENBeEMvQixFQUFBRCxRQUFpQkYsRUFBQWtDLEVBQXVCLDBEQ0F4Qy9CLEVBQUFELFFBQWlCRixFQUFBa0MsRUFBdUIseURDQXhDL0IsRUFBQUQsUUFBaUJGLEVBQUFrQyxFQUF1QiwwRENBeEMvQixFQUFBRCxRQUFpQkYsRUFBQWtDLEVBQXVCLHlEQ0F4Qy9CLEVBQUFELFFBQWlCRixFQUFBa0MsRUFBdUIsMERDQXhDL0IsRUFBQUQsUUFBaUJGLEVBQUFrQyxFQUF1Qix5RENBeEMvQixFQUFBRCxRQUFpQkYsRUFBQWtDLEVBQXVCLDBEQ0F4Qy9CLEVBQUFELFFBQWlCRixFQUFBa0MsRUFBdUIseURDQXhDL0IsRUFBQUQsUUFBaUJGLEVBQUFrQyxFQUF1QiwwRENBeEMvQixFQUFBRCxRQUFpQkYsRUFBQWtDLEVBQXVCLHlEQ0F4Qy9CLEVBQUFELFFBQWlCRixFQUFBa0MsRUFBdUIsMERDQXhDL0IsRUFBQUQsUUFBaUJGLEVBQUFrQyxFQUF1Qix5RENBeEMvQixFQUFBRCxRQUFpQkYsRUFBQWtDLEVBQXVCLDBEQ0F4Qy9CLEVBQUFELFFBQWlCRixFQUFBa0MsRUFBdUIseURDQXhDL0IsRUFBQUQsUUFBaUJGLEVBQUFrQyxFQUF1QiwwRENBeEMvQixFQUFBRCxRQUFpQkYsRUFBQWtDLEVBQXVCLHlEQ0F4Qy9CLEVBQUFELFFBQWlCRixFQUFBa0MsRUFBdUIsMERDQXhDL0IsRUFBQUQsUUFBaUJGLEVBQUFrQyxFQUF1Qix5RENBeEMvQixFQUFBRCxRQUFpQkYsRUFBQWtDLEVBQXVCLHdEQ0F4Qy9CLEVBQUFELFFBQWlCRixFQUFBa0MsRUFBdUIsd0RDQXhDL0IsRUFBQUQsUUFBaUJGLEVBQUFrQyxFQUF1QiwwRENBeEMvQixFQUFBRCxRQUFpQkYsRUFBQWtDLEVBQXVCLHlEQ0F4Qy9CLEVBQUFELFFBQWlCRixFQUFBa0MsRUFBdUIsd0RDQXhDL0IsRUFBQUQsUUFBaUJGLEVBQUFrQyxFQUF1Qix3RENBeEMvQixFQUFBRCxRQUFpQkYsRUFBQWtDLEVBQXVCLDBEQ0F4Qy9CLEVBQUFELFFBQWlCRixFQUFBa0MsRUFBdUIseURDQXhDL0IsRUFBQUQsUUFBaUJGLEVBQUFrQyxFQUF1Qix3RENBeEMvQixFQUFBRCxRQUFpQkYsRUFBQWtDLEVBQXVCLHdEQ0F4Qy9CLEVBQUFELFFBQWlCRixFQUFBa0MsRUFBdUIscUVDQXhDLElBQUF1bEQsRUFBQXpuRCxFQUFBLElBQUFBLEVBQUE2QixFQUFBNGxELEdBQXlWLG9CQ0F6VnRuRCxFQUFBRCxRQUEyQkYsRUFBUSxFQUFSQSxFQUEyRCxJQUV0RjRHLEtBQUEsQ0FBY3pHLEVBQUFDLEVBQVMscS9CQUFtL0IsbUNDRjFnQyxJQUFBc25ELEVBQUExbkQsRUFBQSxJQUFBQSxFQUFBNkIsRUFBQTZsRCxHQUEwVixvQkNBMVZ2bkQsRUFBQUQsUUFBMkJGLEVBQVEsRUFBUkEsRUFBMkQsSUFFdEY0RyxLQUFBLENBQWN6RyxFQUFBQyxFQUFTLG1IQUFpSCxxRUNGcEl1bkQsRUFBTSxXQUNWLElBQ0FDLEVBREF6aUQsS0FDQW9kLGVBRUEsT0FIQXBkLEtBRUFzdkIsTUFBQS9OLElBQUFraEMsR0FGQXppRCxLQUdBMGlELE9BQUEsQ0FBeUIxekMsSUFBQSxlQUd6Qnd6QyxFQUFNRyxlQUFBLEVDRFMsU0FBQUMsRUFDZkMsRUFDQXBtQyxFQUNBbUMsRUFDQWtrQyxFQUNBQyxFQUNBcnRCLEVBQ0FzdEIsRUFDQUMsR0FHQSxJQXFCQWh2QyxFQXJCQW5SLEVBQUEsbUJBQUErL0MsRUFDQUEsRUFBQS8vQyxRQUNBKy9DLEVBaURBLEdBOUNBcG1DLElBQ0EzWixFQUFBMlosU0FDQTNaLEVBQUE4YixrQkFDQTliLEVBQUFtZSxXQUFBLEdBSUE2aEMsSUFDQWhnRCxFQUFBMmpCLFlBQUEsR0FJQWlQLElBQ0E1eUIsRUFBQXdlLFNBQUEsVUFBQW9VLEdBSUFzdEIsR0FDQS91QyxFQUFBLFNBQUE3RSxJQUVBQSxFQUNBQSxHQUNBcFAsS0FBQWlqQixRQUFBampCLEtBQUFpakIsT0FBQWlRLFlBQ0FsekIsS0FBQTJQLFFBQUEzUCxLQUFBMlAsT0FBQXNULFFBQUFqakIsS0FBQTJQLE9BQUFzVCxPQUFBaVEsYUFFQSxvQkFBQWd3QixzQkFDQTl6QyxFQUFBOHpDLHFCQUdBSCxHQUNBQSxFQUFBM25ELEtBQUE0RSxLQUFBb1AsR0FHQUEsS0FBQSt6Qyx1QkFDQS96QyxFQUFBK3pDLHNCQUFBcjFDLElBQUFrMUMsSUFLQWxnRCxFQUFBc2dELGFBQUFudkMsR0FDRzh1QyxJQUNIOXVDLEVBQUFndkMsRUFDQSxXQUFxQkYsRUFBQTNuRCxLQUFBNEUsVUFBQXV2QixNQUFBblosU0FBQWl0QyxhQUNyQk4sR0FHQTl1QyxFQUNBLEdBQUFuUixFQUFBMmpCLFdBQUEsQ0FHQTNqQixFQUFBd2dELGNBQUFydkMsRUFFQSxJQUFBc3ZDLEVBQUF6Z0QsRUFBQTJaLE9BQ0EzWixFQUFBMlosT0FBQSxTQUFBeXJCLEVBQUE5NEIsR0FFQSxPQURBNkUsRUFBQTdZLEtBQUFnVSxHQUNBbTBDLEVBQUFyYixFQUFBOTRCLFFBRUssQ0FFTCxJQUFBNlAsRUFBQW5jLEVBQUErdEMsYUFDQS90QyxFQUFBK3RDLGFBQUE1eEIsRUFDQSxHQUFBbmUsT0FBQW1lLEVBQUFoTCxHQUNBLENBQUFBLEdBSUEsT0FDQWxaLFFBQUE4bkQsRUFDQS8vQyxXQ25GQSxJQUFBaWpCLEVBQWdCNjhCLEVDQWhCLENBQ0FwbkQsS0FBQSxNQUNBOFksU0FBQSxDQUNBb3VDLE9BREEsV0FFQSxPQUFBMWlELEtBQUF3akQsT0FBQUMsS0FBQWYsUUFOQSxRQU1BLFlBR0Ezd0IsUUFQQSxXQU9BLElBQUEyeEIsRUFBQTFqRCxLQUNBMmpELEVBQUFua0QsRUFBQTg1QyxhQUFBdkMsU0FBQXZvQixJQUNBLFNBQUF1b0IsR0FDQSxPQUFBQSxHQUVBLFNBQUF4L0IsR0FJQSxPQUhBRCxRQUFBc3NDLElBQUEsaUJBQ0F0c0MsUUFBQXNzQyxJQUFBcnNDLEdBQ0FELFFBQUFzc0MsSUFBQXJzQyxFQUFBdy9CLFVBQ0EsSUFBQWovQixRQUFBLFNBQUFDLEVBQUE4TixHQUNBdE8sRUFBQXcvQixVQUFBLE1BQUF4L0IsRUFBQXcvQixTQUFBakQsUUFDQTRQLEVBQUEzUyxPQUNBOUMsU0FBQSxxQkFDQXJuQyxLQUFBLFNBQUFtd0MsR0FDQXovQixRQUFBc3NDLElBQUEsa0JBQUE3TSxHQUNBaC9CLE1BSkEsTUFNQSxTQUFBUixHQUNBRCxRQUFBQyxNQUFBLDhCQUFBQSxHQUNBbXNDLEVBQUFHLFFBQUFwaUQsS0FBQSxVQUNBb2tCLEVBQUF0TyxLQUdBc08sRUFBQXRPLFNENUJFaXJDLEVGSEYsSUVLQSxFQUNBLEtBQ0EsS0FDQSxNQXVCQXo4QixFQUFBampCLFFBQUFnaEQsT0FBQSxjQUNlLElBQUFDLEVBQUFoK0I7Ozs7O0lFbkJmLFNBQVNpK0IsRUFBU3B0QyxHQUNoQixPQUFPamIsT0FBT2tCLFVBQVVNLFNBQVMvQixLQUFLd2IsR0FBS3RQLFFBQVEsVUFBWSxFQUdqRSxTQUFTL0gsRUFBUUMsRUFBR0MsR0FDbEIsSUFBSyxJQUFJakQsS0FBT2lELEVBQ2RELEVBQUVoRCxHQUFPaUQsRUFBRWpELEdBRWIsT0FBT2dELEVBR1QsSUFBSXlrRCxFQUFPLENBQ1R6b0QsS0FBTSxhQUNOaXJCLFlBQVksRUFDWnRTLE1BQU8sQ0FDTDNZLEtBQU0sQ0FDSndJLEtBQU11QyxPQUNONFAsUUFBUyxZQUdic0csT0FBUSxTQUFpQjVVLEVBQUcwcEIsR0FDMUIsSUFBSXBkLEVBQVFvZCxFQUFJcGQsTUFDWmxGLEVBQVdzaUIsRUFBSXRpQixTQUNmVSxFQUFTNGhCLEVBQUk1aEIsT0FDYjlPLEVBQU8wd0IsRUFBSTF3QixLQUdmQSxFQUFLcWpELFlBQWEsRUFhbEIsSUFUQSxJQUFJaGMsRUFBSXY0QixFQUFPeU4sZUFDWDVoQixFQUFPMlksRUFBTTNZLEtBQ2Iyb0QsRUFBUXgwQyxFQUFPNnpDLE9BQ2Y5N0MsRUFBUWlJLEVBQU95MEMsbUJBQXFCejBDLEVBQU95MEMsaUJBQW1CLElBSTlEQyxFQUFRLEVBQ1JDLEdBQVcsRUFDUjMwQyxHQUFVQSxFQUFPNDBDLGNBQWdCNTBDLEdBQVEsQ0FDOUMsSUFBSTYwQyxFQUFZNzBDLEVBQU9zVCxRQUFVdFQsRUFBT3NULE9BQU9waUIsS0FDM0MyakQsSUFDRUEsRUFBVU4sWUFDWkcsSUFFRUcsRUFBVXhpQyxXQUFhclMsRUFBT29VLFlBQ2hDdWdDLEdBQVcsSUFHZjMwQyxFQUFTQSxFQUFPb0gsUUFLbEIsR0FIQWxXLEVBQUs0akQsZ0JBQWtCSixFQUduQkMsRUFDRixPQUFPcGMsRUFBRXhnQyxFQUFNbE0sR0FBT3FGLEVBQU1vTyxHQUc5QixJQUFJeTFDLEVBQVVQLEVBQU1PLFFBQVFMLEdBRTVCLElBQUtLLEVBRUgsT0FEQWg5QyxFQUFNbE0sR0FBUSxLQUNQMHNDLElBR1QsSUFBSW5pQixFQUFZcmUsRUFBTWxNLEdBQVFrcEQsRUFBUWgzQixXQUFXbHlCLEdBSWpEcUYsRUFBSzhqRCxzQkFBd0IsU0FBVWp4QyxFQUFJclcsR0FFekMsSUFBSTJ4QixFQUFVMDFCLEVBQVFFLFVBQVVwcEQsSUFFN0I2QixHQUFPMnhCLElBQVl0YixJQUNsQnJXLEdBQU8yeEIsSUFBWXRiLEtBRXJCZ3hDLEVBQVFFLFVBQVVwcEQsR0FBUTZCLEtBTTVCd0QsRUFBS29ULE9BQVNwVCxFQUFLb1QsS0FBTyxLQUFLaU8sU0FBVyxTQUFVcmEsRUFBRzhJLEdBQ3ZEK3pDLEVBQVFFLFVBQVVwcEQsR0FBUW1WLEVBQU1qQixtQkFLbEM3TyxFQUFLb1QsS0FBSzROLEtBQU8sU0FBVWxSLEdBQ3JCQSxFQUFNOVAsS0FBS21oQixXQUNiclIsRUFBTWpCLG1CQUNOaUIsRUFBTWpCLG9CQUFzQmcxQyxFQUFRRSxVQUFVcHBELEtBRTlDa3BELEVBQVFFLFVBQVVwcEQsR0FBUW1WLEVBQU1qQixvQkFLcEMsSUFBSW0xQyxFQUFjaGtELEVBQUtzVCxNQWtCM0IsU0FBdUJnd0MsRUFBTy81QyxHQUM1QixjQUFlQSxHQUNiLElBQUssWUFDSCxPQUNGLElBQUssU0FDSCxPQUFPQSxFQUNULElBQUssV0FDSCxPQUFPQSxFQUFPKzVDLEdBQ2hCLElBQUssVUFDSCxPQUFPLzVDLEVBQVMrNUMsRUFBTXBxQyxZQUFTOU0sRUFDakMsUUFDTXpDLEdBN0J5QnM2QyxDQUFhWCxFQUFPTyxFQUFRdndDLE9BQVN1d0MsRUFBUXZ3QyxNQUFNM1ksSUFDbEYsR0FBSXFwRCxFQUFhLENBRWZBLEVBQWNoa0QsRUFBS3NULE1BQVE1VSxFQUFPLEdBQUlzbEQsR0FFdEMsSUFBSXRwQyxFQUFRMWEsRUFBSzBhLE1BQVExYSxFQUFLMGEsT0FBUyxHQUN2QyxJQUFLLElBQUkvZSxLQUFPcW9ELEVBQ1Q5K0IsRUFBVTVSLE9BQVczWCxLQUFPdXBCLEVBQVU1UixRQUN6Q29ILEVBQU0vZSxHQUFPcW9ELEVBQVlyb0QsVUFDbEJxb0QsRUFBWXJvRCxJQUt6QixPQUFPMHJDLEVBQUVuaUIsRUFBV2xsQixFQUFNb08sS0EyQjlCLElBQUk4MUMsRUFBa0IsV0FDbEJDLEVBQXdCLFNBQVUxcEQsR0FBSyxNQUFPLElBQU1BLEVBQUUyd0IsV0FBVyxHQUFHOXVCLFNBQVMsS0FDN0U4bkQsRUFBVSxPQUtWelMsRUFBUyxTQUFVNXlDLEdBQU8sT0FBT2MsbUJBQW1CZCxHQUNyREMsUUFBUWtsRCxFQUFpQkMsR0FDekJubEQsUUFBUW9sRCxFQUFTLE1BRWhCQyxFQUFTakosbUJBdUJiLFNBQVNrSixFQUFZL1osR0FDbkIsSUFBSXJpQyxFQUFNLEdBSVYsT0FGQXFpQyxFQUFRQSxFQUFNenJDLE9BQU9FLFFBQVEsWUFBYSxNQU0xQ3VyQyxFQUFNamtDLE1BQU0sS0FBSzNKLFFBQVEsU0FBVTRuRCxHQUNqQyxJQUFJbmpELEVBQVFtakQsRUFBTXZsRCxRQUFRLE1BQU8sS0FBS3NILE1BQU0sS0FDeEMzSyxFQUFNMG9ELEVBQU9qakQsRUFBTThZLFNBQ25CMWQsRUFBTTRFLEVBQU10RSxPQUFTLEVBQ3JCdW5ELEVBQU9qakQsRUFBTWQsS0FBSyxNQUNsQixVQUVhOEwsSUFBYmxFLEVBQUl2TSxHQUNOdU0sRUFBSXZNLEdBQU9hLEVBQ0Z5SixNQUFNMUosUUFBUTJMLEVBQUl2TSxJQUMzQnVNLEVBQUl2TSxHQUFLaUYsS0FBS3BFLEdBRWQwTCxFQUFJdk0sR0FBTyxDQUFDdU0sRUFBSXZNLEdBQU1hLEtBSW5CMEwsR0FuQkVBLEVBc0JYLFNBQVNzOEMsRUFBZ0I1bkQsR0FDdkIsSUFBSXNMLEVBQU10TCxFQUFNOUIsT0FBT2lPLEtBQUtuTSxHQUFLd0MsSUFBSSxTQUFVekQsR0FDN0MsSUFBSWEsRUFBTUksRUFBSWpCLEdBRWQsUUFBWXlRLElBQVI1UCxFQUNGLE1BQU8sR0FHVCxHQUFZLE9BQVJBLEVBQ0YsT0FBT20xQyxFQUFPaDJDLEdBR2hCLEdBQUlzSyxNQUFNMUosUUFBUUMsR0FBTSxDQUN0QixJQUFJOEIsRUFBUyxHQVdiLE9BVkE5QixFQUFJRyxRQUFRLFNBQVU4bkQsUUFDUHI0QyxJQUFUcTRDLElBR1MsT0FBVEEsRUFDRm5tRCxFQUFPc0MsS0FBSyt3QyxFQUFPaDJDLElBRW5CMkMsRUFBT3NDLEtBQUsrd0MsRUFBT2gyQyxHQUFPLElBQU1nMkMsRUFBTzhTLE9BR3BDbm1ELEVBQU9nQyxLQUFLLEtBR3JCLE9BQU9xeEMsRUFBT2gyQyxHQUFPLElBQU1nMkMsRUFBT24xQyxLQUNqQytILE9BQU8sU0FBVW1nRCxHQUFLLE9BQU9BLEVBQUU1bkQsT0FBUyxJQUFNd0QsS0FBSyxLQUFPLEtBQzdELE9BQU80SCxFQUFPLElBQU1BLEVBQU8sR0FLN0IsSUFBSXk4QyxFQUFrQixPQUV0QixTQUFTQyxFQUNQQyxFQUNBakssRUFDQWtLLEVBQ0FDLEdBRUEsSUFBSUMsRUFBb0JELEdBQVVBLEVBQU85aUQsUUFBUXVpRCxlQUU3Q2phLEVBQVFxUSxFQUFTclEsT0FBUyxHQUM5QixJQUNFQSxFQUFRMXBCLEVBQU0wcEIsR0FDZCxNQUFPNWhDLElBRVQsSUFBSTI2QyxFQUFRLENBQ1Yzb0QsS0FBTWlnRCxFQUFTamdELE1BQVNrcUQsR0FBVUEsRUFBT2xxRCxLQUN6Q2lvRCxLQUFPaUMsR0FBVUEsRUFBT2pDLE1BQVMsR0FDakMxNEIsS0FBTTB3QixFQUFTMXdCLE1BQVEsSUFDdkJ6USxLQUFNbWhDLEVBQVNuaEMsTUFBUSxHQUN2Qjh3QixNQUFPQSxFQUNQcnhCLE9BQVEwaEMsRUFBUzFoQyxRQUFVLEdBQzNCK3JDLFNBQVVDLEVBQVl0SyxFQUFVb0ssR0FDaENuQixRQUFTZ0IsRUFBU00sRUFBWU4sR0FBVSxJQUsxQyxPQUhJQyxJQUNGeEIsRUFBTXdCLGVBQWlCSSxFQUFZSixFQUFnQkUsSUFFOUNscUQsT0FBT2lLLE9BQU91K0MsR0FHdkIsU0FBU3ppQyxFQUFPeGxCLEdBQ2QsR0FBSTRLLE1BQU0xSixRQUFRbEIsR0FDaEIsT0FBT0EsRUFBTStELElBQUl5aEIsR0FDWixHQUFJeGxCLEdBQTBCLGlCQUFWQSxFQUFvQixDQUM3QyxJQUFJNk0sRUFBTSxHQUNWLElBQUssSUFBSXZNLEtBQU9OLEVBQ2Q2TSxFQUFJdk0sR0FBT2tsQixFQUFNeGxCLEVBQU1NLElBRXpCLE9BQU91TSxFQUVQLE9BQU83TSxFQUtYLElBQUkrcEQsRUFBUVIsRUFBWSxLQUFNLENBQzVCMTZCLEtBQU0sTUFHUixTQUFTaTdCLEVBQWFOLEdBRXBCLElBREEsSUFBSTM4QyxFQUFNLEdBQ0gyOEMsR0FDTDM4QyxFQUFJNHBCLFFBQVEreUIsR0FDWkEsRUFBU0EsRUFBTy8xQyxPQUVsQixPQUFPNUcsRUFHVCxTQUFTZzlDLEVBQ1B4MEIsRUFDQTIwQixHQUVBLElBQUluN0IsRUFBT3dHLEVBQUl4RyxLQUNYcWdCLEVBQVE3WixFQUFJNlosV0FBc0IsSUFBVkEsSUFBbUJBLEVBQVEsSUFDdkQsSUFBSTl3QixFQUFPaVgsRUFBSWpYLEtBR2YsWUFIbUMsSUFBVEEsSUFBa0JBLEVBQU8sS0FHM0N5USxHQUFRLE1BREFtN0IsR0FBbUJiLEdBQ0ZqYSxHQUFTOXdCLEVBRzVDLFNBQVM2ckMsRUFBYTNtRCxFQUFHQyxHQUN2QixPQUFJQSxJQUFNd21ELEVBQ0R6bUQsSUFBTUMsSUFDSEEsSUFFREQsRUFBRXVyQixNQUFRdHJCLEVBQUVzckIsS0FFbkJ2ckIsRUFBRXVyQixLQUFLbHJCLFFBQVEybEQsRUFBaUIsTUFBUS9sRCxFQUFFc3JCLEtBQUtsckIsUUFBUTJsRCxFQUFpQixLQUN4RWhtRCxFQUFFOGEsT0FBUzdhLEVBQUU2YSxNQUNiOHJDLEVBQWM1bUQsRUFBRTRyQyxNQUFPM3JDLEVBQUUyckMsVUFFbEI1ckMsRUFBRWhFLE9BQVFpRSxFQUFFakUsUUFFbkJnRSxFQUFFaEUsT0FBU2lFLEVBQUVqRSxNQUNiZ0UsRUFBRThhLE9BQVM3YSxFQUFFNmEsTUFDYjhyQyxFQUFjNW1ELEVBQUU0ckMsTUFBTzNyQyxFQUFFMnJDLFFBQ3pCZ2IsRUFBYzVtRCxFQUFFdWEsT0FBUXRhLEVBQUVzYSxVQU9oQyxTQUFTcXNDLEVBQWU1bUQsRUFBR0MsR0FLekIsUUFKVyxJQUFORCxJQUFlQSxFQUFJLFNBQ2IsSUFBTkMsSUFBZUEsRUFBSSxLQUduQkQsSUFBTUMsRUFBSyxPQUFPRCxJQUFNQyxFQUM3QixJQUFJNG1ELEVBQVExcUQsT0FBT2lPLEtBQUtwSyxHQUNwQjhtRCxFQUFRM3FELE9BQU9pTyxLQUFLbkssR0FDeEIsT0FBSTRtRCxFQUFNMW9ELFNBQVcyb0QsRUFBTTNvRCxRQUdwQjBvRCxFQUFNOThDLE1BQU0sU0FBVS9NLEdBQzNCLElBQUkrcEQsRUFBTy9tRCxFQUFFaEQsR0FDVGdxRCxFQUFPL21ELEVBQUVqRCxHQUViLE1BQW9CLGlCQUFUK3BELEdBQXFDLGlCQUFUQyxFQUM5QkosRUFBY0csRUFBTUMsR0FFdEJqZ0QsT0FBT2dnRCxLQUFVaGdELE9BQU9pZ0QsS0EwQm5DLElBeUlJNVYsRUF6SUE2VixFQUFVLENBQUNsZ0QsT0FBUTVLLFFBQ25CK3FELEVBQWEsQ0FBQ25nRCxPQUFRTyxPQUV0QjYvQyxFQUFPLENBQ1RuckQsS0FBTSxhQUNOMlksTUFBTyxDQUNMdkwsR0FBSSxDQUNGNUUsS0FBTXlpRCxFQUNORyxVQUFVLEdBRVo1M0MsSUFBSyxDQUNIaEwsS0FBTXVDLE9BQ040UCxRQUFTLEtBRVgwd0MsTUFBT3hoRCxRQUNQeWhELE9BQVF6aEQsUUFDUnhGLFFBQVN3RixRQUNUczdCLFlBQWFwNkIsT0FDYndnRCxpQkFBa0J4Z0QsT0FDbEJ1VCxNQUFPLENBQ0w5VixLQUFNMGlELEVBQ052d0MsUUFBUyxVQUdic0csT0FBUSxTQUFpQnlyQixHQUN2QixJQUFJcG5CLEVBQVM5Z0IsS0FFVDRsRCxFQUFTNWxELEtBQUs2akQsUUFDZDcwQixFQUFVaHZCLEtBQUt3akQsT0FDZmp5QixFQUFNcTBCLEVBQU83dEMsUUFBUS9YLEtBQUs0SSxHQUFJb21CLEVBQVNodkIsS0FBSzhtRCxRQUM1Q3JMLEVBQVdscUIsRUFBSWtxQixTQUNmMEksRUFBUTV5QixFQUFJNHlCLE1BQ1pqSixFQUFPM3BCLEVBQUkycEIsS0FFWDhMLEVBQVUsR0FDVkMsRUFBb0JyQixFQUFPOWlELFFBQVFva0QsZ0JBQ25DQyxFQUF5QnZCLEVBQU85aUQsUUFBUXNrRCxxQkFFeENDLEVBQTJDLE1BQXJCSixFQUN0QixxQkFDQUEsRUFDQUssRUFBcUQsTUFBMUJILEVBQzNCLDJCQUNBQSxFQUNBeG1CLEVBQWtDLE1BQXBCM2dDLEtBQUsyZ0MsWUFDbkIwbUIsRUFDQXJuRCxLQUFLMmdDLFlBQ0xvbUIsRUFBNEMsTUFBekIvbUQsS0FBSyttRCxpQkFDeEJPLEVBQ0F0bkQsS0FBSyttRCxpQkFDTFEsRUFBZ0I5TCxFQUFTMXdCLEtBQ3pCMDZCLEVBQVksS0FBTWhLLEVBQVUsS0FBTW1LLEdBQ2xDekIsRUFFSjZDLEVBQVFELEdBQW9CWixFQUFZbjNCLEVBQVN1NEIsR0FDakRQLEVBQVFybUIsR0FBZTNnQyxLQUFLNm1ELE1BQ3hCRyxFQUFRRCxHQTlFaEIsU0FBMEIvM0IsRUFBU3hnQixHQUNqQyxPQUdRLElBRk53Z0IsRUFBUWpFLEtBQUtsckIsUUFBUTJsRCxFQUFpQixLQUFLbCtDLFFBQ3pDa0gsRUFBT3VjLEtBQUtsckIsUUFBUTJsRCxFQUFpQixTQUVyQ2gzQyxFQUFPOEwsTUFBUTBVLEVBQVExVSxPQUFTOUwsRUFBTzhMLE9BSzdDLFNBQXdCMFUsRUFBU3hnQixHQUMvQixJQUFLLElBQUloUyxLQUFPZ1MsRUFDZCxLQUFNaFMsS0FBT3d5QixHQUNYLE9BQU8sRUFHWCxPQUFPLEVBVkx3NEIsQ0FBY3g0QixFQUFRb2MsTUFBTzU4QixFQUFPNDhCLE9BeUVoQ3FjLENBQWdCejRCLEVBQVN1NEIsR0FFN0IsSUFBSXB3QyxFQUFVLFNBQVUzTixHQUNsQmsrQyxFQUFXbCtDLEtBQ1RzWCxFQUFPamhCLFFBQ1QrbEQsRUFBTy9sRCxRQUFRNDdDLEdBRWZtSyxFQUFPbmtELEtBQUtnNkMsS0FLZGhpQyxFQUFLLENBQUVrdUMsTUFBT0QsR0FDZDVnRCxNQUFNMUosUUFBUTRDLEtBQUs4WixPQUNyQjlaLEtBQUs4WixNQUFNdGMsUUFBUSxTQUFVZ00sR0FBS2lRLEVBQUdqUSxHQUFLMk4sSUFFMUNzQyxFQUFHelosS0FBSzhaLE9BQVMzQyxFQUduQixJQUFJdFcsRUFBTyxDQUNUaW5CLE1BQU9rL0IsR0FHVCxHQUFpQixNQUFiaG5ELEtBQUtnUCxJQUNQbk8sRUFBSzRZLEdBQUtBLEVBQ1Y1WSxFQUFLMGEsTUFBUSxDQUFFMi9CLEtBQU1BLE9BQ2hCLENBRUwsSUFBSTE3QyxFQXFDVixTQUFTb29ELEVBQVkzNEMsR0FDbkIsR0FBSUEsRUFFRixJQURBLElBQUlvQixFQUNLcFYsRUFBSSxFQUFHQSxFQUFJZ1UsRUFBU3RSLE9BQVExQyxJQUFLLENBRXhDLEdBQWtCLE9BRGxCb1YsRUFBUXBCLEVBQVNoVSxJQUNQK1QsSUFDUixPQUFPcUIsRUFFVCxHQUFJQSxFQUFNcEIsV0FBYW9CLEVBQVF1M0MsRUFBV3YzQyxFQUFNcEIsV0FDOUMsT0FBT29CLEdBOUNEdTNDLENBQVc1bkQsS0FBS21kLE9BQU9oSCxTQUMvQixHQUFJM1csRUFFRkEsRUFBRXFRLFVBQVcsR0FDRHJRLEVBQUVxQixLQUFPdEIsRUFBTyxHQUFJQyxFQUFFcUIsT0FDNUI0WSxHQUFLQSxHQUNFamEsRUFBRXFCLEtBQUswYSxNQUFRaGMsRUFBTyxHQUFJQyxFQUFFcUIsS0FBSzBhLFFBQ3ZDMi9CLEtBQU9BLE9BR2RyNkMsRUFBSzRZLEdBQUtBLEVBSWQsT0FBT3l1QixFQUFFbG9DLEtBQUtnUCxJQUFLbk8sRUFBTWIsS0FBS21kLE9BQU9oSCxXQUl6QyxTQUFTdXhDLEVBQVlsK0MsR0FFbkIsS0FBSUEsRUFBRXErQyxTQUFXcitDLEVBQUUrUSxRQUFVL1EsRUFBRXMrQyxTQUFXdCtDLEVBQUV1K0MsVUFFeEN2K0MsRUFBRXcrQyx1QkFFVy82QyxJQUFiekQsRUFBRXkrQyxRQUFxQyxJQUFieitDLEVBQUV5K0MsUUFBaEMsQ0FFQSxHQUFJeitDLEVBQUU4dkIsZUFBaUI5dkIsRUFBRTh2QixjQUFjZ0QsYUFBYyxDQUNuRCxJQUFJOXRCLEVBQVNoRixFQUFFOHZCLGNBQWNnRCxhQUFhLFVBQzFDLEdBQUksY0FBY3I1QixLQUFLdUwsR0FBVyxPQU1wQyxPQUhJaEYsRUFBRTArQyxnQkFDSjErQyxFQUFFMCtDLGtCQUVHLEdBc0VULElBQUluOEMsRUFBOEIsb0JBQVgvTSxPQUl2QixTQUFTbXBELEVBQ1BDLEVBQ0FsZ0MsRUFDQTQrQixHQUVBLElBQUl1QixFQUFZRCxFQUFTcGdELE9BQU8sR0FDaEMsR0FBa0IsTUFBZHFnRCxFQUNGLE9BQU9ELEVBR1QsR0FBa0IsTUFBZEMsR0FBbUMsTUFBZEEsRUFDdkIsT0FBT25nQyxFQUFPa2dDLEVBR2hCLElBQUkzTixFQUFRdnlCLEVBQUsvZ0IsTUFBTSxLQUtsQjIvQyxHQUFXck0sRUFBTUEsRUFBTTk4QyxPQUFTLElBQ25DODhDLEVBQU0zckMsTUFLUixJQURBLElBQUlrYyxFQUFXbzlCLEVBQVN2b0QsUUFBUSxNQUFPLElBQUlzSCxNQUFNLEtBQ3hDbE0sRUFBSSxFQUFHQSxFQUFJK3ZCLEVBQVNydEIsT0FBUTFDLElBQUssQ0FDeEMsSUFBSXF0RCxFQUFVdDlCLEVBQVMvdkIsR0FDUCxPQUFacXRELEVBQ0Y3TixFQUFNM3JDLE1BQ2UsTUFBWnc1QyxHQUNUN04sRUFBTWg1QyxLQUFLNm1ELEdBU2YsTUFKaUIsS0FBYjdOLEVBQU0sSUFDUkEsRUFBTTluQixRQUFRLElBR1Q4bkIsRUFBTXQ1QyxLQUFLLEtBMEJwQixTQUFTb25ELEVBQVd4OUIsR0FDbEIsT0FBT0EsRUFBS2xyQixRQUFRLFFBQVMsS0FHL0IsSUFBSTJvRCxFQUFVMWhELE1BQU0xSixTQUFXLFNBQVVpSyxHQUN2QyxNQUE4QyxrQkFBdkMxTCxPQUFPa0IsVUFBVU0sU0FBUy9CLEtBQUtpTSxJQU1wQ29oRCxFQUFpQkMsRUFDakJDLEVBQVVsVixFQUNWbVYsRUFzR0osU0FBa0JocEQsRUFBS2tELEdBQ3JCLE9BQU8rbEQsRUFBaUJwVixFQUFNN3pDLEVBQUtrRCxLQXRHakNnbUQsRUFBcUJELEVBQ3JCRSxFQUFtQkMsRUFPbkJDLEVBQWMsSUFBSXI5QyxPQUFPLENBRzNCLFVBT0EsMEdBQ0F6SyxLQUFLLEtBQU0sS0FTYixTQUFTc3lDLEVBQU83ekMsRUFBS2tELEdBUW5CLElBUEEsSUFLSWlHLEVBTEFtZ0QsRUFBUyxHQUNUMXNELEVBQU0sRUFDTjBJLEVBQVEsRUFDUjZsQixFQUFPLEdBQ1BvK0IsRUFBbUJybUQsR0FBV0EsRUFBUXNtRCxXQUFhLElBR2YsT0FBaENyZ0QsRUFBTWtnRCxFQUFZSSxLQUFLenBELEtBQWUsQ0FDNUMsSUFBSXZFLEVBQUkwTixFQUFJLEdBQ1J1Z0QsRUFBVXZnRCxFQUFJLEdBQ2R3Z0QsRUFBU3hnRCxFQUFJN0QsTUFLakIsR0FKQTZsQixHQUFRbnJCLEVBQUlxSSxNQUFNL0MsRUFBT3FrRCxHQUN6QnJrRCxFQUFRcWtELEVBQVNsdUQsRUFBRXNDLE9BR2YyckQsRUFDRnYrQixHQUFRdStCLEVBQVEsT0FEbEIsQ0FLQSxJQUFJM3NDLEVBQU8vYyxFQUFJc0YsR0FDWHNrRCxFQUFTemdELEVBQUksR0FDYnZOLEVBQU91TixFQUFJLEdBQ1hvUSxFQUFVcFEsRUFBSSxHQUNkMGdELEVBQVExZ0QsRUFBSSxHQUNaMmdELEVBQVczZ0QsRUFBSSxHQUNmNGdELEVBQVc1Z0QsRUFBSSxHQUdmZ2lCLElBQ0ZtK0IsRUFBT3puRCxLQUFLc3BCLEdBQ1pBLEVBQU8sSUFHVCxJQUFJb2tCLEVBQW9CLE1BQVZxYSxHQUEwQixNQUFSN3NDLEdBQWdCQSxJQUFTNnNDLEVBQ3JESSxFQUFzQixNQUFiRixHQUFpQyxNQUFiQSxFQUM3QkcsRUFBd0IsTUFBYkgsR0FBaUMsTUFBYkEsRUFDL0JOLEVBQVlyZ0QsRUFBSSxJQUFNb2dELEVBQ3RCeDZCLEVBQVV4VixHQUFXc3dDLEVBRXpCUCxFQUFPem5ELEtBQUssQ0FDVmpHLEtBQU1BLEdBQVFnQixJQUNkZ3RELE9BQVFBLEdBQVUsR0FDbEJKLFVBQVdBLEVBQ1hTLFNBQVVBLEVBQ1ZELE9BQVFBLEVBQ1J6YSxRQUFTQSxFQUNUd2EsV0FBWUEsRUFDWmg3QixRQUFTQSxFQUFVbTdCLEVBQVluN0IsR0FBWWc3QixFQUFXLEtBQU8sS0FBT0ksRUFBYVgsR0FBYSxTQWNsRyxPQVRJbGtELEVBQVF0RixFQUFJakMsU0FDZG90QixHQUFRbnJCLEVBQUlpN0MsT0FBTzMxQyxJQUlqQjZsQixHQUNGbStCLEVBQU96bkQsS0FBS3NwQixHQUdQbStCLEVBb0JULFNBQVNjLEVBQTBCcHFELEdBQ2pDLE9BQU9xcUQsVUFBVXJxRCxHQUFLQyxRQUFRLFVBQVcsU0FBVXZFLEdBQ2pELE1BQU8sSUFBTUEsRUFBRTJ3QixXQUFXLEdBQUc5dUIsU0FBUyxJQUFJMkssZ0JBbUI5QyxTQUFTK2dELEVBQWtCSyxHQUt6QixJQUhBLElBQUl4NkIsRUFBVSxJQUFJNW5CLE1BQU1vaUQsRUFBT3ZyRCxRQUd0QjFDLEVBQUksRUFBR0EsRUFBSWl1RCxFQUFPdnJELE9BQVExQyxJQUNSLGlCQUFkaXVELEVBQU9qdUQsS0FDaEJ5ekIsRUFBUXp6QixHQUFLLElBQUkyUSxPQUFPLE9BQVNzOUMsRUFBT2p1RCxHQUFHMHpCLFFBQVUsT0FJekQsT0FBTyxTQUFVbHhCLEVBQUtxUCxHQU1wQixJQUxBLElBQUlpZSxFQUFPLEdBQ1BscUIsRUFBT3BELEdBQU8sR0FFZCswQyxHQURVMWxDLEdBQVEsSUFDRG85QyxPQUFTRixFQUEyQnRwRCxtQkFFaER6RixFQUFJLEVBQUdBLEVBQUlpdUQsRUFBT3ZyRCxPQUFRMUMsSUFBSyxDQUN0QyxJQUFJcWhELEVBQVE0TSxFQUFPanVELEdBRW5CLEdBQXFCLGlCQUFWcWhELEVBQVgsQ0FNQSxJQUNJZ00sRUFEQXBzRCxFQUFRMkUsRUFBS3k3QyxFQUFNOWdELE1BR3ZCLEdBQWEsTUFBVFUsRUFBZSxDQUNqQixHQUFJb2dELEVBQU11TixTQUFVLENBRWR2TixFQUFNbk4sVUFDUnBrQixHQUFRdXhCLEVBQU1rTixRQUdoQixTQUVBLE1BQU0sSUFBSXBOLFVBQVUsYUFBZUUsRUFBTTlnRCxLQUFPLG1CQUlwRCxHQUFJZ3RELEVBQVF0c0QsR0FBWixDQUNFLElBQUtvZ0QsRUFBTXNOLE9BQ1QsTUFBTSxJQUFJeE4sVUFBVSxhQUFlRSxFQUFNOWdELEtBQU8sa0NBQW9DbUYsS0FBS0MsVUFBVTFFLEdBQVMsS0FHOUcsR0FBcUIsSUFBakJBLEVBQU15QixPQUFjLENBQ3RCLEdBQUkyK0MsRUFBTXVOLFNBQ1IsU0FFQSxNQUFNLElBQUl6TixVQUFVLGFBQWVFLEVBQU05Z0QsS0FBTyxxQkFJcEQsSUFBSyxJQUFJbUksRUFBSSxFQUFHQSxFQUFJekgsRUFBTXlCLE9BQVFnRyxJQUFLLENBR3JDLEdBRkEya0QsRUFBVTlWLEVBQU90MkMsRUFBTXlILEtBRWxCK3FCLEVBQVF6ekIsR0FBR2dJLEtBQUtxbEQsR0FDbkIsTUFBTSxJQUFJbE0sVUFBVSxpQkFBbUJFLEVBQU05Z0QsS0FBTyxlQUFpQjhnRCxFQUFNM3RCLFFBQVUsb0JBQXNCaHVCLEtBQUtDLFVBQVUwbkQsR0FBVyxLQUd2SXY5QixJQUFlLElBQU5wbkIsRUFBVTI0QyxFQUFNa04sT0FBU2xOLEVBQU04TSxXQUFhZCxPQXBCekQsQ0E0QkEsR0FGQUEsRUFBVWhNLEVBQU1xTixTQTVFYk0sVUE0RXVDL3RELEdBNUV4QjJELFFBQVEsUUFBUyxTQUFVdkUsR0FDL0MsTUFBTyxJQUFNQSxFQUFFMndCLFdBQVcsR0FBRzl1QixTQUFTLElBQUkySyxnQkEyRVcwcUMsRUFBT3QyQyxJQUVyRHd5QixFQUFRenpCLEdBQUdnSSxLQUFLcWxELEdBQ25CLE1BQU0sSUFBSWxNLFVBQVUsYUFBZUUsRUFBTTlnRCxLQUFPLGVBQWlCOGdELEVBQU0zdEIsUUFBVSxvQkFBc0IyNUIsRUFBVSxLQUduSHY5QixHQUFRdXhCLEVBQU1rTixPQUFTbEIsUUFyRHJCdjlCLEdBQVF1eEIsRUF3RFosT0FBT3Z4QixHQVVYLFNBQVNnL0IsRUFBY25xRCxHQUNyQixPQUFPQSxFQUFJQyxRQUFRLDZCQUE4QixRQVNuRCxTQUFTaXFELEVBQWFMLEdBQ3BCLE9BQU9BLEVBQU01cEQsUUFBUSxnQkFBaUIsUUFVeEMsU0FBU3NxRCxFQUFZQyxFQUFJeGdELEdBRXZCLE9BREF3Z0QsRUFBR3hnRCxLQUFPQSxFQUNId2dELEVBU1QsU0FBU0MsRUFBT3ZuRCxHQUNkLE9BQU9BLEVBQVF3bkQsVUFBWSxHQUFLLElBd0VsQyxTQUFTdEIsRUFBZ0JFLEVBQVF0L0MsRUFBTTlHLEdBQ2hDMGxELEVBQVE1K0MsS0FDWDlHLEVBQWtDOEcsR0FBUTlHLEVBQzFDOEcsRUFBTyxJQVVULElBTEEsSUFBSTBqQyxHQUZKeHFDLEVBQVVBLEdBQVcsSUFFQXdxQyxPQUNqQi9PLEdBQXNCLElBQWhCejdCLEVBQVF5N0IsSUFDZDRsQixFQUFRLEdBR0hscEQsRUFBSSxFQUFHQSxFQUFJaXVELEVBQU92ckQsT0FBUTFDLElBQUssQ0FDdEMsSUFBSXFoRCxFQUFRNE0sRUFBT2p1RCxHQUVuQixHQUFxQixpQkFBVnFoRCxFQUNUNkgsR0FBUzRGLEVBQWF6TixPQUNqQixDQUNMLElBQUlrTixFQUFTTyxFQUFhek4sRUFBTWtOLFFBQzVCcndDLEVBQVUsTUFBUW1qQyxFQUFNM3RCLFFBQVUsSUFFdEMva0IsRUFBS25JLEtBQUs2NkMsR0FFTkEsRUFBTXNOLFNBQ1J6d0MsR0FBVyxNQUFRcXdDLEVBQVNyd0MsRUFBVSxNQWF4Q2dyQyxHQU5JaHJDLEVBSkFtakMsRUFBTXVOLFNBQ0h2TixFQUFNbk4sUUFHQ3FhLEVBQVMsSUFBTXJ3QyxFQUFVLEtBRnpCLE1BQVFxd0MsRUFBUyxJQUFNcndDLEVBQVUsTUFLbkNxd0MsRUFBUyxJQUFNcndDLEVBQVUsS0FPekMsSUFBSWl3QyxFQUFZVyxFQUFham5ELEVBQVFzbUQsV0FBYSxLQUM5Q21CLEVBQW9CcEcsRUFBTWw4QyxPQUFPbWhELEVBQVV6ckQsVUFBWXlyRCxFQWtCM0QsT0FaSzliLElBQ0g2VyxHQUFTb0csRUFBb0JwRyxFQUFNbDhDLE1BQU0sR0FBSW1oRCxFQUFVenJELFFBQVV3bUQsR0FBUyxNQUFRaUYsRUFBWSxXQUk5RmpGLEdBREU1bEIsRUFDTyxJQUlBK08sR0FBVWlkLEVBQW9CLEdBQUssTUFBUW5CLEVBQVksTUFHM0RlLEVBQVcsSUFBSXYrQyxPQUFPLElBQU11NEMsRUFBT2tHLEVBQU12bkQsSUFBVzhHLEdBZTdELFNBQVM4K0MsRUFBYzM5QixFQUFNbmhCLEVBQU05RyxHQVFqQyxPQVBLMGxELEVBQVE1K0MsS0FDWDlHLEVBQWtDOEcsR0FBUTlHLEVBQzFDOEcsRUFBTyxJQUdUOUcsRUFBVUEsR0FBVyxHQUVqQmlvQixhQUFnQm5mLE9BbEp0QixTQUF5Qm1mLEVBQU1uaEIsR0FFN0IsSUFBSTRnRCxFQUFTei9CLEVBQUs5cEIsT0FBT3lMLE1BQU0sYUFFL0IsR0FBSTg5QyxFQUNGLElBQUssSUFBSXZ2RCxFQUFJLEVBQUdBLEVBQUl1dkQsRUFBTzdzRCxPQUFRMUMsSUFDakMyTyxFQUFLbkksS0FBSyxDQUNSakcsS0FBTVAsRUFDTnV1RCxPQUFRLEtBQ1JKLFVBQVcsS0FDWFMsVUFBVSxFQUNWRCxRQUFRLEVBQ1J6YSxTQUFTLEVBQ1R3YSxVQUFVLEVBQ1ZoN0IsUUFBUyxPQUtmLE9BQU93N0IsRUFBV3AvQixFQUFNbmhCLEdBZ0lmNmdELENBQWUxL0IsRUFBNkJuaEIsR0FHakQ0K0MsRUFBUXo5QixHQXhIZCxTQUF3QkEsRUFBTW5oQixFQUFNOUcsR0FHbEMsSUFGQSxJQUFJYixFQUFRLEdBRUhoSCxFQUFJLEVBQUdBLEVBQUk4dkIsRUFBS3B0QixPQUFRMUMsSUFDL0JnSCxFQUFNUixLQUFLaW5ELEVBQWEzOUIsRUFBSzl2QixHQUFJMk8sRUFBTTlHLEdBQVM3QixRQUtsRCxPQUFPa3BELEVBRk0sSUFBSXYrQyxPQUFPLE1BQVEzSixFQUFNZCxLQUFLLEtBQU8sSUFBS2twRCxFQUFNdm5ELElBRW5DOEcsR0FnSGpCOGdELENBQXFDMy9CLEVBQThCbmhCLEVBQU85RyxHQXJHckYsU0FBeUJpb0IsRUFBTW5oQixFQUFNOUcsR0FDbkMsT0FBT2ttRCxFQUFldlYsRUFBTTFvQixFQUFNam9CLEdBQVU4RyxFQUFNOUcsR0F1RzNDNm5ELENBQXNDNS9CLEVBQThCbmhCLEVBQU85RyxHQUVwRjJsRCxFQUFlaFYsTUFBUWtWLEVBQ3ZCRixFQUFlbUMsUUFBVWhDLEVBQ3pCSCxFQUFlSSxpQkFBbUJDLEVBQ2xDTCxFQUFlTyxlQUFpQkQsRUFLaEMsSUFBSThCLEVBQXFCbHZELE9BQU9ZLE9BQU8sTUFFdkMsU0FBU3V1RCxFQUNQLy9CLEVBQ0FoUixFQUNBZ3hDLEdBRUFoeEMsRUFBU0EsR0FBVSxHQUNuQixJQUNFLElBQUlpeEMsRUFDRkgsRUFBbUI5L0IsS0FDbEI4L0IsRUFBbUI5L0IsR0FBUTA5QixFQUFlbUMsUUFBUTcvQixJQUtyRCxPQUZJaFIsRUFBT2t4QyxZQUFhbHhDLEVBQU8sR0FBS0EsRUFBT2t4QyxXQUVwQ0QsRUFBT2p4QyxFQUFRLENBQUVtd0MsUUFBUSxJQUNoQyxNQUFPMWdELEdBSVAsTUFBTyxHQWJULGVBZ0JTdVEsRUFBTyxJQU1sQixTQUFTbXhDLEdBQ1BDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEdBR0EsSUFBSUMsRUFBV0gsR0FBZSxHQUUxQkksRUFBVUgsR0FBYzF2RCxPQUFPWSxPQUFPLE1BRXRDa3ZELEVBQVVILEdBQWMzdkQsT0FBT1ksT0FBTyxNQUUxQzR1RCxFQUFPM3RELFFBQVEsU0FBVTJtRCxJQW9CM0IsU0FBU3VILEVBQ1BILEVBQ0FDLEVBQ0FDLEVBQ0F0SCxFQUNBeDBDLEVBQ0FnOEMsR0FFQSxJQUFJNWdDLEVBQU9vNUIsRUFBTXA1QixLQUNqQixJQUFJdnZCLEVBQU8yb0QsRUFBTTNvRCxLQUNiZ1AsRUFTSixJQUFJb2hELEVBQXNCekgsRUFBTXlILHFCQUF1QixHQUN2RCxJQUFJQyxFQXVHTixTQUF3QjlnQyxFQUFNcGIsRUFBUTI5QixHQUMvQkEsSUFBVXZpQixFQUFPQSxFQUFLbHJCLFFBQVEsTUFBTyxLQUMxQyxHQUFnQixNQUFaa3JCLEVBQUssR0FBYyxPQUFPQSxFQUM5QixHQUFjLE1BQVZwYixFQUFrQixPQUFPb2IsRUFDN0IsT0FBT3c5QixFQUFZNTRDLEVBQU9vYixLQUFRLElBQU1BLEdBM0duQitnQyxDQUNuQi9nQyxFQUNBcGIsRUFDQWk4QyxFQUFvQnRlLFFBR2Esa0JBQXhCNlcsRUFBTTRILGdCQUNmSCxFQUFvQnRCLFVBQVluRyxFQUFNNEgsZUFHeEMsSUFBSXJHLEVBQVMsQ0FDWDM2QixLQUFNOGdDLEVBQ05HLE1BQU9DLEdBQWtCSixFQUFnQkQsR0FDekNsK0IsV0FBWXkyQixFQUFNejJCLFlBQWMsQ0FBRXZYLFFBQVNndUMsRUFBTXArQixXQUNqRDYrQixVQUFXLEdBQ1hwcEQsS0FBTUEsRUFDTm1VLE9BQVFBLEVBQ1JnOEMsUUFBU0EsRUFDVE8sU0FBVS9ILEVBQU0rSCxTQUNoQmxzQixZQUFhbWtCLEVBQU1ua0IsWUFDbkJ5akIsS0FBTVUsRUFBTVYsTUFBUSxHQUNwQnR2QyxNQUFzQixNQUFmZ3dDLEVBQU1od0MsTUFDVCxHQUNBZ3dDLEVBQU16MkIsV0FDSnkyQixFQUFNaHdDLE1BQ04sQ0FBRWdDLFFBQVNndUMsRUFBTWh3QyxRQUdyQmd3QyxFQUFNbDFDLFVBZ0JSazFDLEVBQU1sMUMsU0FBU3pSLFFBQVEsU0FBVTZTLEdBQy9CLElBQUk4N0MsRUFBZVIsRUFDZnBELEVBQVdvRCxFQUFVLElBQU90N0MsRUFBTTBhLFdBQ2xDOWQsRUFDSnkrQyxFQUFlSCxFQUFVQyxFQUFTQyxFQUFTcDdDLEVBQU9xMUMsRUFBUXlHLEtBSTlELFFBQW9CbC9DLElBQWhCazNDLEVBQU1pSSxNQUFxQixDQUM3QixJQUFJQyxFQUFVdmxELE1BQU0xSixRQUFRK21ELEVBQU1pSSxPQUM5QmpJLEVBQU1pSSxNQUNOLENBQUNqSSxFQUFNaUksT0FFWEMsRUFBUTd1RCxRQUFRLFNBQVU0dUQsR0FDeEIsSUFBSUUsRUFBYSxDQUNmdmhDLEtBQU1xaEMsRUFDTm45QyxTQUFVazFDLEVBQU1sMUMsVUFFbEJ5OEMsRUFDRUgsRUFDQUMsRUFDQUMsRUFDQWEsRUFDQTM4QyxFQUNBKzFDLEVBQU8zNkIsTUFBUSxPQUtoQnlnQyxFQUFROUYsRUFBTzM2QixRQUNsQndnQyxFQUFTOXBELEtBQUtpa0QsRUFBTzM2QixNQUNyQnlnQyxFQUFROUYsRUFBTzM2QixNQUFRMjZCLEdBR3JCbHFELElBQ0dpd0QsRUFBUWp3RCxLQUNYaXdELEVBQVFqd0QsR0FBUWtxRCxJQXZIbEJnRyxDQUFlSCxFQUFVQyxFQUFTQyxFQUFTdEgsS0FJN0MsSUFBSyxJQUFJbHBELEVBQUksRUFBR0MsRUFBSXF3RCxFQUFTNXRELE9BQVExQyxFQUFJQyxFQUFHRCxJQUN0QixNQUFoQnN3RCxFQUFTdHdELEtBQ1hzd0QsRUFBUzlwRCxLQUFLOHBELEVBQVNoa0QsT0FBT3RNLEVBQUcsR0FBRyxJQUNwQ0MsSUFDQUQsS0FJSixNQUFPLENBQ0xzd0QsU0FBVUEsRUFDVkMsUUFBU0EsRUFDVEMsUUFBU0EsR0FtSGIsU0FBU1EsR0FBbUJsaEMsRUFBTTZnQyxHQVNoQyxPQVJZbkQsRUFBZTE5QixFQUFNLEdBQUk2Z0MsR0FvQnZDLFNBQVNXLEdBQ1AzOEMsRUFDQW9mLEVBQ0E4M0IsRUFDQWxCLEdBRUEsSUFBSWpwQyxFQUFzQixpQkFBUi9NLEVBQW1CLENBQUVtYixLQUFNbmIsR0FBUUEsRUFFckQsR0FBSStNLEVBQUtULFlBQ1AsT0FBT1MsRUFDRixHQUFJQSxFQUFLbmhCLEtBQ2QsT0FBTytELEVBQU8sR0FBSXFRLEdBSXBCLElBQUsrTSxFQUFLb08sTUFBUXBPLEVBQUs1QyxRQUFVaVYsRUFBUyxFQUN4Q3JTLEVBQU9wZCxFQUFPLEdBQUlvZCxJQUNiVCxhQUFjLEVBQ25CLElBQUluQyxFQUFTeGEsRUFBT0EsRUFBTyxHQUFJeXZCLEVBQVFqVixRQUFTNEMsRUFBSzVDLFFBQ3JELEdBQUlpVixFQUFReHpCLEtBQ1ZtaEIsRUFBS25oQixLQUFPd3pCLEVBQVF4ekIsS0FDcEJtaEIsRUFBSzVDLE9BQVNBLE9BQ1QsR0FBSWlWLEVBQVEwMUIsUUFBUS9tRCxPQUFRLENBQ2pDLElBQUk2dUQsRUFBVXg5QixFQUFRMDFCLFFBQVExMUIsRUFBUTAxQixRQUFRL21ELE9BQVMsR0FBR290QixLQUMxRHBPLEVBQUtvTyxLQUFPKy9CLEVBQVcwQixFQUFTenlDLEVBQW9CaVYsRUFBUWpFLFdBQ25EdmdCLEVBR1gsT0FBT21TLEVBR1QsSUFBSTh2QyxFQWpyQk4sU0FBb0IxaEMsR0FDbEIsSUFBSXpRLEVBQU8sR0FDUDh3QixFQUFRLEdBRVJzaEIsRUFBWTNoQyxFQUFLempCLFFBQVEsS0FDekJvbEQsR0FBYSxJQUNmcHlDLEVBQU95USxFQUFLOWlCLE1BQU15a0QsR0FDbEIzaEMsRUFBT0EsRUFBSzlpQixNQUFNLEVBQUd5a0QsSUFHdkIsSUFBSUMsRUFBYTVoQyxFQUFLempCLFFBQVEsS0FNOUIsT0FMSXFsRCxHQUFjLElBQ2hCdmhCLEVBQVFyZ0IsRUFBSzlpQixNQUFNMGtELEVBQWEsR0FDaEM1aEMsRUFBT0EsRUFBSzlpQixNQUFNLEVBQUcwa0QsSUFHaEIsQ0FDTDVoQyxLQUFNQSxFQUNOcWdCLE1BQU9BLEVBQ1A5d0IsS0FBTUEsR0E4cEJTMlEsQ0FBVXRPLEVBQUtvTyxNQUFRLElBQ3BDNmhDLEVBQVk1OUIsR0FBV0EsRUFBUWpFLE1BQVMsSUFDeENBLEVBQU8waEMsRUFBVzFoQyxLQUNsQm85QixFQUFZc0UsRUFBVzFoQyxLQUFNNmhDLEVBQVU5RixHQUFVbnFDLEVBQUttcUMsUUFDdEQ4RixFQUVBeGhCLEVBL25DTixTQUNFQSxFQUNBeWhCLEVBQ0FDLFFBRW9CLElBQWZELElBQXdCQSxFQUFhLElBRTFDLElBQ0lFLEVBREF0WixFQUFRcVosR0FBZTNILEVBRTNCLElBQ0U0SCxFQUFjdFosRUFBTXJJLEdBQVMsSUFDN0IsTUFBTzVoQyxHQUVQdWpELEVBQWMsR0FFaEIsSUFBSyxJQUFJdndELEtBQU9xd0QsRUFDZEUsRUFBWXZ3RCxHQUFPcXdELEVBQVdyd0QsR0FFaEMsT0FBT3V3RCxFQTZtQ0tDLENBQ1ZQLEVBQVdyaEIsTUFDWHp1QixFQUFLeXVCLE1BQ0x3YSxHQUFVQSxFQUFPOWlELFFBQVFxaUQsWUFHdkI3cUMsRUFBT3FDLEVBQUtyQyxNQUFRbXlDLEVBQVdueUMsS0FLbkMsT0FKSUEsR0FBMkIsTUFBbkJBLEVBQUt0UyxPQUFPLEtBQ3RCc1MsRUFBTyxJQUFNQSxHQUdSLENBQ0w0QixhQUFhLEVBQ2I2TyxLQUFNQSxFQUNOcWdCLE1BQU9BLEVBQ1A5d0IsS0FBTUEsR0FRVixTQUFTMnlDLEdBQ1A5QixFQUNBdkYsR0FFQSxJQUFJcjBCLEVBQU0yNUIsR0FBZUMsR0FDckJJLEVBQVdoNkIsRUFBSWc2QixTQUNmQyxFQUFVajZCLEVBQUlpNkIsUUFDZEMsRUFBVWw2QixFQUFJazZCLFFBTWxCLFNBQVMvK0MsRUFDUGtELEVBQ0FzOUMsRUFDQXZILEdBRUEsSUFBSWxLLEVBQVc4USxHQUFrQjM4QyxFQUFLczlDLEdBQWMsRUFBT3RILEdBQ3ZEcHFELEVBQU9pZ0QsRUFBU2pnRCxLQUVwQixHQUFJQSxFQUFNLENBQ1IsSUFBSWtxRCxFQUFTK0YsRUFBUWp3RCxHQUlyQixJQUFLa3FELEVBQVUsT0FBT3lILEVBQWEsS0FBTTFSLEdBQ3pDLElBQUkyUixFQUFhMUgsRUFBT3NHLE1BQU1waUQsS0FDM0J4RSxPQUFPLFNBQVU1SSxHQUFPLE9BQVFBLEVBQUlxdEQsV0FDcEM1cEQsSUFBSSxTQUFVekQsR0FBTyxPQUFPQSxFQUFJaEIsT0FNbkMsR0FKK0IsaUJBQXBCaWdELEVBQVMxaEMsU0FDbEIwaEMsRUFBUzFoQyxPQUFTLElBR2hCbXpDLEdBQStDLGlCQUF4QkEsRUFBYW56QyxPQUN0QyxJQUFLLElBQUl2ZCxLQUFPMHdELEVBQWFuekMsU0FDckJ2ZCxLQUFPaS9DLEVBQVMxaEMsU0FBV3F6QyxFQUFXOWxELFFBQVE5SyxJQUFRLElBQzFEaS9DLEVBQVMxaEMsT0FBT3ZkLEdBQU8wd0QsRUFBYW56QyxPQUFPdmQsSUFNakQsT0FEQWkvQyxFQUFTMXdCLEtBQU8rL0IsRUFBV3BGLEVBQU8zNkIsS0FBTTB3QixFQUFTMWhDLFFBQzFDb3pDLEVBQWF6SCxFQUFRakssRUFBVWtLLEdBQ2pDLEdBQUlsSyxFQUFTMXdCLEtBQU0sQ0FDeEIwd0IsRUFBUzFoQyxPQUFTLEdBQ2xCLElBQUssSUFBSTllLEVBQUksRUFBR0EsRUFBSXN3RCxFQUFTNXRELE9BQVExQyxJQUFLLENBQ3hDLElBQUk4dkIsRUFBT3dnQyxFQUFTdHdELEdBQ2hCb3lELEVBQVc3QixFQUFRemdDLEdBQ3ZCLEdBQUl1aUMsR0FBV0QsRUFBU3JCLE1BQU92USxFQUFTMXdCLEtBQU0wd0IsRUFBUzFoQyxRQUNyRCxPQUFPb3pDLEVBQWFFLEVBQVU1UixFQUFVa0ssSUFLOUMsT0FBT3dILEVBQWEsS0FBTTFSLEdBRzVCLFNBQVN5USxFQUNQeEcsRUFDQWpLLEdBRUEsSUFBSThSLEVBQW1CN0gsRUFBT3dHLFNBQzFCQSxFQUF1QyxtQkFBckJxQixFQUNsQkEsRUFBaUI5SCxFQUFZQyxFQUFRakssRUFBVSxLQUFNbUssSUFDckQySCxFQU1KLEdBSndCLGlCQUFickIsSUFDVEEsRUFBVyxDQUFFbmhDLEtBQU1taEMsS0FHaEJBLEdBQWdDLGlCQUFiQSxFQU10QixPQUFPaUIsRUFBYSxLQUFNMVIsR0FHNUIsSUFBSTJPLEVBQUs4QixFQUNMMXdELEVBQU80dUQsRUFBRzV1RCxLQUNWdXZCLEVBQU9xL0IsRUFBR3IvQixLQUNWcWdCLEVBQVFxUSxFQUFTclEsTUFDakI5d0IsRUFBT21oQyxFQUFTbmhDLEtBQ2hCUCxFQUFTMGhDLEVBQVMxaEMsT0FLdEIsR0FKQXF4QixFQUFRZ2YsRUFBR3R0RCxlQUFlLFNBQVdzdEQsRUFBR2hmLE1BQVFBLEVBQ2hEOXdCLEVBQU84dkMsRUFBR3R0RCxlQUFlLFFBQVVzdEQsRUFBRzl2QyxLQUFPQSxFQUM3Q1AsRUFBU3F3QyxFQUFHdHRELGVBQWUsVUFBWXN0RCxFQUFHcndDLE9BQVNBLEVBRS9DdmUsRUFBTSxDQUVXaXdELEVBQVFqd0QsR0FJM0IsT0FBT2tSLEVBQU0sQ0FDWHdQLGFBQWEsRUFDYjFnQixLQUFNQSxFQUNONHZDLE1BQU9BLEVBQ1A5d0IsS0FBTUEsRUFDTlAsT0FBUUEsUUFDUDlNLEVBQVd3dUMsR0FDVCxHQUFJMXdCLEVBQU0sQ0FFZixJQUFJeWhDLEVBa0ZWLFNBQTRCemhDLEVBQU0yNkIsR0FDaEMsT0FBT3lDLEVBQVlwOUIsRUFBTTI2QixFQUFPLzFDLE9BQVMrMUMsRUFBTy8xQyxPQUFPb2IsS0FBTyxLQUFLLEdBbkZqRHlpQyxDQUFrQnppQyxFQUFNMjZCLEdBSXRDLE9BQU9oNUMsRUFBTSxDQUNYd1AsYUFBYSxFQUNiNk8sS0FKaUIrL0IsRUFBVzBCLEVBQVN6eUMsR0FLckNxeEIsTUFBT0EsRUFDUDl3QixLQUFNQSxRQUNMck4sRUFBV3d1QyxHQUtkLE9BQU8wUixFQUFhLEtBQU0xUixHQXVCOUIsU0FBUzBSLEVBQ1B6SCxFQUNBakssRUFDQWtLLEdBRUEsT0FBSUQsR0FBVUEsRUFBT3dHLFNBQ1pBLEVBQVN4RyxFQUFRQyxHQUFrQmxLLEdBRXhDaUssR0FBVUEsRUFBT2lHLFFBM0J2QixTQUNFakcsRUFDQWpLLEVBQ0FrUSxHQUVBLElBQ0k4QixFQUFlL2dELEVBQU0sQ0FDdkJ3UCxhQUFhLEVBQ2I2TyxLQUhnQisvQixFQUFXYSxFQUFTbFEsRUFBUzFoQyxVQUsvQyxHQUFJMHpDLEVBQWMsQ0FDaEIsSUFBSS9JLEVBQVUrSSxFQUFhL0ksUUFDdkJnSixFQUFnQmhKLEVBQVFBLEVBQVEvbUQsT0FBUyxHQUU3QyxPQURBODlDLEVBQVMxaEMsT0FBUzB6QyxFQUFhMXpDLE9BQ3hCb3pDLEVBQWFPLEVBQWVqUyxHQUVyQyxPQUFPMFIsRUFBYSxLQUFNMVIsR0FZakIyUSxDQUFNMUcsRUFBUWpLLEVBQVVpSyxFQUFPaUcsU0FFakNsRyxFQUFZQyxFQUFRakssRUFBVWtLLEVBQWdCQyxHQUd2RCxNQUFPLENBQ0xsNUMsTUFBT0EsRUFDUGloRCxVQXRKRixTQUFvQnhDLEdBQ2xCRCxHQUFlQyxFQUFRSSxFQUFVQyxFQUFTQyxLQXlKOUMsU0FBUzZCLEdBQ1B0QixFQUNBamhDLEVBQ0FoUixHQUVBLElBQUkxZSxFQUFJMHZCLEVBQUtyZSxNQUFNcy9DLEdBRW5CLElBQUszd0QsRUFDSCxPQUFPLEVBQ0YsSUFBSzBlLEVBQ1YsT0FBTyxFQUdULElBQUssSUFBSTllLEVBQUksRUFBR2lXLEVBQU03VixFQUFFc0MsT0FBUTFDLEVBQUlpVyxJQUFPalcsRUFBRyxDQUM1QyxJQUFJdUIsRUFBTXd2RCxFQUFNcGlELEtBQUszTyxFQUFJLEdBQ3JCb0MsRUFBc0IsaUJBQVRoQyxFQUFFSixHQUFrQmdoRCxtQkFBbUI1Z0QsRUFBRUosSUFBTUksRUFBRUosR0FDOUR1QixJQUVGdWQsRUFBT3ZkLEVBQUloQixNQUFRLGFBQWU2QixHQUl0QyxPQUFPLEVBU1QsSUFBSXV3RCxHQUFnQmp5RCxPQUFPWSxPQUFPLE1BRWxDLFNBQVNzeEQsS0FNUCxJQUFJQyxFQUFrQjl1RCxPQUFPeThDLFNBQVNOLFNBQVcsS0FBT244QyxPQUFPeThDLFNBQVNMLEtBQ3BFMlMsRUFBZS91RCxPQUFPeThDLFNBQVNQLEtBQUtyN0MsUUFBUWl1RCxFQUFpQixJQUNqRTl1RCxPQUFPZ3ZELFFBQVF4ZixhQUFhLENBQUVoeUMsSUFBS3l4RCxNQUFpQixHQUFJRixHQUN4RC91RCxPQUFPK04saUJBQWlCLFdBQVksU0FBVXZELEdBdUpoRCxJQUFzQmhOLEVBdEpsQjB4RCxLQUNJMWtELEVBQUV1aUMsT0FBU3ZpQyxFQUFFdWlDLE1BQU12dkMsTUFxSkxBLEVBcEpKZ04sRUFBRXVpQyxNQUFNdnZDLElBcUp4QjJ4RCxHQUFPM3hELEtBaEpULFNBQVM0eEQsR0FDUHhJLEVBQ0FoOUMsRUFDQXdLLEVBQ0FpN0MsR0FFQSxHQUFLekksRUFBTzBJLElBQVosQ0FJQSxJQUFJQyxFQUFXM0ksRUFBTzlpRCxRQUFRMHJELGVBQ3pCRCxHQVNMM0ksRUFBTzBJLElBQUlqOUIsVUFBVSxXQUNuQixJQUFJbzlCLEVBK0JSLFdBQ0UsSUFBSWp5RCxFQUFNeXhELEtBQ1YsR0FBSXp4RCxFQUNGLE9BQU9veEQsR0FBY3B4RCxHQWxDTmt5RCxHQUNYQyxFQUFlSixFQUFTbnpELEtBQUt3cUQsRUFBUWg5QyxFQUFJd0ssRUFBTWk3QyxFQUFRSSxFQUFXLE1BRWpFRSxJQUk0QixtQkFBdEJBLEVBQWEvbkQsS0FDdEIrbkQsRUFBYS9uRCxLQUFLLFNBQVUrbkQsR0FDMUJDLEdBQWtCRCxFQUFlRixLQUNoQzVuRCxNQUFNLFNBQVUrUCxHQUNicE0sSUFLTm9rRCxHQUFpQkQsRUFBY0YsT0FLckMsU0FBU1AsS0FDUCxJQUFJMXhELEVBQU15eEQsS0FDTnp4RCxJQUNGb3hELEdBQWNweEQsR0FBTyxDQUNuQitvRCxFQUFHdm1ELE9BQU82dkQsWUFDVkMsRUFBRzl2RCxPQUFPK3ZELGNBc0JoQixTQUFTQyxHQUFpQnZ4RCxHQUN4QixPQUFPVyxHQUFTWCxFQUFJOG5ELElBQU1ubkQsR0FBU1gsRUFBSXF4RCxHQUd6QyxTQUFTRyxHQUFtQnh4RCxHQUMxQixNQUFPLENBQ0w4bkQsRUFBR25uRCxHQUFTWCxFQUFJOG5ELEdBQUs5bkQsRUFBSThuRCxFQUFJdm1ELE9BQU82dkQsWUFDcENDLEVBQUcxd0QsR0FBU1gsRUFBSXF4RCxHQUFLcnhELEVBQUlxeEQsRUFBSTl2RCxPQUFPK3ZELGFBV3hDLFNBQVMzd0QsR0FBVTBILEdBQ2pCLE1BQW9CLGlCQUFOQSxFQUdoQixTQUFTOG9ELEdBQWtCRCxFQUFjRixHQUN2QyxJQVp3Qmh4RCxFQVlwQkgsRUFBbUMsaUJBQWpCcXhELEVBQ3RCLEdBQUlyeEQsR0FBNkMsaUJBQTFCcXhELEVBQWFPLFNBQXVCLENBQ3pELElBQUlsL0IsRUFBSy93QixTQUFTbUYsY0FBY3VxRCxFQUFhTyxVQUM3QyxHQUFJbC9CLEVBQUksQ0FDTixJQUFJdTVCLEVBQVNvRixFQUFhcEYsUUFBeUMsaUJBQXhCb0YsRUFBYXBGLE9BQXNCb0YsRUFBYXBGLE9BQVMsR0FFcEdrRixFQXZDTixTQUE2QnorQixFQUFJdTVCLEdBQy9CLElBQ0k0RixFQURRbHdELFNBQVM4L0MsZ0JBQ0Q3Vix3QkFDaEJrbUIsRUFBU3AvQixFQUFHa1osd0JBQ2hCLE1BQU8sQ0FDTHFjLEVBQUc2SixFQUFPN2xCLEtBQU80bEIsRUFBUTVsQixLQUFPZ2dCLEVBQU9oRSxFQUN2Q3VKLEVBQUdNLEVBQU8zbEIsSUFBTTBsQixFQUFRMWxCLElBQU04ZixFQUFPdUYsR0FpQ3hCTyxDQUFtQnIvQixFQUQ5QnU1QixFQWhCRyxDQUNMaEUsRUFBR25uRCxJQUZtQlgsRUFpQks4ckQsR0FmWGhFLEdBQUs5bkQsRUFBSThuRCxFQUFJLEVBQzdCdUosRUFBRzF3RCxHQUFTWCxFQUFJcXhELEdBQUtyeEQsRUFBSXF4RCxFQUFJLFNBZ0JsQkUsR0FBZ0JMLEtBQ3pCRixFQUFXUSxHQUFrQk4sU0FFdEJyeEQsR0FBWTB4RCxHQUFnQkwsS0FDckNGLEVBQVdRLEdBQWtCTixJQUczQkYsR0FDRnp2RCxPQUFPc3dELFNBQVNiLEVBQVNsSixFQUFHa0osRUFBU0ssR0FNekMsSUFDTVMsR0FERkMsR0FBb0J6akQsTUFJVyxLQUg3QndqRCxHQUFLdndELE9BQU9GLFVBQVVvRSxXQUdwQm9FLFFBQVEsZ0JBQXVELElBQS9CaW9ELEdBQUdqb0QsUUFBUSxpQkFDZCxJQUFqQ2lvRCxHQUFHam9ELFFBQVEsbUJBQ2UsSUFBMUJpb0QsR0FBR2pvRCxRQUFRLFlBQ3NCLElBQWpDaW9ELEdBQUdqb0QsUUFBUSxtQkFLTnRJLE9BQU9ndkQsU0FBVyxjQUFlaHZELE9BQU9ndkQsU0FJN0N5QixHQUFPMWpELEdBQWEvTSxPQUFPMEwsYUFBZTFMLE9BQU8wTCxZQUFZd2UsSUFDN0RscUIsT0FBTzBMLFlBQ1BqQixLQUVBMGtELEdBQU91QixLQUVYLFNBQVNBLEtBQ1AsT0FBT0QsR0FBS3ZtQyxNQUFNeW1DLFFBQVEsR0FHNUIsU0FBUzFCLEtBQ1AsT0FBT0UsR0FPVCxTQUFTeUIsR0FBV25kLEVBQUs1eUMsR0FDdkJxdUQsS0FHQSxJQUFJRixFQUFVaHZELE9BQU9ndkQsUUFDckIsSUFDTW51RCxFQUNGbXVELEVBQVF4ZixhQUFhLENBQUVoeUMsSUFBSzJ4RCxJQUFRLEdBQUkxYixJQUV4QzBiLEdBQU91QixLQUNQMUIsRUFBUTRCLFVBQVUsQ0FBRXB6RCxJQUFLMnhELElBQVEsR0FBSTFiLElBRXZDLE1BQU9qcEMsR0FDUHhLLE9BQU95OEMsU0FBUzU3QyxFQUFVLFVBQVksVUFBVTR5QyxJQUlwRCxTQUFTakUsR0FBY2lFLEdBQ3JCbWQsR0FBVW5kLEdBQUssR0FLakIsU0FBU29kLEdBQVVobkMsRUFBT25yQixFQUFJNmEsR0FDNUIsSUFBSXUzQyxFQUFPLFNBQVU1cUQsR0FDZkEsR0FBUzJqQixFQUFNbHJCLE9BQ2pCNGEsSUFFSXNRLEVBQU0zakIsR0FDUnhILEVBQUdtckIsRUFBTTNqQixHQUFRLFdBQ2Y0cUQsRUFBSzVxRCxFQUFRLEtBR2Y0cUQsRUFBSzVxRCxFQUFRLElBSW5CNHFELEVBQUssR0FLUCxTQUFTQyxHQUF3QnJMLEdBQy9CLE9BQU8sU0FBVTk3QyxFQUFJd0ssRUFBTXVKLEdBQ3pCLElBQUlxekMsR0FBVyxFQUNYcjRDLEVBQVUsRUFDVkosRUFBUSxLQUVaMDRDLEdBQWtCdkwsRUFBUyxTQUFVbDVDLEVBQUszRCxFQUFHNkUsRUFBT2xRLEdBTWxELEdBQW1CLG1CQUFSZ1AsUUFBa0N5QixJQUFaekIsRUFBSW9aLElBQW1CLENBQ3REb3JDLEdBQVcsRUFDWHI0QyxJQUVBLElBMEJJNU8sRUExQkFnUCxFQUFVaE8sR0FBSyxTQUFVbW1ELEdBdUVyQyxJQUFxQnp5RCxNQXRFSXl5RCxHQXVFWjd6RCxZQUFlbVIsSUFBeUMsV0FBNUIvUCxFQUFJekIsT0FBT0MsZ0JBdEV4Q2kwRCxFQUFjQSxFQUFZLzVDLFNBRzVCM0ssRUFBSXVaLFNBQWtDLG1CQUFoQm1yQyxFQUNsQkEsRUFDQXRmLEVBQUtyeEMsT0FBTzJ3RCxHQUNoQnhqRCxFQUFNZ2hCLFdBQVdseEIsR0FBTzB6RCxJQUN4QnY0QyxHQUNlLEdBQ2JnRixNQUlBa0osRUFBUzliLEdBQUssU0FBVStiLEdBQzFCLElBQUlxcUMsRUFBTSxxQ0FBdUMzekQsRUFBTSxLQUFPc3BCLEVBRXpEdk8sSUFDSEEsRUFBUXlzQyxFQUFRbCtCLEdBQ1pBLEVBQ0EsSUFBSXhqQixNQUFNNnRELEdBQ2R4ekMsRUFBS3BGLE1BS1QsSUFDRXhPLEVBQU15QyxFQUFJdU0sRUFBUzhOLEdBQ25CLE1BQU9yYyxHQUNQcWMsRUFBT3JjLEdBRVQsR0FBSVQsRUFDRixHQUF3QixtQkFBYkEsRUFBSW5DLEtBQ2JtQyxFQUFJbkMsS0FBS21SLEVBQVM4TixPQUNiLENBRUwsSUFBSW9DLEVBQU9sZixFQUFJZ2QsVUFDWGtDLEdBQTZCLG1CQUFkQSxFQUFLcmhCLE1BQ3RCcWhCLEVBQUtyaEIsS0FBS21SLEVBQVM4TixPQU94Qm1xQyxHQUFZcnpDLEtBSXJCLFNBQVNzekMsR0FDUHZMLEVBQ0FobkQsR0FFQSxPQUFPMHlELEdBQVExTCxFQUFRemtELElBQUksU0FBVTVFLEdBQ25DLE9BQU9NLE9BQU9pTyxLQUFLdk8sRUFBRXF5QixZQUFZenRCLElBQUksU0FBVXpELEdBQU8sT0FBT2tCLEVBQzNEckMsRUFBRXF5QixXQUFXbHhCLEdBQ2JuQixFQUFFdXBELFVBQVVwb0QsR0FDWm5CLEVBQUdtQixRQUtULFNBQVM0ekQsR0FBUy9vRCxHQUNoQixPQUFPUCxNQUFNakssVUFBVWlFLE9BQU95SCxNQUFNLEdBQUlsQixHQUcxQyxJQUFJbUcsR0FDZ0IsbUJBQVh4UixRQUN1QixpQkFBdkJBLE9BQU9DLFlBVWhCLFNBQVM4TixHQUFNck0sR0FDYixJQUFJc00sR0FBUyxFQUNiLE9BQU8sV0FFTCxJQURBLElBQUlpSCxFQUFPLEdBQUlDLEVBQU03UixVQUFVMUIsT0FDdkJ1VCxLQUFRRCxFQUFNQyxHQUFRN1IsVUFBVzZSLEdBRXpDLElBQUlsSCxFQUVKLE9BREFBLEdBQVMsRUFDRnRNLEVBQUc2SyxNQUFNdkksS0FBTWlSLElBTTFCLElBQUlvL0MsR0FBVSxTQUFrQnpLLEVBQVExOUIsR0FDdENsb0IsS0FBSzRsRCxPQUFTQSxFQUNkNWxELEtBQUtrb0IsS0FrS1AsU0FBd0JBLEdBQ3RCLElBQUtBLEVBQ0gsR0FBSW5jLEVBQVcsQ0FFYixJQUFJdWtELEVBQVNyeEQsU0FBU21GLGNBQWMsUUFHcEM4akIsR0FGQUEsRUFBUW9vQyxHQUFVQSxFQUFPaDBCLGFBQWEsU0FBWSxLQUV0Q3o4QixRQUFRLHFCQUFzQixTQUUxQ3FvQixFQUFPLElBSVksTUFBbkJBLEVBQUtsZ0IsT0FBTyxLQUNka2dCLEVBQU8sSUFBTUEsR0FHZixPQUFPQSxFQUFLcm9CLFFBQVEsTUFBTyxJQW5MZjB3RCxDQUFjcm9DLEdBRTFCbG9CLEtBQUtndkIsUUFBVWkzQixFQUNmam1ELEtBQUsyWCxRQUFVLEtBQ2YzWCxLQUFLd3dELE9BQVEsRUFDYnh3RCxLQUFLeXdELFNBQVcsR0FDaEJ6d0QsS0FBSzB3RCxjQUFnQixHQUNyQjF3RCxLQUFLMndELFNBQVcsSUFpTWxCLFNBQVNDLEdBQ1BDLEVBQ0FyMUQsRUFDQWlCLEVBQ0FxMEQsR0FFQSxJQUFJQyxFQUFTZCxHQUFrQlksRUFBUyxTQUFVcmxELEVBQUtxdEMsRUFBVW5zQyxFQUFPbFEsR0FDdEUsSUFBSXcwRCxFQVVSLFNBQ0V4bEQsRUFDQWhQLEdBRW1CLG1CQUFSZ1AsSUFFVEEsRUFBTW9sQyxFQUFLcnhDLE9BQU9pTSxJQUVwQixPQUFPQSxFQUFJMUksUUFBUXRHLEdBbEJMeTBELENBQWF6bEQsRUFBS2hRLEdBQzlCLEdBQUl3MUQsRUFDRixPQUFPbHFELE1BQU0xSixRQUFRNHpELEdBQ2pCQSxFQUFNL3dELElBQUksU0FBVSt3RCxHQUFTLE9BQU92MEQsRUFBS3UwRCxFQUFPblksRUFBVW5zQyxFQUFPbFEsS0FDakVDLEVBQUt1MEQsRUFBT25ZLEVBQVVuc0MsRUFBT2xRLEtBR3JDLE9BQU80ekQsR0FBUVUsRUFBVUMsRUFBT0QsVUFBWUMsR0FzQjlDLFNBQVNHLEdBQVdGLEVBQU9uWSxHQUN6QixHQUFJQSxFQUNGLE9BQU8sV0FDTCxPQUFPbVksRUFBTXpvRCxNQUFNc3dDLEVBQVV4NUMsWUFyT25DZ3hELEdBQVF4ekQsVUFBVXMwRCxPQUFTLFNBQWlCNTRDLEdBQzFDdlksS0FBS3VZLEdBQUtBLEdBR1o4M0MsR0FBUXh6RCxVQUFVdTBELFFBQVUsU0FBa0I3NEMsRUFBSTg0QyxHQUM1Q3J4RCxLQUFLd3dELE1BQ1BqNEMsS0FFQXZZLEtBQUt5d0QsU0FBU2h2RCxLQUFLOFcsR0FDZjg0QyxHQUNGcnhELEtBQUswd0QsY0FBY2p2RCxLQUFLNHZELEtBSzlCaEIsR0FBUXh6RCxVQUFVeTBELFFBQVUsU0FBa0JELEdBQzVDcnhELEtBQUsyd0QsU0FBU2x2RCxLQUFLNHZELElBR3JCaEIsR0FBUXh6RCxVQUFVMDBELGFBQWUsU0FBdUI5VixFQUFVK1YsRUFBWUMsR0FDMUUsSUFBSTN3QyxFQUFTOWdCLEtBRVhta0QsRUFBUW5rRCxLQUFLNGxELE9BQU9sNUMsTUFBTSt1QyxFQUFVejdDLEtBQUtndkIsU0FDN0NodkIsS0FBSzB4RCxrQkFBa0J2TixFQUFPLFdBQzVCcmpDLEVBQU82d0MsWUFBWXhOLEdBQ25CcU4sR0FBY0EsRUFBV3JOLEdBQ3pCcmpDLEVBQU84d0MsWUFHRjl3QyxFQUFPMHZDLFFBQ1YxdkMsRUFBTzB2QyxPQUFRLEVBQ2YxdkMsRUFBTzJ2QyxTQUFTanpELFFBQVEsU0FBVSthLEdBQU1BLEVBQUc0ckMsT0FFNUMsU0FBVXZ0QyxHQUNQNjZDLEdBQ0ZBLEVBQVE3NkMsR0FFTkEsSUFBUWtLLEVBQU8wdkMsUUFDakIxdkMsRUFBTzB2QyxPQUFRLEVBQ2YxdkMsRUFBTzR2QyxjQUFjbHpELFFBQVEsU0FBVSthLEdBQU1BLEVBQUczQixTQUt0RHk1QyxHQUFReHpELFVBQVU2MEQsa0JBQW9CLFNBQTRCdk4sRUFBT3FOLEVBQVlDLEdBQ2pGLElBQUkzd0MsRUFBUzlnQixLQUVYZ3ZCLEVBQVVodkIsS0FBS2d2QixRQUNmaXBCLEVBQVEsU0FBVXJoQyxHQUNoQm90QyxFQUFRcHRDLEtBQ05rSyxFQUFPNnZDLFNBQVNoekQsT0FDbEJtakIsRUFBTzZ2QyxTQUFTbnpELFFBQVEsU0FBVSthLEdBQU1BLEVBQUczQixLQUczQ1UsUUFBUUMsTUFBTVgsSUFHbEI2NkMsR0FBV0EsRUFBUTc2QyxJQUVyQixHQUNFdXZDLEVBQVloQyxFQUFPbjFCLElBRW5CbTFCLEVBQU1PLFFBQVEvbUQsU0FBV3F4QixFQUFRMDFCLFFBQVEvbUQsT0FHekMsT0FEQXFDLEtBQUs0eEQsWUFDRTNaLElBR1QsSUFBSTFtQixFQXdHTixTQUNFdkMsRUFDQXJTLEdBRUEsSUFBSTFoQixFQUNBOFgsRUFBTXZNLEtBQUt1TSxJQUFJaWMsRUFBUXJ4QixPQUFRZ2YsRUFBS2hmLFFBQ3hDLElBQUsxQyxFQUFJLEVBQUdBLEVBQUk4WCxHQUNWaWMsRUFBUS96QixLQUFPMGhCLEVBQUsxaEIsR0FETEEsS0FLckIsTUFBTyxDQUNMc3ZDLFFBQVM1dEIsRUFBSzFVLE1BQU0sRUFBR2hOLEdBQ3ZCNDJELFVBQVdsMUMsRUFBSzFVLE1BQU1oTixHQUN0QjYyRCxZQUFhOWlDLEVBQVEvbUIsTUFBTWhOLElBdEhuQjgyRCxDQUFhL3hELEtBQUtndkIsUUFBUTAxQixRQUFTUCxFQUFNTyxTQUM3Q25hLEVBQVVoWixFQUFJZ1osUUFDZHVuQixFQUFjdmdDLEVBQUl1Z0MsWUFDbEJELEVBQVl0Z0MsRUFBSXNnQyxVQUVsQmhwQyxFQUFRLEdBQUcvbkIsT0FpSmpCLFNBQTZCZ3hELEdBQzNCLE9BQU9sQixHQUFja0IsRUFBYSxtQkFBb0JaLElBQVcsR0FoSi9EYyxDQUFtQkYsR0FFbkI5eEQsS0FBSzRsRCxPQUFPcU0sWUFpSmhCLFNBQTZCMW5CLEdBQzNCLE9BQU9xbUIsR0FBY3JtQixFQUFTLG9CQUFxQjJtQixJQWhKakRnQixDQUFtQjNuQixHQUVuQnNuQixFQUFVNXhELElBQUksU0FBVTVFLEdBQUssT0FBT0EsRUFBRTJrQyxjQUV0Qyt2QixHQUF1QjhCLElBR3pCN3hELEtBQUsyWCxRQUFVd3NDLEVBQ2YsSUFBSXpuQyxFQUFXLFNBQVV6SSxFQUFNMEksR0FDN0IsR0FBSW1FLEVBQU9uSixVQUFZd3NDLEVBQ3JCLE9BQU9sTSxJQUVULElBQ0Voa0MsRUFBS2t3QyxFQUFPbjFCLEVBQVMsU0FBVXBtQixJQUNsQixJQUFQQSxHQUFnQm83QyxFQUFRcDdDLElBRTFCa1ksRUFBTzh3QyxXQUFVLEdBQ2pCM1osRUFBTXJ2QyxJQUVRLGlCQUFQQSxHQUNRLGlCQUFQQSxJQUNhLGlCQUFaQSxFQUFHbWlCLE1BQ1MsaUJBQVpuaUIsRUFBR3BOLE9BSVp5OEMsSUFDa0IsaUJBQVBydkMsR0FBbUJBLEVBQUcvSSxRQUMvQmloQixFQUFPamhCLFFBQVErSSxHQUVma1ksRUFBT3JmLEtBQUttSCxJQUlkK1QsRUFBSy9ULEtBR1QsTUFBT1ksR0FDUHl1QyxFQUFNenVDLEtBSVZxbUQsR0FBU2huQyxFQUFPbk0sRUFBVSxXQUN4QixJQUFJeTFDLEVBQWUsR0FNbkJ0QyxHQTBHSixTQUNFZ0MsRUFDQWxoQyxFQUNBeWhDLEdBRUEsT0FBT3hCLEdBQWNpQixFQUFXLG1CQUFvQixTQUFVYixFQUFPbnBELEVBQUc2RSxFQUFPbFEsR0FDN0UsT0FJSixTQUNFdzBELEVBQ0F0a0QsRUFDQWxRLEVBQ0FtMEIsRUFDQXloQyxHQUVBLE9BQU8sU0FBMEJ4cEQsRUFBSXdLLEVBQU11SixHQUN6QyxPQUFPcTBDLEVBQU1wb0QsRUFBSXdLLEVBQU0sU0FBVW1GLEdBQ2IsbUJBQVBBLEdBQ1RvWSxFQUFJbHZCLEtBQUssWUFjakIsU0FBUzR3RCxFQUNQOTVDLEVBQ0Fxc0MsRUFDQXBvRCxFQUNBNDFELEdBR0V4TixFQUFVcG9ELEtBQ1Rvb0QsRUFBVXBvRCxHQUFLZ3ZCLGtCQUVoQmpULEVBQUdxc0MsRUFBVXBvRCxJQUNKNDFELEtBQ1RwNkMsV0FBVyxXQUNUcTZDLEVBQUs5NUMsRUFBSXFzQyxFQUFXcG9ELEVBQUs0MUQsSUFDeEIsSUF0QkdDLENBQUs5NUMsRUFBSTdMLEVBQU1rNEMsVUFBV3BvRCxFQUFLNDFELEtBR25DejFDLEVBQUtwRSxNQXZCQSs1QyxDQUFldEIsRUFBT3RrRCxFQUFPbFEsRUFBS20wQixFQUFLeWhDLEtBbEg1QkcsQ0FBbUJWLEVBQVdNLEVBSGxDLFdBQWMsT0FBT3J4QyxFQUFPa08sVUFBWW0xQixJQUk5QnJqRCxPQUFPZ2dCLEVBQU84a0MsT0FBTzRNLGNBQzdCOTFDLEVBQVUsV0FDeEIsR0FBSW9FLEVBQU9uSixVQUFZd3NDLEVBQ3JCLE9BQU9sTSxJQUVUbjNCLEVBQU9uSixRQUFVLEtBQ2pCNjVDLEVBQVdyTixHQUNQcmpDLEVBQU84a0MsT0FBTzBJLEtBQ2hCeHRDLEVBQU84a0MsT0FBTzBJLElBQUlqOUIsVUFBVSxXQUMxQjhnQyxFQUFhMzBELFFBQVEsU0FBVSthLEdBQU1BLGFBTy9DODNDLEdBQVF4ekQsVUFBVTgwRCxZQUFjLFNBQXNCeE4sR0FDcEQsSUFBSXNPLEVBQU96eUQsS0FBS2d2QixRQUNoQmh2QixLQUFLZ3ZCLFFBQVVtMUIsRUFDZm5rRCxLQUFLdVksSUFBTXZZLEtBQUt1WSxHQUFHNHJDLEdBQ25CbmtELEtBQUs0bEQsT0FBTzhNLFdBQVdsMUQsUUFBUSxTQUFVeVcsR0FDdkNBLEdBQVFBLEVBQUtrd0MsRUFBT3NPLE1BNEl4QixJQUFJRSxHQUE2QixTQUFVQyxHQUN6QyxTQUFTRCxFQUFjL00sRUFBUTE5QixHQUM3QixJQUFJcEgsRUFBUzlnQixLQUViNHlELEVBQVd4M0QsS0FBSzRFLEtBQU00bEQsRUFBUTE5QixHQUU5QixJQUFJMnFDLEVBQWVqTixFQUFPOWlELFFBQVEwckQsZUFDOUJzRSxFQUFpQnRELElBQXFCcUQsRUFFdENDLEdBQ0ZqRixLQUdGLElBQUlrRixFQUFlQyxHQUFZaHpELEtBQUtrb0IsTUFDcENscEIsT0FBTytOLGlCQUFpQixXQUFZLFNBQVV2RCxHQUM1QyxJQUFJd2xCLEVBQVVsTyxFQUFPa08sUUFJakJ5c0IsRUFBV3VYLEdBQVlseUMsRUFBT29ILE1BQzlCcEgsRUFBT2tPLFVBQVlpM0IsR0FBU3hLLElBQWFzWCxHQUk3Q2p5QyxFQUFPeXdDLGFBQWE5VixFQUFVLFNBQVUwSSxHQUNsQzJPLEdBQ0YxRSxHQUFheEksRUFBUXpCLEVBQU9uMUIsR0FBUyxPQWlEN0MsT0EzQ0s0akMsSUFBYUQsRUFBYTVnRCxVQUFZNmdELEdBQzNDRCxFQUFhOTFELFVBQVlsQixPQUFPWSxPQUFRcTJELEdBQWNBLEVBQVcvMUQsV0FDakU4MUQsRUFBYTkxRCxVQUFVc3hCLFlBQWN3a0MsRUFFckNBLEVBQWE5MUQsVUFBVW8yRCxHQUFLLFNBQWF2MkQsR0FDdkNzQyxPQUFPZ3ZELFFBQVFpRixHQUFHdjJELElBR3BCaTJELEVBQWE5MUQsVUFBVTRFLEtBQU8sU0FBZWc2QyxFQUFVK1YsRUFBWUMsR0FDakUsSUFBSTN3QyxFQUFTOWdCLEtBR1RrekQsRUFETWx6RCxLQUNVZ3ZCLFFBQ3BCaHZCLEtBQUt1eEQsYUFBYTlWLEVBQVUsU0FBVTBJLEdBQ3BDeUwsR0FBVXJILEVBQVV6bkMsRUFBT29ILEtBQU9pOEIsRUFBTTJCLFdBQ3hDc0ksR0FBYXR0QyxFQUFPOGtDLE9BQVF6QixFQUFPK08sR0FBVyxHQUM5QzFCLEdBQWNBLEVBQVdyTixJQUN4QnNOLElBR0xrQixFQUFhOTFELFVBQVVnRCxRQUFVLFNBQWtCNDdDLEVBQVUrVixFQUFZQyxHQUN2RSxJQUFJM3dDLEVBQVM5Z0IsS0FHVGt6RCxFQURNbHpELEtBQ1VndkIsUUFDcEJodkIsS0FBS3V4RCxhQUFhOVYsRUFBVSxTQUFVMEksR0FDcEMzVixHQUFhK1osRUFBVXpuQyxFQUFPb0gsS0FBT2k4QixFQUFNMkIsV0FDM0NzSSxHQUFhdHRDLEVBQU84a0MsT0FBUXpCLEVBQU8rTyxHQUFXLEdBQzlDMUIsR0FBY0EsRUFBV3JOLElBQ3hCc04sSUFHTGtCLEVBQWE5MUQsVUFBVSswRCxVQUFZLFNBQW9CbndELEdBQ3JELEdBQUl1eEQsR0FBWWh6RCxLQUFLa29CLFFBQVVsb0IsS0FBS2d2QixRQUFRODJCLFNBQVUsQ0FDcEQsSUFBSTkyQixFQUFVdTVCLEVBQVV2b0QsS0FBS2tvQixLQUFPbG9CLEtBQUtndkIsUUFBUTgyQixVQUNqRHJrRCxFQUFPbXVELEdBQVU1Z0MsR0FBV3dmLEdBQWF4ZixLQUk3QzJqQyxFQUFhOTFELFVBQVVzMkQsbUJBQXFCLFdBQzFDLE9BQU9ILEdBQVloekQsS0FBS2tvQixPQUduQnlxQyxFQTNFd0IsQ0E0RS9CdEMsSUFFRixTQUFTMkMsR0FBYTlxQyxHQUNwQixJQUFJNkMsRUFBT3FvQyxVQUFVcDBELE9BQU95OEMsU0FBU0QsVUFJckMsT0FISXR6QixHQUErQixJQUF2QjZDLEVBQUt6akIsUUFBUTRnQixLQUN2QjZDLEVBQU9BLEVBQUs5aUIsTUFBTWlnQixFQUFLdnFCLFVBRWpCb3RCLEdBQVEsS0FBTy9yQixPQUFPeThDLFNBQVNKLE9BQVNyOEMsT0FBT3k4QyxTQUFTbmhDLEtBS2xFLElBQUkrNEMsR0FBNEIsU0FBVVQsR0FDeEMsU0FBU1MsRUFBYXpOLEVBQVExOUIsRUFBTXBMLEdBQ2xDODFDLEVBQVd4M0QsS0FBSzRFLEtBQU00bEQsRUFBUTE5QixHQUUxQnBMLEdBaUZSLFNBQXdCb0wsR0FDdEIsSUFBSXV6QixFQUFXdVgsR0FBWTlxQyxHQUMzQixJQUFLLE9BQU9qbEIsS0FBS3c0QyxHQUlmLE9BSEF6OEMsT0FBT3k4QyxTQUFTNTdDLFFBQ2Qwb0QsRUFBVXJnQyxFQUFPLEtBQU91ekIsS0FFbkIsRUF2RlM2WCxDQUFjdHpELEtBQUtrb0IsT0FHbkNxckMsS0EyRUYsT0F4RUtYLElBQWFTLEVBQVl0aEQsVUFBWTZnRCxHQUMxQ1MsRUFBWXgyRCxVQUFZbEIsT0FBT1ksT0FBUXEyRCxHQUFjQSxFQUFXLzFELFdBQ2hFdzJELEVBQVl4MkQsVUFBVXN4QixZQUFja2xDLEVBSXBDQSxFQUFZeDJELFVBQVUyMkQsZUFBaUIsV0FDckMsSUFBSTF5QyxFQUFTOWdCLEtBR1Q2eUQsRUFEUzd5RCxLQUFLNGxELE9BQ1E5aUQsUUFBUTByRCxlQUM5QnNFLEVBQWlCdEQsSUFBcUJxRCxFQUV0Q0MsR0FDRmpGLEtBR0Y3dUQsT0FBTytOLGlCQUFpQnlpRCxHQUFvQixXQUFhLGFBQWMsV0FDckUsSUFBSXhnQyxFQUFVbE8sRUFBT2tPLFFBQ2hCdWtDLE1BR0x6eUMsRUFBT3l3QyxhQUFha0MsS0FBVyxTQUFVdFAsR0FDbkMyTyxHQUNGMUUsR0FBYXR0QyxFQUFPOGtDLE9BQVF6QixFQUFPbjFCLEdBQVMsR0FFekN3Z0MsSUFDSGtFLEdBQVl2UCxFQUFNMkIsZUFNMUJ1TixFQUFZeDJELFVBQVU0RSxLQUFPLFNBQWVnNkMsRUFBVStWLEVBQVlDLEdBQ2hFLElBQUkzd0MsRUFBUzlnQixLQUdUa3pELEVBRE1sekQsS0FDVWd2QixRQUNwQmh2QixLQUFLdXhELGFBQWE5VixFQUFVLFNBQVUwSSxHQUNwQ3dQLEdBQVN4UCxFQUFNMkIsVUFDZnNJLEdBQWF0dEMsRUFBTzhrQyxPQUFRekIsRUFBTytPLEdBQVcsR0FDOUMxQixHQUFjQSxFQUFXck4sSUFDeEJzTixJQUdMNEIsRUFBWXgyRCxVQUFVZ0QsUUFBVSxTQUFrQjQ3QyxFQUFVK1YsRUFBWUMsR0FDdEUsSUFBSTN3QyxFQUFTOWdCLEtBR1RrekQsRUFETWx6RCxLQUNVZ3ZCLFFBQ3BCaHZCLEtBQUt1eEQsYUFBYTlWLEVBQVUsU0FBVTBJLEdBQ3BDdVAsR0FBWXZQLEVBQU0yQixVQUNsQnNJLEdBQWF0dEMsRUFBTzhrQyxPQUFRekIsRUFBTytPLEdBQVcsR0FDOUMxQixHQUFjQSxFQUFXck4sSUFDeEJzTixJQUdMNEIsRUFBWXgyRCxVQUFVbzJELEdBQUssU0FBYXYyRCxHQUN0Q3NDLE9BQU9ndkQsUUFBUWlGLEdBQUd2MkQsSUFHcEIyMkQsRUFBWXgyRCxVQUFVKzBELFVBQVksU0FBb0Jud0QsR0FDcEQsSUFBSXV0QixFQUFVaHZCLEtBQUtndkIsUUFBUTgyQixTQUN2QjJOLE9BQWN6a0MsSUFDaEJ2dEIsRUFBT2t5RCxHQUFTM2tDLEdBQVcwa0MsR0FBWTFrQyxLQUkzQ3FrQyxFQUFZeDJELFVBQVVzMkQsbUJBQXFCLFdBQ3pDLE9BQU9NLE1BR0ZKLEVBbEZ1QixDQW1GOUJoRCxJQVlGLFNBQVNrRCxLQUNQLElBQUl4b0MsRUFBTzBvQyxLQUNYLE1BQXVCLE1BQW5CMW9DLEVBQUsvaUIsT0FBTyxLQUdoQjByRCxHQUFZLElBQU0zb0MsSUFDWCxHQUdULFNBQVMwb0MsS0FHUCxJQUFJdlksRUFBT2w4QyxPQUFPeThDLFNBQVNQLEtBQ3ZCaDJDLEVBQVFnMkMsRUFBSzV6QyxRQUFRLEtBRXpCLEdBQUlwQyxFQUFRLEVBQUssTUFBTyxHQU14QixJQUFJMHVELEdBSkoxWSxFQUFPQSxFQUFLanpDLE1BQU0vQyxFQUFRLElBSUhvQyxRQUFRLEtBQy9CLEdBQUlzc0QsRUFBYyxFQUFHLENBQ25CLElBQUlsSCxFQUFZeFIsRUFBSzV6QyxRQUFRLEtBQ1A0ekMsRUFBbEJ3UixHQUFhLEVBQVkwRyxVQUFVbFksRUFBS2p6QyxNQUFNLEVBQUd5a0QsSUFBY3hSLEVBQUtqekMsTUFBTXlrRCxHQUNoRTBHLFVBQVVsWSxRQUVwQjBZLEdBQWUsSUFBSzFZLEVBQU9rWSxVQUFVbFksRUFBS2p6QyxNQUFNLEVBQUcyckQsSUFBZ0IxWSxFQUFLanpDLE1BQU0yckQsSUFHcEYsT0FBTzFZLEVBR1QsU0FBU3dFLEdBQVEzMEIsR0FDZixJQUFJbXdCLEVBQU9sOEMsT0FBT3k4QyxTQUFTUCxLQUN2QmpnRCxFQUFJaWdELEVBQUs1ekMsUUFBUSxLQUVyQixPQURXck0sR0FBSyxFQUFJaWdELEVBQUtqekMsTUFBTSxFQUFHaE4sR0FBS2lnRCxHQUN4QixJQUFNbndCLEVBR3ZCLFNBQVM0b0MsR0FBVTVvQyxHQUNieWtDLEdBQ0ZJLEdBQVVsUSxHQUFPMzBCLElBRWpCL3JCLE9BQU95OEMsU0FBU25oQyxLQUFPeVEsRUFJM0IsU0FBUzJvQyxHQUFhM29DLEdBQ2hCeWtDLEdBQ0ZoaEIsR0FBYWtSLEdBQU8zMEIsSUFFcEIvckIsT0FBT3k4QyxTQUFTNTdDLFFBQVE2L0MsR0FBTzMwQixJQU1uQyxJQUFJOG9DLEdBQWdDLFNBQVVqQixHQUM1QyxTQUFTaUIsRUFBaUJqTyxFQUFRMTlCLEdBQ2hDMHFDLEVBQVd4M0QsS0FBSzRFLEtBQU00bEQsRUFBUTE5QixHQUM5QmxvQixLQUFLeTZDLE1BQVEsR0FDYno2QyxLQUFLa0YsT0FBUyxFQWlEaEIsT0E5Q0swdEQsSUFBYWlCLEVBQWdCOWhELFVBQVk2Z0QsR0FDOUNpQixFQUFnQmgzRCxVQUFZbEIsT0FBT1ksT0FBUXEyRCxHQUFjQSxFQUFXLzFELFdBQ3BFZzNELEVBQWdCaDNELFVBQVVzeEIsWUFBYzBsQyxFQUV4Q0EsRUFBZ0JoM0QsVUFBVTRFLEtBQU8sU0FBZWc2QyxFQUFVK1YsRUFBWUMsR0FDcEUsSUFBSTN3QyxFQUFTOWdCLEtBRWJBLEtBQUt1eEQsYUFBYTlWLEVBQVUsU0FBVTBJLEdBQ3BDcmpDLEVBQU8yNUIsTUFBUTM1QixFQUFPMjVCLE1BQU14eUMsTUFBTSxFQUFHNlksRUFBTzViLE1BQVEsR0FBR3BFLE9BQU9xakQsR0FDOURyakMsRUFBTzViLFFBQ1Bzc0QsR0FBY0EsRUFBV3JOLElBQ3hCc04sSUFHTG9DLEVBQWdCaDNELFVBQVVnRCxRQUFVLFNBQWtCNDdDLEVBQVUrVixFQUFZQyxHQUMxRSxJQUFJM3dDLEVBQVM5Z0IsS0FFYkEsS0FBS3V4RCxhQUFhOVYsRUFBVSxTQUFVMEksR0FDcENyakMsRUFBTzI1QixNQUFRMzVCLEVBQU8yNUIsTUFBTXh5QyxNQUFNLEVBQUc2WSxFQUFPNWIsT0FBT3BFLE9BQU9xakQsR0FDMURxTixHQUFjQSxFQUFXck4sSUFDeEJzTixJQUdMb0MsRUFBZ0JoM0QsVUFBVW8yRCxHQUFLLFNBQWF2MkQsR0FDMUMsSUFBSW9rQixFQUFTOWdCLEtBRVQ4ekQsRUFBYzl6RCxLQUFLa0YsTUFBUXhJLEVBQy9CLEtBQUlvM0QsRUFBYyxHQUFLQSxHQUFlOXpELEtBQUt5NkMsTUFBTTk4QyxRQUFqRCxDQUdBLElBQUl3bUQsRUFBUW5rRCxLQUFLeTZDLE1BQU1xWixHQUN2Qjl6RCxLQUFLMHhELGtCQUFrQnZOLEVBQU8sV0FDNUJyakMsRUFBTzViLE1BQVE0dUQsRUFDZmh6QyxFQUFPNndDLFlBQVl4TixPQUl2QjBQLEVBQWdCaDNELFVBQVVzMkQsbUJBQXFCLFdBQzdDLElBQUlua0MsRUFBVWh2QixLQUFLeTZDLE1BQU16NkMsS0FBS3k2QyxNQUFNOThDLE9BQVMsR0FDN0MsT0FBT3F4QixFQUFVQSxFQUFRODJCLFNBQVcsS0FHdEMrTixFQUFnQmgzRCxVQUFVKzBELFVBQVksYUFJL0JpQyxFQXJEMkIsQ0FzRGxDeEQsSUFNRTBELEdBQVksU0FBb0JqeEQsUUFDakIsSUFBWkEsSUFBcUJBLEVBQVUsSUFFcEM5QyxLQUFLc3VELElBQU0sS0FDWHR1RCxLQUFLZzBELEtBQU8sR0FDWmgwRCxLQUFLOEMsUUFBVUEsRUFDZjlDLEtBQUtpeUQsWUFBYyxHQUNuQmp5RCxLQUFLd3lELGFBQWUsR0FDcEJ4eUQsS0FBSzB5RCxXQUFhLEdBQ2xCMXlELEtBQUtpMEQsUUFBVWhILEdBQWNucUQsRUFBUXFvRCxRQUFVLEdBQUluckQsTUFFbkQsSUFBSTVELEVBQU8wRyxFQUFRMUcsTUFBUSxPQVUzQixPQVRBNEQsS0FBSzhjLFNBQW9CLFlBQVQxZ0IsSUFBdUJvekQsS0FBMEMsSUFBckIxc0QsRUFBUWdhLFNBQ2hFOWMsS0FBSzhjLFdBQ1AxZ0IsRUFBTyxRQUVKMlAsSUFDSDNQLEVBQU8sWUFFVDRELEtBQUs1RCxLQUFPQSxFQUVKQSxHQUNOLElBQUssVUFDSDRELEtBQUtndUQsUUFBVSxJQUFJMkUsR0FBYTN5RCxLQUFNOEMsRUFBUW9sQixNQUM5QyxNQUNGLElBQUssT0FDSGxvQixLQUFLZ3VELFFBQVUsSUFBSXFGLEdBQVlyekQsS0FBTThDLEVBQVFvbEIsS0FBTWxvQixLQUFLOGMsVUFDeEQsTUFDRixJQUFLLFdBQ0g5YyxLQUFLZ3VELFFBQVUsSUFBSTZGLEdBQWdCN3pELEtBQU04QyxFQUFRb2xCLE1BQ2pELE1BQ0YsUUFDTTFkLElBTU40RixHQUFxQixDQUFFODhDLGFBQWMsQ0FBRXhoRCxjQUFjLElBNkp6RCxTQUFTd29ELEdBQWNuMEQsRUFBTXJDLEdBRTNCLE9BREFxQyxFQUFLMEIsS0FBSy9ELEdBQ0gsV0FDTCxJQUFJekMsRUFBSThFLEVBQUt1SCxRQUFRNUosR0FDakJ6QyxHQUFLLEdBQUs4RSxFQUFLd0gsT0FBT3RNLEVBQUcsSUEvSmpDODRELEdBQVVsM0QsVUFBVTZQLE1BQVEsU0FDMUJrRCxFQUNBb2YsRUFDQTIyQixHQUVBLE9BQU8zbEQsS0FBS2kwRCxRQUFRdm5ELE1BQU1rRCxFQUFLb2YsRUFBUzIyQixJQUcxQ3YxQyxHQUFtQjg4QyxhQUFhcHhELElBQU0sV0FDcEMsT0FBT2tFLEtBQUtndUQsU0FBV2h1RCxLQUFLZ3VELFFBQVFoL0IsU0FHdEMra0MsR0FBVWwzRCxVQUFVZ2xCLEtBQU8sU0FBZXlzQyxHQUN0QyxJQUFJeHRDLEVBQVM5Z0IsS0F1QmYsR0FmQUEsS0FBS2cwRCxLQUFLdnlELEtBQUs2c0QsR0FJZkEsRUFBSTc5QixNQUFNLGlCQUFrQixXQUUxQixJQUFJdnJCLEVBQVE0YixFQUFPa3pDLEtBQUsxc0QsUUFBUWduRCxHQUM1QnBwRCxHQUFTLEdBQUs0YixFQUFPa3pDLEtBQUt6c0QsT0FBT3JDLEVBQU8sR0FHeEM0YixFQUFPd3RDLE1BQVFBLElBQU94dEMsRUFBT3d0QyxJQUFNeHRDLEVBQU9rekMsS0FBSyxJQUFNLFNBS3ZEaDBELEtBQUtzdUQsSUFBVCxDQUlBdHVELEtBQUtzdUQsSUFBTUEsRUFFWCxJQUFJTixFQUFVaHVELEtBQUtndUQsUUFFbkIsR0FBSUEsYUFBbUIyRSxHQUNyQjNFLEVBQVF1RCxhQUFhdkQsRUFBUW1GLDJCQUN4QixHQUFJbkYsYUFBbUJxRixHQUFhLENBQ3pDLElBQUljLEVBQW9CLFdBQ3RCbkcsRUFBUXdGLGtCQUVWeEYsRUFBUXVELGFBQ052RCxFQUFRbUYscUJBQ1JnQixFQUNBQSxHQUlKbkcsRUFBUW1ELE9BQU8sU0FBVWhOLEdBQ3ZCcmpDLEVBQU9rekMsS0FBS3gyRCxRQUFRLFNBQVU4d0QsR0FDNUJBLEVBQUk4RixPQUFTalEsUUFLbkI0UCxHQUFVbDNELFVBQVV3M0QsV0FBYSxTQUFxQjMyRCxHQUNwRCxPQUFPdzJELEdBQWFsMEQsS0FBS2l5RCxZQUFhdjBELElBR3hDcTJELEdBQVVsM0QsVUFBVXkzRCxjQUFnQixTQUF3QjUyRCxHQUMxRCxPQUFPdzJELEdBQWFsMEQsS0FBS3d5RCxhQUFjOTBELElBR3pDcTJELEdBQVVsM0QsVUFBVTAzRCxVQUFZLFNBQW9CNzJELEdBQ2xELE9BQU93MkQsR0FBYWwwRCxLQUFLMHlELFdBQVloMUQsSUFHdkNxMkQsR0FBVWwzRCxVQUFVdTBELFFBQVUsU0FBa0I3NEMsRUFBSTg0QyxHQUNsRHJ4RCxLQUFLZ3VELFFBQVFvRCxRQUFRNzRDLEVBQUk4NEMsSUFHM0IwQyxHQUFVbDNELFVBQVV5MEQsUUFBVSxTQUFrQkQsR0FDOUNyeEQsS0FBS2d1RCxRQUFRc0QsUUFBUUQsSUFHdkIwQyxHQUFVbDNELFVBQVU0RSxLQUFPLFNBQWVnNkMsRUFBVStWLEVBQVlDLEdBQzlEenhELEtBQUtndUQsUUFBUXZzRCxLQUFLZzZDLEVBQVUrVixFQUFZQyxJQUcxQ3NDLEdBQVVsM0QsVUFBVWdELFFBQVUsU0FBa0I0N0MsRUFBVStWLEVBQVlDLEdBQ3BFenhELEtBQUtndUQsUUFBUW51RCxRQUFRNDdDLEVBQVUrVixFQUFZQyxJQUc3Q3NDLEdBQVVsM0QsVUFBVW8yRCxHQUFLLFNBQWF2MkQsR0FDcENzRCxLQUFLZ3VELFFBQVFpRixHQUFHdjJELElBR2xCcTNELEdBQVVsM0QsVUFBVTIzRCxLQUFPLFdBQ3pCeDBELEtBQUtpekQsSUFBSSxJQUdYYyxHQUFVbDNELFVBQVU0M0QsUUFBVSxXQUM1QnowRCxLQUFLaXpELEdBQUcsSUFHVmMsR0FBVWwzRCxVQUFVNjNELHFCQUF1QixTQUErQjlyRCxHQUN4RSxJQUFJdTdDLEVBQVF2N0MsRUFDUkEsRUFBRzg3QyxRQUNEOTdDLEVBQ0E1SSxLQUFLK1gsUUFBUW5QLEdBQUl1N0MsTUFDbkJua0QsS0FBS2t0RCxhQUNULE9BQUsvSSxFQUdFLEdBQUdyakQsT0FBT3lILE1BQU0sR0FBSTQ3QyxFQUFNTyxRQUFRemtELElBQUksU0FBVTVFLEdBQ3JELE9BQU9NLE9BQU9pTyxLQUFLdk8sRUFBRXF5QixZQUFZenRCLElBQUksU0FBVXpELEdBQzdDLE9BQU9uQixFQUFFcXlCLFdBQVdseEIsUUFKZixJQVNYdTNELEdBQVVsM0QsVUFBVWtiLFFBQVUsU0FDNUJuUCxFQUNBb21CLEVBQ0E4M0IsR0FHQSxJQUFJckwsRUFBVzhRLEdBQ2IzakQsRUFGRm9tQixFQUFVQSxHQUFXaHZCLEtBQUtndUQsUUFBUWgvQixRQUloQzgzQixFQUNBOW1ELE1BRUVta0QsRUFBUW5rRCxLQUFLME0sTUFBTSt1QyxFQUFVenNCLEdBQzdCODJCLEVBQVczQixFQUFNd0IsZ0JBQWtCeEIsRUFBTTJCLFNBRzdDLE1BQU8sQ0FDTHJLLFNBQVVBLEVBQ1YwSSxNQUFPQSxFQUNQakosS0F3QkosU0FBcUJoekIsRUFBTTQ5QixFQUFVMXBELEdBQ25DLElBQUkydUIsRUFBZ0IsU0FBVDN1QixFQUFrQixJQUFNMHBELEVBQVdBLEVBQzlDLE9BQU81OUIsRUFBT3FnQyxFQUFVcmdDLEVBQU8sSUFBTTZDLEdBQVFBLEVBOUJsQzRwQyxDQURBMzBELEtBQUtndUQsUUFBUTlsQyxLQUNJNDlCLEVBQVU5bEQsS0FBSzVELE1BTXpDdzRELGFBQWNuWixFQUNkMTJCLFNBQVVvL0IsSUFJZDRQLEdBQVVsM0QsVUFBVTh3RCxVQUFZLFNBQW9CeEMsR0FDbERuckQsS0FBS2kwRCxRQUFRdEcsVUFBVXhDLEdBQ25CbnJELEtBQUtndUQsUUFBUWgvQixVQUFZaTNCLEdBQzNCam1ELEtBQUtndUQsUUFBUXVELGFBQWF2eEQsS0FBS2d1RCxRQUFRbUYsdUJBSTNDeDNELE9BQU8yVSxpQkFBa0J5akQsR0FBVWwzRCxVQUFXdVQsSUFlOUMyakQsR0FBVW5oQyxRQXRsRVYsU0FBU0EsRUFBU2pGLEdBQ2hCLElBQUlpRixFQUFRaWlDLFdBQWFqa0IsSUFBU2pqQixFQUFsQyxDQUNBaUYsRUFBUWlpQyxXQUFZLEVBRXBCamtCLEVBQU9qakIsRUFFUCxJQUFJNW5CLEVBQVEsU0FBVUQsR0FBSyxZQUFhbUgsSUFBTm5ILEdBRTlCZ3ZELEVBQW1CLFNBQVVwaEQsRUFBSXFoRCxHQUNuQyxJQUFJOTVELEVBQUl5WSxFQUFHMEMsU0FBU2dNLGFBQ2hCcmMsRUFBTTlLLElBQU04SyxFQUFNOUssRUFBSUEsRUFBRTRGLE9BQVNrRixFQUFNOUssRUFBSUEsRUFBRTBwRCx3QkFDL0MxcEQsRUFBRXlZLEVBQUlxaEQsSUFJVnBuQyxFQUFJWSxNQUFNLENBQ1JzaUIsYUFBYyxXQUNSOXFDLEVBQU0vRixLQUFLb1csU0FBU3d2QyxTQUN0QjVsRCxLQUFLdWtELFlBQWN2a0QsS0FDbkJBLEtBQUtnMUQsUUFBVWgxRCxLQUFLb1csU0FBU3d2QyxPQUM3QjVsRCxLQUFLZzFELFFBQVFuekMsS0FBSzdoQixNQUNsQjJ0QixFQUFJeUUsS0FBS0MsZUFBZXJ5QixLQUFNLFNBQVVBLEtBQUtnMUQsUUFBUWhILFFBQVFoL0IsVUFFN0RodkIsS0FBS3VrRCxZQUFldmtELEtBQUsrVyxTQUFXL1csS0FBSytXLFFBQVF3dEMsYUFBZ0J2a0QsS0FFbkU4MEQsRUFBaUI5MEQsS0FBTUEsT0FFekJneUIsVUFBVyxXQUNUOGlDLEVBQWlCOTBELFNBSXJCckUsT0FBT0MsZUFBZSt4QixFQUFJOXdCLFVBQVcsVUFBVyxDQUM5Q2YsSUFBSyxXQUFrQixPQUFPa0UsS0FBS3VrRCxZQUFZeVEsV0FHakRyNUQsT0FBT0MsZUFBZSt4QixFQUFJOXdCLFVBQVcsU0FBVSxDQUM3Q2YsSUFBSyxXQUFrQixPQUFPa0UsS0FBS3VrRCxZQUFZNlAsVUFHakR6bUMsRUFBSTVILFVBQVUsYUFBY2srQixHQUM1QnQyQixFQUFJNUgsVUFBVSxhQUFjNGdDLEdBRTVCLElBQUl6ekMsRUFBU3lhLEVBQUl2akIsT0FBT0Msc0JBRXhCNkksRUFBTytoRCxpQkFBbUIvaEQsRUFBT2dpRCxpQkFBbUJoaUQsRUFBT2lpRCxrQkFBb0JqaUQsRUFBTzZlLFVBMGlFeEZnaUMsR0FBVTVnQyxRQUFVLFFBRWhCcG5CLEdBQWEvTSxPQUFPMnVCLEtBQ3RCM3VCLE9BQU8ydUIsSUFBSWEsSUFBSXVsQyxJQUdGQSxtQkM1bUZBMWQsR0FBQSxDQUNickssWUFBWSxFQUNaRCxNQ1BhLENBQ2J1USxNQUFPOFksYUFBYUMsUUFBUSxlQUFpQixHQUM3Q0MsY0FBZSxLQUNmQyxRQUFTLENBQ1BoMEQsR0FBSSxLQUNKaTBELE9BQVEsS0FDUmhyQyxRQUFRLEVBQ1JveEIsUUFBUyxLQUNUN3BCLFFBQVMsS0FDVHdZLFFBQVMsT0REWDhCLFFFUmEsQ0FDYm9wQixnQkFBaUIsU0FBQTFwQixHQUFLLFFBQU1BLEVBQU11USxPQUNsQ0EsTUFBTyxTQUFBdlEsR0FBSyxPQUFJQSxFQUFNdVEsUUZPdEJuUSxRR1BhLENBQ2J1cEIsT0FEYSxTQUFBQyxHQUNNLElBQVZ6bkIsRUFBVXluQixFQUFWem5CLE9BQ1AsT0FBTyxJQUFJcDJCLFFBQVEsU0FBQUMsR0FFakJtMkIsRUFBTyxlQUVQa25CLGFBQWFRLFdBQVcsY0FDeEJSLGFBQWFRLFdBQVcsZ0JBQ3hCUixhQUFhUSxXQUFXLDhCQUVqQjljLElBQU16RixTQUFTRixRQUFRWSxPQUF2QixjQUNQaDhCLE9BR0o4OUMsTUFkYSxTQUFBQyxFQUFBQyxHQWM2QixJQUFsQzduQixFQUFrQzRuQixFQUFsQzVuQixPQUFZb0ksRUFBc0J5ZixFQUF0QnpmLFNBQVVDLEVBQVl3ZixFQUFaeGYsU0FDNUIsT0FBTyxJQUFJeitCLFFBQVEsU0FBQ0MsRUFBUzhOLEdBQzNCaXpCLElBQU0sQ0FDSnJHLElBQUssaUJBQ0wxaEMsT0FBUSxPQUNSbFEsS0FBTSxDQUNKeTFDLFNBQVVBLEVBQ1ZDLFNBQVVBLEtBR1gzdkMsS0FBSyxTQUFBbXdDLEdBRUosSUFBTXVGLEVBQVF2RixFQUFTNUQsUUFBUSxrQkFDekJ5SSxFQUFVN0UsRUFBUzVELFFBQVEsb0JBQzNCb2lCLEVBQVV4ZSxFQUFTbDJDLEtBR3pCdTBELGFBQWFZLFFBQVEsYUFBYzFaLEdBQ25DOFksYUFBYVksUUFBUSxlQUFnQlQsRUFBUWgwRCxJQUM3QzZ6RCxhQUFhWSxRQUFRLHNCQUF1QlQsRUFBUUMsUUFFcER0bkIsRUFBTyxXQUFZLENBQUVvTyxRQUFPVixVQUFTMlosWUFFckN6YyxJQUFNekYsU0FBU0YsUUFBUVksT0FBdkIsY0FBaUQsVUFBWXVJLEVBRTdEdmtDLEVBQVFnL0IsS0F2QlosTUF5QlMsU0FBQXgvQixHQUVMMjJCLEVBQU8sZUFFUGtuQixhQUFhUSxXQUFXLGNBQ3hCUixhQUFhUSxXQUFXLGdCQUN4QlIsYUFBYVEsV0FBVyw4QkFFakI5YyxJQUFNekYsU0FBU0YsUUFBUVksT0FBdkIsY0FDUGx1QixFQUFPdE8sUUFJZjArQyxhQXREYSxTQUFBQyxHQXNEbUIsSUFBakJucUIsRUFBaUJtcUIsRUFBakJucUIsTUFBT21DLEVBQVVnb0IsRUFBVmhvQixPQUNwQixPQUFPLElBQUlwMkIsUUFBUSxTQUFDQyxFQUFTOE4sR0FDM0IsSUFBTXRrQixFQUFLd3FDLEVBQU13cEIsUUFBUWgwRCxJQUFNNnpELGFBQWFDLFFBQVEsZ0JBQzlDRyxFQUNKenBCLEVBQU13cEIsUUFBUUMsUUFBVUosYUFBYUMsUUFBUSx1QkFDM0M5ekQsR0FBTWkwRCxFQUNSMWMsSUFBTSxDQUNKckcsSUFBSyxrQkFBb0JseEMsRUFBSyxXQUM5QndQLE9BQVEsTUFDUmxRLEtBQU0sQ0FDSjIwRCxPQUFRQSxLQUdUNXVELEtBQUssU0FBQW13QyxHQUVKLElBQU11RixFQUFRdkYsRUFBUzVELFFBQVEsa0JBQ3pCeUksRUFBVTdFLEVBQVM1RCxRQUFRLG9CQUMzQm9pQixFQUFVeGUsRUFBU2wyQyxLQUd6QnUwRCxhQUFhWSxRQUFRLGFBQWMxWixHQUVuQ3BPLEVBQU8sV0FBWSxDQUFFb08sUUFBT1YsVUFBUzJaLFlBRXJDemMsSUFBTXpGLFNBQVNGLFFBQVFZLE9BQXZCLGNBQWlELFVBQVl1SSxFQUU3RHZrQyxFQUFRZy9CLEtBcEJaLE1Bc0JTLFNBQUF4L0IsR0FFTDIyQixFQUFPLGVBR1BrbkIsYUFBYVEsV0FBVyxjQUN4QlIsYUFBYVEsV0FBVyxnQkFDeEJSLGFBQWFRLFdBQVcsOEJBRWpCOWMsSUFBTXpGLFNBQVNGLFFBQVFZLE9BQXZCLGNBQ1BsdUIsRUFBT3RPLEtBR1hzTyxRSHZGTnVtQixVSVZhLENBQ2IrcEIsU0FEYSxTQUNKcHFCLEVBREk0cEIsR0FDZ0MsSUFBM0JyWixFQUEyQnFaLEVBQTNCclosTUFBT1YsRUFBb0IrWixFQUFwQi9aLFFBQVMyWixFQUFXSSxFQUFYSixRQUNoQ3hwQixFQUFNdVEsTUFBUUEsRUFDZHZRLEVBQU11cEIsY0FBZ0IxWixFQUN0QjdQLEVBQU13cEIsUUFBUWgwRCxHQUFLZzBELEVBQVFoMEQsR0FDM0J3cUMsRUFBTXdwQixRQUFRQyxPQUFTRCxFQUFRQyxPQUMvQnpwQixFQUFNd3BCLFFBQVEvcUMsU0FBVytxQyxFQUFRL3FDLE9BQ2pDdWhCLEVBQU13cEIsUUFBUTNaLFFBQVUyWixFQUFRM1osUUFDaEM3UCxFQUFNd3BCLFFBQVF4akMsUUFBVXdqQyxFQUFReGpDLFFBQ2hDZ2EsRUFBTXdwQixRQUFRaHJCLFFBQVVnckIsRUFBUWhyQixTQUVsQzZyQixZQVhhLFNBV0RycUIsR0FDVkEsRUFBTXVRLE1BQVEsR0FDZHZRLEVBQU11cEIsY0FBZ0IsS0FDdEJ2cEIsRUFBTXdwQixRQUFRaDBELEdBQUssS0FDbkJ3cUMsRUFBTXdwQixRQUFRQyxPQUFTLEtBQ3ZCenBCLEVBQU13cEIsUUFBUS9xQyxRQUFTLEVBQ3ZCdWhCLEVBQU13cEIsUUFBUTNaLFFBQVUsS0FDeEI3UCxFQUFNd3BCLFFBQVF4akMsUUFBVSxLQUN4QmdhLEVBQU13cEIsUUFBUWhyQixRQUFVLFFDZDVCNWMsSUFBSWEsSUFBSTZuQyxNQUVSLElBQU10cUIsR0FBUSxDQUNadXFCLE9BQVFsQixhQUFhQyxRQUFRLFdBQWEsTUFtQjdCcm5CLEdBQUEsSUFBSXFvQixLQUFLanBCLE1BQU0sQ0FDNUJFLFFBQVEsRUFDUnZCLFNBQ0FLLFVBbkJnQixDQUNoQm1xQixVQUFXLFNBQUN4cUIsRUFBRDRwQixHQUF1QixJQUFiVyxFQUFhWCxFQUFiVyxPQUNuQnZxQixFQUFNdXFCLE9BQVNBLElBa0JqQm5xQixRQWRjLENBQ2RxcUIsYUFBYyxTQUFBVixFQUFBQyxJQUNaN25CLEVBRHdDNG5CLEVBQXpCNW5CLFFBQ1IsWUFBYSxDQUFFb29CLE9BRGtCUCxFQUFiTyxXQWM3QmpxQixRQVRjLENBQ2RvcUIsVUFBVyxTQUFBMXFCLEdBQUssT0FBSUEsRUFBTXVxQixTQVMxQm43RCxRQUFTLENBQ1BrN0MsS0FBTXFnQixNQ2xDTkMsR0FBTSxXQUNWLElBQUExbkIsRUFBQWp2QyxLQUNBeWlELEVBQUF4VCxFQUFBN3hCLGVBQ0FtRSxFQUFBMHRCLEVBQUEzZixNQUFBL04sSUFBQWtoQyxFQUNBLE9BQUFsaEMsRUFBQSxPQUFvQnlTLFlBQUEsZ0JBQThCLENBQ2xEelMsRUFBQSxPQUFleVMsWUFBQSx3QkFBc0MsQ0FDckR6UyxFQUFBLE1BQWdCeVMsWUFBQSx1QkFBcUMsQ0FDckRpYixFQUFBM3VCLEdBQUEydUIsRUFBQW52QixHQUFBbXZCLEVBQUEybkIsR0FBQSxrQkFFQTNuQixFQUFBM3VCLEdBQUEsS0FDQWlCLEVBQUEsT0FBaUJ5UyxZQUFBLHlCQUF1QyxDQUN4RHpTLEVBQ0EsU0FDQSxDQUNBeVMsWUFBQSx3QkFDQXZhLEdBQUEsQ0FDQWt1QyxNQUFBLFNBQUFycEMsR0FDQSxPQUFBMndCLEVBQUE0bkIsZ0JBSUEsQ0FDQXQxQyxFQUFBLEtBQXFCeVMsWUFBQSxnQkFDckJpYixFQUFBM3VCLEdBQ0EsYUFBQTJ1QixFQUFBbnZCLEdBQUFtdkIsRUFBQTJuQixHQUFBLHlDQU1BM25CLEVBQUEzdUIsR0FBQSxLQUNBMnVCLEVBQUE2bkIsYUFBQW41RCxPQUNBNGpCLEVBQUEsU0FBcUJ5UyxZQUFBLHNCQUFvQyxDQUN6RHpTLEVBQUEsU0FDQUEsRUFBQSxNQUNBQSxFQUFBLE1BQUEwdEIsRUFBQTN1QixHQUFBLFFBQ0EydUIsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLE1BQUEwdEIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBMm5CLEdBQUEsa0JBQ0EzbkIsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLE1BQUEwdEIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBMm5CLEdBQUEsb0JBQ0EzbkIsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLE1BQUEwdEIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBMm5CLEdBQUEscUJBQ0EzbkIsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLE1BQUEwdEIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBMm5CLEdBQUEscUJBQ0EzbkIsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLE1BQUEwdEIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBMm5CLEdBQUEscUJBQ0EzbkIsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLE1BQUEwdEIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBMm5CLEdBQUEseUJBR0EzbkIsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUNBLFFBQ0EwdEIsRUFBQWx2QixHQUFBa3ZCLEVBQUE2bkIsYUFBQSxTQUFBNTJELEdBQ0EsT0FBQXFoQixFQUFBLE1BQStCL2tCLElBQUEwRCxFQUFBcUIsSUFBZSxDQUM5Q2dnQixFQUFBLE1BQUEwdEIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQTVmLEVBQUFxQixPQUNBMHRDLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFBQSxNQUFBMHRCLEVBQUEzdUIsR0FBQTJ1QixFQUFBbnZCLEdBQUE1ZixFQUFBMUUsU0FDQXl6QyxFQUFBM3VCLEdBQUEsS0FDQWlCLEVBQUEsTUFBQTB0QixFQUFBM3VCLEdBQUEydUIsRUFBQW52QixHQUFBNWYsRUFBQTYyRCxXQUNBOW5CLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFBQSxNQUFBMHRCLEVBQUEzdUIsR0FBQTJ1QixFQUFBbnZCLEdBQUE1ZixFQUFBODJELFlBQ0EvbkIsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLE1BQUEwdEIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBZ29CLFVBQUEvMkQsRUFBQTZ4QixhQUNBa2QsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLE1BQUEwdEIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBZ29CLFVBQUEvMkQsRUFBQXFxQyxhQUNBMEUsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLE1BQTBCeVMsWUFBQSx1QkFBcUMsQ0FDL0R6UyxFQUFBLEtBQ0F5UyxZQUFBLDBCQUNBdmEsR0FBQSxDQUNBa3VDLE1BQUEsU0FBQXJwQyxHQUNBLE9BQUEyd0IsRUFBQWlvQixTQUFBaDNELEVBQUFxQixRQUlBMHRDLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFBQSxLQUNBeVMsWUFBQSwyQkFDQXZhLEdBQUEsQ0FDQWt1QyxNQUFBLFNBQUFycEMsR0FDQSxPQUFBMndCLEVBQUFrb0IsV0FBQWozRCxFQUFBcUIsUUFJQTB0QyxFQUFBM3VCLEdBQUEsS0FDQWlCLEVBQUEsS0FDQXlTLFlBQUEsa0NBQ0F2YSxHQUFBLENBQ0FrdUMsTUFBQSxTQUFBcnBDLEdBQ0EsT0FBQTJ3QixFQUFBbW9CLGFBQUFsM0QsRUFBQXFCLGNBT0EsS0FHQTB0QyxFQUFBMXVCLFFBSUFvMkMsR0FBTWhVLGVBQUEsRUN0RE4sSUNsRHlMMFUsR0RrRHpMLENBQ0E3N0QsS0FBQSxZQUNBODdELEtBQUEsQ0FDQUMsU0FBQSxDQUNBQyxHQUFBLENBQ0FDLE1BQUEsQ0FDQWoxRCxLQUFBLGVBQ0FrMUQsYUFBQSxTQUNBbDhELEtBQUEsT0FDQXU3RCxPQUFBLFNBQ0FDLFFBQUEsVUFDQWpsQyxRQUFBLFVBQ0F3WSxRQUFBLFVBQ0E0QixRQUFBLFlBR0F3ckIsR0FBQSxDQUNBRixNQUFBLENBQ0FqMUQsS0FBQSxlQUNBazFELGFBQUEsUUFDQWw4RCxLQUFBLFNBQ0F1N0QsT0FBQSxTQUNBQyxRQUFBLFNBQ0FqbEMsUUFBQSxTQUNBd1ksUUFBQSxjQUNBNEIsUUFBQSxtQkFHQXlyQixHQUFBLENBQ0FILE1BQUEsQ0FDQWoxRCxLQUFBLGdCQUNBazFELGFBQUEsWUFDQWw4RCxLQUFBLE9BQ0F1N0QsT0FBQSxlQUNBQyxRQUFBLFVBQ0FqbEMsUUFBQSxXQUNBd1ksUUFBQSxnQkFDQTRCLFFBQUEsYUFHQTByQixHQUFBLENBQ0FKLE1BQUEsQ0FDQWoxRCxLQUFBLGNBQ0FrMUQsYUFBQSxRQUNBbDhELEtBQUEsU0FDQXU3RCxPQUFBLGdCQUNBQyxRQUFBLFVBQ0FqbEMsUUFBQSxPQUNBd1ksUUFBQSxhQUNBNEIsUUFBQSxVQUdBMnJCLFFBQUEsQ0FDQUwsTUFBQSxDQUNBajFELEtBQUEsWUFDQWsxRCxhQUFBLE9BQ0FsOEQsS0FBQSxPQUNBdTdELE9BQUEsU0FDQUMsUUFBQSxTQUNBamxDLFFBQUEsU0FDQXdZLFFBQUEsYUFDQTRCLFFBQUEsVUFHQTRyQixHQUFBLENBQ0FOLE1BQUEsQ0FDQWoxRCxLQUFBLGFBQ0FrMUQsYUFBQSxTQUNBbDhELEtBQUEsT0FDQXU3RCxPQUFBLFNBQ0FDLFFBQUEsVUFDQWpsQyxRQUFBLFNBQ0F3WSxRQUFBLGFBQ0E0QixRQUFBLFdBR0E2ckIsR0FBQSxDQUNBUCxNQUFBLENBQ0FqMUQsS0FBQSxXQUNBazFELGFBQUEsVUFDQWw4RCxLQUFBLFdBQ0F1N0QsT0FBQSxXQUNBQyxRQUFBLFdBQ0FqbEMsUUFBQSxTQUNBd1ksUUFBQSxXQUNBNEIsUUFBQSxhQUdBOHJCLEdBQUEsQ0FDQVIsTUFBQSxDQUNBajFELEtBQUEsWUFDQWsxRCxhQUFBLFdBQ0FsOEQsS0FBQSxPQUNBdTdELE9BQUEsU0FDQUMsUUFBQSxXQUNBamxDLFFBQUEsV0FDQXdZLFFBQUEsV0FDQTRCLFFBQUEsUUFHQStyQixHQUFBLENBQ0FULE1BQUEsQ0FDQWoxRCxLQUFBLFlBQ0FrMUQsYUFBQSxXQUNBbDhELEtBQUEsT0FDQXU3RCxPQUFBLFFBQ0FDLFFBQUEsU0FDQWpsQyxRQUFBLGFBQ0F3WSxRQUFBLGVBQ0E0QixRQUFBLGFBR0Fnc0IsUUFBQSxDQUNBVixNQUFBLENBQ0FqMUQsS0FBQSxLQUNBazFELGFBQUEsS0FDQWw4RCxLQUFBLEtBQ0F1N0QsT0FBQSxNQUNBQyxRQUFBLEtBQ0FqbEMsUUFBQSxLQUNBd1ksUUFBQSxLQUNBNEIsUUFBQSxPQUdBaXNCLFFBQUEsQ0FDQVgsTUFBQSxDQUNBajFELEtBQUEsS0FDQWsxRCxhQUFBLEtBQ0FsOEQsS0FBQSxLQUNBdTdELE9BQUEsTUFDQUMsUUFBQSxLQUNBamxDLFFBQUEsS0FDQXdZLFFBQUEsS0FDQTRCLFFBQUEsU0FLQXRyQyxLQTFJQSxXQTJJQSxPQUNBdzNELGNBQUEsS0FDQXZCLGFBQUEsR0FDQXdCLE1BQUEsT0FHQWhrRCxTQUFBLENBQ0FnaUQsT0FEQSxXQUVBLE9BQUF0MkQsS0FBQSt3QyxPQUFBMUUsUUFBQSxZQUdBcGEsUUF0SkEsV0FzSkEsSUFBQXl4QixFQUFBMWpELEtBQ0FBLEtBQUF1NEQsa0JBQ0F2NEQsS0FBQXM0RCxNQUFBemIsWUFBQSxrQkFBQTZHLEVBQUE2VSxtQkFBQSxNQUVBbmtELFFBQUEsQ0FDQTZpRCxVQURBLFNBQ0F1QixHQUNBLElBQUFDLEVBQUEsSUFBQWh2RCxLQUFBLElBQUErdUQsR0FDQSxPQUFBQyxFQUFBQyxxQkFBQSxJQUFBRCxFQUFBRSxzQkFFQTlCLFdBTEEsV0FNQTcyRCxLQUFBNmpELFFBQUFwaUQsS0FBQSxDQUFBakcsS0FBQSxZQUVBMDdELFNBUkEsU0FRQTMxRCxHQUNBdkIsS0FBQTZqRCxRQUFBcGlELEtBQUEsQ0FBQWpHLEtBQUEsT0FBQXVlLE9BQUEsQ0FBQXhZLFNBRUE0MUQsV0FYQSxTQVdBNTFELEdBQ0F2QixLQUFBNmpELFFBQUFwaUQsS0FBQSxDQUFBakcsS0FBQSxTQUFBdWUsT0FBQSxDQUFBeFksU0FFQTYxRCxhQWRBLFNBY0E3MUQsR0FDQXZCLEtBQUE2akQsUUFBQXBpRCxLQUFBLENBQUFqRyxLQUFBLFNBQUF1ZSxPQUFBLENBQUF4WSxTQUVBZzNELGdCQWpCQSxXQWlCQSxJQUFBSyxFQUFBNTRELEtBQ0FzWCxRQUFBc3NDLElBQUEsZUFDQUQsRUFBQW5rRCxFQUNBMUQsSUFBQSxvQkFDQThLLEtBQUEsU0FBQW13QyxHQUNBLE1BQUFBLEVBQUFqRCxRQUdBLE1BQUFpRCxFQUFBakQsUUFBQWlELEVBQUFsMkMsT0FDQSszRCxFQUFBOUIsYUFBQS9mLEVBQUFsMkMsS0FDQSszRCxFQUFBUCxjQUFBdGhCLEVBQUE1RCxRQUFBLHVCQVJBLE1BV0EsU0FBQTU3QixHQUNBLFVBQUFqVixNQUFBaVYsT0FJQTNLLE1BQUEsQ0FDQTBwRCxPQURBLFNBQ0F4akQsR0FDQUEsSUFBQTlTLEtBQUFxNEQsZUFDQXI0RCxLQUFBdTRELG9CQUlBTSxjQXBNQSxXQXFNQS9iLGNBQUE5OEMsS0FBQXM0RCxTRS9PSVEsVUFBWWxXLEVBQ2R5VSxHQUNBVixHSDZGaUIsSUczRm5CLEVBQ0EsS0FDQSxLQUNBLE9BdUJBbUMsR0FBU2gyRCxRQUFBZ2hELE9BQUEsMEJBQ00sSUFBQWlWLEdBQUFELFdDdkNYRSxHQUFNLFdBQ1YsSUFBQS9wQixFQUFBanZDLEtBQ0F5aUQsRUFBQXhULEVBQUE3eEIsZUFDQW1FLEVBQUEwdEIsRUFBQTNmLE1BQUEvTixJQUFBa2hDLEVBQ0EsT0FBQWxoQyxFQUFBLE9BQW9CeVMsWUFBQSxXQUF5QixDQUM3Q3pTLEVBQUEsT0FBZXlTLFlBQUEsa0JBQWdDLENBQy9DelMsRUFBQSxNQUFnQnlTLFlBQUEsbUJBQWlDLENBQ2pEaWIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBMm5CLEdBQUEsc0JBRUEzbkIsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLFFBQWtCeVMsWUFBQSxzQkFBb0MsQ0FDdERpYixFQUFBM3VCLEdBQUEydUIsRUFBQW52QixHQUFBbXZCLEVBQUEybkIsR0FBQSwyQkFHQTNuQixFQUFBM3VCLEdBQUEsS0FDQWlCLEVBQUEsT0FBZXlTLFlBQUEsZ0JBQThCLENBQzdDelMsRUFDQSxPQUNBLENBQ0F5UyxZQUFBLGdCQUNBelksTUFBQSxDQUFrQmcxQixPQUFBLFNBQUFodkMsR0FBQSxhQUFBd1AsT0FBQSxRQUNsQjBJLEdBQUEsQ0FBZXcvQyxPQUFBaHFCLEVBQUFpcUIsWUFFZixDQUNBanFCLEVBQUFrcUIsT0FBQXg3RCxPQUNBNGpCLEVBQUEsT0FBeUJoRyxNQUFBLENBQVNoYSxHQUFBLFVBQWdCLENBQ2xEZ2dCLEVBQ0EsS0FDQTB0QixFQUFBbHZCLEdBQUFrdkIsRUFBQWtxQixPQUFBLFNBQUE1aEQsR0FDQSxPQUFBZ0ssRUFBQSxNQUFxQy9rQixJQUFBK2EsR0FBYSxDQUFBMDNCLEVBQUEzdUIsR0FBQTJ1QixFQUFBbnZCLEdBQUF2SSxRQUVsRCxLQUdBMDNCLEVBQUExdUIsS0FDQTB1QixFQUFBM3VCLEdBQUEsS0FDQWlCLEVBQUEsT0FBcUJ5UyxZQUFBLGNBQTRCLENBQ2pEelMsRUFDQSxRQUNBLENBQWV5UyxZQUFBLGNBQUF6WSxNQUFBLENBQXFDNjlDLElBQUEsZUFDcEQsQ0FDQW5xQixFQUFBM3VCLEdBQ0EsZUFDQTJ1QixFQUFBbnZCLEdBQUFtdkIsRUFBQTJuQixHQUFBLG9CQUNBLGdCQUlBM25CLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFBQSxTQUNBek0sV0FBQSxDQUNBLENBQ0F0WixLQUFBLFFBQ0FnOEIsUUFBQSxVQUNBdDdCLE1BQUEreUMsRUFBQW9xQixPQUFBL2lCLFNBQ0F4ckIsV0FBQSxvQkFHQWtKLFlBQUEsdUJBQ0F6WSxNQUFBLENBQ0F2WCxLQUFBLE9BQ0F6QyxHQUFBLGFBQ0ErM0QsVUFBQSxZQUNBOTlELEtBQUEsZUFFQTJpQixTQUFBLENBQXlCamlCLE1BQUEreUMsRUFBQW9xQixPQUFBL2lCLFVBQ3pCNzhCLEdBQUEsQ0FDQTgvQyxNQUFBLFNBQUFqN0MsR0FDQUEsRUFBQTlQLE9BQUE0ckIsV0FHQTZVLEVBQUE3ZSxLQUFBNmUsRUFBQW9xQixPQUFBLFdBQUEvNkMsRUFBQTlQLE9BQUF0UyxhQUtBK3lDLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFBQSxPQUFxQnlTLFlBQUEsY0FBNEIsQ0FDakR6UyxFQUNBLFFBQ0EsQ0FBZXlTLFlBQUEsY0FBQXpZLE1BQUEsQ0FBcUM2OUMsSUFBQSxrQkFDcEQsQ0FDQW5xQixFQUFBM3VCLEdBQ0EsZUFDQTJ1QixFQUFBbnZCLEdBQUFtdkIsRUFBQTJuQixHQUFBLHVCQUNBLGdCQUlBM25CLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFBQSxTQUNBek0sV0FBQSxDQUNBLENBQ0F0WixLQUFBLFFBQ0FnOEIsUUFBQSxVQUNBdDdCLE1BQUEreUMsRUFBQW9xQixPQUFBOWlCLFNBQ0F6ckIsV0FBQSxvQkFHQWtKLFlBQUEsdUJBQ0F6WSxNQUFBLENBQ0F2WCxLQUFBLFdBQ0F6QyxHQUFBLGdCQUNBKzNELFVBQUEsWUFDQTk5RCxLQUFBLGtCQUVBMmlCLFNBQUEsQ0FBeUJqaUIsTUFBQSt5QyxFQUFBb3FCLE9BQUE5aUIsVUFDekI5OEIsR0FBQSxDQUNBOC9DLE1BQUEsU0FBQWo3QyxHQUNBQSxFQUFBOVAsT0FBQTRyQixXQUdBNlUsRUFBQTdlLEtBQUE2ZSxFQUFBb3FCLE9BQUEsV0FBQS82QyxFQUFBOVAsT0FBQXRTLGFBS0EreUMsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLFNBQ0F5UyxZQUFBLGVBQ0F6WSxNQUFBLENBQW9CdlgsS0FBQSxTQUFBeEksS0FBQSxVQUNwQjJpQixTQUFBLENBQXVCamlCLE1BQUEreUMsRUFBQTJuQixHQUFBLHlCQVF2Qm9DLEdBQU1yVyxlQUFBLEVDekVOLElDeER5TDZXLEdEd0R6TCxDQUNBaCtELEtBQUEsWUFDQTg3RCxLQUFBLENBQ0FDLFNBQUEsQ0FDQUMsR0FBQSxDQUNBeGlCLE1BQUEsQ0FDQXlrQixTQUFBLGVBQ0FDLFlBQUEsMEJBRUFDLEtBQUEsQ0FDQUMsV0FBQSxRQUNBQyxjQUFBLFdBQ0FaLE9BQUEsV0FHQXRCLEdBQUEsQ0FDQTNpQixNQUFBLENBQ0F5a0IsU0FBQSx3QkFDQUMsWUFBQSx1QkFFQUMsS0FBQSxDQUNBQyxXQUFBLGlCQUNBQyxjQUFBLGFBQ0FaLE9BQUEsbUJBR0FyQixHQUFBLENBQ0E1aUIsTUFBQSxDQUNBeWtCLFNBQUEsb0JBQ0FDLFlBQUEsdUJBRUFDLEtBQUEsQ0FDQUMsV0FBQSxZQUNBQyxjQUFBLFdBQ0FaLE9BQUEsY0FHQXBCLEdBQUEsQ0FDQTdpQixNQUFBLENBQ0F5a0IsU0FBQSx5QkFDQUMsWUFBQSxpQ0FFQUMsS0FBQSxDQUNBQyxXQUFBLGVBQ0FDLGNBQUEsZUFDQVosT0FBQSxpQkFHQW5CLFFBQUEsQ0FDQTlpQixNQUFBLENBQ0F5a0IsU0FBQSxxQkFDQUMsWUFBQSwyQkFFQUMsS0FBQSxDQUNBQyxXQUFBLFNBQ0FDLGNBQUEsUUFDQVosT0FBQSxXQUdBbEIsR0FBQSxDQUNBL2lCLE1BQUEsQ0FDQXlrQixTQUFBLGNBQ0FDLFlBQUEseUJBRUFDLEtBQUEsQ0FDQUMsV0FBQSxVQUNBQyxjQUFBLGtCQUNBWixPQUFBLFlBR0FqQixHQUFBLENBQ0FoakIsTUFBQSxDQUNBeWtCLFNBQUEsaUJBQ0FDLFlBQUEsaUNBRUFDLEtBQUEsQ0FDQUMsV0FBQSxtQkFDQUMsY0FBQSxTQUNBWixPQUFBLFVBR0FoQixHQUFBLENBQ0FqakIsTUFBQSxDQUNBeWtCLFNBQUEsZ0JBQ0FDLFlBQUEsdUNBRUFDLEtBQUEsQ0FDQUMsV0FBQSxtQkFDQUMsY0FBQSxTQUNBWixPQUFBLFdBR0FmLEdBQUEsQ0FDQWxqQixNQUFBLENBQ0F5a0IsU0FBQSxxQkFDQUMsWUFBQSwwQkFFQUMsS0FBQSxDQUNBQyxXQUFBLGdCQUNBQyxjQUFBLFNBQ0FaLE9BQUEsY0FHQWQsUUFBQSxDQUNBbmpCLE1BQUEsQ0FDQXlrQixTQUFBLE9BQ0FDLFlBQUEsV0FFQUMsS0FBQSxDQUNBQyxXQUFBLE1BQ0FDLGNBQUEsS0FDQVosT0FBQSxPQUdBYixRQUFBLENBQ0FwakIsTUFBQSxDQUNBeWtCLFNBQUEsT0FDQUMsWUFBQSxXQUVBQyxLQUFBLENBQ0FDLFdBQUEsTUFDQUMsY0FBQSxLQUNBWixPQUFBLFNBS0FwNEQsS0EvSEEsV0FnSUEsT0FDQXM0RCxPQUFBLEdBQ0FFLE9BQUEsQ0FDQS9pQixTQUFBLEtBQ0FDLFNBQUEsUUFJQW5pQyxRQUFBLENBQ0E4a0QsVUFEQSxTQUNBMXZELEdBQUEsSUFBQWs2QyxFQUFBMWpELEtBQ0F3SixFQUFBMCtDLGlCQUVBbG9ELEtBQUFtNUQsT0FBQSxHQUVBbjVELEtBQUFxNUQsT0FBQS9pQixVQUFBdDJDLEtBQUFxNUQsT0FBQTlpQixVQUNBdjJDLEtBQUErd0MsT0FDQTlDLFNBQUEsY0FDQXFJLFNBQUF0MkMsS0FBQXE1RCxPQUFBL2lCLFNBQ0FDLFNBQUF2MkMsS0FBQXE1RCxPQUFBOWlCLFdBRUEzdkMsS0FBQSxXQUNBODhDLEVBQUFHLFFBQUFwaUQsS0FBQSxPQU5BLE1BUUEsU0FBQThWLEdBQ0Ftc0MsRUFBQXlWLE9BQUExM0QsS0FBQThWLEVBQUF3L0IsU0FBQTVELFFBQUEsY0FDQTc3QixRQUFBdEosS0FBQXVKLEtBS0F2WCxLQUFBcTVELE9BQUEvaUIsVUFDQXQyQyxLQUFBbTVELE9BQUExM0QsS0FBQXpCLEtBQUE0MkQsR0FBQSx5Q0FFQTUyRCxLQUFBcTVELE9BQUE5aUIsVUFDQXYyQyxLQUFBbTVELE9BQUExM0QsS0FBQXpCLEtBQUE0MkQsR0FBQSwrQ0VsTklrRCxVQUFZbFgsRUFDZDRXLEdBQ0FSLEdIc0hpQixJR3BIbkIsRUFDQSxLQUNBLEtBQ0EsT0F1QkFjLEdBQVNoM0QsUUFBQWdoRCxPQUFBLDBCQUNNLElBQUFpVyxHQUFBRCxXQ3ZDWEUsR0FBTSxXQUNWLElBQUEvcUIsRUFBQWp2QyxLQUNBeWlELEVBQUF4VCxFQUFBN3hCLGVBQ0FtRSxFQUFBMHRCLEVBQUEzZixNQUFBL04sSUFBQWtoQyxFQUNBLE9BQUFsaEMsRUFBQSxPQUFvQnlTLFlBQUEsc0JBQW9DLENBQ3hEelMsRUFBQSxNQUFBMHRCLEVBQUEzdUIsR0FBQTJ1QixFQUFBbnZCLEdBQUFtdkIsRUFBQTJuQixHQUFBLGlCQUNBM25CLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFBQSxPQUFleVMsWUFBQSxvQkFBa0MsQ0FDakRpYixFQUFBZ3JCLFFBQUF0OEQsT0FDQTRqQixFQUFBLE9BQXFCaEcsTUFBQSxDQUFTaGEsR0FBQSxVQUFnQixDQUM5Q2dnQixFQUNBLEtBQ0EwdEIsRUFBQWx2QixHQUFBa3ZCLEVBQUFnckIsUUFBQSxTQUFBQyxHQUNBLE9BQUEzNEMsRUFBQSxNQUFpQy9rQixJQUFBMDlELEdBQWMsQ0FBQWpyQixFQUFBM3VCLEdBQUEydUIsRUFBQW52QixHQUFBbzZDLFFBRS9DLEtBR0FqckIsRUFBQTF1QixLQUNBMHVCLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFDQSxPQUNBLENBQ0F5UyxZQUFBLG9CQUNBelksTUFBQSxDQUFrQmcxQixPQUFBLGVBQUF4L0IsT0FBQSxRQUNsQjBJLEdBQUEsQ0FBZXcvQyxPQUFBaHFCLEVBQUFrckIsb0JBRWYsQ0FDQTU0QyxFQUFBLE9BQXFCeVMsWUFBQSxjQUE0QixDQUNqRHpTLEVBQ0EsUUFDQSxDQUNBeVMsWUFBQSxjQUNBelksTUFBQSxDQUF3QjY5QyxJQUFBLHFCQUV4QixDQUNBbnFCLEVBQUEzdUIsR0FDQSxlQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBMm5CLEdBQUEsOEJBSUEzbkIsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLFNBQ0F6TSxXQUFBLENBQ0EsQ0FDQXRaLEtBQUEsUUFDQWc4QixRQUFBLFVBQ0F0N0IsTUFBQSt5QyxFQUFBb3FCLE9BQUE3OUQsS0FDQXN2QixXQUFBLGdCQUdBa0osWUFBQSx1QkFDQXpZLE1BQUEsQ0FDQXZYLEtBQUEsT0FDQXpDLEdBQUEsbUJBQ0ErM0QsVUFBQSxZQUNBOTlELEtBQUEscUJBRUEyaUIsU0FBQSxDQUF5QmppQixNQUFBK3lDLEVBQUFvcUIsT0FBQTc5RCxNQUN6QmllLEdBQUEsQ0FDQTgvQyxNQUFBLFNBQUFqN0MsR0FDQUEsRUFBQTlQLE9BQUE0ckIsV0FHQTZVLEVBQUE3ZSxLQUFBNmUsRUFBQW9xQixPQUFBLE9BQUEvNkMsRUFBQTlQLE9BQUF0UyxhQUtBK3lDLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFBQSxPQUFxQnlTLFlBQUEsY0FBNEIsQ0FDakR6UyxFQUNBLFFBQ0EsQ0FDQXlTLFlBQUEsY0FDQXpZLE1BQUEsQ0FBd0I2OUMsSUFBQSx3QkFFeEIsQ0FDQW5xQixFQUFBM3VCLEdBQ0EsZUFBQTJ1QixFQUFBbnZCLEdBQUFtdkIsRUFBQTJuQixHQUFBLGlDQUlBM25CLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFBQSxTQUNBek0sV0FBQSxDQUNBLENBQ0F0WixLQUFBLFFBQ0FnOEIsUUFBQSxVQUNBdDdCLE1BQUEreUMsRUFBQW9xQixPQUFBckMsUUFDQWxzQyxXQUFBLG1CQUdBa0osWUFBQSx1QkFDQXpZLE1BQUEsQ0FDQXZYLEtBQUEsV0FDQXpDLEdBQUEsc0JBQ0ErM0QsVUFBQSxZQUNBOTlELEtBQUEsd0JBRUEyaUIsU0FBQSxDQUNBaThDLFFBQUF0ekQsTUFBQTFKLFFBQUE2eEMsRUFBQW9xQixPQUFBckMsU0FDQS9uQixFQUFBenRDLEdBQUF5dEMsRUFBQW9xQixPQUFBckMsUUFBQSxTQUNBL25CLEVBQUFvcUIsT0FBQXJDLFNBRUF2OUMsR0FBQSxDQUNBZ2dCLE9BQUEsU0FBQW5iLEdBQ0EsSUFBQSs3QyxFQUFBcHJCLEVBQUFvcUIsT0FBQXJDLFFBQ0FzRCxFQUFBaDhDLEVBQUE5UCxPQUNBK3JELElBQUFELEVBQUFGLFFBQ0EsR0FBQXR6RCxNQUFBMUosUUFBQWk5RCxHQUFBLENBQ0EsSUFDQUcsRUFBQXZyQixFQUFBenRDLEdBQUE2NEQsRUFEQSxNQUVBQyxFQUFBRixRQUNBSSxFQUFBLEdBQ0F2ckIsRUFBQTdlLEtBQUE2ZSxFQUFBb3FCLE9BQUEsVUFBQWdCLEVBQUF2NUQsT0FBQSxDQUpBLFFBTUEwNUQsR0FBQSxHQUNBdnJCLEVBQUE3ZSxLQUNBNmUsRUFBQW9xQixPQUNBLFVBQ0FnQixFQUFBcHlELE1BQUEsRUFBQXV5RCxHQUFBMTVELE9BQUF1NUQsRUFBQXB5RCxNQUFBdXlELEVBQUEsVUFJQXZyQixFQUFBN2UsS0FBQTZlLEVBQUFvcUIsT0FBQSxVQUFBa0IsU0FNQXRyQixFQUFBM3VCLEdBQUEsS0FDQWlCLEVBQUEsU0FDQXlTLFlBQUEsZUFDQXpZLE1BQUEsQ0FBb0J2WCxLQUFBLFNBQUF4SSxLQUFBLFVBQ3BCMmlCLFNBQUEsQ0FBdUJqaUIsTUFBQSt5QyxFQUFBMm5CLEdBQUEseUJBUXZCb0QsR0FBTXJYLGVBQUEsRUN6Rk4sSUN0RDJNOFgsR0RzRDNNLENBQ0FqL0QsS0FBQSx3QkFDQTg3RCxLQUFBLENBQ0FDLFNBQUEsQ0FDQUMsR0FBQSxDQUNBbUMsS0FBQSxDQUNBbjNELEtBQUEscUJBQ0ErdEMsT0FBQSxTQUNBLzBDLEtBQUEsT0FDQXc3RCxRQUFBLFlBR0FXLEdBQUEsQ0FDQWdDLEtBQUEsQ0FDQW4zRCxLQUFBLG1CQUNBK3RDLE9BQUEsUUFDQS8wQyxLQUFBLFNBQ0F3N0QsUUFBQSxXQUdBWSxHQUFBLENBQ0ErQixLQUFBLENBQ0FuM0QsS0FBQSx3QkFDQSt0QyxPQUFBLFlBQ0EvMEMsS0FBQSxPQUNBdzdELFFBQUEsWUFHQWEsR0FBQSxDQUNBOEIsS0FBQSxDQUNBbjNELEtBQUEsdUJBQ0ErdEMsT0FBQSxRQUNBLzBDLEtBQUEsU0FDQXc3RCxRQUFBLFlBR0FjLFFBQUEsQ0FDQTZCLEtBQUEsQ0FDQW4zRCxLQUFBLGlCQUNBK3RDLE9BQUEsT0FDQS8wQyxLQUFBLE9BQ0F3N0QsUUFBQSxXQUdBZSxHQUFBLENBQ0E0QixLQUFBLENBQ0FuM0QsS0FBQSxrQkFDQSt0QyxPQUFBLFNBQ0EvMEMsS0FBQSxPQUNBdzdELFFBQUEsWUFHQWdCLEdBQUEsQ0FDQTJCLEtBQUEsQ0FDQW4zRCxLQUFBLGtCQUNBK3RDLE9BQUEsVUFDQS8wQyxLQUFBLFdBQ0F3N0QsUUFBQSxhQUdBaUIsR0FBQSxDQUNBMEIsS0FBQSxDQUNBbjNELEtBQUEsb0JBQ0ErdEMsT0FBQSxXQUNBLzBDLEtBQUEsT0FDQXc3RCxRQUFBLGFBR0FrQixHQUFBLENBQ0F5QixLQUFBLENBQ0FuM0QsS0FBQSxpQkFDQSt0QyxPQUFBLFdBQ0EvMEMsS0FBQSxPQUNBdzdELFFBQUEsV0FHQW1CLFFBQUEsQ0FDQXdCLEtBQUEsQ0FDQW4zRCxLQUFBLE9BQ0ErdEMsT0FBQSxLQUNBLzBDLEtBQUEsS0FDQXc3RCxRQUFBLE9BR0FvQixRQUFBLENBQ0F1QixLQUFBLENBQ0FuM0QsS0FBQSxPQUNBK3RDLE9BQUEsS0FDQS8wQyxLQUFBLEtBQ0F3N0QsUUFBQSxTQUtBbjJELEtBOUZBLFdBK0ZBLE9BQ0F3NEQsT0FBQSxDQUNBNzlELEtBQUEsS0FDQXc3RCxTQUFBLEdBRUFpRCxRQUFBLEtBR0E3bEQsUUFBQSxDQUNBK2xELGtCQURBLFNBQ0Ezd0QsR0FBQSxJQUFBazZDLEVBQUExakQsS0FHQSxHQUZBd0osRUFBQTArQyxrQkFFQWxvRCxLQUFBcTVELE9BQUE3OUQsS0FFQSxPQURBd0UsS0FBQWk2RCxRQUFBeDRELEtBQUEsNEJBQ0EsRUFFQWtpRCxJQUFBLENBQ0FsUixJQUFBLGtCQUNBMWhDLE9BQUEsT0FDQWxRLEtBQUEsQ0FDQXJGLEtBQUF3RSxLQUFBcTVELE9BQUE3OUQsS0FDQXc3RCxRQUFBaDNELEtBQUFxNUQsT0FBQXJDLFFBQUEsT0FHQXB3RCxLQUFBLFNBQUFtd0MsR0FDQSxNQUFBQSxFQUFBakQsUUFBQWlELEVBQUFsMkMsT0FDQTZpRCxFQUFBdVcsUUFBQXg0RCxLQUNBLGdDQUFBczFDLEVBQUFsMkMsS0FBQVUsSUFFQXlXLFdBQUEsV0FDQTByQyxFQUFBRyxRQUFBcGlELEtBQUEsQ0FDQWpHLEtBQUEsT0FDQXVlLE9BQUEsQ0FBQXhZLEdBQUF3MUMsRUFBQWwyQyxLQUFBVSxPQUVBLFFBbEJBLE1BcUJBLFNBQUFnVyxHQUVBLE1BREFtc0MsRUFBQXVXLFFBQUF4NEQsS0FBQThWLEdBQ0EsSUFBQWpWLE1BQUFpVixRRXBMSW1qRCxVQUFZOVgsRUFDZDZYLEdBQ0FULEdIb0lpQixJR2xJbkIsRUFDQSxLQUNBLEtBQ0EsT0F1QkFVLEdBQVM1M0QsUUFBQWdoRCxPQUFBLGtEQUNNLElBQUE2VyxHQUFBRCxXQ3ZDWEUsR0FBTSxXQUNWLElBQUEzckIsRUFBQWp2QyxLQUNBeWlELEVBQUF4VCxFQUFBN3hCLGVBQ0FtRSxFQUFBMHRCLEVBQUEzZixNQUFBL04sSUFBQWtoQyxFQUNBLE9BQUFsaEMsRUFBQSxPQUFvQnlTLFlBQUEsZUFBNkIsQ0FDakR6UyxFQUFBLE1BQ0EwdEIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBMm5CLEdBQUEsa0JBQUEzbkIsRUFBQW52QixHQUFBbXZCLEVBQUF1VSxPQUFBenBDLE9BQUF4WSxPQUVBMHRDLEVBQUEzdUIsR0FBQSxLQUNBMnVCLEVBQUE0ckIsWUFDQXQ1QyxFQUFBLFNBQXFCeVMsWUFBQSxxQkFBbUMsQ0FDeER6UyxFQUFBLFNBQ0FBLEVBQUEsTUFDQUEsRUFBQSxNQUFBMHRCLEVBQUEzdUIsR0FBQSxRQUNBMnVCLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFBQSxNQUFBMHRCLEVBQUEzdUIsR0FBQTJ1QixFQUFBbnZCLEdBQUFtdkIsRUFBQTRyQixZQUFBdDVELFNBRUEwdEMsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLE1BQ0FBLEVBQUEsTUFBQTB0QixFQUFBM3VCLEdBQUEydUIsRUFBQW52QixHQUFBbXZCLEVBQUEybkIsR0FBQSxpQkFDQTNuQixFQUFBM3VCLEdBQUEsS0FDQWlCLEVBQUEsTUFBQTB0QixFQUFBM3VCLEdBQUEydUIsRUFBQW52QixHQUFBbXZCLEVBQUE0ckIsWUFBQXIvRCxXQUVBeXpDLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFBQSxNQUNBQSxFQUFBLE1BQUEwdEIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBMm5CLEdBQUEsbUJBQ0EzbkIsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLE1BQUEwdEIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBNHJCLFlBQUE5RCxhQUVBOW5CLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFBQSxNQUNBQSxFQUFBLE1BQUEwdEIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBMm5CLEdBQUEsb0JBQ0EzbkIsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLE1BQUEwdEIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBNHJCLFlBQUE3RCxjQUVBL25CLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFBQSxNQUNBQSxFQUFBLE1BQUEwdEIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBMm5CLEdBQUEsb0JBQ0EzbkIsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLE1BQUEwdEIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBZ29CLFVBQUFob0IsRUFBQTRyQixZQUFBOW9DLGVBRUFrZCxFQUFBM3VCLEdBQUEsS0FDQWlCLEVBQUEsTUFDQUEsRUFBQSxNQUFBMHRCLEVBQUEzdUIsR0FBQTJ1QixFQUFBbnZCLEdBQUFtdkIsRUFBQTJuQixHQUFBLG9CQUNBM25CLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFBQSxNQUFBMHRCLEVBQUEzdUIsR0FBQTJ1QixFQUFBbnZCLEdBQUFtdkIsRUFBQWdvQixVQUFBaG9CLEVBQUE0ckIsWUFBQXR3QixtQkFJQWhwQixFQUFBLE9BQW1CaEcsTUFBQSxDQUFTaGEsR0FBQSxVQUFnQixDQUM1QzB0QyxFQUFBM3VCLEdBQUEydUIsRUFBQW52QixHQUFBbXZCLEVBQUEybkIsR0FBQSx5QkFFQTNuQixFQUFBM3VCLEdBQUEsS0FDQWlCLEVBQ0EsTUFDQSxDQUFPeVMsWUFBQSxXQUNQLENBQ0F6UyxFQUFBLGVBQTJCeVMsWUFBQSxTQUFBelksTUFBQSxDQUFnQzNTLEdBQUEsTUFBWSxDQUN2RTJZLEVBQUEsS0FBbUJ5UyxZQUFBLGlDQUNuQmliLEVBQUEzdUIsR0FBQSxXQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBMm5CLEdBQUEsMEJBRUEzbkIsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUNBLGNBQ0EsQ0FDQXlTLFlBQUEsU0FDQXpZLE1BQUEsQ0FDQTNTLEdBQUEsQ0FBbUJwTixLQUFBLFNBQUF1ZSxPQUFBLENBQTBCeFksR0FBQTB0QyxFQUFBdVUsT0FBQXpwQyxPQUFBeFksT0FHN0MsQ0FDQWdnQixFQUFBLEtBQXFCeVMsWUFBQSw2QkFDckJpYixFQUFBM3VCLEdBQUEsV0FBQTJ1QixFQUFBbnZCLEdBQUFtdkIsRUFBQTJuQixHQUFBLDRCQUdBM25CLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFDQSxjQUNBLENBQ0F5UyxZQUFBLFNBQ0F6WSxNQUFBLENBQ0EzUyxHQUFBLENBQW1CcE4sS0FBQSxTQUFBdWUsT0FBQSxDQUEwQnhZLEdBQUEwdEMsRUFBQXVVLE9BQUF6cEMsT0FBQXhZLE9BRzdDLENBQ0FnZ0IsRUFBQSxLQUFxQnlTLFlBQUEsb0NBQ3JCaWIsRUFBQTN1QixHQUFBLFdBQUEydUIsRUFBQW52QixHQUFBbXZCLEVBQUEybkIsR0FBQSxpQ0FJQSxNQUtBZ0UsR0FBTWpZLGVBQUEsRUN0Q04sSUN6RHlNbVksR0R5RHpNLENBQ0F0L0QsS0FBQSxzQkFDQTg3RCxLQUFBLENBQ0FDLFNBQUEsQ0FDQUMsR0FBQSxDQUNBbUMsS0FBQSxDQUNBbjNELEtBQUEsY0FDQSt0QyxPQUFBLE9BQ0EvMEMsS0FBQSxPQUNBdTdELE9BQUEsU0FDQUMsUUFBQSxVQUNBamxDLFFBQUEsVUFDQXdZLFFBQUEsVUFDQXd3QixhQUFBLGdCQUNBdkcsS0FBQSxPQUNBd0csV0FBQSxnQkFHQXJELEdBQUEsQ0FDQWdDLEtBQUEsQ0FDQW4zRCxLQUFBLGFBQ0ErdEMsT0FBQSxTQUNBLzBDLEtBQUEsU0FDQXU3RCxPQUFBLFNBQ0FDLFFBQUEsU0FDQWpsQyxRQUFBLFNBQ0F3WSxRQUFBLGNBQ0F3d0IsYUFBQSxnQkFDQXZHLEtBQUEsVUFDQXdHLFdBQUEsa0JBR0FwRCxHQUFBLENBQ0ErQixLQUFBLENBQ0FuM0QsS0FBQSxjQUNBK3RDLE9BQUEsYUFDQS8wQyxLQUFBLE9BQ0F1N0QsT0FBQSxlQUNBQyxRQUFBLFVBQ0FqbEMsUUFBQSxXQUNBd1ksUUFBQSxnQkFDQXd3QixhQUFBLGtCQUNBdkcsS0FBQSxTQUNBd0csV0FBQSxzQkFHQW5ELEdBQUEsQ0FDQThCLEtBQUEsQ0FDQW4zRCxLQUFBLGFBQ0ErdEMsT0FBQSxXQUNBLzBDLEtBQUEsU0FDQXU3RCxPQUFBLGdCQUNBQyxRQUFBLFVBQ0FqbEMsUUFBQSxPQUNBd1ksUUFBQSxhQUNBd3dCLGFBQUEsZUFDQXZHLEtBQUEsU0FDQXdHLFdBQUEsbUJBR0FsRCxRQUFBLENBQ0E2QixLQUFBLENBQ0FuM0QsS0FBQSxXQUNBK3RDLE9BQUEsU0FDQS8wQyxLQUFBLE9BQ0F1N0QsT0FBQSxTQUNBQyxRQUFBLFNBQ0FqbEMsUUFBQSxTQUNBd1ksUUFBQSxhQUNBd3dCLGFBQUEsaUJBQ0F2RyxLQUFBLFdBQ0F3RyxXQUFBLGtCQUdBakQsR0FBQSxDQUNBNEIsS0FBQSxDQUNBbjNELEtBQUEsYUFDQSt0QyxPQUFBLGFBQ0EvMEMsS0FBQSxPQUNBdTdELE9BQUEsU0FDQUMsUUFBQSxVQUNBamxDLFFBQUEsU0FDQXdZLFFBQUEsYUFDQXd3QixhQUFBLGtCQUNBdkcsS0FBQSxXQUNBd0csV0FBQSxvQkFHQWhELEdBQUEsQ0FDQTJCLEtBQUEsQ0FDQW4zRCxLQUFBLFVBQ0ErdEMsT0FBQSxnQkFDQS8wQyxLQUFBLFdBQ0F1N0QsT0FBQSxVQUNBQyxRQUFBLFdBQ0FqbEMsUUFBQSxTQUNBd1ksUUFBQSxXQUNBd3dCLGFBQUEsY0FDQXZHLEtBQUEsUUFDQXdHLFdBQUEsMkJBR0EvQyxHQUFBLENBQ0EwQixLQUFBLENBQ0FuM0QsS0FBQSxXQUNBK3RDLE9BQUEsYUFDQS8wQyxLQUFBLE9BQ0F1N0QsT0FBQSxTQUNBQyxRQUFBLFdBQ0FqbEMsUUFBQSxXQUNBd1ksUUFBQSxXQUNBd3dCLGFBQUEsY0FDQXZHLEtBQUEsUUFDQXdHLFdBQUEsc0JBR0E5QyxHQUFBLENBQ0F5QixLQUFBLENBQ0FuM0QsS0FBQSxTQUNBK3RDLE9BQUEsVUFDQS8wQyxLQUFBLE9BQ0F1N0QsT0FBQSxRQUNBQyxRQUFBLFNBQ0FqbEMsUUFBQSxhQUNBd1ksUUFBQSxlQUNBd3dCLGFBQUEsZUFDQXZHLEtBQUEsT0FDQXdHLFdBQUEsc0JBR0E3QyxRQUFBLENBQ0F3QixLQUFBLENBQ0FuM0QsS0FBQSxLQUNBK3RDLE9BQUEsS0FDQS8wQyxLQUFBLEtBQ0F1N0QsT0FBQSxNQUNBQyxRQUFBLEtBQ0FqbEMsUUFBQSxLQUNBd1ksUUFBQSxLQUNBd3dCLGFBQUEsT0FDQXZHLEtBQUEsS0FDQXdHLFdBQUEsU0FHQTVDLFFBQUEsQ0FDQXVCLEtBQUEsQ0FDQW4zRCxLQUFBLEtBQ0ErdEMsT0FBQSxLQUNBLzBDLEtBQUEsS0FDQXU3RCxPQUFBLE1BQ0FDLFFBQUEsS0FDQWpsQyxRQUFBLEtBQ0F3WSxRQUFBLEtBQ0F3d0IsYUFBQSxPQUNBdkcsS0FBQSxLQUNBd0csV0FBQSxXQUtBbjZELEtBaEtBLFdBaUtBLE9BQ0FnNkQsWUFBQSxPQUdBNW9DLFFBcktBLFdBcUtBLElBQUF5eEIsRUFBQTFqRCxLQUNBMmpELEVBQUFua0QsRUFDQTFELElBQUEsbUJBQUFrRSxLQUFBd2pELE9BQUF6cEMsT0FBQXhZLElBQ0FxRixLQUFBLFNBQUFtd0MsR0FDQSxNQUFBQSxFQUFBakQsUUFBQWlELEVBQUFsMkMsT0FDQTZpRCxFQUFBbVgsWUFBQTlqQixFQUFBbDJDLFFBSkEsTUFPQSxTQUFBMFcsR0FDQSxVQUFBalYsTUFBQWlWLE1BR0FuRCxRQUFBLENBQ0E2aUQsVUFEQSxTQUNBdUIsR0FDQSxJQUFBQyxFQUFBLElBQUFodkQsS0FBQSxJQUFBK3VELEdBQ0EsT0FBQUMsRUFBQUMscUJBQUEsSUFBQUQsRUFBQUUsd0JFck9Jc0MsVUFBWXJZLEVBQ2RrWSxHQUNBRixHSG9GaUIsSUdsRm5CLEVBQ0EsS0FDQSxLQUNBLE9BdUJBSyxHQUFTbjRELFFBQUFnaEQsT0FBQSxnREFDTSxJQUFBb1gsR0FBQUQsV0N2Q1hFLEdBQU0sV0FDVixJQUFBbHNCLEVBQUFqdkMsS0FDQXlpRCxFQUFBeFQsRUFBQTd4QixlQUNBbUUsRUFBQTB0QixFQUFBM2YsTUFBQS9OLElBQUFraEMsRUFDQSxPQUFBbGhDLEVBQUEsT0FBb0J5UyxZQUFBLHNCQUFvQyxDQUN4RHpTLEVBQUEsTUFDQTB0QixFQUFBM3VCLEdBQUEydUIsRUFBQW52QixHQUFBbXZCLEVBQUEybkIsR0FBQSxrQkFBQTNuQixFQUFBbnZCLEdBQUFtdkIsRUFBQXVVLE9BQUF6cEMsT0FBQXhZLE9BRUEwdEMsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLE9BQWV5UyxZQUFBLG9CQUFrQyxDQUNqRGliLEVBQUFnckIsUUFBQXQ4RCxPQUNBNGpCLEVBQUEsT0FBcUJoRyxNQUFBLENBQVNoYSxHQUFBLFVBQWdCLENBQzlDZ2dCLEVBQ0EsS0FDQTB0QixFQUFBbHZCLEdBQUFrdkIsRUFBQWdyQixRQUFBLFNBQUFDLEdBQ0EsT0FBQTM0QyxFQUFBLE1BQWlDL2tCLElBQUEwOUQsR0FBYyxDQUFBanJCLEVBQUEzdUIsR0FBQTJ1QixFQUFBbnZCLEdBQUFvNkMsUUFFL0MsS0FHQWpyQixFQUFBMXVCLEtBQ0EwdUIsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUNBLE9BQ0EsQ0FDQXlTLFlBQUEsb0JBQ0F6WSxNQUFBLENBQWtCZzFCLE9BQUEsZUFBQXgvQixPQUFBLFFBQ2xCMEksR0FBQSxDQUFldy9DLE9BQUFocUIsRUFBQW1zQixvQkFFZixDQUNBNzVDLEVBQUEsT0FBcUJ5UyxZQUFBLGNBQTRCLENBQ2pEelMsRUFDQSxRQUNBLENBQ0F5UyxZQUFBLGNBQ0F6WSxNQUFBLENBQXdCNjlDLElBQUEscUJBRXhCLENBQ0FucUIsRUFBQTN1QixHQUNBLGVBQUEydUIsRUFBQW52QixHQUFBbXZCLEVBQUEybkIsR0FBQSw4QkFJQTNuQixFQUFBM3VCLEdBQUEsS0FDQWlCLEVBQUEsU0FDQXpNLFdBQUEsQ0FDQSxDQUNBdFosS0FBQSxRQUNBZzhCLFFBQUEsVUFDQXQ3QixNQUFBK3lDLEVBQUFvcUIsT0FBQTc5RCxLQUNBc3ZCLFdBQUEsZ0JBR0FrSixZQUFBLHVCQUNBelksTUFBQSxDQUNBdlgsS0FBQSxPQUNBekMsR0FBQSxtQkFDQSszRCxVQUFBLFlBQ0E5OUQsS0FBQSxxQkFFQTJpQixTQUFBLENBQXlCamlCLE1BQUEreUMsRUFBQW9xQixPQUFBNzlELE1BQ3pCaWUsR0FBQSxDQUNBOC9DLE1BQUEsU0FBQWo3QyxHQUNBQSxFQUFBOVAsT0FBQTRyQixXQUdBNlUsRUFBQTdlLEtBQUE2ZSxFQUFBb3FCLE9BQUEsT0FBQS82QyxFQUFBOVAsT0FBQXRTLGFBS0EreUMsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLE9BQXFCeVMsWUFBQSxjQUE0QixDQUNqRHpTLEVBQ0EsUUFDQSxDQUNBeVMsWUFBQSxjQUNBelksTUFBQSxDQUF3QjY5QyxJQUFBLHdCQUV4QixDQUNBbnFCLEVBQUEzdUIsR0FDQSxlQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBMm5CLEdBQUEsaUNBSUEzbkIsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLFNBQ0F6TSxXQUFBLENBQ0EsQ0FDQXRaLEtBQUEsUUFDQWc4QixRQUFBLFVBQ0F0N0IsTUFBQSt5QyxFQUFBb3FCLE9BQUFyQyxRQUNBbHNDLFdBQUEsbUJBR0FrSixZQUFBLHVCQUNBelksTUFBQSxDQUNBdlgsS0FBQSxXQUNBekMsR0FBQSxzQkFDQSszRCxVQUFBLFlBQ0E5OUQsS0FBQSx3QkFFQTJpQixTQUFBLENBQ0FpOEMsUUFBQXR6RCxNQUFBMUosUUFBQTZ4QyxFQUFBb3FCLE9BQUFyQyxTQUNBL25CLEVBQUF6dEMsR0FBQXl0QyxFQUFBb3FCLE9BQUFyQyxRQUFBLFNBQ0EvbkIsRUFBQW9xQixPQUFBckMsU0FFQXY5QyxHQUFBLENBQ0FnZ0IsT0FBQSxTQUFBbmIsR0FDQSxJQUFBKzdDLEVBQUFwckIsRUFBQW9xQixPQUFBckMsUUFDQXNELEVBQUFoOEMsRUFBQTlQLE9BQ0ErckQsSUFBQUQsRUFBQUYsUUFDQSxHQUFBdHpELE1BQUExSixRQUFBaTlELEdBQUEsQ0FDQSxJQUNBRyxFQUFBdnJCLEVBQUF6dEMsR0FBQTY0RCxFQURBLE1BRUFDLEVBQUFGLFFBQ0FJLEVBQUEsR0FDQXZyQixFQUFBN2UsS0FBQTZlLEVBQUFvcUIsT0FBQSxVQUFBZ0IsRUFBQXY1RCxPQUFBLENBSkEsUUFNQTA1RCxHQUFBLEdBQ0F2ckIsRUFBQTdlLEtBQ0E2ZSxFQUFBb3FCLE9BQ0EsVUFDQWdCLEVBQUFweUQsTUFBQSxFQUFBdXlELEdBQUExNUQsT0FBQXU1RCxFQUFBcHlELE1BQUF1eUQsRUFBQSxVQUlBdnJCLEVBQUE3ZSxLQUFBNmUsRUFBQW9xQixPQUFBLFVBQUFrQixTQU1BdHJCLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFDQSxNQUNBLENBQWF5UyxZQUFBLFdBQ2IsQ0FDQXpTLEVBQUEsZUFBaUN5UyxZQUFBLFNBQUF6WSxNQUFBLENBQWdDM1MsR0FBQSxNQUFZLENBQzdFMlksRUFBQSxLQUF5QnlTLFlBQUEsaUNBQ3pCaWIsRUFBQTN1QixHQUNBLGVBQUEydUIsRUFBQW52QixHQUFBbXZCLEVBQUEybkIsR0FBQSw4QkFHQTNuQixFQUFBM3VCLEdBQUEsS0FDQWlCLEVBQUEsU0FDQXlTLFlBQUEsU0FDQXpZLE1BQUEsQ0FBd0J2WCxLQUFBLFNBQUF4SSxLQUFBLFVBQ3hCMmlCLFNBQUEsQ0FBMkJqaUIsTUFBQSt5QyxFQUFBMm5CLEdBQUEsa0JBRTNCM25CLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFDQSxjQUNBLENBQ0F5UyxZQUFBLFNBQ0F6WSxNQUFBLENBQ0EzUyxHQUFBLENBQXlCcE4sS0FBQSxTQUFBdWUsT0FBQSxDQUEwQnhZLEdBQUEwdEMsRUFBQXVVLE9BQUF6cEMsT0FBQXhZLE9BR25ELENBQ0FnZ0IsRUFBQSxLQUEyQnlTLFlBQUEsa0NBQzNCaWIsRUFBQTN1QixHQUNBLGVBQ0EydUIsRUFBQW52QixHQUFBbXZCLEVBQUEybkIsR0FBQSxvQkFDQSxpQkFLQSxVQVFBdUUsR0FBTXhZLGVBQUEsRUM5R04sSUNuRTJNMFksR0RtRTNNLENBQ0E3L0QsS0FBQSx3QkFDQTg3RCxLQUFBLENBQ0FDLFNBQUEsQ0FDQUMsR0FBQSxDQUNBbUMsS0FBQSxDQUNBbjNELEtBQUEsY0FDQSt0QyxPQUFBLE9BQ0EvMEMsS0FBQSxPQUNBdzdELFFBQUEsVUFDQStELGFBQUEsZ0JBQ0F2RyxLQUFBLE9BQ0F3RyxXQUFBLGdCQUdBckQsR0FBQSxDQUNBZ0MsS0FBQSxDQUNBbjNELEtBQUEsYUFDQSt0QyxPQUFBLFNBQ0EvMEMsS0FBQSxTQUNBdzdELFFBQUEsU0FDQStELGFBQUEsZ0JBQ0F2RyxLQUFBLFVBQ0F3RyxXQUFBLGtCQUdBcEQsR0FBQSxDQUNBK0IsS0FBQSxDQUNBbjNELEtBQUEsY0FDQSt0QyxPQUFBLGFBQ0EvMEMsS0FBQSxPQUNBdzdELFFBQUEsVUFDQStELGFBQUEsa0JBQ0F2RyxLQUFBLFNBQ0F3RyxXQUFBLHNCQUdBbkQsR0FBQSxDQUNBOEIsS0FBQSxDQUNBbjNELEtBQUEsYUFDQSt0QyxPQUFBLFdBQ0EvMEMsS0FBQSxTQUNBdzdELFFBQUEsVUFDQStELGFBQUEsZUFDQXZHLEtBQUEsU0FDQXdHLFdBQUEsbUJBR0FsRCxRQUFBLENBQ0E2QixLQUFBLENBQ0FuM0QsS0FBQSxXQUNBK3RDLE9BQUEsU0FDQS8wQyxLQUFBLE9BQ0F3N0QsUUFBQSxTQUNBK0QsYUFBQSxpQkFDQXZHLEtBQUEsV0FDQXdHLFdBQUEsa0JBR0FqRCxHQUFBLENBQ0E0QixLQUFBLENBQ0FuM0QsS0FBQSxhQUNBK3RDLE9BQUEsYUFDQS8wQyxLQUFBLE9BQ0F3N0QsUUFBQSxVQUNBK0QsYUFBQSxrQkFDQXZHLEtBQUEsV0FDQXdHLFdBQUEsb0JBR0FoRCxHQUFBLENBQ0EyQixLQUFBLENBQ0FuM0QsS0FBQSxVQUNBK3RDLE9BQUEsZ0JBQ0EvMEMsS0FBQSxXQUNBdzdELFFBQUEsV0FDQStELGFBQUEsY0FDQXZHLEtBQUEsUUFDQXdHLFdBQUEsMkJBR0EvQyxHQUFBLENBQ0EwQixLQUFBLENBQ0FuM0QsS0FBQSxXQUNBK3RDLE9BQUEsYUFDQS8wQyxLQUFBLE9BQ0F3N0QsUUFBQSxXQUNBK0QsYUFBQSxjQUNBdkcsS0FBQSxRQUNBd0csV0FBQSxzQkFHQTlDLEdBQUEsQ0FDQXlCLEtBQUEsQ0FDQW4zRCxLQUFBLFNBQ0ErdEMsT0FBQSxVQUNBLzBDLEtBQUEsT0FDQXc3RCxRQUFBLFNBQ0ErRCxhQUFBLGVBQ0F2RyxLQUFBLE9BQ0F3RyxXQUFBLHNCQUdBN0MsUUFBQSxDQUNBd0IsS0FBQSxDQUNBbjNELEtBQUEsS0FDQSt0QyxPQUFBLEtBQ0EvMEMsS0FBQSxLQUNBdzdELFFBQUEsS0FDQStELGFBQUEsT0FDQXZHLEtBQUEsS0FDQXdHLFdBQUEsU0FHQTVDLFFBQUEsQ0FDQXVCLEtBQUEsQ0FDQW4zRCxLQUFBLE9BQ0ErdEMsT0FBQSxLQUNBLzBDLEtBQUEsS0FDQXc3RCxRQUFBLEtBQ0ErRCxhQUFBLE9BQ0F2RyxLQUFBLEtBQ0F3RyxXQUFBLFdBS0FuNkQsS0EvSEEsV0FnSUEsT0FDQXc0RCxPQUFBLENBQ0E3OUQsS0FBQSxLQUNBdzdELFNBQUEsR0FFQWlELFFBQUEsS0FHQWhvQyxRQXhJQSxXQXdJQSxJQUFBeXhCLEVBQUExakQsS0FDQTJqRCxFQUFBbmtELEVBQ0ExRCxJQUFBLG1CQUFBa0UsS0FBQXdqRCxPQUFBenBDLE9BQUF4WSxJQUNBcUYsS0FBQSxTQUFBbXdDLEdBQ0EsTUFBQUEsRUFBQWpELFFBQUFpRCxFQUFBbDJDLE9BQ0E2aUQsRUFBQTJWLE9BQUE3OUQsS0FBQXU3QyxFQUFBbDJDLEtBQUFyRixLQUNBa29ELEVBQUEyVixPQUFBckMsVUFBQWpnQixFQUFBbDJDLEtBQUFtMkQsV0FMQSxNQVFBLFNBQUF6L0MsR0FDQSxVQUFBalYsTUFBQWlWLE1BR0FuRCxRQUFBLENBQ0FnbkQsa0JBREEsU0FDQTV4RCxHQUFBLElBQUFvdkQsRUFBQTU0RCxLQUNBd0osRUFBQTArQyxpQkFFQWxvRCxLQUFBcTVELE9BQUE3OUQsS0FHQW1vRCxJQUFBLENBQ0FsUixJQUFBLG1CQUFBenlDLEtBQUF3akQsT0FBQXpwQyxPQUFBeFksR0FDQXdQLE9BQUEsTUFDQWxRLEtBQUEsQ0FDQXJGLEtBQUF3RSxLQUFBcTVELE9BQUE3OUQsS0FDQXc3RCxRQUFBaDNELEtBQUFxNUQsT0FBQXJDLFFBQUEsT0FHQXB3RCxLQUFBLFNBQUFtd0MsR0FDQTZoQixFQUFBcUIsUUFBQXg0RCxLQUNBLGdDQUFBczFDLEVBQUFsMkMsS0FBQVUsSUFFQXlXLFdBQUEsV0FDQTRnRCxFQUFBL1UsUUFBQXBpRCxLQUFBLENBQ0FqRyxLQUFBLE9BQ0F1ZSxPQUFBLENBQUF4WSxHQUFBdzFDLEVBQUFsMkMsS0FBQVUsT0FFQSxPQWpCQSxNQW1CQSxTQUFBZ1csR0FFQSxNQURBcWhELEVBQUFxQixRQUFBeDRELEtBQUE4VixHQUNBLElBQUFqVixNQUFBaVYsS0F2QkF2WCxLQUFBaTZELFFBQUF4NEQsS0FBQSw2QkVyTkk2NUQsVUFBWTFZLEVBQ2R5WSxHQUNBRixHSHNLaUIsSUdwS25CLEVBQ0EsS0FDQSxLQUNBLE9BdUJBRyxHQUFTeDRELFFBQUFnaEQsT0FBQSxrREFDTSxJQUFBeVgsR0FBQUQsV0N2Q1hFLEdBQU0sV0FDVixJQUFBdnNCLEVBQUFqdkMsS0FDQXlpRCxFQUFBeFQsRUFBQTd4QixlQUNBbUUsRUFBQTB0QixFQUFBM2YsTUFBQS9OLElBQUFraEMsRUFDQSxPQUFBbGhDLEVBQUEsT0FBb0J5UyxZQUFBLHNCQUFvQyxDQUN4RHpTLEVBQUEsTUFDQTB0QixFQUFBM3VCLEdBQUEydUIsRUFBQW52QixHQUFBbXZCLEVBQUEybkIsR0FBQSxrQkFBQTNuQixFQUFBbnZCLEdBQUFtdkIsRUFBQXVVLE9BQUF6cEMsT0FBQXhZLE9BRUEwdEMsRUFBQTN1QixHQUFBLEtBQ0EydUIsRUFBQTRyQixZQUNBdDVDLEVBQUEsT0FBbUJ5UyxZQUFBLG9CQUFrQyxDQUNyRGliLEVBQUFnckIsUUFBQXQ4RCxPQUNBNGpCLEVBQUEsT0FBeUJ5UyxZQUFBLFNBQXVCLENBQ2hEelMsRUFDQSxLQUNBMHRCLEVBQUFsdkIsR0FBQWt2QixFQUFBZ3JCLFFBQUEsU0FBQUMsR0FDQSxPQUFBMzRDLEVBQUEsTUFBcUMva0IsSUFBQTA5RCxHQUFjLENBQUFqckIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQW82QyxRQUVuRCxLQUdBanJCLEVBQUExdUIsS0FDQTB1QixFQUFBM3VCLEdBQUEsS0FDQWlCLEVBQUEsU0FBdUJ5UyxZQUFBLHFCQUFtQyxDQUMxRHpTLEVBQUEsU0FDQUEsRUFBQSxNQUNBQSxFQUFBLE1BQUEwdEIsRUFBQTN1QixHQUFBLFFBQ0EydUIsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLE1BQUEwdEIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBNHJCLFlBQUF0NUQsU0FFQTB0QyxFQUFBM3VCLEdBQUEsS0FDQWlCLEVBQUEsTUFDQUEsRUFBQSxNQUFBMHRCLEVBQUEzdUIsR0FBQTJ1QixFQUFBbnZCLEdBQUFtdkIsRUFBQTJuQixHQUFBLGlCQUNBM25CLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFBQSxNQUFBMHRCLEVBQUEzdUIsR0FBQTJ1QixFQUFBbnZCLEdBQUFtdkIsRUFBQTRyQixZQUFBci9ELFdBRUF5ekMsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLE1BQ0FBLEVBQUEsTUFBQTB0QixFQUFBM3VCLEdBQUEydUIsRUFBQW52QixHQUFBbXZCLEVBQUEybkIsR0FBQSxvQkFDQTNuQixFQUFBM3VCLEdBQUEsS0FDQWlCLEVBQUEsTUFBQTB0QixFQUFBM3VCLEdBQUEydUIsRUFBQW52QixHQUFBbXZCLEVBQUE0ckIsWUFBQTdELGNBRUEvbkIsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLE1BQ0FBLEVBQUEsTUFBQTB0QixFQUFBM3VCLEdBQUEydUIsRUFBQW52QixHQUFBbXZCLEVBQUEybkIsR0FBQSxvQkFDQTNuQixFQUFBM3VCLEdBQUEsS0FDQWlCLEVBQUEsTUFDQTB0QixFQUFBM3VCLEdBQUEydUIsRUFBQW52QixHQUFBbXZCLEVBQUFnb0IsVUFBQWhvQixFQUFBNHJCLFlBQUE5b0MsZUFHQWtkLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFBQSxNQUNBQSxFQUFBLE1BQUEwdEIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBMm5CLEdBQUEsb0JBQ0EzbkIsRUFBQTN1QixHQUFBLEtBQ0FpQixFQUFBLE1BQ0EwdEIsRUFBQTN1QixHQUFBMnVCLEVBQUFudkIsR0FBQW12QixFQUFBZ29CLFVBQUFob0IsRUFBQTRyQixZQUFBdHdCLG1CQUtBMEUsRUFBQTN1QixHQUFBLEtBQ0EydUIsRUFBQTRyQixZQUNBdDVDLEVBQ0EsT0FDQSxDQUNBeVMsWUFBQSxvQkFDQXpZLE1BQUEsQ0FBMEJnMUIsT0FBQSxlQUFBeC9CLE9BQUEsUUFDMUIwSSxHQUFBLENBQXVCdy9DLE9BQUFocUIsRUFBQW1vQixlQUV2QixDQUNBNzFDLEVBQUEsT0FBNkJ5UyxZQUFBLGNBQTRCLENBQ3pEelMsRUFDQSxRQUNBLENBQ0F5UyxZQUFBLGNBQ0F6WSxNQUFBLENBQWdDNjlDLElBQUEsdUJBRWhDLENBQ0FucUIsRUFBQTN1QixHQUNBLGVBQ0EydUIsRUFBQW52QixHQUFBbXZCLEVBQUEybkIsR0FBQSxnQkFDQSxnQkFJQTNuQixFQUFBM3VCLEdBQUEsS0FDQWlCLEVBQUEsU0FDQXpNLFdBQUEsQ0FDQSxDQUNBdFosS0FBQSxRQUNBZzhCLFFBQUEsVUFDQXQ3QixNQUFBK3lDLEVBQUFvcUIsT0FBQXRDLE9BQ0Fqc0MsV0FBQSxrQkFHQWtKLFlBQUEsdUJBQ0F6WSxNQUFBLENBQ0F2WCxLQUFBLE9BQ0F6QyxHQUFBLHFCQUNBKzNELFVBQUEsWUFDQTk5RCxLQUFBLHFCQUVBMmlCLFNBQUEsQ0FBaUNqaUIsTUFBQSt5QyxFQUFBb3FCLE9BQUF0QyxRQUNqQ3Q5QyxHQUFBLENBQ0E4L0MsTUFBQSxTQUFBajdDLEdBQ0FBLEVBQUE5UCxPQUFBNHJCLFdBR0E2VSxFQUFBN2UsS0FBQTZlLEVBQUFvcUIsT0FBQSxTQUFBLzZDLEVBQUE5UCxPQUFBdFMsYUFLQSt5QyxFQUFBM3VCLEdBQUEsS0FDQWlCLEVBQ0EsTUFDQSxDQUFxQnlTLFlBQUEsV0FDckIsQ0FDQXpTLEVBQ0EsY0FDQSxDQUF5QnlTLFlBQUEsU0FBQXpZLE1BQUEsQ0FBZ0MzUyxHQUFBLE1BQ3pELENBQ0EyWSxFQUFBLEtBQ0F5UyxZQUFBLGlDQUVBaWIsRUFBQTN1QixHQUNBLGVBQ0EydUIsRUFBQW52QixHQUFBbXZCLEVBQUEybkIsR0FBQSxjQUNBLGdCQUlBM25CLEVBQUEzdUIsR0FBQSxLQUNBaUIsRUFBQSxTQUNBeVMsWUFBQSxTQUNBelksTUFBQSxDQUFnQ3ZYLEtBQUEsU0FBQXhJLEtBQUEsVUFDaEMyaUIsU0FBQSxDQUFtQ2ppQixNQUFBK3lDLEVBQUEybkIsR0FBQSxtQkFHbkMsS0FJQTNuQixFQUFBMXVCLE9BRUFnQixFQUFBLE9BQW1CaEcsTUFBQSxDQUFTaGEsR0FBQSxVQUFnQixDQUM1QzB0QyxFQUFBM3VCLEdBQUEydUIsRUFBQW52QixHQUFBbXZCLEVBQUEybkIsR0FBQSw0QkFLQTRFLEdBQU03WSxlQUFBLEVDOUVOLElDekVzTThZLEdEeUV0TSxDQUNBamdFLEtBQUEsd0JBQ0E4N0QsS0FBQSxDQUNBQyxTQUFBLENBQ0FDLEdBQUEsQ0FDQW1DLEtBQUEsQ0FDQW4zRCxLQUFBLGNBQ0ErdEMsT0FBQSxPQUNBLzBDLEtBQUEsT0FDQXU3RCxPQUFBLFNBQ0FDLFFBQUEsVUFDQWpsQyxRQUFBLFVBQ0F3WSxRQUFBLFVBQ0F3d0IsYUFBQSxnQkFDQXZHLEtBQUEsT0FDQXdHLFdBQUEsZ0JBR0FyRCxHQUFBLENBQ0FnQyxLQUFBLENBQ0FuM0QsS0FBQSxhQUNBK3RDLE9BQUEsU0FDQS8wQyxLQUFBLFNBQ0F1N0QsT0FBQSxTQUNBQyxRQUFBLFNBQ0FqbEMsUUFBQSxTQUNBd1ksUUFBQSxjQUNBd3dCLGFBQUEsZ0JBQ0F2RyxLQUFBLFVBQ0F3RyxXQUFBLGtCQUdBcEQsR0FBQSxDQUNBK0IsS0FBQSxDQUNBbjNELEtBQUEsY0FDQSt0QyxPQUFBLGFBQ0EvMEMsS0FBQSxPQUNBdTdELE9BQUEsZUFDQUMsUUFBQSxVQUNBamxDLFFBQUEsV0FDQXdZLFFBQUEsZ0JBQ0F3d0IsYUFBQSxrQkFDQXZHLEtBQUEsU0FDQXdHLFdBQUEsc0JBR0FuRCxHQUFBLENBQ0E4QixLQUFBLENBQ0FuM0QsS0FBQSxhQUNBK3RDLE9BQUEsV0FDQS8wQyxLQUFBLFNBQ0F1N0QsT0FBQSxnQkFDQUMsUUFBQSxVQUNBamxDLFFBQUEsT0FDQXdZLFFBQUEsYUFDQXd3QixhQUFBLGVBQ0F2RyxLQUFBLFNBQ0F3RyxXQUFBLG1CQUdBbEQsUUFBQSxDQUNBNkIsS0FBQSxDQUNBbjNELEtBQUEsV0FDQSt0QyxPQUFBLFNBQ0EvMEMsS0FBQSxPQUNBdTdELE9BQUEsU0FDQUMsUUFBQSxTQUNBamxDLFFBQUEsU0FDQXdZLFFBQUEsYUFDQXd3QixhQUFBLGlCQUNBdkcsS0FBQSxXQUNBd0csV0FBQSxrQkFHQWpELEdBQUEsQ0FDQTRCLEtBQUEsQ0FDQW4zRCxLQUFBLGFBQ0ErdEMsT0FBQSxhQUNBLzBDLEtBQUEsT0FDQXU3RCxPQUFBLFNBQ0FDLFFBQUEsVUFDQWpsQyxRQUFBLFNBQ0F3WSxRQUFBLGFBQ0F3d0IsYUFBQSxrQkFDQXZHLEtBQUEsV0FDQXdHLFdBQUEsb0JBR0FoRCxHQUFBLENBQ0EyQixLQUFBLENBQ0FuM0QsS0FBQSxVQUNBK3RDLE9BQUEsZ0JBQ0EvMEMsS0FBQSxXQUNBdTdELE9BQUEsVUFDQUMsUUFBQSxXQUNBamxDLFFBQUEsU0FDQXdZLFFBQUEsV0FDQXd3QixhQUFBLGNBQ0F2RyxLQUFBLFFBQ0F3RyxXQUFBLDJCQUdBL0MsR0FBQSxDQUNBMEIsS0FBQSxDQUNBbjNELEtBQUEsV0FDQSt0QyxPQUFBLGFBQ0EvMEMsS0FBQSxPQUNBdTdELE9BQUEsU0FDQUMsUUFBQSxXQUNBamxDLFFBQUEsV0FDQXdZLFFBQUEsV0FDQXd3QixhQUFBLGNBQ0F2RyxLQUFBLFFBQ0F3RyxXQUFBLHNCQUdBOUMsR0FBQSxDQUNBeUIsS0FBQSxDQUNBbjNELEtBQUEsU0FDQSt0QyxPQUFBLFVBQ0EvMEMsS0FBQSxPQUNBdTdELE9BQUEsUUFDQUMsUUFBQSxTQUNBamxDLFFBQUEsYUFDQXdZLFFBQUEsZUFDQXd3QixhQUFBLGVBQ0F2RyxLQUFBLE9BQ0F3RyxXQUFBLHNCQUdBN0MsUUFBQSxDQUNBd0IsS0FBQSxDQUNBbjNELEtBQUEsS0FDQSt0QyxPQUFBLEtBQ0EvMEMsS0FBQSxLQUNBdTdELE9BQUEsTUFDQUMsUUFBQSxLQUNBamxDLFFBQUEsS0FDQXdZLFFBQUEsS0FDQXd3QixhQUFBLE9BQ0F2RyxLQUFBLEtBQ0F3RyxXQUFBLFNBR0E1QyxRQUFBLENBQ0F1QixLQUFBLENBQ0FuM0QsS0FBQSxLQUNBK3RDLE9BQUEsS0FDQS8wQyxLQUFBLEtBQ0F1N0QsT0FBQSxNQUNBQyxRQUFBLEtBQ0FqbEMsUUFBQSxLQUNBd1ksUUFBQSxLQUNBd3dCLGFBQUEsT0FDQXZHLEtBQUEsS0FDQXdHLFdBQUEsV0FLQW42RCxLQWhLQSxXQWlLQSxPQUNBZzZELFlBQUEsS0FDQXhCLE9BQUEsQ0FDQXRDLE9BQUEsTUFFQWtELFFBQUEsS0FHQWhvQyxRQXpLQSxXQXlLQSxJQUFBeXhCLEVBQUExakQsS0FDQTJqRCxFQUFBbmtELEVBQ0ExRCxJQUFBLG1CQUFBa0UsS0FBQXdqRCxPQUFBenBDLE9BQUF4WSxJQUNBcUYsS0FBQSxTQUFBbXdDLEdBQ0EsTUFBQUEsRUFBQWpELFFBQUFpRCxFQUFBbDJDLE9BQ0E2aUQsRUFBQW1YLFlBQUE5akIsRUFBQWwyQyxLQUNBNmlELEVBQUEyVixPQUFBLE9BQUEzVixFQUFBbVgsWUFBQSxVQUxBLE1BUUEsU0FBQXRqRCxHQUNBLFVBQUFqVixNQUFBaVYsTUFHQW5ELFFBQUEsQ0FDQTZpRCxVQURBLFNBQ0F1QixHQUNBLElBQUFDLEVBQUEsSUFBQWh2RCxLQUFBLElBQUErdUQsR0FDQSxPQUFBQyxFQUFBQyxxQkFBQSxJQUFBRCxFQUFBRSxzQkFFQXZCLGFBTEEsU0FLQTV0RCxHQUFBLElBQUFvdkQsRUFBQTU0RCxLQUNBd0osRUFBQTArQyxpQkFFQXZFLElBQUEsQ0FDQWxSLElBQUEsbUJBQUF6eUMsS0FBQXdqRCxPQUFBenBDLE9BQUF4WSxHQUFBLFVBQ0F3UCxPQUFBLE1BQ0FsUSxLQUFBLENBQ0FrMkQsT0FBQS8yRCxLQUFBcTVELE9BQUEsVUFHQXp5RCxLQUFBLFNBQUFtd0MsR0FDQTZoQixFQUFBcUIsUUFBQXg0RCxLQUFBLCtCQUFBczFDLEVBQUFsMkMsS0FBQVUsSUFDQXlXLFdBQUEsV0FDQTRnRCxFQUFBL1UsUUFBQXBpRCxLQUFBLENBQ0FqRyxLQUFBLE9BQ0F1ZSxPQUFBLENBQUF4WSxHQUFBdzFDLEVBQUFsMkMsS0FBQVUsT0FFQSxPQWRBLE1BZ0JBLFNBQUFnVyxHQUVBLE1BREFxaEQsRUFBQXFCLFFBQUF4NEQsS0FBQThWLEdBQ0EsSUFBQWpWLE1BQUFpVixRRWpSSW1rRCxVQUFZOVksRUFDZDZZLEdBQ0FELEdINElpQixJRzFJbkIsRUFDQSxLQUNBLEtBQ0EsT0F1QkFFLEdBQVM1NEQsUUFBQWdoRCxPQUFBLDZDQUNNLElBQUE2WCxHQUFBRCxXQzVCZi90QyxJQUFJYSxJQUFJb3RDLElBRVIsSUFRTUMsR0FBa0IsU0FBQ2p6RCxFQUFJd0ssRUFBTXVKLEdBQzdCcXhCLEdBQU0zQixRQUFRLHdCQUNoQjF2QixJQUdGQSxFQUFLLFdBR1F3dUMsR0FBQSxJQUFJeVEsR0FBTyxDQUN4QngvRCxLQUFNLFVBQ044ckIsS0FBTSxlQUNOaWpDLE9BQVEsQ0FDTixDQUNFcGdDLEtBQU0sSUFDTnZ2QixLQUFNLFFBQ05pb0QsS0FBTSxDQUFFZixPQUFRLE9BQVFvWixjQUFjLEdBQ3RDLzFDLFVBQVdnekMsR0FDWC80QixZQUFhNjdCLElBRWYsQ0FDRTl3QyxLQUFNLFNBQ052dkIsS0FBTSxRQUNOaW9ELEtBQU0sQ0FBRWYsT0FBUSxPQUFRb1osY0FBYyxHQUN0Qy8xQyxVQUFXZzBDLEdBQ1gvNUIsWUFoQ3FCLFNBQUNwM0IsRUFBSXdLLEVBQU11SixHQUMvQnF4QixHQUFNM0IsUUFBUSx3QkFJbkIxdkIsRUFBSyxLQUhIQSxNQWdDQSxDQUNFb08sS0FBTSxlQUNOdnZCLEtBQU0sU0FDTmlvRCxLQUFNLENBQUVmLE9BQVEsT0FBUW9aLGNBQWMsR0FDdEMvMUMsVUFBV2cyQyxHQUNYLzdCLFlBQWE2N0IsSUFFZixDQUNFOXdDLEtBQU0sd0JBQ052dkIsS0FBTSxPQUNOaW9ELEtBQU0sQ0FBRWYsT0FBUSxPQUFRb1osY0FBYyxHQUN0Qy8xQyxVQUFXaTJDLEdBQ1hoOEIsWUFBYTY3QixHQUNiMW5ELE9BQU8sR0FFVCxDQUNFNFcsS0FBTSwwQkFDTnZ2QixLQUFNLFNBQ05pb0QsS0FBTSxDQUFFZixPQUFRLE9BQVFvWixjQUFjLEdBQ3RDLzFDLFVBQVdrMkMsR0FDWGo4QixZQUFhNjdCLEdBQ2IxbkQsT0FBTyxHQUVULENBQ0U0VyxLQUFNLDBCQUNOdnZCLEtBQU0sU0FDTmlvRCxLQUFNLENBQUVmLE9BQVEsT0FBUW9aLGNBQWMsR0FDdEMvMUMsVUFBV20yQyxHQUNYbDhCLFlBQWE2N0IsR0FDYjFuRCxPQUFPLE1DakVUZ29ELEdBQW1CLENBQ3JCLFFBQ0EsV0FDQSxrQkFDQSxjQUNBLHVCQUNBLHdCQUNBLHdCQUNBLDJCQUNBLDJCQUNBLGdCQUNBLGlCQU9GLFNBQVNudUQsR0FBTW1pRCxFQUFLdjVDLEdBQ0ssb0JBQVpVLFVBQ1RBLFFBQVF0SixLQUFLLGNBQWdCbWlELEdBRXpCdjVDLEdBQ0ZVLFFBQVF0SixLQUFLNEksRUFBSTZqQyxRQWV2QixTQUFTbjlDLEdBQVVHLEdBQ2pCLE9BQWUsT0FBUkEsR0FBK0IsaUJBQVJBLEVBR2hDLElBQUlOLEdBQVd4QixPQUFPa0IsVUFBVU0sU0FDNUJpL0QsR0FBZ0Isa0JBQ3BCLFNBQVNqMkQsR0FBZTFJLEdBQ3RCLE9BQU9OLEdBQVMvQixLQUFLcUMsS0FBUzIrRCxHQUdoQyxTQUFTQyxHQUFRaC9ELEdBQ2YsT0FBT0EsUUFHVCxTQUFTaS9ELEtBRVAsSUFEQSxJQUFJcnJELEVBQU8sR0FBSUMsRUFBTTdSLFVBQVUxQixPQUN2QnVULEtBQVFELEVBQU1DLEdBQVE3UixVQUFXNlIsR0FFekMsSUFBSW9sRCxFQUFTLEtBQ1R2OEMsRUFBUyxLQWlCYixPQWhCb0IsSUFBaEI5SSxFQUFLdFQsT0FDSEwsR0FBUzJULEVBQUssS0FBT25LLE1BQU0xSixRQUFRNlQsRUFBSyxJQUMxQzhJLEVBQVM5SSxFQUFLLEdBQ2MsaUJBQVpBLEVBQUssS0FDckJxbEQsRUFBU3JsRCxFQUFLLElBRVMsSUFBaEJBLEVBQUt0VCxTQUNTLGlCQUFac1QsRUFBSyxLQUNkcWxELEVBQVNybEQsRUFBSyxLQUdaM1QsR0FBUzJULEVBQUssS0FBT25LLE1BQU0xSixRQUFRNlQsRUFBSyxPQUMxQzhJLEVBQVM5SSxFQUFLLEtBSVgsQ0FBRXFsRCxPQUFRQSxFQUFRdjhDLE9BQVFBLEdBR25DLFNBQVN3aUQsR0FBWTkrRCxHQUNuQixPQUFPa0QsS0FBSzh5QyxNQUFNOXlDLEtBQUtDLFVBQVVuRCxJQVluQyxJQUFJWCxHQUFpQm5CLE9BQU9rQixVQUFVQyxlQUN0QyxTQUFTMEssR0FBUS9KLEVBQUtqQixHQUNwQixPQUFPTSxHQUFlMUIsS0FBS3FDLEVBQUtqQixHQUdsQyxTQUFTMEMsR0FBT3NQLEdBSWQsSUFIQSxJQUFJK0ssRUFBY2xhLFVBRWRtOUQsRUFBUzdnRSxPQUFPNlMsR0FDWHZULEVBQUksRUFBR0EsRUFBSW9FLFVBQVUxQixPQUFRMUMsSUFBSyxDQUN6QyxJQUFJZ0csRUFBU3NZLEVBQVl0ZSxHQUN6QixHQUFJZ0csUUFBeUMsQ0FDM0MsSUFBSXpFLE9BQU8sRUFDWCxJQUFLQSxLQUFPeUUsRUFDTnVHLEdBQU92RyxFQUFRekUsS0FDYmMsR0FBUzJELEVBQU96RSxJQUNsQmdnRSxFQUFPaGdFLEdBQU8wQyxHQUFNczlELEVBQU9oZ0UsR0FBTXlFLEVBQU96RSxJQUV4Q2dnRSxFQUFPaGdFLEdBQU95RSxFQUFPekUsS0FNL0IsT0FBT2dnRSxFQUdULFNBQVN0ekQsR0FBWTFKLEVBQUdDLEdBQ3RCLEdBQUlELElBQU1DLEVBQUssT0FBTyxFQUN0QixJQUFJMEosRUFBWTdMLEdBQVNrQyxHQUNyQjRKLEVBQVk5TCxHQUFTbUMsR0FDekIsSUFBSTBKLElBQWFDLEVBc0JWLE9BQUtELElBQWNDLEdBQ2pCN0MsT0FBTy9HLEtBQU8rRyxPQUFPOUcsR0F0QjVCLElBQ0UsSUFBSTRKLEVBQVd2QyxNQUFNMUosUUFBUW9DLEdBQ3pCOEosRUFBV3hDLE1BQU0xSixRQUFRcUMsR0FDN0IsR0FBSTRKLEdBQVlDLEVBQ2QsT0FBTzlKLEVBQUU3QixTQUFXOEIsRUFBRTlCLFFBQVU2QixFQUFFK0osTUFBTSxTQUFVQyxFQUFHdk8sR0FDbkQsT0FBT2lPLEdBQVdNLEVBQUcvSixFQUFFeEUsTUFFcEIsR0FBS29PLEdBQWFDLEVBUXZCLE9BQU8sRUFQUCxJQUFJSyxFQUFRaE8sT0FBT2lPLEtBQUtwSyxHQUNwQnFLLEVBQVFsTyxPQUFPaU8sS0FBS25LLEdBQ3hCLE9BQU9rSyxFQUFNaE0sU0FBV2tNLEVBQU1sTSxRQUFVZ00sRUFBTUosTUFBTSxTQUFVL00sR0FDNUQsT0FBTzBNLEdBQVcxSixFQUFFaEQsR0FBTWlELEVBQUVqRCxNQU1oQyxNQUFPZ04sR0FFUCxPQUFPLEdBMkRiLElBbVpJbWtCLEdBblpBWSxHQUFRLENBQ1ZzaUIsYUFBYyxXQUNaLElBQUkvdEMsRUFBVTlDLEtBQUtvVyxTQUduQixHQUZBdFQsRUFBUXcwRCxLQUFPeDBELEVBQVF3MEQsT0FBU3gwRCxFQUFRMjVELE9BQVMsR0FBSyxNQUVsRDM1RCxFQUFRdzBELEtBQ1YsR0FBSXgwRCxFQUFRdzBELGdCQUFnQm9GLEdBQVMsQ0FFbkMsR0FBSTU1RCxFQUFRMjVELE9BQ1YsSUFDRSxJQUFJRSxFQUFpQixHQUNyQjc1RCxFQUFRMjVELE9BQU9qL0QsUUFBUSxTQUFVby9ELEdBQy9CRCxFQUFpQno5RCxHQUFNeTlELEVBQWdCaDhELEtBQUs4eUMsTUFBTW1wQixNQUVwRGpoRSxPQUFPaU8sS0FBSyt5RCxHQUFnQm4vRCxRQUFRLFNBQVU4NEQsR0FDNUN4ekQsRUFBUXcwRCxLQUFLdUYsbUJBQW1CdkcsRUFBUXFHLEVBQWVyRyxNQUV6RCxNQUFPOXNELEdBQ0hnQixFQUtSeEssS0FBSzg4RCxNQUFRaDZELEVBQVF3MEQsS0FDckJ0M0QsS0FBSys4RCxhQUFlLzhELEtBQUs4OEQsTUFBTUUscUJBQzFCLEdBQUk3MkQsR0FBY3JELEVBQVF3MEQsTUFBTyxDQWF0QyxHQVhJdDNELEtBQUt1dkIsT0FBU3Z2QixLQUFLdXZCLE1BQU0wdEMsT0FBU2o5RCxLQUFLdXZCLE1BQU0wdEMsaUJBQWlCUCxLQUNoRTU1RCxFQUFRdzBELEtBQUt4cUIsS0FBTzlzQyxLQUFLdXZCLE1BQ3pCenNCLEVBQVF3MEQsS0FBSzRGLFVBQVlsOUQsS0FBS3V2QixNQUFNMHRDLE1BQU1DLFVBQzFDcDZELEVBQVF3MEQsS0FBSzZGLGVBQWlCbjlELEtBQUt1dkIsTUFBTTB0QyxNQUFNRSxlQUMvQ3I2RCxFQUFRdzBELEtBQUs4RixzQkFBd0JwOUQsS0FBS3V2QixNQUFNMHRDLE1BQU1HLHNCQUN0RHQ2RCxFQUFRdzBELEtBQUsrRixtQkFBcUJyOUQsS0FBS3V2QixNQUFNMHRDLE1BQU1JLG1CQUNuRHY2RCxFQUFRdzBELEtBQUtnRyxtQkFBcUJ0OUQsS0FBS3V2QixNQUFNMHRDLE1BQU1LLG1CQUNuRHg2RCxFQUFRdzBELEtBQUtpRyx5QkFBMkJ2OUQsS0FBS3V2QixNQUFNMHRDLE1BQU1NLDBCQUl2RHo2RCxFQUFRMjVELE9BQ1YsSUFDRSxJQUFJZSxFQUFtQixHQUN2QjE2RCxFQUFRMjVELE9BQU9qL0QsUUFBUSxTQUFVby9ELEdBQy9CWSxFQUFtQnQrRCxHQUFNcytELEVBQWtCNzhELEtBQUs4eUMsTUFBTW1wQixNQUV4RDk1RCxFQUFRdzBELEtBQUtDLFNBQVdpRyxFQUN4QixNQUFPaDBELEdBQ0hnQixFQU1SLElBQ0lpekQsRUFETTM2RCxFQUFRdzBELEtBQ09tRyxlQUNyQkEsR0FBa0J0M0QsR0FBY3MzRCxLQUNsQzM2RCxFQUFRdzBELEtBQUtDLFNBQVdyNEQsR0FBTTRELEVBQVF3MEQsS0FBS0MsU0FBVWtHLElBR3ZEejlELEtBQUs4OEQsTUFBUSxJQUFJSixHQUFRNTVELEVBQVF3MEQsTUFDakN0M0QsS0FBSys4RCxhQUFlLzhELEtBQUs4OEQsTUFBTUUsc0JBRUwvdkQsSUFBdEJuSyxFQUFRdzBELEtBQUtqeUMsTUFBd0J2aUIsRUFBUXcwRCxLQUFLanlDLFFBQ3BEcmxCLEtBQUswOUQsZUFBaUIxOUQsS0FBS2k5RCxNQUFNVSxvQkFHL0JuekQsT0FJR3hLLEtBQUt1dkIsT0FBU3Z2QixLQUFLdXZCLE1BQU0wdEMsT0FBU2o5RCxLQUFLdXZCLE1BQU0wdEMsaUJBQWlCUCxHQUV2RTE4RCxLQUFLODhELE1BQVE5OEQsS0FBS3V2QixNQUFNMHRDLE1BQ2ZuNkQsRUFBUTZNLFFBQVU3TSxFQUFRNk0sT0FBT3N0RCxPQUFTbjZELEVBQVE2TSxPQUFPc3RELGlCQUFpQlAsS0FFbkYxOEQsS0FBSzg4RCxNQUFRaDZELEVBQVE2TSxPQUFPc3RELFFBSWhDanpCLFlBQWEsV0FDWCxJQUFJbG5DLEVBQVU5QyxLQUFLb1csU0FDbkJ0VCxFQUFRdzBELEtBQU94MEQsRUFBUXcwRCxPQUFTeDBELEVBQVEyNUQsT0FBUyxHQUFLLE1BRWxEMzVELEVBQVF3MEQsS0FDTngwRCxFQUFRdzBELGdCQUFnQm9GLElBRTFCMThELEtBQUs4OEQsTUFBTWMsc0JBQXNCNTlELE1BQ2pDQSxLQUFLNjlELGNBQWUsR0FDWDEzRCxHQUFjckQsRUFBUXcwRCxRQUMvQnQzRCxLQUFLODhELE1BQU1jLHNCQUFzQjU5RCxNQUNqQ0EsS0FBSzY5RCxjQUFlLEdBTWI3OUQsS0FBS3V2QixPQUFTdnZCLEtBQUt1dkIsTUFBTTB0QyxPQUFTajlELEtBQUt1dkIsTUFBTTB0QyxpQkFBaUJQLElBQ3ZFMThELEtBQUs4OEQsTUFBTWMsc0JBQXNCNTlELE1BQ2pDQSxLQUFLNjlELGNBQWUsR0FDWC82RCxFQUFRNk0sUUFBVTdNLEVBQVE2TSxPQUFPc3RELE9BQVNuNkQsRUFBUTZNLE9BQU9zdEQsaUJBQWlCUCxLQUNuRjE4RCxLQUFLODhELE1BQU1jLHNCQUFzQjU5RCxNQUNqQ0EsS0FBSzY5RCxjQUFlLElBSXhCaEYsY0FBZSxXQUNiLEdBQUs3NEQsS0FBSzg4RCxNQUFWLENBRUEsSUFBSXRnQixFQUFPeDhDLEtBQ1hBLEtBQUtxeEIsVUFBVSxXQUNUbXJCLEVBQUtxaEIsZUFDUHJoQixFQUFLc2dCLE1BQU1nQix3QkFBd0J0aEIsVUFDNUJBLEVBQUtxaEIsY0FHVnJoQixFQUFLdWdCLGVBQ1B2Z0IsRUFBS3VnQixlQUNMdmdCLEVBQUtzZ0IsTUFBTWlCLG1CQUNKdmhCLEVBQUt1Z0IsY0FHVnZnQixFQUFLa2hCLGlCQUNQbGhCLEVBQUtraEIsd0JBQ0VsaEIsRUFBS2toQixnQkFHZGxoQixFQUFLc2dCLE1BQVEsVUFPZmtCLEdBQXlCLENBQzNCeGlFLEtBQU0sT0FDTmlyQixZQUFZLEVBQ1p0UyxNQUFPLENBQ0xuRixJQUFLLENBQ0hoTCxLQUFNdUMsT0FDTjRQLFFBQVMsUUFFWDRVLEtBQU0sQ0FDSi9tQixLQUFNdUMsT0FDTnFnRCxVQUFVLEdBRVowUCxPQUFRLENBQ050eUQsS0FBTXVDLFFBRVIwM0QsT0FBUSxDQUNOajZELEtBQU0sQ0FBQzhDLE1BQU9uTCxVQUdsQjhnQixPQUFRLFNBQWlCeXJCLEVBQUczVyxHQUMxQixJQUFJcGQsRUFBUW9kLEVBQUlwZCxNQUNadFQsRUFBTzB3QixFQUFJMXdCLEtBQ1hvTyxFQUFXc2lCLEVBQUl0aUIsU0FHZnFvRCxFQUZTL2xDLEVBQUk1aEIsT0FFQ3N0RCxNQU1sQixHQUpBaHVELEdBQVlBLEdBQVksSUFBSTdKLE9BQU8sU0FBVWlMLEdBQzNDLE9BQU9BLEVBQU1yQixNQUFRcUIsRUFBTW5CLEtBQU9tQixFQUFNbkIsS0FBS3ZQLFdBRzFDMjNELEVBSUgsT0FBT3JvRCxFQUdULElBQUk4YixFQUFPNVcsRUFBTTRXLEtBQ2J1ckMsRUFBU25pRCxFQUFNbWlELE9BRWZ2OEMsRUFBUyxHQUNUa2tELEVBQVM5cEQsRUFBTThwRCxRQUFVLEdBTXpCQyxHQUpZcDNELE1BQU0xSixRQUFRNmdFLEdBQzFCQSxFQUFPdGdFLE9BQ1BoQyxPQUFPaU8sS0FBS3EwRCxHQUFRdGdFLE9BRVBzUixFQUFTMUYsTUFBTSxTQUFVOEcsR0FDeEMsR0FBSUEsRUFBTXhQLE1BQVF3UCxFQUFNeFAsS0FBSzBhLE1BQU8sQ0FDbEMsSUFBSTRpRCxFQUFROXRELEVBQU14UCxLQUFLMGEsTUFBTTRpRCxNQUM3QixZQUF5QixJQUFWQSxHQUFvQyxLQUFWQSxNQXlCN0MsT0FqQklyM0QsTUFBTTFKLFFBQVE2Z0UsR0FDaEJBLEVBQU96Z0UsUUFBUSxTQUFVd3lCLEVBQUkvMEIsR0FDM0I4ZSxFQUFPOWUsR0FBSyswQixJQUdkcjBCLE9BQU9pTyxLQUFLcTBELEdBQVF6Z0UsUUFBUSxTQUFVaEIsR0FDcEN1ZCxFQUFPdmQsR0FBT3loRSxFQUFPemhFLEtBSXpCeVMsRUFBU3pSLFFBQVEsU0FBVTZTLEVBQU9wVixHQUNoQyxJQUFJdUIsRUFBTTBoRSxFQUNMLEdBQU03dEQsRUFBTXhQLEtBQUswYSxNQUFNNGlELE1BQ3ZCLEdBQUtsakUsRUFDVjhlLEVBQU92ZCxHQUFPNlQsSUFHVDYzQixFQUFFL3pCLEVBQU1uRixJQUFLbk8sRUFBTXkyRCxFQUFLcjhELEVBQUU4dkIsRUFBTXVyQyxFQUFRdjhDLE1BTS9DcWtELEdBQWtCLENBQ3BCNWlFLEtBQU0sU0FDTmlyQixZQUFZLEVBQ1p0UyxNQUFPLENBQ0xuRixJQUFLLENBQ0hoTCxLQUFNdUMsT0FDTjRQLFFBQVMsUUFFWGphLE1BQU8sQ0FDTDhILEtBQU04dEIsT0FDTjgwQixVQUFVLEdBRVp5WCxPQUFRLENBQ05yNkQsS0FBTSxDQUFDdUMsT0FBUTVLLFNBRWpCMjZELE9BQVEsQ0FDTnR5RCxLQUFNdUMsU0FHVmtXLE9BQVEsU0FBaUJ5ckIsRUFBRzNXLEdBQzFCLElBQUlwZCxFQUFRb2QsRUFBSXBkLE1BQ1p4RSxFQUFTNGhCLEVBQUk1aEIsT0FDYjlPLEVBQU8wd0IsRUFBSTF3QixLQUVYeTJELEVBQU8zbkQsRUFBT3N0RCxNQUVsQixJQUFLM0YsRUFJSCxPQUFPLEtBR1QsSUFBSTk2RCxFQUFNLEtBQ05zRyxFQUFVLEtBRWMsaUJBQWpCcVIsRUFBTWtxRCxPQUNmN2hFLEVBQU0yWCxFQUFNa3FELE9BQ0gvZ0UsR0FBUzZXLEVBQU1rcUQsVUFDcEJscUQsRUFBTWtxRCxPQUFPN2hFLE1BQ2ZBLEVBQU0yWCxFQUFNa3FELE9BQU83aEUsS0FJckJzRyxFQUFVbkgsT0FBT2lPLEtBQUt1SyxFQUFNa3FELFFBQVF4eEIsT0FBTyxTQUFVeXhCLEVBQUt4b0QsR0FDeEQsSUFBSXJZLEVBRUosT0FBSTArRCxHQUFpQm9DLFNBQVN6b0QsR0FDckJuYSxPQUFPNmlFLE9BQU8sR0FBSUYsSUFBTzdnRSxFQUFNLElBQVFxWSxHQUFRM0IsRUFBTWtxRCxPQUFPdm9ELEdBQU9yWSxJQUVyRTZnRSxHQUNOLE9BR0wsSUFBSWhJLEVBQVNuaUQsRUFBTW1pRCxRQUFVZ0IsRUFBS2hCLE9BQzlCcjBELEVBQVFxMUQsRUFBS21ILEtBQUt0cUQsRUFBTWpZLE1BQU9vNkQsRUFBUTk1RCxFQUFLc0csR0FFNUMwYyxFQUFTdmQsRUFBTWhDLElBQUksU0FBVTZCLEVBQU1vRCxHQUNyQyxJQUFJekgsRUFFQStkLEVBQU8zYSxFQUFLd2dCLGFBQWV4Z0IsRUFBS3dnQixZQUFZdmYsRUFBS2tDLE1BQ3JELE9BQU93WCxFQUFPQSxJQUFPL2QsRUFBTSxJQUFRcUUsRUFBS2tDLE1BQVFsQyxFQUFLNUYsTUFBT3VCLEVBQUl5SCxNQUFRQSxFQUFPekgsRUFBSXdFLE1BQVFBLEVBQU94RSxJQUFTcUUsRUFBSzVGLFFBR2xILE9BQU9nc0MsRUFBRS96QixFQUFNbkYsSUFBSyxDQUNsQnVNLE1BQU8xYSxFQUFLMGEsTUFDWnVNLE1BQVNqbkIsRUFBSSxNQUNibXpCLFlBQWFuekIsRUFBS216QixhQUNqQnhVLEtBTVAsU0FBUy9pQixHQUFNdXpCLEVBQUlxVyxFQUFTMTFCLEdBQ3JCK3RELEdBQU8xdUMsRUFBSXJmLElBRWhCeFUsR0FBRTZ6QixFQUFJcVcsRUFBUzExQixHQUdqQixTQUFTek0sR0FBUThyQixFQUFJcVcsRUFBUzExQixFQUFPZ3VELEdBQ25DLEdBQUtELEdBQU8xdUMsRUFBSXJmLEdBQWhCLENBRUEsSUFBSTJtRCxFQUFPM21ELEVBQU12QixRQUFRNnRELE9BMEMzQixTQUFzQmp0QyxFQUFJcmYsR0FDeEIsSUFBSStDLEVBQUsvQyxFQUFNdkIsUUFDZixPQUFPNGdCLEVBQUc0dUMsVUFBWWxyRCxFQUFHdXBELE1BQU0zRyxRQTNDM0J1SSxDQUFZN3VDLEVBQUlyZixJQUNqQnpILEdBQVdtOUIsRUFBUW5xQyxNQUFPbXFDLEVBQVFoYixXQUNsQ25pQixHQUFXOG1CLEVBQUc4dUMsZUFBZ0J4SCxFQUFLeUgsaUJBQWlCekgsRUFBS2hCLFVBRTVEbjZELEdBQUU2ekIsRUFBSXFXLEVBQVMxMUIsSUFHakIsU0FBU2kzQixHQUFRNVgsRUFBSXFXLEVBQVMxMUIsRUFBT2d1RCxHQUVuQyxHQURTaHVELEVBQU12QixRQUNmLENBS0EsSUFBSWtvRCxFQUFPM21ELEVBQU12QixRQUFRNnRELE9BQVMsR0FDN0I1MkIsRUFBUS9PLFVBQVU5YyxVQUFhODhDLEVBQUtpRywyQkFDdkN2dEMsRUFBR3dGLFlBQWMsSUFFbkJ4RixFQUFHZ3ZDLFNBQU0veEQsU0FDRitpQixFQUFFLElBQ1RBLEVBQUc0dUMsYUFBVTN4RCxTQUNOK2lCLEVBQUUsUUFDVEEsRUFBRzh1QyxvQkFBaUI3eEQsU0FDYitpQixFQUFFLG9CQWJQaGlCLEdBQUssaURBZ0JULFNBQVMwd0QsR0FBUTF1QyxFQUFJcmYsR0FDbkIsSUFBSStDLEVBQUsvQyxFQUFNdkIsUUFDZixPQUFLc0UsSUFLQUEsRUFBR3VwRCxRQUNOanZELEdBQUsscURBQ0UsSUFOUEEsR0FBSyxrREFDRSxHQWdCWCxTQUFTN1IsR0FBRzZ6QixFQUFJcVcsRUFBUzExQixHQUN2QixJQUFJc3VELEVBQU9DLEVBSVAzdEMsRUF5Qk4sU0FBcUJyMUIsR0FDbkIsSUFBSTZ1QixFQUNBdXJDLEVBQ0FybEQsRUFDQWt1RCxFQUVpQixpQkFBVmpqRSxFQUNUNnVCLEVBQU83dUIsRUFDRWlLLEdBQWNqSyxLQUN2QjZ1QixFQUFPN3VCLEVBQU02dUIsS0FDYnVyQyxFQUFTcDZELEVBQU1vNkQsT0FDZnJsRCxFQUFPL1UsRUFBTStVLEtBQ2JrdUQsRUFBU2pqRSxFQUFNaWpFLFFBR2pCLE1BQU8sQ0FBRXAwQyxLQUFNQSxFQUFNdXJDLE9BQVFBLEVBQVFybEQsS0FBTUEsRUFBTWt1RCxPQUFRQSxHQXhDL0NDLENBRkUvNEIsRUFBUW5xQyxPQUdoQjZ1QixFQUFPd0csRUFBSXhHLEtBQ1h1ckMsRUFBUy9rQyxFQUFJK2tDLE9BQ2JybEQsRUFBT3NnQixFQUFJdGdCLEtBQ1hrdUQsRUFBUzV0QyxFQUFJNHRDLE9BQ2pCLEdBQUtwMEMsR0FBU3VyQyxHQUFXcmxELEVBS3pCLEdBQUs4WixFQUFMLENBS0EsSUFBSXJYLEVBQUsvQyxFQUFNdkIsUUFFYjRnQixFQUFHZ3ZDLElBQU1odkMsRUFBR3dGLFlBRFYycEMsR0FDeUJGLEVBQVF2ckQsRUFBR3VwRCxPQUFPb0MsR0FBRzkyRCxNQUFNMDJELEVBQU8sQ0FBRWwwQyxFQUFNbzBDLEdBQVNyK0QsT0FBUXcrRCxHQUFXaEosRUFBUXJsRCxNQUU5RWl1RCxFQUFReHJELEVBQUd1cEQsT0FBTzlnRSxFQUFFb00sTUFBTTIyRCxFQUFPLENBQUVuMEMsR0FBT2pxQixPQUFRdytELEdBQVdoSixFQUFRcmxELEtBRWxHK2UsRUFBRzR1QyxRQUFVbHJELEVBQUd1cEQsTUFBTTNHLE9BQ3RCdG1DLEVBQUc4dUMsZUFBaUJwckQsRUFBR3VwRCxNQUFNOEIsaUJBQWlCcnJELEVBQUd1cEQsTUFBTTNHLGFBWHJEdG9ELEdBQUssNENBTExBLEdBQUssNEJBcUNULFNBQVNzeEQsR0FBWWhKLEVBQVFybEQsR0FDM0IsSUFBSThJLEVBQVMsR0FPYixPQUxBdThDLEdBQVV2OEMsRUFBT3RZLEtBQUs2MEQsR0FDbEJybEQsSUFBU25LLE1BQU0xSixRQUFRNlQsSUFBUzlLLEdBQWM4SyxLQUNoRDhJLEVBQU90WSxLQUFLd1AsR0FHUDhJLEVBS1QsU0FBUzZZLEdBQVNnZSxHQU1oQmhlLEdBQVFpaUMsV0FBWSxHQUVwQmxuQyxHQUFNaWpCLEdBRWF6ZCxTQUFXckIsT0FBT25FLEdBQUl3RixRQUFRaHNCLE1BQU0sS0FBSyxLQS9jOUQsU0FBaUJ3bUIsR0FDVkEsRUFBSTl3QixVQUFVQyxlQUFlLFVBRWhDbkIsT0FBT0MsZUFBZSt4QixFQUFJOXdCLFVBQVcsUUFBUyxDQUM1Q2YsSUFBSyxXQUFrQixPQUFPa0UsS0FBSzg4RCxTQUl2Q252QyxFQUFJOXdCLFVBQVUrNUQsR0FBSyxTQUFVcDZELEdBRTNCLElBREEsSUFBSWdqQixFQUFTLEdBQUl0TyxFQUFNN1IsVUFBVTFCLE9BQVMsRUFDbEN1VCxLQUFRLEdBQUlzTyxFQUFRdE8sR0FBUTdSLFVBQVc2UixFQUFNLEdBRXJELElBQUlvbUQsRUFBT3QzRCxLQUFLaTlELE1BQ2hCLE9BQU8zRixFQUFLdDNDLEdBQUd6WCxNQUFNK3VELEVBQU0sQ0FBRTk2RCxFQUFLODZELEVBQUtoQixPQUFRZ0IsRUFBS2lJLGVBQWdCdi9ELE1BQU9jLE9BQVEwZSxLQUdyRm1PLEVBQUk5d0IsVUFBVTJpRSxJQUFNLFNBQVVoakUsRUFBSzJpRSxHQUVqQyxJQURBLElBQUkzL0MsRUFBUyxHQUFJdE8sRUFBTTdSLFVBQVUxQixPQUFTLEVBQ2xDdVQsS0FBUSxHQUFJc08sRUFBUXRPLEdBQVE3UixVQUFXNlIsRUFBTSxHQUVyRCxJQUFJb21ELEVBQU90M0QsS0FBS2k5RCxNQUNoQixPQUFPM0YsRUFBS21JLElBQUlsM0QsTUFBTSt1RCxFQUFNLENBQUU5NkQsRUFBSzg2RCxFQUFLaEIsT0FBUWdCLEVBQUtpSSxlQUFnQnYvRCxLQUFNbS9ELEdBQVNyK0QsT0FBUTBlLEtBRzlGbU8sRUFBSTl3QixVQUFVNmlFLElBQU0sU0FBVWxqRSxFQUFLODVELEdBQ2pDLElBQUlnQixFQUFPdDNELEtBQUtpOUQsTUFDaEIsT0FBTzNGLEVBQUtxSSxJQUFJbmpFLEVBQUs4NkQsRUFBS2hCLE9BQVFnQixFQUFLaUksZUFBZ0JqSixJQUd6RDNvQyxFQUFJOXdCLFVBQVUraUUsR0FBSyxTQUFVMWpFLEdBSTNCLElBSEEsSUFBSXExQixFQUVBdGdCLEVBQU8sR0FBSUMsRUFBTTdSLFVBQVUxQixPQUFTLEVBQ2hDdVQsS0FBUSxHQUFJRCxFQUFNQyxHQUFRN1IsVUFBVzZSLEVBQU0sR0FDbkQsT0FBUXFnQixFQUFNdnhCLEtBQUtpOUQsT0FBTzFoRSxFQUFFZ04sTUFBTWdwQixFQUFLLENBQUVyMUIsR0FBUTRFLE9BQVFtUSxLQUczRDBjLEVBQUk5d0IsVUFBVWdqRSxHQUFLLFNBQVUzakUsR0FJM0IsSUFIQSxJQUFJcTFCLEVBRUF0Z0IsRUFBTyxHQUFJQyxFQUFNN1IsVUFBVTFCLE9BQVMsRUFDaEN1VCxLQUFRLEdBQUlELEVBQU1DLEdBQVE3UixVQUFXNlIsRUFBTSxHQUNuRCxPQUFRcWdCLEVBQU12eEIsS0FBS2k5RCxPQUFPdmdFLEVBQUU2TCxNQUFNZ3BCLEVBQUssQ0FBRXIxQixHQUFRNEUsT0FBUW1RLE1BNGEzRDFSLENBQU9vdUIsSUFDUEEsR0FBSVksTUFBTUEsSUFDVlosR0FBSXlZLFVBQVUsSUFBSyxDQUFFM3BDLEtBQU1BLEdBQU15SCxPQUFRQSxHQUFRMGpDLE9BQVFBLEtBQ3pEamEsR0FBSTVILFVBQVVpNEMsR0FBdUJ4aUUsS0FBTXdpRSxJQUMzQ3J3QyxHQUFJNUgsVUFBVXE0QyxHQUFnQjVpRSxLQUFNNGlFLElBR3ZCendDLEdBQUl2akIsT0FBT0Msc0JBQ2pCaXRELEtBQU8sU0FBVTlqRCxFQUFXQyxHQUNqQyxZQUFvQnhHLElBQWJ3RyxFQUNIRCxFQUNBQyxHQU1SLElBQUlxc0QsR0FBZ0IsV0FDbEI5L0QsS0FBSysvRCxRQUFVcGtFLE9BQU9ZLE9BQU8sT0FHL0J1akUsR0FBY2pqRSxVQUFVbWpFLFlBQWMsU0FBc0I1bkIsRUFBUzU0QixHQUNuRSxJQUFLQSxFQUNILE1BQU8sQ0FBQzQ0QixHQUVWLElBQUk4USxFQUFTbHBELEtBQUsrL0QsUUFBUTNuQixHQUsxQixPQUpLOFEsSUFDSEEsRUFXSixTQUFnQm1WLEdBQ2QsSUFBSW5WLEVBQVMsR0FDVHVGLEVBQVcsRUFFWHYvQyxFQUFPLEdBQ1gsS0FBT3UvQyxFQUFXNFAsRUFBTzFnRSxRQUFRLENBQy9CLElBQUlzaUUsRUFBTzVCLEVBQU81UCxLQUNsQixHQUFhLE1BQVR3UixFQUFjLENBQ1ovd0QsR0FDRmc2QyxFQUFPem5ELEtBQUssQ0FBRXVDLEtBQU0sT0FBUTlILE1BQU9nVCxJQUdyQ0EsRUFBTyxHQUNQLElBQUliLEVBQU0sR0FFVixJQURBNHhELEVBQU81QixFQUFPNVAsVUFDRXhoRCxJQUFUZ3pELEdBQStCLE1BQVRBLEdBQzNCNXhELEdBQU80eEQsRUFDUEEsRUFBTzVCLEVBQU81UCxLQUVoQixJQUFJeVIsRUFBb0IsTUFBVEQsRUFFWGo4RCxFQUFPbThELEdBQW9CbDlELEtBQUtvTCxHQUNoQyxPQUNBNnhELEdBQVlFLEdBQXFCbjlELEtBQUtvTCxHQUNwQyxRQUNBLFVBQ042NkMsRUFBT3puRCxLQUFLLENBQUV2RixNQUFPbVMsRUFBS3JLLEtBQU1BLFFBQ2QsTUFBVGk4RCxFQUVrQixNQUF2QjVCLEVBQVE1UCxLQUNWdi9DLEdBQVErd0QsR0FHVi93RCxHQUFRK3dELEVBTVosT0FGQS93RCxHQUFRZzZDLEVBQU96bkQsS0FBSyxDQUFFdUMsS0FBTSxPQUFROUgsTUFBT2dULElBRXBDZzZDLEVBbERJelYsQ0FBTTJFLEdBQ2ZwNEMsS0FBSysvRCxRQUFRM25CLEdBQVc4USxHQW9ENUIsU0FBa0JBLEVBQVExcEMsR0FDeEIsSUFBSTZnRCxFQUFXLEdBQ1huN0QsRUFBUSxFQUVSOUksRUFBTzBLLE1BQU0xSixRQUFRb2lCLEdBQ3JCLE9BQ0FsaUIsR0FBU2tpQixHQUNQLFFBQ0EsVUFDTixHQUFhLFlBQVRwakIsRUFBc0IsT0FBT2lrRSxFQUVqQyxLQUFPbjdELEVBQVFna0QsRUFBT3ZyRCxRQUFRLENBQzVCLElBQUkyK0MsRUFBUTRNLEVBQU9oa0QsR0FDbkIsT0FBUW8zQyxFQUFNdDRDLE1BQ1osSUFBSyxPQUNIcThELEVBQVM1K0QsS0FBSzY2QyxFQUFNcGdELE9BQ3BCLE1BQ0YsSUFBSyxPQUNIbWtFLEVBQVM1K0QsS0FBSytkLEVBQU8wUyxTQUFTb3FCLEVBQU1wZ0QsTUFBTyxNQUMzQyxNQUNGLElBQUssUUFDVSxVQUFURSxHQUNGaWtFLEVBQVM1K0QsS0FBTStkLEVBQVE4OEIsRUFBTXBnRCxRQU0vQixNQUNGLElBQUssVUFDQ3NPLEVBS1J0RixJQUdGLE9BQU9tN0QsRUF4RkF6VixDQUFRMUIsRUFBUTFwQyxJQUt6QixJQUFJMmdELEdBQXNCLFdBQ3RCQyxHQUF1QixXQThGM0IsSUFBSUUsR0FBUyxFQUNUQyxHQUFPLEVBQ1BDLEdBQXFCLEVBQ3JCQyxHQUFnQixFQUdoQkMsR0FBYyxFQUlkQyxHQUFjLEVBQ2RDLEdBQWtCLEVBQ2xCQyxHQUFrQixFQUNsQkMsR0FBYSxFQUNiQyxHQUFRLEVBRVJDLEdBQW1CLEdBRXZCQSxHQUFpQk4sSUFBZSxDQUM5Qk8sR0FBTSxDQUFDUCxJQUNQUSxNQUFTLENBWEksRUFXT1osSUFDcEJhLElBQUssQ0FBQ1IsSUFDTlMsSUFBTyxDQUFDTixLQUdWRSxHQWxCYyxHQWtCYyxDQUMxQkMsR0FBTSxDQW5CTSxHQW9CWkksSUFBSyxDQW5CWSxHQW9CakJGLElBQUssQ0FBQ1IsSUFDTlMsSUFBTyxDQUFDTixLQUdWRSxHQXhCbUIsR0F3QmMsQ0FDL0JDLEdBQU0sQ0F6QlcsR0EwQmpCQyxNQUFTLENBekJJLEVBeUJPWixJQUNwQmdCLEVBQUssQ0ExQlEsRUEwQkdoQixJQUNoQjdsQyxPQUFVLENBM0JHLEVBMkJRNmxDLEtBR3ZCVSxHQTlCZSxHQThCYyxDQUMzQkUsTUFBUyxDQS9CSSxFQStCT1osSUFDcEJnQixFQUFLLENBaENRLEVBZ0NHaEIsSUFDaEI3bEMsT0FBVSxDQWpDRyxFQWlDUTZsQyxJQUNyQlcsR0FBTSxDQXBDTSxFQW9DSVYsSUFDaEJjLElBQUssQ0FwQ1ksRUFvQ0dkLElBQ3BCWSxJQUFLLENBQUNSLEdBQWFKLElBQ25CYSxJQUFPLENBQUNOLEdBQVlQLEtBR3RCUyxHQUFpQkwsSUFBZSxDQUM5QlksSUFBSyxDQUFDWCxHQUFpQk4sSUFDdkJrQixJQUFLLENBQUNYLEdBQWlCUCxJQUN2QmEsSUFBSyxDQUFDUixHQUFhSCxJQUNuQmlCLElBQUssQ0E5Q08sRUE4Q0doQixJQUNmVyxJQUFPTCxHQUNQVyxLQUFRLENBQUNmLEdBQWFMLEtBR3hCVSxHQUFpQkosSUFBbUIsQ0FDbENXLElBQUssQ0FBQ1osR0FBYUwsSUFDbkJjLElBQU9MLEdBQ1BXLEtBQVEsQ0FBQ2QsR0FBaUJOLEtBRzVCVSxHQUFpQkgsSUFBbUIsQ0FDbENXLElBQUssQ0FBQ2IsR0FBYUwsSUFDbkJjLElBQU9MLEdBQ1BXLEtBQVEsQ0FBQ2IsR0FBaUJQLEtBTzVCLElBQUlxQixHQUFpQixrREFxQnJCLFNBQVNDLEdBQWlCaCtCLEdBQ3hCLEdBQUlBLFFBQW1DLE1BQU8sTUFJOUMsT0FGV0EsRUFBRzNYLFdBQVcsSUFHdkIsS0FBSyxHQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssR0FDSCxPQUFPMlgsRUFFVCxLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssR0FDSCxNQUFPLFFBRVQsS0FBSyxFQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxJQUNMLEtBQUssTUFDTCxLQUFLLEtBQ0wsS0FBSyxLQUNILE1BQU8sS0FHWCxNQUFPLFFBU1QsU0FBU2krQixHQUFlOTJDLEdBQ3RCLElBbERvQm5yQixFQUNoQkosRUFUY3NpRSxFQTBEZEMsRUFBVWgzQyxFQUFLcHJCLE9BRW5CLE9BQXVCLE1BQW5Cb3JCLEVBQUsvaUIsT0FBTyxLQUFjaEIsTUFBTStqQixNQTVEbEIrMkMsRUE4RERDLEVBN0RWSixHQUFlMStELEtBQUs2K0QsSUFRdkJ0aUUsR0FEZ0JJLEVBc0RvQm1pRSxHQXJENUI5MUMsV0FBVyxNQUNmcnNCLEVBQUlxc0IsV0FBV3JzQixFQUFJakMsT0FBUyxJQUNYLEtBQU42QixHQUFvQixLQUFOQSxFQUU3QkksRUFEQUEsRUFBSXFJLE1BQU0sR0FBSSxHQWtEaUMsSUFBTTg1RCxHQTBHM0QsSUFBSUMsR0FBVyxXQUNiaGlFLEtBQUtpaUUsT0FBU3RtRSxPQUFPWSxPQUFPLE9BTTlCeWxFLEdBQVNubEUsVUFBVW91QixVQUFZLFNBQW9CRixHQUNqRCxJQUFJbTNDLEVBQU1saUUsS0FBS2lpRSxPQUFPbDNDLEdBT3RCLE9BTkttM0MsSUFDSEEsRUE3R0osU0FBa0JuM0MsR0FDaEIsSUFJSXp2QixFQUNBa0IsRUFDQTJsRSxFQUNBbitELEVBQ0EwN0IsRUFDQTZRLEVBQ0E2eEIsRUFWQXg0RCxFQUFPLEdBQ1AxRSxHQUFTLEVBQ1Q5SSxFQUFPc2tFLEdBQ1AyQixFQUFlLEVBUWZsMkIsRUFBVSxHQXNDZCxTQUFTbTJCLElBQ1AsSUFBSUMsRUFBV3gzQyxFQUFLN2xCLEVBQVEsR0FDNUIsR0FBSzlJLElBQVN3a0UsSUFBZ0MsTUFBYjJCLEdBQzlCbm1FLElBQVN5a0UsSUFBZ0MsTUFBYjBCLEVBSTdCLE9BSEFyOUQsSUFDQWk5RCxFQUFVLEtBQU9JLEVBQ2pCcDJCLEVBQVFtMEIsT0FDRCxFQUlYLElBL0NBbjBCLEVBQVFvMEIsSUFBUSxnQkFDRnR6RCxJQUFSelEsSUFDRm9OLEVBQUtuSSxLQUFLakYsR0FDVkEsT0FBTXlRLElBSVZrL0IsRUFBUW0wQixJQUFVLGdCQUNKcnpELElBQVJ6USxFQUNGQSxFQUFNMmxFLEVBRU4zbEUsR0FBTzJsRSxHQUlYaDJCLEVBQVFxMEIsSUFBc0IsV0FDNUJyMEIsRUFBUW0wQixNQUNSK0IsS0FHRmwyQixFQUFRczBCLElBQWlCLFdBQ3ZCLEdBQUk0QixFQUFlLEVBQ2pCQSxJQUNBam1FLEVBQU91a0UsR0FDUHgwQixFQUFRbTBCLFVBQ0gsQ0FHTCxHQUZBK0IsRUFBZSxHQUVILEtBRFo3bEUsRUFBTXFsRSxHQUFjcmxFLElBRWxCLE9BQU8sRUFFUDJ2QyxFQUFRbzBCLFFBZ0JFLE9BQVRua0UsR0FJTCxHQUFVLFFBRlZkLEVBQUl5dkIsSUFESjdsQixNQUdrQm85RCxJQUFsQixDQVFBLEdBSkF0K0QsRUFBTzQ5RCxHQUFnQnRtRSxJQUV2Qm9rQyxHQURBMGlDLEVBQVVwQixHQUFpQjVrRSxJQUNONEgsSUFBU28rRCxFQUFPLE1BQVlyQixNQUU5QkEsR0FDakIsT0FLRixHQUZBM2tFLEVBQU9zakMsRUFBVyxJQUNsQjZRLEVBQVNwRSxFQUFRek0sRUFBVyxPQUcxQnlpQyxPQUFzQmwxRCxLQUR0QmsxRCxFQUFVemlDLEVBQVcsSUFFakJwa0MsRUFDQTZtRSxHQUNhLElBQWI1eEIsS0FDRixPQUlKLEdBQUluMEMsSUFBUzBrRSxHQUNYLE9BQU9sM0QsR0FtQkg0NEQsQ0FBUXozQyxNQUVaL3FCLEtBQUtpaUUsT0FBT2wzQyxHQUFRbTNDLEdBR2pCQSxHQUFPLElBTWhCRixHQUFTbmxFLFVBQVU0bEUsYUFBZSxTQUF1QmhsRSxFQUFLc3RCLEdBQzVELElBQUt6dEIsR0FBU0csR0FBUSxPQUFPLEtBRTdCLElBQUlpbEUsRUFBUTFpRSxLQUFLaXJCLFVBQVVGLEdBQzNCLEdBQXFCLElBQWpCMjNDLEVBQU0va0UsT0FDUixPQUFPLEtBS1AsSUFIQSxJQUFJQSxFQUFTK2tFLEVBQU0va0UsT0FDZmtkLEVBQU9wZCxFQUNQeEMsRUFBSSxFQUNEQSxFQUFJMEMsR0FBUSxDQUNqQixJQUFJekIsRUFBUTJlLEVBQUs2bkQsRUFBTXpuRSxJQUN2QixRQUFjZ1MsSUFBVi9RLEVBQ0YsT0FBTyxLQUVUMmUsRUFBTzNlLEVBQ1BqQixJQUdGLE9BQU80ZixHQVFYLElBNnlCSThuRCxHQTd5QkFDLEdBQWlCLDJCQUNqQkMsR0FBaUIsb0RBQ2pCQyxHQUF1QixxQkFDdkJDLEdBQWtCLFFBQ2xCQyxHQUFhLENBQ2ZDLE1BQVMsU0FBVXJqRSxHQUFPLE9BQU9BLEVBQUlzakUscUJBQ3JDQyxNQUFTLFNBQVV2akUsR0FBTyxPQUFPQSxFQUFJd2pFLHNCQUduQ0MsR0FBbUIsSUFBSXZELEdBRXZCcEQsR0FBVSxTQUFrQjU1RCxHQUM5QixJQUFJZ2UsRUFBUzlnQixVQUNJLElBQVo4QyxJQUFxQkEsRUFBVSxLQU0vQjZxQixJQUF5QixvQkFBWDN1QixRQUEwQkEsT0FBTzJ1QixLQUNsRGlGLEdBQVE1ekIsT0FBTzJ1QixLQUdqQixJQUFJMm9DLEVBQVN4ekQsRUFBUXd6RCxRQUFVLFFBQzNCNkcsRUFBaUJyNkQsRUFBUXE2RCxnQkFBa0IsUUFDM0M1RixFQUFXejBELEVBQVF5MEQsVUFBWSxHQUMvQitMLEVBQWtCeGdFLEVBQVF3Z0UsaUJBQW1CLEdBQzdDQyxFQUFnQnpnRSxFQUFReWdFLGVBQWlCLEdBRTdDdmpFLEtBQUtpdkMsSUFBTSxLQUNYanZDLEtBQUt3akUsV0FBYTFnRSxFQUFRbzZELFdBQWFtRyxHQUN2Q3JqRSxLQUFLeWpFLFNBQVczZ0UsRUFBUTRnRSxTQUFXLEtBQ25DMWpFLEtBQUsyakUsTUFBUTdnRSxFQUFRZ3FDLE1BQVEsS0FDN0I5c0MsS0FBSzRqRSxXQUF5QjMyRCxJQUFqQm5LLEVBQVF1aUIsUUFBOEJ2aUIsRUFBUXVpQixLQUMzRHJsQixLQUFLNmpFLG1CQUF5QzUyRCxJQUF6Qm5LLEVBQVFnaEUsZ0JBRXZCaGhFLEVBQVFnaEUsYUFDZDlqRSxLQUFLK2pFLDRCQUEyRDkyRCxJQUFsQ25LLEVBQVFzNkQseUJBRWhDdDZELEVBQVFzNkQsc0JBQ2RwOUQsS0FBS2drRSx5QkFBcUQvMkQsSUFBL0JuSyxFQUFRdTZELHNCQUU3QnY2RCxFQUFRdTZELG1CQUNkcjlELEtBQUtpa0Usb0JBQXNCLEdBQzNCamtFLEtBQUtra0Usa0JBQW9CLEdBQ3pCbGtFLEtBQUtta0UsTUFBUSxJQUFJbkMsR0FDakJoaUUsS0FBS29rRSxlQUFpQixHQUN0QnBrRSxLQUFLcWtFLCtCQUFpRXAzRCxJQUFyQ25LLEVBQVF5NkQsNEJBRW5DejZELEVBQVF5NkQseUJBQ2R2OUQsS0FBS3M5RCxtQkFBcUJ4NkQsRUFBUXc2RCxvQkFBc0IsR0FDeER0OUQsS0FBS3NrRSxtQkFBcUJ4aEUsRUFBUXloRSxtQkFBcUIsTUFFdkR2a0UsS0FBS3drRSxPQUFTLFNBQVVwc0IsRUFBUzU3QyxHQUMvQixTQUFLNDdDLElBQVk1N0MsTUFDWjYvRCxHQUFPdjdDLEVBQU9xakQsTUFBTTFCLGFBQWFycUIsRUFBUzU3QyxPQUUzQzQ3QyxFQUFRNTdDLEtBSWtCLFNBQTVCd0QsS0FBS3NrRSxvQkFBNkQsVUFBNUJ0a0UsS0FBS3NrRSxvQkFDN0Mzb0UsT0FBT2lPLEtBQUsydEQsR0FBVS81RCxRQUFRLFNBQVU4NEQsR0FDdEN4MUMsRUFBTzJqRCxvQkFBb0JuTyxFQUFReDFDLEVBQU93akQsbUJBQW9CL00sRUFBU2pCLE1BSTNFdDJELEtBQUswa0UsUUFBUSxDQUNYcE8sT0FBUUEsRUFDUjZHLGVBQWdCQSxFQUNoQjVGLFNBQVVBLEVBQ1YrTCxnQkFBaUJBLEVBQ2pCQyxjQUFlQSxLQUlmbnpELEdBQXFCLENBQUVzRCxHQUFJLENBQUVoSSxjQUFjLEdBQU82ckQsU0FBVSxDQUFFN3JELGNBQWMsR0FBTzQzRCxnQkFBaUIsQ0FBRTUzRCxjQUFjLEdBQU82M0QsY0FBZSxDQUFFNzNELGNBQWMsR0FBT2k1RCxpQkFBa0IsQ0FBRWo1RCxjQUFjLEdBQU80cUQsT0FBUSxDQUFFNXFELGNBQWMsR0FBT3l4RCxlQUFnQixDQUFFenhELGNBQWMsR0FBT2c0RCxRQUFTLENBQUVoNEQsY0FBYyxHQUFPd3hELFVBQVcsQ0FBRXh4RCxjQUFjLEdBQU8weEQsc0JBQXVCLENBQUUxeEQsY0FBYyxHQUFPMnhELG1CQUFvQixDQUFFM3hELGNBQWMsR0FBTzZ4RCx5QkFBMEIsQ0FBRTd4RCxjQUFjLEdBQU82NEQsa0JBQW1CLENBQUU3NEQsY0FBYyxJQUVuZ0JneEQsR0FBUTcvRCxVQUFVNG5FLG9CQUFzQixTQUE4Qm5PLEVBQVFzTyxFQUFPeHNCLEdBQ25GLElBRUkxNkMsRUFBSyxTQUFVa25FLEVBQU90TyxFQUFRbGUsRUFBU3NxQixHQUN6QyxHQUFJdjhELEdBQWNpeUMsR0FDaEJ6OEMsT0FBT2lPLEtBQUt3dUMsR0FBUzU2QyxRQUFRLFNBQVVoQixHQUNyQyxJQUFJYSxFQUFNKzZDLEVBQVE1N0MsR0FDZDJKLEdBQWM5SSxJQUNoQnFsRSxFQUFNamhFLEtBQUtqRixHQUNYa21FLEVBQU1qaEUsS0FBSyxLQUNYL0QsRUFBR2tuRSxFQUFPdE8sRUFBUWo1RCxFQUFLcWxFLEdBQ3ZCQSxFQUFNNXpELE1BQ040ekQsRUFBTTV6RCxRQUVONHpELEVBQU1qaEUsS0FBS2pGLEdBQ1hrQixFQUFHa25FLEVBQU90TyxFQUFRajVELEVBQUtxbEUsR0FDdkJBLEVBQU01ekQsY0FHTCxHQUFJaEksTUFBTTFKLFFBQVFnN0MsR0FDdkJBLEVBQVE1NkMsUUFBUSxTQUFVMEMsRUFBTWdGLEdBQzFCaUIsR0FBY2pHLElBQ2hCd2lFLEVBQU1qaEUsS0FBTSxJQUFNeUQsRUFBUSxLQUMxQnc5RCxFQUFNamhFLEtBQUssS0FDWC9ELEVBQUdrbkUsRUFBT3RPLEVBQVFwMkQsRUFBTXdpRSxHQUN4QkEsRUFBTTV6RCxNQUNONHpELEVBQU01ekQsUUFFTjR6RCxFQUFNamhFLEtBQU0sSUFBTXlELEVBQVEsS0FDMUJ4SCxFQUFHa25FLEVBQU90TyxFQUFRcDJELEVBQU13aUUsR0FDeEJBLEVBQU01ekQsY0FHTCxHQUF1QixpQkFBWnNwQyxFQUFzQixDQUV0QyxHQURVd3FCLEdBQWUzL0QsS0FBS20xQyxHQUNyQixDQUNQLElBQUkrWCxFQUFNLDZCQUErQi9YLEVBQVUsaUJBQW9Cc3FCLEVBQU12aEUsS0FBSyxJQUFPLFNBQVdtMUQsRUFBUyw2RkFDL0YsU0FBVnNPLEVBQ0Y1MkQsR0FBS21pRCxHQUNjLFVBQVZ5VSxHQTVtQ25CLFNBQWdCelUsRUFBS3Y1QyxHQUNJLG9CQUFaVSxVQUNUQSxRQUFRQyxNQUFNLGNBQWdCNDRDLEdBRTFCdjVDLEdBQ0ZVLFFBQVFDLE1BQU1YLEVBQUk2akMsUUF3bUNkbGpDLENBQU00NEMsTUFNZHp5RCxFQUFHa25FLEVBQU90TyxFQUFRbGUsRUE3Q04sS0FnRGRza0IsR0FBUTcvRCxVQUFVNm5FLFFBQVUsU0FBa0I3akUsR0FDNUMsSUFBSXlKLEVBQVNxakIsR0FBSXZqQixPQUFPRSxPQUN4QnFqQixHQUFJdmpCLE9BQU9FLFFBQVMsRUFDcEJ0SyxLQUFLaXZDLElBQU0sSUFBSXRoQixHQUFJLENBQUU5c0IsS0FBTUEsSUFDM0I4c0IsR0FBSXZqQixPQUFPRSxPQUFTQSxHQUd0Qm95RCxHQUFRNy9ELFVBQVVraEUsVUFBWSxXQUM1Qi85RCxLQUFLaXZDLElBQUl6cUIsWUFHWGs0QyxHQUFRNy9ELFVBQVUrZ0Usc0JBQXdCLFNBQWdDbHFELEdBQ3hFMVQsS0FBS29rRSxlQUFlM2lFLEtBQUtpUyxJQUczQmdwRCxHQUFRNy9ELFVBQVVpaEUsd0JBQTBCLFNBQWtDcHFELElBaGxDOUUsU0FBaUJyTSxFQUFLbkgsR0FDcEIsR0FBSW1ILEVBQUkxSixPQUFRLENBQ2QsSUFBSXVILEVBQVFtQyxFQUFJQyxRQUFRcEgsR0FDeEIsR0FBSWdGLEdBQVMsRUFDSm1DLEVBQUlFLE9BQU9yQyxFQUFPLElBNmtDN0JmLENBQU9uRSxLQUFLb2tFLGVBQWdCMXdELElBRzlCZ3BELEdBQVE3L0QsVUFBVW1nRSxjQUFnQixXQUNoQyxJQUFJeGdCLEVBQU94OEMsS0FDWCxPQUFPQSxLQUFLaXZDLElBQUlsaUIsT0FBTyxRQUFTLFdBRTlCLElBREEsSUFBSTl4QixFQUFJdWhELEVBQUs0bkIsZUFBZXptRSxPQUNyQjFDLEtBQ0wweUIsR0FBSXJWLFNBQVMsV0FDWGtrQyxFQUFLNG5CLGVBQWVucEUsSUFBTXVoRCxFQUFLNG5CLGVBQWVucEUsR0FBR3lvQixrQkFHcEQsQ0FBRTJHLE1BQU0sS0FHYnF5QyxHQUFRNy9ELFVBQVU4Z0UsWUFBYyxXQUU5QixJQUFLMzlELEtBQUs0akUsUUFBVTVqRSxLQUFLMmpFLE1BQVMsT0FBTyxLQUN6QyxJQUFJbjFELEVBQVN4TyxLQUFLaXZDLElBQ2xCLE9BQU9qdkMsS0FBSzJqRSxNQUFNMUcsTUFBTXZwRCxHQUFHcVosT0FBTyxTQUFVLFNBQVUxdkIsR0FDcERtUixFQUFPNGhCLEtBQUs1aEIsRUFBUSxTQUFVblIsR0FDOUJtUixFQUFPa1YsZ0JBQ04sQ0FBRTRNLFdBQVcsS0FHbEJsZ0IsR0FBbUJzRCxHQUFHNVgsSUFBTSxXQUFjLE9BQU9rRSxLQUFLaXZDLEtBRXRENytCLEdBQW1CbW5ELFNBQVN6N0QsSUFBTSxXQUFjLE9BQU95Z0UsR0FBV3Y4RCxLQUFLdS9ELGlCQUN2RW52RCxHQUFtQmt6RCxnQkFBZ0J4bkUsSUFBTSxXQUFjLE9BQU95Z0UsR0FBV3Y4RCxLQUFLNmtFLHdCQUM5RXowRCxHQUFtQm16RCxjQUFjem5FLElBQU0sV0FBYyxPQUFPeWdFLEdBQVd2OEQsS0FBSzhrRSxzQkFDNUUxMEQsR0FBbUJ1MEQsaUJBQWlCN29FLElBQU0sV0FBYyxPQUFPSCxPQUFPaU8sS0FBSzVKLEtBQUt1M0QsVUFBVWh1QyxRQUUxRm5aLEdBQW1Ca21ELE9BQU94NkQsSUFBTSxXQUFjLE9BQU9rRSxLQUFLaXZDLElBQUlxbkIsUUFDOURsbUQsR0FBbUJrbUQsT0FBTzFvRCxJQUFNLFNBQVUwb0QsR0FDeEN0MkQsS0FBS2l2QyxJQUFJN2UsS0FBS3B3QixLQUFLaXZDLElBQUssU0FBVXFuQixJQUdwQ2xtRCxHQUFtQitzRCxlQUFlcmhFLElBQU0sV0FBYyxPQUFPa0UsS0FBS2l2QyxJQUFJa3VCLGdCQUN0RS9zRCxHQUFtQitzRCxlQUFldnZELElBQU0sU0FBVTBvRCxHQUNoRHQyRCxLQUFLaXZDLElBQUk3ZSxLQUFLcHdCLEtBQUtpdkMsSUFBSyxpQkFBa0JxbkIsSUFHNUNsbUQsR0FBbUJzekQsUUFBUTVuRSxJQUFNLFdBQWMsT0FBT2tFLEtBQUt5akUsVUFDM0RyekQsR0FBbUJzekQsUUFBUTkxRCxJQUFNLFNBQVV1SixHQUFXblgsS0FBS3lqRSxTQUFXdHNELEdBRXRFL0csR0FBbUI4c0QsVUFBVXBoRSxJQUFNLFdBQWMsT0FBT2tFLEtBQUt3akUsWUFDN0RwekQsR0FBbUI4c0QsVUFBVXR2RCxJQUFNLFNBQVVzdkQsR0FBYWw5RCxLQUFLd2pFLFdBQWF0RyxHQUU1RTlzRCxHQUFtQmd0RCxzQkFBc0J0aEUsSUFBTSxXQUFjLE9BQU9rRSxLQUFLK2pFLHdCQUN6RTN6RCxHQUFtQmd0RCxzQkFBc0J4dkQsSUFBTSxTQUFVdEQsR0FBVXRLLEtBQUsrakUsdUJBQXlCejVELEdBRWpHOEYsR0FBbUJpdEQsbUJBQW1CdmhFLElBQU0sV0FBYyxPQUFPa0UsS0FBS2drRSxxQkFDdEU1ekQsR0FBbUJpdEQsbUJBQW1CenZELElBQU0sU0FBVXRELEdBQVV0SyxLQUFLZ2tFLG9CQUFzQjE1RCxHQUUzRjhGLEdBQW1CbXRELHlCQUF5QnpoRSxJQUFNLFdBQWMsT0FBT2tFLEtBQUtxa0UsMkJBQzVFajBELEdBQW1CbXRELHlCQUF5QjN2RCxJQUFNLFNBQVU0TSxHQUFZeGEsS0FBS3FrRSwwQkFBNEI3cEQsR0FFekdwSyxHQUFtQm0wRCxrQkFBa0J6b0UsSUFBTSxXQUFjLE9BQU9rRSxLQUFLc2tFLG9CQUNyRWwwRCxHQUFtQm0wRCxrQkFBa0IzMkQsSUFBTSxTQUFVZzNELEdBQ2pELElBQUk5akQsRUFBUzlnQixLQUVYK2tFLEVBQVcva0UsS0FBS3NrRSxtQkFFcEIsR0FEQXRrRSxLQUFLc2tFLG1CQUFxQk0sRUFDdEJHLElBQWFILElBQW9CLFNBQVZBLEdBQThCLFVBQVZBLEdBQW9CLENBQ2pFLElBQUlyTixFQUFXdjNELEtBQUt1L0QsZUFDcEI1akUsT0FBT2lPLEtBQUsydEQsR0FBVS81RCxRQUFRLFNBQVU4NEQsR0FDdEN4MUMsRUFBTzJqRCxvQkFBb0JuTyxFQUFReDFDLEVBQU93akQsbUJBQW9CL00sRUFBU2pCLFFBSzdFb0csR0FBUTcvRCxVQUFVMGlFLGFBQWUsV0FBMkIsT0FBT3YvRCxLQUFLaXZDLElBQUlzb0IsVUFDNUVtRixHQUFRNy9ELFVBQVVnb0Usb0JBQXNCLFdBQWtDLE9BQU83a0UsS0FBS2l2QyxJQUFJcTBCLGlCQUMxRjVHLEdBQVE3L0QsVUFBVWlvRSxrQkFBb0IsV0FBZ0MsT0FBTzlrRSxLQUFLaXZDLElBQUlzMEIsZUFFdEY3RyxHQUFRNy9ELFVBQVVtb0UsYUFBZSxTQUF1QjFPLEVBQVE5NUQsRUFBSzJDLEVBQVF1VSxFQUFJOEwsR0FDL0UsSUFBSzY4QyxHQUFPbDlELEdBQVcsT0FBT0EsRUFDOUIsR0FBSWEsS0FBS3lqRSxTQUFVLENBQ2pCLElBQUl3QixFQUFhamxFLEtBQUt5akUsU0FBU2w3RCxNQUFNLEtBQU0sQ0FBQyt0RCxFQUFROTVELEVBQUtrWCxFQUFJOEwsSUFDN0QsR0FBMEIsaUJBQWZ5bEQsRUFDVCxPQUFPQSxPQUdMejZELEVBT04sT0FBT2hPLEdBR1RrZ0UsR0FBUTcvRCxVQUFVcW9FLGdCQUFrQixTQUEwQjduRSxHQUM1RCxPQUFRQSxJQUFRZy9ELEdBQU9yOEQsS0FBSzJqRSxRQUFVM2pFLEtBQUs2akUsZUFHN0NuSCxHQUFRNy9ELFVBQVVzb0Usa0JBQW9CLFNBQTRCN08sR0FDaEUsT0FBT3QyRCxLQUFLZ2tFLHNCQUF3QmhrRSxLQUFLa2xFLG1CQUFxQjVPLElBQVd0MkQsS0FBS205RCxpQkFHaEZULEdBQVE3L0QsVUFBVXVvRSxhQUFlLFNBQy9COU8sRUFDQWxlLEVBQ0E1N0MsRUFDQTQrQyxFQUNBaXFCLEVBQ0E3bEQsRUFDQThsRCxHQUVBLElBQUtsdEIsRUFBVyxPQUFPLEtBRXZCLElBR0l6dkMsRUFIQTQ4RCxFQUFVdmxFLEtBQUtta0UsTUFBTTFCLGFBQWFycUIsRUFBUzU3QyxHQUMvQyxHQUFJc0ssTUFBTTFKLFFBQVFtb0UsSUFBWXAvRCxHQUFjby9ELEdBQVksT0FBT0EsRUFHL0QsR0FBSWxKLEdBQU9rSixHQUFVLENBRW5CLElBQUlwL0QsR0FBY2l5QyxHQVNoQixPQUFPLEtBUFAsR0FBbUIsaUJBRG5CenZDLEVBQU15dkMsRUFBUTU3QyxJQUtaLE9BQU8sU0FLTixDQUVMLEdBQXVCLGlCQUFaK29FLEVBTVQsT0FBTyxLQUxQNThELEVBQU00OEQsRUFjVixPQUpJNThELEVBQUlyQixRQUFRLE9BQVMsR0FBS3FCLEVBQUlyQixRQUFRLE9BQVMsS0FDakRxQixFQUFNM0ksS0FBS3dsRSxNQUFNbFAsRUFBUWxlLEVBQVN6dkMsRUFBS3l5QyxFQUFNLE1BQU81N0IsRUFBUThsRCxJQUd2RHRsRSxLQUFLc3hCLFFBQVEzb0IsRUFBSzA4RCxFQUFpQjdsRCxFQUFRaGpCLElBR3BEa2dFLEdBQVE3L0QsVUFBVTJvRSxNQUFRLFNBQ3hCbFAsRUFDQWxlLEVBQ0F4NEMsRUFDQXc3QyxFQUNBaXFCLEVBQ0E3bEQsRUFDQThsRCxHQUVBLElBQUkzOEQsRUFBTS9JLEVBS044dUIsRUFBVS9sQixFQUFJK0QsTUFBTW0yRCxJQUN4QixJQUFLLElBQUk0QyxLQUFPLzJDLEVBR2QsR0FBS0EsRUFBUTV4QixlQUFlMm9FLEdBQTVCLENBR0EsSUFBSUMsRUFBT2gzQyxFQUFRKzJDLEdBQ2ZFLEVBQXVCRCxFQUFLaDVELE1BQU1vMkQsSUFDbEM4QyxFQUFhRCxFQUFxQixHQUNoQ0UsRUFBZ0JGLEVBQXFCLEdBR3ZDRyxFQUFrQkosRUFBSzdsRSxRQUFRK2xFLEVBQVksSUFBSS9sRSxRQUFRa2pFLEdBQWlCLElBRTVFLEdBQUl1QyxFQUFpQi9HLFNBQVN1SCxHQUk1QixPQUFPbjlELEVBRVQyOEQsRUFBaUI3akUsS0FBS3FrRSxHQUd0QixJQUFJQyxFQUFhL2xFLEtBQUtvbEUsYUFDcEI5TyxFQUFRbGUsRUFBUzB0QixFQUFpQjFxQixFQUNkLFFBQXBCaXFCLEVBQTRCLFNBQVdBLEVBQ25CLFFBQXBCQSxPQUE0QnA0RCxFQUFZdVMsRUFDeEM4bEQsR0FHRixHQUFJdGxFLEtBQUtrbEUsZ0JBQWdCYSxHQUFhLENBS3BDLElBQUsvbEUsS0FBSzJqRSxNQUFTLE1BQU1yaEUsTUFBTSxvQkFDL0IsSUFBSXdxQyxFQUFPOXNDLEtBQUsyakUsTUFBTTFHLE1BQ3RCOEksRUFBYWo1QixFQUFLazVCLFdBQ2hCbDVCLEVBQUt5eUIsZUFBZ0J6eUIsRUFBS3dwQixPQUFReHBCLEVBQUtxd0IsZUFDdkMySSxFQUFpQjFxQixFQUFNaXFCLEVBQWlCN2xELEdBRzVDdW1ELEVBQWEvbEUsS0FBS2dsRSxhQUNoQjFPLEVBQVF3UCxFQUFpQkMsRUFBWTNxQixFQUNyQ3QwQyxNQUFNMUosUUFBUW9pQixHQUFVQSxFQUFTLENBQUNBLElBRWhDd2pELEdBQVdsbUUsZUFBZStvRSxLQUM1QkUsRUFBYS9DLEdBQVc2QyxHQUFlRSxJQUd6Q1QsRUFBaUJ4MkQsTUFHakJuRyxFQUFPbzlELEVBQW1CcDlELEVBQUk5SSxRQUFRNmxFLEVBQU1LLEdBQXhCcDlELEVBR3RCLE9BQU9BLEdBR1QrekQsR0FBUTcvRCxVQUFVeTBCLFFBQVUsU0FBa0I4bUIsRUFBU2l0QixFQUFpQjdsRCxFQUFRdUwsR0FDOUUsSUFBSXBpQixFQUFNM0ksS0FBS3dqRSxXQUFXeEQsWUFBWTVuQixFQUFTNTRCLEVBQVF1TCxHQVN2RCxPQU5LcGlCLElBQ0hBLEVBQU0wNkQsR0FBaUJyRCxZQUFZNW5CLEVBQVM1NEIsRUFBUXVMLElBSzNCLFdBQXBCczZDLEVBQStCMThELEVBQUl4SCxLQUFLLElBQU13SCxHQUd2RCt6RCxHQUFRNy9ELFVBQVVtcEUsV0FBYSxTQUM3QnpPLEVBQ0FqQixFQUNBeDVDLEVBQ0F0Z0IsRUFDQTQrQyxFQUNBaXFCLEVBQ0FwMEQsR0FFQSxJQUFJbEksRUFDRi9JLEtBQUtvbEUsYUFBYTlPLEVBQVFpQixFQUFTakIsR0FBUzk1RCxFQUFLNCtDLEVBQU1pcUIsRUFBaUJwMEQsRUFBTSxDQUFDelUsSUFDakYsT0FBSzYvRCxHQUFPdHpELElBR1BzekQsR0FETHR6RCxFQUFNL0ksS0FBS29sRSxhQUFhdG9ELEVBQVV5NkMsRUFBU3o2QyxHQUFXdGdCLEVBQUs0K0MsRUFBTWlxQixFQUFpQnAwRCxFQUFNLENBQUN6VSxLQU9oRixLQVRrQnVNLEdBYTdCMnpELEdBQVE3L0QsVUFBVW1qQixHQUFLLFNBQWF4akIsRUFBS29pRSxFQUFTckgsRUFBVW5jLEdBSXhELElBSEEsSUFBSTdwQixFQUVBL1IsRUFBUyxHQUFJdE8sRUFBTTdSLFVBQVUxQixPQUFTLEVBQ2xDdVQsS0FBUSxHQUFJc08sRUFBUXRPLEdBQVE3UixVQUFXNlIsRUFBTSxHQUN2RCxJQUFLMVUsRUFBTyxNQUFPLEdBRW5CLElBQUl5cEUsRUFBYTNKLEdBQVUvekQsV0FBTSxFQUFRaVgsR0FDckM4MkMsRUFBUzJQLEVBQVczUCxRQUFVc0ksRUFFOUJqMkQsRUFBTTNJLEtBQUtnbUUsV0FDYnpPLEVBQVVqQixFQUFRdDJELEtBQUttOUQsZUFBZ0IzZ0UsRUFDdkM0K0MsRUFBTSxTQUFVNnFCLEVBQVdsc0QsUUFFN0IsR0FBSS9aLEtBQUtrbEUsZ0JBQWdCdjhELEdBQU0sQ0FLN0IsSUFBSzNJLEtBQUsyakUsTUFBUyxNQUFNcmhFLE1BQU0sb0JBQy9CLE9BQVFpdkIsRUFBTXZ4QixLQUFLMmpFLE9BQU8vTSxHQUFHcnVELE1BQU1ncEIsRUFBSyxDQUFFLzBCLEdBQU1zRSxPQUFRMGUsSUFFeEQsT0FBT3hmLEtBQUtnbEUsYUFBYTFPLEVBQVE5NUQsRUFBS21NLEVBQUt5eUMsRUFBTTU3QixJQUlyRGs5QyxHQUFRNy9ELFVBQVVWLEVBQUksU0FBWUssR0FJOUIsSUFIQSxJQUFJKzBCLEVBRUEvUixFQUFTLEdBQUl0TyxFQUFNN1IsVUFBVTFCLE9BQVMsRUFDbEN1VCxLQUFRLEdBQUlzTyxFQUFRdE8sR0FBUTdSLFVBQVc2UixFQUFNLEdBQ3ZELE9BQVFxZ0IsRUFBTXZ4QixNQUFNZ2dCLEdBQUd6WCxNQUFNZ3BCLEVBQUssQ0FBRS8wQixFQUFLd0QsS0FBS3MyRCxPQUFRdDJELEtBQUt1L0QsZUFBZ0IsTUFBT3orRCxPQUFRMGUsS0FHNUZrOUMsR0FBUTcvRCxVQUFVMkUsR0FBSyxTQUFhaEYsRUFBSzg1RCxFQUFRaUIsRUFBVW5jLEVBQU01N0IsR0FDL0QsSUFBSTdXLEVBQ0YzSSxLQUFLZ21FLFdBQVd6TyxFQUFVakIsRUFBUXQyRCxLQUFLbTlELGVBQWdCM2dFLEVBQUs0K0MsRUFBTSxNQUFPNTdCLEdBQzNFLEdBQUl4ZixLQUFLa2xFLGdCQUFnQnY4RCxHQUFNLENBSTdCLElBQUszSSxLQUFLMmpFLE1BQVMsTUFBTXJoRSxNQUFNLG9CQUMvQixPQUFPdEMsS0FBSzJqRSxNQUFNMUcsTUFBTWhpRSxFQUFFdUIsRUFBSzg1RCxFQUFROTJDLEdBRXZDLE9BQU94ZixLQUFLZ2xFLGFBQWExTyxFQUFROTVELEVBQUttTSxFQUFLeXlDLEVBQU0sQ0FBQzU3QixLQUl0RGs5QyxHQUFRNy9ELFVBQVU1QixFQUFJLFNBQVl1QixFQUFLODVELEVBQVE5MkMsR0FFN0MsT0FBS2hqQixHQUVpQixpQkFBWDg1RCxJQUNUQSxFQUFTdDJELEtBQUtzMkQsUUFHVHQyRCxLQUFLd0IsR0FBR2hGLEVBQUs4NUQsRUFBUXQyRCxLQUFLdS9ELGVBQWdCLEtBQU0vL0MsSUFOcEMsSUFTckJrOUMsR0FBUTcvRCxVQUFVNGlFLElBQU0sU0FDdEJqakUsRUFDQW9pRSxFQUNBckgsRUFDQW5jLEVBQ0ErakIsR0FLRSxJQUhBLElBQUk1dEMsRUFFQS9SLEVBQVMsR0FBSXRPLEVBQU03UixVQUFVMUIsT0FBUyxFQUNsQ3VULEtBQVEsR0FBSXNPLEVBQVF0TyxHQUFRN1IsVUFBVzZSLEVBQU0sR0FDdkQsSUFBSzFVLEVBQU8sTUFBTyxRQUNKeVEsSUFBWGt5RCxJQUNGQSxFQUFTLEdBR1gsSUFBSStHLEVBQWEsQ0FBRUMsTUFBU2hILEVBQVF6aUUsRUFBS3lpRSxHQUNyQzhHLEVBQWEzSixHQUFVL3pELFdBQU0sRUFBUWlYLEdBR3pDLE9BRkF5bUQsRUFBV2xzRCxPQUFTcGUsT0FBTzZpRSxPQUFPMEgsRUFBWUQsRUFBV2xzRCxRQUN6RHlGLEVBQStCLE9BQXRCeW1ELEVBQVczUCxPQUFrQixDQUFDMlAsRUFBV2xzRCxRQUFVLENBQUNrc0QsRUFBVzNQLE9BQVEyUCxFQUFXbHNELFFBQ3BGL1osS0FBS29tRSxhQUFhNzBDLEVBQU12eEIsTUFBTWdnQixHQUFHelgsTUFBTWdwQixFQUFLLENBQUUvMEIsRUFBS29pRSxFQUFTckgsRUFBVW5jLEdBQU90NkMsT0FBUTBlLElBQVcyL0MsSUFHekd6QyxHQUFRNy9ELFVBQVV1cEUsWUFBYyxTQUFzQmh1QixFQUFTK21CLEdBRTdELElBQUsvbUIsR0FBOEIsaUJBQVpBLEVBQXdCLE9BQU8sS0FDdEQsSUFBSWl1QixFQUFVanVCLEVBQVFqeEMsTUFBTSxLQUc1QixPQUFLay9ELEVBRExsSCxFQUFTbi9ELEtBQUtzbUUsZUFBZW5ILEVBQVFrSCxFQUFRMW9FLFNBRXRDMG9FLEVBQVFsSCxHQUFReC9ELE9BRFF5NEMsR0FTakNza0IsR0FBUTcvRCxVQUFVeXBFLGVBQWlCLFNBQXlCbkgsRUFBUW9ILEdBRWxFLElBQTRCQyxFQUFTQyxFQWNyQyxPQUFJem1FLEtBQUtzMkQsVUFBVXQyRCxLQUFLczlELG1CQUNmdDlELEtBQUtzOUQsbUJBQW1CdDlELEtBQUtzMkQsUUFBUS90RCxNQUFNdkksS0FBTSxDQUFDbS9ELEVBQVFvSCxLQWZ2Q0MsRUFpQlBySCxFQWpCZ0JzSCxFQWlCUkYsRUFoQjNCQyxFQUFVaGdFLEtBQUtrZ0UsSUFBSUYsR0FFSSxJQUFuQkMsRUFDS0QsRUFDSEEsRUFBVSxFQUNSLEVBQ0EsRUFDRixFQUdDQSxFQUFVaGdFLEtBQUttZ0UsSUFBSUgsRUFBUyxHQUFLLElBVTVDOUosR0FBUTcvRCxVQUFVd2lFLEdBQUssU0FBYTdpRSxFQUFLMmlFLEdBSXJDLElBSEEsSUFBSTV0QyxFQUVBL1IsRUFBUyxHQUFJdE8sRUFBTTdSLFVBQVUxQixPQUFTLEVBQ2xDdVQsS0FBUSxHQUFJc08sRUFBUXRPLEdBQVE3UixVQUFXNlIsRUFBTSxHQUN2RCxPQUFRcWdCLEVBQU12eEIsTUFBTXkvRCxJQUFJbDNELE1BQU1ncEIsRUFBSyxDQUFFLzBCLEVBQUt3RCxLQUFLczJELE9BQVF0MkQsS0FBS3UvRCxlQUFnQixLQUFNSixHQUFTcitELE9BQVEwZSxLQUdyR2s5QyxHQUFRNy9ELFVBQVU4aUUsSUFBTSxTQUFjbmpFLEVBQUs4NUQsRUFBUWlCLEdBRS9DLElBREEsSUFBSXRtRCxFQUFPLEdBQUlDLEVBQU03UixVQUFVMUIsT0FBUyxFQUNoQ3VULEtBQVEsR0FBSUQsRUFBTUMsR0FBUTdSLFVBQVc2UixFQUFNLEdBRXJELElBQUkwdEQsRUFBVXRDLEdBQVUvekQsV0FBTSxFQUFRMEksR0FBTXFsRCxRQUFVQSxFQUN0RCxPQUFPdDJELEtBQUt3a0UsT0FBT2pOLEVBQVNxSCxHQUFVcGlFLElBR3hDa2dFLEdBQVE3L0QsVUFBVStwRSxHQUFLLFNBQWFwcUUsRUFBSzg1RCxHQUN2QyxPQUFPdDJELEtBQUsyL0QsSUFBSW5qRSxFQUFLd0QsS0FBS3MyRCxPQUFRdDJELEtBQUt1L0QsZUFBZ0JqSixJQUd6RG9HLEdBQVE3L0QsVUFBVWtpRSxpQkFBbUIsU0FBMkJ6SSxHQUM5RCxPQUFPaUcsR0FBV3Y4RCxLQUFLaXZDLElBQUlzb0IsU0FBU2pCLElBQVcsS0FHakRvRyxHQUFRNy9ELFVBQVVncUUsaUJBQW1CLFNBQTJCdlEsRUFBUWxlLElBQ3RDLFNBQTVCcDRDLEtBQUtza0Usb0JBQTZELFVBQTVCdGtFLEtBQUtza0UscUJBQzdDdGtFLEtBQUt5a0Usb0JBQW9Cbk8sRUFBUXQyRCxLQUFLc2tFLG1CQUFvQmxzQixHQUMxQixVQUE1QnA0QyxLQUFLc2tFLHNCQUVYdGtFLEtBQUtpdkMsSUFBSTdlLEtBQUtwd0IsS0FBS2l2QyxJQUFJc29CLFNBQVVqQixFQUFRbGUsSUFHM0Nza0IsR0FBUTcvRCxVQUFVZ2dFLG1CQUFxQixTQUE2QnZHLEVBQVFsZSxJQUMxQyxTQUE1QnA0QyxLQUFLc2tFLG9CQUE2RCxVQUE1QnRrRSxLQUFLc2tFLHFCQUM3Q3RrRSxLQUFLeWtFLG9CQUFvQm5PLEVBQVF0MkQsS0FBS3NrRSxtQkFBb0Jsc0IsR0FDMUIsVUFBNUJwNEMsS0FBS3NrRSxzQkFFWHRrRSxLQUFLaXZDLElBQUk3ZSxLQUFLcHdCLEtBQUtpdkMsSUFBSXNvQixTQUFVakIsRUFBUXAzRCxHQUFNYyxLQUFLaXZDLElBQUlzb0IsU0FBU2pCLElBQVcsR0FBSWxlLEtBR2xGc2tCLEdBQVE3L0QsVUFBVWlxRSxrQkFBb0IsU0FBNEJ4USxHQUNoRSxPQUFPaUcsR0FBV3Y4RCxLQUFLaXZDLElBQUlxMEIsZ0JBQWdCaE4sSUFBVyxLQUd4RG9HLEdBQVE3L0QsVUFBVWtxRSxrQkFBb0IsU0FBNEJ6USxFQUFRK0gsR0FDeEVyK0QsS0FBS2l2QyxJQUFJN2UsS0FBS3B3QixLQUFLaXZDLElBQUlxMEIsZ0JBQWlCaE4sRUFBUStILElBR2xEM0IsR0FBUTcvRCxVQUFVbXFFLG9CQUFzQixTQUE4QjFRLEVBQVErSCxHQUM1RXIrRCxLQUFLaXZDLElBQUk3ZSxLQUFLcHdCLEtBQUtpdkMsSUFBSXEwQixnQkFBaUJoTixFQUFRcDNELEdBQU1jLEtBQUtpdkMsSUFBSXEwQixnQkFBZ0JoTixJQUFXLEdBQUkrSCxLQUdoRzNCLEdBQVE3L0QsVUFBVW9xRSxrQkFBb0IsU0FDcEMvcUUsRUFDQW82RCxFQUNBeDVDLEVBQ0F3bUQsRUFDQTltRSxHQUVBLElBQUlvaUUsRUFBVXRJLEVBQ1Y0USxFQUFVNUQsRUFBZ0IxRSxHQVc5QixJQVJJdkMsR0FBTzZLLElBQVk3SyxHQUFPNkssRUFBUTFxRSxPQUtwQzBxRSxFQUFVNUQsRUFEVjFFLEVBQVU5aEQsSUFJUnUvQyxHQUFPNkssSUFBWTdLLEdBQU82SyxFQUFRMXFFLElBQ3BDLE9BQU8sS0FFUCxJQUFJNmhFLEVBQVM2SSxFQUFRMXFFLEdBQ2pCK0UsRUFBS3E5RCxFQUFVLEtBQU9waUUsRUFDdEIwZ0UsRUFBWWw5RCxLQUFLaWtFLG9CQUFvQjFpRSxHQUl6QyxPQUhLMjdELElBQ0hBLEVBQVlsOUQsS0FBS2lrRSxvQkFBb0IxaUUsR0FBTSxJQUFJNGxFLEtBQUtDLGVBQWV4SSxFQUFTUCxJQUV2RW5CLEVBQVVtQixPQUFPbmlFLElBSTVCd2dFLEdBQVE3L0QsVUFBVTZqQixHQUFLLFNBQWF4a0IsRUFBT282RCxFQUFROTVELEdBT2pELElBQUtBLEVBQ0gsT0FBTyxJQUFJMnFFLEtBQUtDLGVBQWU5USxHQUFRK0gsT0FBT25pRSxHQUdoRCxJQUFJeU0sRUFDRjNJLEtBQUtpbkUsa0JBQWtCL3FFLEVBQU9vNkQsRUFBUXQyRCxLQUFLbTlELGVBQWdCbjlELEtBQUs2a0Usc0JBQXVCcm9FLEdBQ3pGLEdBQUl3RCxLQUFLa2xFLGdCQUFnQnY4RCxHQUFNLENBSzdCLElBQUszSSxLQUFLMmpFLE1BQVMsTUFBTXJoRSxNQUFNLG9CQUMvQixPQUFPdEMsS0FBSzJqRSxNQUFNMUcsTUFBTTFoRSxFQUFFVyxFQUFPTSxFQUFLODVELEdBRXRDLE9BQU8zdEQsR0FBTyxJQUlsQit6RCxHQUFRNy9ELFVBQVV0QixFQUFJLFNBQVlXLEdBRTlCLElBREEsSUFBSStVLEVBQU8sR0FBSUMsRUFBTTdSLFVBQVUxQixPQUFTLEVBQ2hDdVQsS0FBUSxHQUFJRCxFQUFNQyxHQUFRN1IsVUFBVzZSLEVBQU0sR0FFckQsSUFBSW9sRCxFQUFTdDJELEtBQUtzMkQsT0FDZDk1RCxFQUFNLEtBc0JWLE9BcEJvQixJQUFoQnlVLEVBQUt0VCxPQUNnQixpQkFBWnNULEVBQUssR0FDZHpVLEVBQU15VSxFQUFLLEdBQ0YzVCxHQUFTMlQsRUFBSyxNQUNuQkEsRUFBSyxHQUFHcWxELFNBQ1ZBLEVBQVNybEQsRUFBSyxHQUFHcWxELFFBRWZybEQsRUFBSyxHQUFHelUsTUFDVkEsRUFBTXlVLEVBQUssR0FBR3pVLE1BR08sSUFBaEJ5VSxFQUFLdFQsU0FDUyxpQkFBWnNULEVBQUssS0FDZHpVLEVBQU15VSxFQUFLLElBRVUsaUJBQVpBLEVBQUssS0FDZHFsRCxFQUFTcmxELEVBQUssS0FJWGpSLEtBQUswZ0IsR0FBR3hrQixFQUFPbzZELEVBQVE5NUQsSUFHaENrZ0UsR0FBUTcvRCxVQUFVd3FFLGdCQUFrQixTQUEwQi9RLEdBQzVELE9BQU9pRyxHQUFXdjhELEtBQUtpdkMsSUFBSXMwQixjQUFjak4sSUFBVyxLQUd0RG9HLEdBQVE3L0QsVUFBVXlxRSxnQkFBa0IsU0FBMEJoUixFQUFRK0gsR0FDcEVyK0QsS0FBS2l2QyxJQUFJN2UsS0FBS3B3QixLQUFLaXZDLElBQUlzMEIsY0FBZWpOLEVBQVErSCxJQUdoRDNCLEdBQVE3L0QsVUFBVTBxRSxrQkFBb0IsU0FBNEJqUixFQUFRK0gsR0FDeEVyK0QsS0FBS2l2QyxJQUFJN2UsS0FBS3B3QixLQUFLaXZDLElBQUlzMEIsY0FBZWpOLEVBQVFwM0QsR0FBTWMsS0FBS2l2QyxJQUFJczBCLGNBQWNqTixJQUFXLEdBQUkrSCxLQUc1RjNCLEdBQVE3L0QsVUFBVTJxRSxvQkFBc0IsU0FDdEN0ckUsRUFDQW82RCxFQUNBeDVDLEVBQ0F5bUQsRUFDQS9tRSxFQUNBc0csR0FFQSxJQUFJODdELEVBQVV0SSxFQUNWNFEsRUFBVTNELEVBQWMzRSxHQVc1QixJQVJJdkMsR0FBTzZLLElBQVk3SyxHQUFPNkssRUFBUTFxRSxPQUtwQzBxRSxFQUFVM0QsRUFEVjNFLEVBQVU5aEQsSUFJUnUvQyxHQUFPNkssSUFBWTdLLEdBQU82SyxFQUFRMXFFLElBQ3BDLE9BQU8sS0FFUCxJQUVJMGdFLEVBRkFtQixFQUFTNkksRUFBUTFxRSxHQUdyQixHQUFJc0csRUFFRm82RCxFQUFZLElBQUlpSyxLQUFLTSxhQUFhN0ksRUFBU2pqRSxPQUFPNmlFLE9BQU8sR0FBSUgsRUFBUXY3RCxRQUNoRSxDQUNMLElBQUl2QixFQUFLcTlELEVBQVUsS0FBT3BpRSxHQUMxQjBnRSxFQUFZbDlELEtBQUtra0Usa0JBQWtCM2lFLE1BRWpDMjdELEVBQVlsOUQsS0FBS2trRSxrQkFBa0IzaUUsR0FBTSxJQUFJNGxFLEtBQUtNLGFBQWE3SSxFQUFTUCxJQUc1RSxPQUFPbkIsR0FJWFIsR0FBUTcvRCxVQUFVZ2pCLEdBQUssU0FBYTNqQixFQUFPbzZELEVBQVE5NUQsRUFBS3NHLEdBRXRELElBQUs0NUQsR0FBUWlHLGVBQWUrRSxhQUkxQixNQUFPLEdBR1QsSUFBS2xyRSxFQUVILE9BRFVzRyxFQUEwQyxJQUFJcWtFLEtBQUtNLGFBQWFuUixFQUFReHpELEdBQTlELElBQUlxa0UsS0FBS00sYUFBYW5SLElBQ2hDK0gsT0FBT25pRSxHQUduQixJQUFJZ2hFLEVBQVlsOUQsS0FBS3duRSxvQkFBb0J0ckUsRUFBT282RCxFQUFRdDJELEtBQUttOUQsZUFBZ0JuOUQsS0FBSzhrRSxvQkFBcUJ0b0UsRUFBS3NHLEdBQ3hHNkYsRUFBTXUwRCxHQUFhQSxFQUFVbUIsT0FBT25pRSxHQUN4QyxHQUFJOEQsS0FBS2tsRSxnQkFBZ0J2OEQsR0FBTSxDQUs3QixJQUFLM0ksS0FBSzJqRSxNQUFTLE1BQU1yaEUsTUFBTSxvQkFDL0IsT0FBT3RDLEtBQUsyakUsTUFBTTFHLE1BQU12Z0UsRUFBRVIsRUFBT1AsT0FBTzZpRSxPQUFPLEdBQUksQ0FBRWhpRSxJQUFLQSxFQUFLODVELE9BQVFBLEdBQVV4ekQsSUFFakYsT0FBTzZGLEdBQU8sSUFJbEIrekQsR0FBUTcvRCxVQUFVSCxFQUFJLFNBQVlSLEdBRTlCLElBREEsSUFBSStVLEVBQU8sR0FBSUMsRUFBTTdSLFVBQVUxQixPQUFTLEVBQ2hDdVQsS0FBUSxHQUFJRCxFQUFNQyxHQUFRN1IsVUFBVzZSLEVBQU0sR0FFckQsSUFBSW9sRCxFQUFTdDJELEtBQUtzMkQsT0FDZDk1RCxFQUFNLEtBQ05zRyxFQUFVLEtBZ0NkLE9BOUJvQixJQUFoQm1PLEVBQUt0VCxPQUNnQixpQkFBWnNULEVBQUssR0FDZHpVLEVBQU15VSxFQUFLLEdBQ0YzVCxHQUFTMlQsRUFBSyxNQUNuQkEsRUFBSyxHQUFHcWxELFNBQ1ZBLEVBQVNybEQsRUFBSyxHQUFHcWxELFFBRWZybEQsRUFBSyxHQUFHelUsTUFDVkEsRUFBTXlVLEVBQUssR0FBR3pVLEtBSWhCc0csRUFBVW5ILE9BQU9pTyxLQUFLcUgsRUFBSyxJQUFJNDdCLE9BQU8sU0FBVXl4QixFQUFLOWhFLEdBQ2pELElBQUlpQixFQUVOLE9BQUkwK0QsR0FBaUJvQyxTQUFTL2hFLEdBQ3JCYixPQUFPNmlFLE9BQU8sR0FBSUYsSUFBTzdnRSxFQUFNLElBQVFqQixHQUFPeVUsRUFBSyxHQUFHelUsR0FBTWlCLElBRTlENmdFLEdBQ04sT0FFb0IsSUFBaEJydEQsRUFBS3RULFNBQ1MsaUJBQVpzVCxFQUFLLEtBQ2R6VSxFQUFNeVUsRUFBSyxJQUVVLGlCQUFaQSxFQUFLLEtBQ2RxbEQsRUFBU3JsRCxFQUFLLEtBSVhqUixLQUFLNmYsR0FBRzNqQixFQUFPbzZELEVBQVE5NUQsRUFBS3NHLElBR3JDNDVELEdBQVE3L0QsVUFBVTRoRSxLQUFPLFNBQWV2aUUsRUFBT282RCxFQUFROTVELEVBQUtzRyxHQUUxRCxJQUFLNDVELEdBQVFpRyxlQUFlK0UsYUFJMUIsTUFBTyxHQUdULElBQUtsckUsRUFFSCxPQURVc0csRUFBMEMsSUFBSXFrRSxLQUFLTSxhQUFhblIsRUFBUXh6RCxHQUE5RCxJQUFJcWtFLEtBQUtNLGFBQWFuUixJQUNoQ3FSLGNBQWN6ckUsR0FHMUIsSUFBSWdoRSxFQUFZbDlELEtBQUt3bkUsb0JBQW9CdHJFLEVBQU9vNkQsRUFBUXQyRCxLQUFLbTlELGVBQWdCbjlELEtBQUs4a0Usb0JBQXFCdG9FLEVBQUtzRyxHQUN4RzZGLEVBQU11MEQsR0FBYUEsRUFBVXlLLGNBQWN6ckUsR0FDL0MsR0FBSThELEtBQUtrbEUsZ0JBQWdCdjhELEdBQU0sQ0FLN0IsSUFBSzNJLEtBQUsyakUsTUFBUyxNQUFNcmhFLE1BQU0sb0JBQy9CLE9BQU90QyxLQUFLMmpFLE1BQU0xRyxNQUFNd0IsS0FBS3ZpRSxFQUFPbzZELEVBQVE5NUQsRUFBS3NHLEdBRWpELE9BQU82RixHQUFPLElBSWxCaE4sT0FBTzJVLGlCQUFrQm9zRCxHQUFRNy9ELFVBQVd1VCxJQUk1Q3pVLE9BQU9DLGVBQWU4Z0UsR0FBUyxpQkFBa0IsQ0FDL0M1Z0UsSUFBSyxXQUNILElBQUs2bUUsR0FBZ0IsQ0FDbkIsSUFBSWlGLEVBQThCLG9CQUFUVCxLQUN6QnhFLEdBQWlCLENBQ2ZrRixlQUFnQkQsUUFBOEMsSUFBeEJULEtBQUtDLGVBQzNDTSxhQUFjRSxRQUE0QyxJQUF0QlQsS0FBS00sY0FJN0MsT0FBTzlFLE1BSVhqRyxHQUFROXBDLFFBQVVBLEdBQ2xCOHBDLEdBQVF2cEMsUUFBVSxTQUVIdXBDLFVDMTFEZi91QyxJQUFJYSxJQUFJa3VDLElBRU8sSUFBQXBHLEdBQUEsSUFBSW9HLEdBQVEsQ0FDekJwRyxPQUFRbEIsYUFBYUMsUUFBUSxXQUFhLEtBQzFDOEgsZUFBZ0IsT0NSZDJLLFVBQU0sV0FDVixJQUNBcmxCLEVBREF6aUQsS0FDQW9kLGVBQ0FtRSxFQUZBdmhCLEtBRUFzdkIsTUFBQS9OLElBQUFraEMsRUFDQSxPQUFBbGhDLEVBQ0EsTUFDQSxDQUFLeVMsWUFBQSxlQUNMLENBQ0F6UyxFQUFBLGNBUEF2aEIsS0FRQXNnQixHQUFBLEtBQ0FpQixFQUFBLE9BQWlCeVMsWUFBQSxXQUF5QixDQUFBelMsRUFBQSxvQkFFMUMsS0FJQXVtRCxHQUFNbmxCLGVBQUEsRUNoQk4sSUFBSW9sQixHQUFNLFdBQ1YsSUFDQXRsQixFQURBemlELEtBQ0FvZCxlQUNBbUUsRUFGQXZoQixLQUVBc3ZCLE1BQUEvTixJQUFBa2hDLEVBQ0EsT0FBQWxoQyxFQUFBLFVBQXVCeVMsWUFBQSxVQUF3QixDQUgvQ2gwQixLQUlBa2dCLEdBQUEsR0FKQWxnQixLQUtBc2dCLEdBQUEsS0FDQWlCLEVBQ0EsTUFDQSxDQUFPeVMsWUFBQSxlQUNQLENBQ0F6UyxFQUFBLGdCQUE0QnlTLFlBQUEsaUJBVjVCaDBCLEtBV0FzZ0IsR0FBQSxLQVhBdGdCLEtBWUFnb0UsT0FDQXptRCxFQUNBLFNBQ0EsQ0FBZXlTLFlBQUEsaUJBQUF2YSxHQUFBLENBQXFDa3VDLE1BZnBEM25ELEtBZW9EaW9FLFNBQ3BELENBQUExbUQsRUFBQSxLQUF3QnlTLFlBQUEsMEJBaEJ4QmgwQixLQWtCQXVnQixNQUVBLE1BSUkybkQsR0FBZSxDQUNuQixXQUNBLElBQ0F6bEIsRUFEQXppRCxLQUNBb2QsZUFDQW1FLEVBRkF2aEIsS0FFQXN2QixNQUFBL04sSUFBQWtoQyxFQUNBLE9BQUFsaEMsRUFBQSxLQUFvQnlTLFlBQUEsZUFBQXpZLE1BQUEsQ0FBc0MyL0IsS0FBQSxNQUFjLENBQ3hFMzVCLEVBQUEsT0FDQXlTLFlBQUEsWUFDQXpZLE1BQUEsQ0FBZ0J6SixJQUFNalgsRUFBUSxJQUEyQnN0RSxJQUFBLFVBTnpEbm9FLEtBUUFzZ0IsR0FBQSxLQUNBaUIsRUFBQSxRQUFrQnlTLFlBQUEsZUFBNkIsQ0FUL0NoMEIsS0FTK0NzZ0IsR0FBQSxtQkFJL0N5bkQsR0FBTXBsQixlQUFBLEVDeENOLElBQUl5bEIsR0FBTSxXQUNWLElBQUFuNUIsRUFBQWp2QyxLQUNBeWlELEVBQUF4VCxFQUFBN3hCLGVBQ0FtRSxFQUFBMHRCLEVBQUEzZixNQUFBL04sSUFBQWtoQyxFQUNBLE9BQUF4VCxFQUFBbzVCLGFBQ0E5bUQsRUFDQSxTQUNBLENBQ0F6TSxXQUFBLENBQ0EsQ0FDQXRaLEtBQUEsUUFDQWc4QixRQUFBLFVBQ0F0N0IsTUFBQSt5QyxFQUFBcW5CLE9BQ0F4ckMsV0FBQSxXQUdBclIsR0FBQSxDQUNBZ2dCLE9BQUEsQ0FDQSxTQUFBbmIsR0FDQSxJQUFBZ3FELEVBQUF4aEUsTUFBQWpLLFVBQUF1SSxPQUNBaEssS0FBQWtqQixFQUFBOVAsT0FBQTFMLFFBQUEsU0FBQXBILEdBQ0EsT0FBQUEsRUFBQXVyQyxXQUVBaG5DLElBQUEsU0FBQXZFLEdBRUEsTUFEQSxXQUFBQSxJQUFBcStCLE9BQUFyK0IsRUFBQVEsUUFHQSt5QyxFQUFBcW5CLE9BQUFoNEMsRUFBQTlQLE9BQUF3bUIsU0FDQXN6QyxFQUNBQSxFQUFBLElBRUFyNUIsRUFBQXM1QixvQkFJQXQ1QixFQUFBbHZCLEdBQUFrdkIsRUFBQXU1QixVQUFBLFNBQUF0b0UsR0FDQSxPQUFBcWhCLEVBQ0EsU0FDQSxDQUFhL2tCLElBQUEwRCxFQUFBbTRDLEtBQUFsNkIsU0FBQSxDQUE0QmppQixNQUFBZ0UsRUFBQW00QyxPQUN6QyxDQUFBcEosRUFBQTN1QixHQUFBLFNBQUEydUIsRUFBQW52QixHQUFBNWYsRUFBQTYyRCxRQUFBLFlBR0EsR0FFQTluQixFQUFBMXVCLE1BR0E2bkQsR0FBTXpsQixlQUFBLEVDckNOLElDSEk4bEIsR0FBWTdsQixFREdoQixDQUNBcG5ELEtBQUEsa0JBQ0FxRixLQUZBLFdBR0EsT0FDQTJuRSxVQUFBLEdBQ0FsUyxPQUFBLE9BR0FoaUQsU0FBQSxDQUNBK3pELGFBREEsV0FFQSxPQUFBcm9FLEtBQUF3b0UsVUFBQTdxRSxPQUFBLElBR0F5VyxRQUFBLENBQ0FtMEQsaUJBREEsV0FFQTVrQixFQUFBbmtELEVBQUE2ekMsU0FBQUYsUUFBQVksT0FBQSxtQkFBQS96QyxLQUFBczJELE9BQ0F0MkQsS0FBQWk5RCxNQUFBM0csT0FBQXQyRCxLQUFBczJELE9BQ0FsQixhQUFBWSxRQUFBLFNBQUFoMkQsS0FBQXMyRCxRQUNBdDJELEtBQUErd0MsT0FBQTlDLFNBQUEsZ0JBQUFxb0IsT0FBQXQyRCxLQUFBczJELFdBR0Fya0MsUUFyQkEsV0FxQkEsSUFBQXl4QixFQUFBMWpELEtBQ0EyakQsRUFBQW5rRCxFQUNBMUQsSUFBQSxpQkFDQThLLEtBQUEsU0FBQW13QyxHQUNBLFNBQUFBLEVBQUFqRCxRQUFBaUQsRUFBQWwyQyxLQUFBLENBQ0E2aUQsRUFBQThrQixVQUFBenhCLEVBQUFsMkMsS0FDQSxJQUFBNm5FLEVBQUFobEIsRUFBQThrQixVQUFBRyxLQUNBLFNBQUF6b0UsR0FBQSxPQUFBQSxFQUFBbTRDLE9BQUFxTCxFQUFBdVosTUFBQTNHLFNBRUFvUyxJQUNBaGxCLEVBQUE0UyxPQUFBb1MsRUFBQXJ3QixTQVRBLE1BYUEsU0FBQTlnQyxHQUNBLFVBQUFqVixNQUFBaVYsTUFHQXNoRCxjQXZDQSxXQXdDQXpELGFBQUFRLFdBQUEsWUN6Q0V3UyxHRnFDaUIsSUVuQ25CLEVBQ0EsS0FDQSxLQUNBLE1BdUJBSyxHQUFTM2xFLFFBQUFnaEQsT0FBQSxxQ0FDTSxJQ3RDMEs4a0IsR0NpQnpMLENBQ0FwdEUsS0FBQSxZQUNBa3lCLFdBQUEsQ0FDQW03QyxZRmtCZUosWUVoQmZuMEQsU0FBQSxDQUNBMHpELE9BREEsV0FFQSxPQUFBaG9FLEtBQUErd0MsT0FBQTFFLFFBQUEsMEJBR0FqNEIsUUFBQSxDQUNBNnpELE9BREEsV0FDQSxJQUFBdmtCLEVBQUExakQsS0FDQUEsS0FBQSt3QyxPQUNBOUMsU0FBQSxlQUNBcm5DLEtBQUEsV0FDQTg4QyxFQUFBRyxRQUFBcGlELEtBQUEsWUFIQSxNQUtBLFNBQUE4VixHQUNBLFVBQUFqVixNQUFBaVYsUUMzQkl1eEQsVUFBWWxtQixFQUNkZ21CLEdBQ0FiLEdBQ0FHLElBQ0YsRUFDQSxLQUNBLEtBQ0EsT0F1QkFZLEdBQVNobUUsUUFBQWdoRCxPQUFBLCtCQUNNLElDdkMyS2lsQixHQ1cxTCxDQUNBdnRFLEtBQUEsYUFDQWt5QixXQUFBLENBQ0FzN0MsVUZ5QmVGLGFHL0JYRyxVQUFZcm1CLEVBQ2RtbUIsR0FDQWpCLEdWS2lCLElVSG5CLEVBQ0EsS0FDQSxLQUNBLE9BdUJBbUIsR0FBU25tRSxRQUFBZ2hELE9BQUEsNkJBQ00sSUFBQW9sQixHQUFBRCxXQzFCZnQ3QyxJQUFJNUgsVUFBVSxjQUFlbWpELElBRzdCcHdCLElBQU16RixTQUFTNkcsUUFBVSwwQkFDekIsSUFBTW9DLEdBQVE4WSxhQUFhQyxRQUFRLGNBQy9CL1ksS0FDRnhELElBQU16RixTQUFTRixRQUFRWSxPQUF2QixjQUFpRCxVQUFZdUksSUFJL0RzSixHQUFPeU8sV0FBVyxTQUFDenJELEVBQUl3SyxFQUFNdUosR0FDdkIvVCxFQUFHODdDLFFBQVE3ZCxLQUFLLFNBQUE2ZSxHQUFNLE9BQUlBLEVBQU9qQyxLQUFLcVksZUFDbkM5dEIsR0FBTTNCLFFBQVEsd0JBTWpCMXZCLElBTEFBLEVBQUssQ0FDSG9PLEtBQU0sU0FDTnFnQixNQUFPLENBQUU4Z0IsU0FBVXRqRCxFQUFHazlDLFlBTTFCbnBDLE1BSUosSUFBSWdSLElBQUksQ0FDTmk0QixVQUNBNVgsU0FDQXNwQixRQUNBNzZDLE9BQVEsU0FBQXlyQixHQUFDLE9BQUlBLEVBQUU2YixNQUNkdmhDLE9BQU8iLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi93aG9lcl90ZXN0L1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTAxKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBpc0J1ZmZlciA9IHJlcXVpcmUoJ2lzLWJ1ZmZlcicpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIGVxdWFsIHRvIG1lcmdlIHdpdGggdGhlIGRpZmZlcmVuY2UgYmVpbmcgdGhhdCBubyByZWZlcmVuY2VcbiAqIHRvIG9yaWdpbmFsIG9iamVjdHMgaXMga2VwdC5cbiAqXG4gKiBAc2VlIG1lcmdlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBkZWVwTWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZGVlcE1lcmdlOiBkZWVwTWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCJ7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IG1vZHVsZXNbX2ldOyAvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG4gICAgICAvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuICAgICAgLy8gd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuICAgICAgLy8gSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXG4gICAgICBpZiAoaXRlbVswXSA9PSBudWxsIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGlmIChtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIihcIi5jb25jYXQoaXRlbVsyXSwgXCIpIGFuZCAoXCIpLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIilcIik7XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcblxuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCkuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgcmV0dXJuIFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbn0iLCIvKipcbiAqIFRyYW5zbGF0ZXMgdGhlIGxpc3QgZm9ybWF0IHByb2R1Y2VkIGJ5IGNzcy1sb2FkZXIgaW50byBzb21ldGhpbmdcbiAqIGVhc2llciB0byBtYW5pcHVsYXRlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaXN0VG9TdHlsZXMgKHBhcmVudElkLCBsaXN0KSB7XG4gIHZhciBzdHlsZXMgPSBbXVxuICB2YXIgbmV3U3R5bGVzID0ge31cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldXG4gICAgdmFyIGlkID0gaXRlbVswXVxuICAgIHZhciBjc3MgPSBpdGVtWzFdXG4gICAgdmFyIG1lZGlhID0gaXRlbVsyXVxuICAgIHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdXG4gICAgdmFyIHBhcnQgPSB7XG4gICAgICBpZDogcGFyZW50SWQgKyAnOicgKyBpLFxuICAgICAgY3NzOiBjc3MsXG4gICAgICBtZWRpYTogbWVkaWEsXG4gICAgICBzb3VyY2VNYXA6IHNvdXJjZU1hcFxuICAgIH1cbiAgICBpZiAoIW5ld1N0eWxlc1tpZF0pIHtcbiAgICAgIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7IGlkOiBpZCwgcGFydHM6IFtwYXJ0XSB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0eWxlc1xufVxuIiwiLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuICBNb2RpZmllZCBieSBFdmFuIFlvdSBAeXl4OTkwODAzXG4qL1xuXG5pbXBvcnQgbGlzdFRvU3R5bGVzIGZyb20gJy4vbGlzdFRvU3R5bGVzJ1xuXG52YXIgaGFzRG9jdW1lbnQgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG5cbmlmICh0eXBlb2YgREVCVUcgIT09ICd1bmRlZmluZWQnICYmIERFQlVHKSB7XG4gIGlmICghaGFzRG9jdW1lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3Z1ZS1zdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudC4gJyArXG4gICAgXCJVc2UgeyB0YXJnZXQ6ICdub2RlJyB9IGluIHlvdXIgV2VicGFjayBjb25maWcgdG8gaW5kaWNhdGUgYSBzZXJ2ZXItcmVuZGVyaW5nIGVudmlyb25tZW50LlwiXG4gICkgfVxufVxuXG4vKlxudHlwZSBTdHlsZU9iamVjdCA9IHtcbiAgaWQ6IG51bWJlcjtcbiAgcGFydHM6IEFycmF5PFN0eWxlT2JqZWN0UGFydD5cbn1cblxudHlwZSBTdHlsZU9iamVjdFBhcnQgPSB7XG4gIGNzczogc3RyaW5nO1xuICBtZWRpYTogc3RyaW5nO1xuICBzb3VyY2VNYXA6ID9zdHJpbmdcbn1cbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHsvKlxuICBbaWQ6IG51bWJlcl06IHtcbiAgICBpZDogbnVtYmVyLFxuICAgIHJlZnM6IG51bWJlcixcbiAgICBwYXJ0czogQXJyYXk8KG9iaj86IFN0eWxlT2JqZWN0UGFydCkgPT4gdm9pZD5cbiAgfVxuKi99XG5cbnZhciBoZWFkID0gaGFzRG9jdW1lbnQgJiYgKGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXSlcbnZhciBzaW5nbGV0b25FbGVtZW50ID0gbnVsbFxudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwXG52YXIgaXNQcm9kdWN0aW9uID0gZmFsc2VcbnZhciBub29wID0gZnVuY3Rpb24gKCkge31cbnZhciBvcHRpb25zID0gbnVsbFxudmFyIHNzcklkS2V5ID0gJ2RhdGEtdnVlLXNzci1pZCdcblxuLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4vLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG52YXIgaXNPbGRJRSA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9tc2llIFs2LTldXFxiLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSlcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkU3R5bGVzQ2xpZW50IChwYXJlbnRJZCwgbGlzdCwgX2lzUHJvZHVjdGlvbiwgX29wdGlvbnMpIHtcbiAgaXNQcm9kdWN0aW9uID0gX2lzUHJvZHVjdGlvblxuXG4gIG9wdGlvbnMgPSBfb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMocGFyZW50SWQsIGxpc3QpXG4gIGFkZFN0eWxlc1RvRG9tKHN0eWxlcylcblxuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG4gICAgdmFyIG1heVJlbW92ZSA9IFtdXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gc3R5bGVzW2ldXG4gICAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXVxuICAgICAgZG9tU3R5bGUucmVmcy0tXG4gICAgICBtYXlSZW1vdmUucHVzaChkb21TdHlsZSlcbiAgICB9XG4gICAgaWYgKG5ld0xpc3QpIHtcbiAgICAgIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhwYXJlbnRJZCwgbmV3TGlzdClcbiAgICAgIGFkZFN0eWxlc1RvRG9tKHN0eWxlcylcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzID0gW11cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXVxuICAgICAgaWYgKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGRvbVN0eWxlLnBhcnRzW2pdKClcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMgLyogQXJyYXk8U3R5bGVPYmplY3Q+ICovKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV1cbiAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXVxuICAgIGlmIChkb21TdHlsZSkge1xuICAgICAgZG9tU3R5bGUucmVmcysrXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pXG4gICAgICB9XG4gICAgICBmb3IgKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdKSlcbiAgICAgIH1cbiAgICAgIGlmIChkb21TdHlsZS5wYXJ0cy5sZW5ndGggPiBpdGVtLnBhcnRzLmxlbmd0aCkge1xuICAgICAgICBkb21TdHlsZS5wYXJ0cy5sZW5ndGggPSBpdGVtLnBhcnRzLmxlbmd0aFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGFydHMgPSBbXVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSkpXG4gICAgICB9XG4gICAgICBzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHsgaWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0cyB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAoKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpXG4gIHN0eWxlRWxlbWVudC50eXBlID0gJ3RleHQvY3NzJ1xuICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudClcbiAgcmV0dXJuIHN0eWxlRWxlbWVudFxufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqIC8qIFN0eWxlT2JqZWN0UGFydCAqLykge1xuICB2YXIgdXBkYXRlLCByZW1vdmVcbiAgdmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlWycgKyBzc3JJZEtleSArICd+PVwiJyArIG9iai5pZCArICdcIl0nKVxuXG4gIGlmIChzdHlsZUVsZW1lbnQpIHtcbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAvLyBoYXMgU1NSIHN0eWxlcyBhbmQgaW4gcHJvZHVjdGlvbiBtb2RlLlxuICAgICAgLy8gc2ltcGx5IGRvIG5vdGhpbmcuXG4gICAgICByZXR1cm4gbm9vcFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBoYXMgU1NSIHN0eWxlcyBidXQgaW4gZGV2IG1vZGUuXG4gICAgICAvLyBmb3Igc29tZSByZWFzb24gQ2hyb21lIGNhbid0IGhhbmRsZSBzb3VyY2UgbWFwIGluIHNlcnZlci1yZW5kZXJlZFxuICAgICAgLy8gc3R5bGUgdGFncyAtIHNvdXJjZSBtYXBzIGluIDxzdHlsZT4gb25seSB3b3JrcyBpZiB0aGUgc3R5bGUgdGFnIGlzXG4gICAgICAvLyBjcmVhdGVkIGFuZCBpbnNlcnRlZCBkeW5hbWljYWxseS4gU28gd2UgcmVtb3ZlIHRoZSBzZXJ2ZXIgcmVuZGVyZWRcbiAgICAgIC8vIHN0eWxlcyBhbmQgaW5qZWN0IG5ldyBvbmVzLlxuICAgICAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIGlmIChpc09sZElFKSB7XG4gICAgLy8gdXNlIHNpbmdsZXRvbiBtb2RlIGZvciBJRTkuXG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKytcbiAgICBzdHlsZUVsZW1lbnQgPSBzaW5nbGV0b25FbGVtZW50IHx8IChzaW5nbGV0b25FbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KCkpXG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgZmFsc2UpXG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgdHJ1ZSlcbiAgfSBlbHNlIHtcbiAgICAvLyB1c2UgbXVsdGktc3R5bGUtdGFnIG1vZGUgaW4gYWxsIG90aGVyIGNhc2VzXG4gICAgc3R5bGVFbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KClcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50KVxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudClcbiAgICB9XG4gIH1cblxuICB1cGRhdGUob2JqKVxuXG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqIC8qIFN0eWxlT2JqZWN0UGFydCAqLykge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG4gICAgICAgICAgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcbiAgICAgICAgICBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iailcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKClcbiAgICB9XG4gIH1cbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnRcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKVxuICB9XG59KSgpXG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlRWxlbWVudCwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5jc3NcblxuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcylcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcylcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlRWxlbWVudC5jaGlsZE5vZGVzXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoY3NzTm9kZSlcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGVFbGVtZW50LCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3NcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwXG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSlcbiAgfVxuICBpZiAob3B0aW9ucy5zc3JJZCkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoc3NySWRLZXksIG9iai5pZClcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXApIHtcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2RldnRvb2xzL2RvY3MvamF2YXNjcmlwdC1kZWJ1Z2dpbmdcbiAgICAvLyB0aGlzIG1ha2VzIHNvdXJjZSBtYXBzIGluc2lkZSBzdHlsZSB0YWdzIHdvcmsgcHJvcGVybHkgaW4gQ2hyb21lXG4gICAgY3NzICs9ICdcXG4vKiMgc291cmNlVVJMPScgKyBzb3VyY2VNYXAuc291cmNlc1swXSArICcgKi8nXG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcbiAgICBjc3MgKz0gJ1xcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsJyArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyAnICovJ1xuICB9XG5cbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzc1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKVxuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSlcbiAgfVxufVxuIiwiLyohXG4gKiBWdWUuanMgdjIuNi4xMFxuICogKGMpIDIwMTQtMjAxOSBFdmFuIFlvdVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG4vKiAgKi9cblxudmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbi8vIFRoZXNlIGhlbHBlcnMgcHJvZHVjZSBiZXR0ZXIgVk0gY29kZSBpbiBKUyBlbmdpbmVzIGR1ZSB0byB0aGVpclxuLy8gZXhwbGljaXRuZXNzIGFuZCBmdW5jdGlvbiBpbmxpbmluZy5cbmZ1bmN0aW9uIGlzVW5kZWYgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzRGVmICh2KSB7XG4gIHJldHVybiB2ICE9PSB1bmRlZmluZWQgJiYgdiAhPT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc1RydWUgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHRydWVcbn1cblxuZnVuY3Rpb24gaXNGYWxzZSAodikge1xuICByZXR1cm4gdiA9PT0gZmFsc2Vcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBwcmltaXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbi8qKlxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSwgZS5nLiwgW29iamVjdCBPYmplY3RdLlxuICovXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XG4gIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSAodmFsKSB7XG4gIHJldHVybiAoXG4gICAgaXNEZWYodmFsKSAmJlxuICAgIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB2YWwuY2F0Y2ggPT09ICdmdW5jdGlvbidcbiAgKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiB0b1N0cmluZyAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbFxuICAgID8gJydcbiAgICA6IEFycmF5LmlzQXJyYXkodmFsKSB8fCAoaXNQbGFpbk9iamVjdCh2YWwpICYmIHZhbC50b1N0cmluZyA9PT0gX3RvU3RyaW5nKVxuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpXG4gICAgICA6IFN0cmluZyh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICovXG52YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzJyk7XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBhbiBhcnJheS5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS5cbiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYWNoZWQgKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xuICAgIHZhciBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxuICB9KVxufVxuXG4vKipcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXG4gKi9cbnZhciBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xudmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7IHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7IH0pXG59KTtcblxuLyoqXG4gKiBDYXBpdGFsaXplIGEgc3RyaW5nLlxuICovXG52YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcbn0pO1xuXG4vKipcbiAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXG4gKi9cbnZhciBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG52YXIgaHlwaGVuYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnLSQxJykudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQgcG9seWZpbGwgZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IGl0LFxuICogZS5nLiwgUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHksIHdlIGRvbid0IG5lZWQgdGhpcyBhbnltb3JlXG4gKiBzaW5jZSBuYXRpdmUgYmluZCBpcyBub3cgcGVyZm9ybWFudCBlbm91Z2ggaW4gbW9zdCBicm93c2Vycy5cbiAqIEJ1dCByZW1vdmluZyBpdCB3b3VsZCBtZWFuIGJyZWFraW5nIGNvZGUgdGhhdCB3YXMgYWJsZSB0byBydW4gaW5cbiAqIFBoYW50b21KUyAxLngsIHNvIHRoaXMgbXVzdCBiZSBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKS5cbiAqL1xuZnVuY3Rpb24gbm9vcCAoYSwgYiwgYykge31cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG52YXIgbm8gPSBmdW5jdGlvbiAoYSwgYiwgYykgeyByZXR1cm4gZmFsc2U7IH07XG5cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHNhbWUgdmFsdWUuXG4gKi9cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKClcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBmaXJzdCBpbmRleCBhdCB3aGljaCBhIGxvb3NlbHkgZXF1YWwgdmFsdWUgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdFxuICogY29udGFpbiBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgc2hhcGUpLCBvciAtMSBpZiBpdCBpcyBub3QgcHJlc2VudC5cbiAqL1xuZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSkgeyByZXR1cm4gaSB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qKlxuICogRW5zdXJlIGEgZnVuY3Rpb24gaXMgY2FsbGVkIG9ubHkgb25jZS5cbiAqL1xuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIFNTUl9BVFRSID0gJ2RhdGEtc2VydmVyLXJlbmRlcmVkJztcblxudmFyIEFTU0VUX1RZUEVTID0gW1xuICAnY29tcG9uZW50JyxcbiAgJ2RpcmVjdGl2ZScsXG4gICdmaWx0ZXInXG5dO1xuXG52YXIgTElGRUNZQ0xFX0hPT0tTID0gW1xuICAnYmVmb3JlQ3JlYXRlJyxcbiAgJ2NyZWF0ZWQnLFxuICAnYmVmb3JlTW91bnQnLFxuICAnbW91bnRlZCcsXG4gICdiZWZvcmVVcGRhdGUnLFxuICAndXBkYXRlZCcsXG4gICdiZWZvcmVEZXN0cm95JyxcbiAgJ2Rlc3Ryb3llZCcsXG4gICdhY3RpdmF0ZWQnLFxuICAnZGVhY3RpdmF0ZWQnLFxuICAnZXJyb3JDYXB0dXJlZCcsXG4gICdzZXJ2ZXJQcmVmZXRjaCdcbl07XG5cbi8qICAqL1xuXG5cblxudmFyIGNvbmZpZyA9ICh7XG4gIC8qKlxuICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290P1xuICAgKi9cbiAgcHJvZHVjdGlvblRpcDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byBlbmFibGUgZGV2dG9vbHNcbiAgICovXG4gIGRldnRvb2xzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXG4gICAqL1xuICBwZXJmb3JtYW5jZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIFdhcm4gaGFuZGxlciBmb3Igd2F0Y2hlciB3YXJuc1xuICAgKi9cbiAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRUYWc6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgdXNlZCBhcyBhIGNvbXBvbmVudFxuICAgKiBwcm9wLiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZEF0dHI6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG4gICAqL1xuICBnZXRUYWdOYW1lc3BhY2U6IG5vb3AsXG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uXG4gICAqL1xuICBwYXJzZVBsYXRmb3JtVGFnTmFtZTogaWRlbnRpdHksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGJvdW5kIHVzaW5nIHByb3BlcnR5LCBlLmcuIHZhbHVlXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIG11c3RVc2VQcm9wOiBubyxcblxuICAvKipcbiAgICogUGVyZm9ybSB1cGRhdGVzIGFzeW5jaHJvbm91c2x5LiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IFZ1ZSBUZXN0IFV0aWxzXG4gICAqIFRoaXMgd2lsbCBzaWduaWZpY2FudGx5IHJlZHVjZSBwZXJmb3JtYW5jZSBpZiBzZXQgdG8gZmFsc2UuXG4gICAqL1xuICBhc3luYzogdHJ1ZSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgICovXG4gIF9saWZlY3ljbGVIb29rczogTElGRUNZQ0xFX0hPT0tTXG59KTtcblxuLyogICovXG5cbi8qKlxuICogdW5pY29kZSBsZXR0ZXJzIHVzZWQgZm9yIHBhcnNpbmcgaHRtbCB0YWdzLCBjb21wb25lbnQgbmFtZXMgYW5kIHByb3BlcnR5IHBhdGhzLlxuICogdXNpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1My9zZW1hbnRpY3Mtc2NyaXB0aW5nLmh0bWwjcG90ZW50aWFsY3VzdG9tZWxlbWVudG5hbWVcbiAqIHNraXBwaW5nIFxcdTEwMDAwLVxcdUVGRkZGIGR1ZSB0byBpdCBmcmVlemluZyB1cCBQaGFudG9tSlNcbiAqL1xudmFyIHVuaWNvZGVSZWdFeHAgPSAvYS16QS1aXFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwM0YtXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRC87XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gbmV3IFJlZ0V4cCgoXCJbXlwiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiLiRfXFxcXGRdXCIpKTtcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG52YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbnZhciBVQSA9IGluQnJvd3NlciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbnZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xudmFyIGlzRWRnZSA9IFVBICYmIFVBLmluZGV4T2YoJ2VkZ2UvJykgPiAwO1xudmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xudmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbnZhciBpc0Nocm9tZSA9IFVBICYmIC9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlO1xudmFyIGlzUGhhbnRvbUpTID0gVUEgJiYgL3BoYW50b21qcy8udGVzdChVQSk7XG52YXIgaXNGRiA9IFVBICYmIFVBLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLyk7XG5cbi8vIEZpcmVmb3ggaGFzIGEgXCJ3YXRjaFwiIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi5cbnZhciBuYXRpdmVXYXRjaCA9ICh7fSkud2F0Y2g7XG5cbnZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbmlmIChpbkJyb3dzZXIpIHtcbiAgdHJ5IHtcbiAgICB2YXIgb3B0cyA9IHt9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcHRzLCAncGFzc2l2ZScsICh7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSkpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjg1XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QtcGFzc2l2ZScsIG51bGwsIG9wdHMpO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG4vLyB0aGlzIG5lZWRzIHRvIGJlIGxhenktZXZhbGVkIGJlY2F1c2UgdnVlIG1heSBiZSByZXF1aXJlZCBiZWZvcmVcbi8vIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgY2FuIHNldCBWVUVfRU5WXG52YXIgX2lzU2VydmVyO1xudmFyIGlzU2VydmVyUmVuZGVyaW5nID0gZnVuY3Rpb24gKCkge1xuICBpZiAoX2lzU2VydmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWluQnJvd3NlciAmJiAhaW5XZWV4ICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcbiAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3NcbiAgICAgIF9pc1NlcnZlciA9IGdsb2JhbFsncHJvY2VzcyddICYmIGdsb2JhbFsncHJvY2VzcyddLmVudi5WVUVfRU5WID09PSAnc2VydmVyJztcbiAgICB9IGVsc2Uge1xuICAgICAgX2lzU2VydmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfaXNTZXJ2ZXJcbn07XG5cbi8vIGRldGVjdCBkZXZ0b29sc1xudmFyIGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG59XG5cbnZhciBoYXNTeW1ib2wgPVxuICB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTeW1ib2wpICYmXG4gIHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShSZWZsZWN0Lm93bktleXMpO1xuXG52YXIgX1NldDtcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLyAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbmlmICh0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTZXQpKSB7XG4gIC8vIHVzZSBuYXRpdmUgU2V0IHdoZW4gYXZhaWxhYmxlLlxuICBfU2V0ID0gU2V0O1xufSBlbHNlIHtcbiAgLy8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxuICBfU2V0ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0ICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNldDtcbiAgfSgpKTtcbn1cblxuLyogICovXG5cbnZhciB3YXJuID0gbm9vcDtcbnZhciB0aXAgPSBub29wO1xudmFyIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSAobm9vcCk7IC8vIHdvcmsgYXJvdW5kIGZsb3cgY2hlY2tcbnZhciBmb3JtYXRDb21wb25lbnROYW1lID0gKG5vb3ApO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG4gIHZhciBjbGFzc2lmeSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pXG4gICAgLnJlcGxhY2UoL1stX10vZywgJycpOyB9O1xuXG4gIHdhcm4gPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIHZhciB0cmFjZSA9IHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJztcblxuICAgIGlmIChjb25maWcud2FybkhhbmRsZXIpIHtcbiAgICAgIGNvbmZpZy53YXJuSGFuZGxlci5jYWxsKG51bGwsIG1zZywgdm0sIHRyYWNlKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIHRyYWNlKSk7XG4gICAgfVxuICB9O1xuXG4gIHRpcCA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFwiW1Z1ZSB0aXBdOiBcIiArIG1zZyArIChcbiAgICAgICAgdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnXG4gICAgICApKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSwgaW5jbHVkZUZpbGUpIHtcbiAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7XG4gICAgICByZXR1cm4gJzxSb290PidcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygdm0gPT09ICdmdW5jdGlvbicgJiYgdm0uY2lkICE9IG51bGxcbiAgICAgID8gdm0ub3B0aW9uc1xuICAgICAgOiB2bS5faXNWdWVcbiAgICAgICAgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zXG4gICAgICAgIDogdm07XG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICAgIHZhciBmaWxlID0gb3B0aW9ucy5fX2ZpbGU7XG4gICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xuICAgICAgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAobmFtZSA/IChcIjxcIiArIChjbGFzc2lmeShuYW1lKSkgKyBcIj5cIikgOiBcIjxBbm9ueW1vdXM+XCIpICtcbiAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IChcIiBhdCBcIiArIGZpbGUpIDogJycpXG4gICAgKVxuICB9O1xuXG4gIHZhciByZXBlYXQgPSBmdW5jdGlvbiAoc3RyLCBuKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHdoaWxlIChuKSB7XG4gICAgICBpZiAobiAlIDIgPT09IDEpIHsgcmVzICs9IHN0cjsgfVxuICAgICAgaWYgKG4gPiAxKSB7IHN0ciArPSBzdHI7IH1cbiAgICAgIG4gPj49IDE7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfTtcblxuICBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgaWYgKHZtLl9pc1Z1ZSAmJiB2bS4kcGFyZW50KSB7XG4gICAgICB2YXIgdHJlZSA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICB3aGlsZSAodm0pIHtcbiAgICAgICAgaWYgKHRyZWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChsYXN0LmNvbnN0cnVjdG9yID09PSB2bS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlKys7XG4gICAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkge1xuICAgICAgICAgICAgdHJlZVt0cmVlLmxlbmd0aCAtIDFdID0gW2xhc3QsIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZV07XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmVlLnB1c2godm0pO1xuICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1xcblxcbmZvdW5kIGluXFxuXFxuJyArIHRyZWVcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodm0sIGkpIHsgcmV0dXJuIChcIlwiICsgKGkgPT09IDAgPyAnLS0tPiAnIDogcmVwZWF0KCcgJywgNSArIGkgKiAyKSkgKyAoQXJyYXkuaXNBcnJheSh2bSlcbiAgICAgICAgICAgID8gKChmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKSkgKyBcIi4uLiAoXCIgKyAodm1bMV0pICsgXCIgcmVjdXJzaXZlIGNhbGxzKVwiKVxuICAgICAgICAgICAgOiBmb3JtYXRDb21wb25lbnROYW1lKHZtKSkpOyB9KVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcIlxcblxcbihmb3VuZCBpbiBcIiArIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIilcIilcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkID0gMDtcblxuLyoqXG4gKiBBIGRlcCBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGVcbiAqIGRpcmVjdGl2ZXMgc3Vic2NyaWJpbmcgdG8gaXQuXG4gKi9cbnZhciBEZXAgPSBmdW5jdGlvbiBEZXAgKCkge1xuICB0aGlzLmlkID0gdWlkKys7XG4gIHRoaXMuc3VicyA9IFtdO1xufTtcblxuRGVwLnByb3RvdHlwZS5hZGRTdWIgPSBmdW5jdGlvbiBhZGRTdWIgKHN1Yikge1xuICB0aGlzLnN1YnMucHVzaChzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5yZW1vdmVTdWIgPSBmdW5jdGlvbiByZW1vdmVTdWIgKHN1Yikge1xuICByZW1vdmUodGhpcy5zdWJzLCBzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICBpZiAoRGVwLnRhcmdldCkge1xuICAgIERlcC50YXJnZXQuYWRkRGVwKHRoaXMpO1xuICB9XG59O1xuXG5EZXAucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSAoKSB7XG4gIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG4gIHZhciBzdWJzID0gdGhpcy5zdWJzLnNsaWNlKCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAvLyBzdWJzIGFyZW4ndCBzb3J0ZWQgaW4gc2NoZWR1bGVyIGlmIG5vdCBydW5uaW5nIGFzeW5jXG4gICAgLy8gd2UgbmVlZCB0byBzb3J0IHRoZW0gbm93IHRvIG1ha2Ugc3VyZSB0aGV5IGZpcmUgaW4gY29ycmVjdFxuICAgIC8vIG9yZGVyXG4gICAgc3Vicy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdWJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHN1YnNbaV0udXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIFRoZSBjdXJyZW50IHRhcmdldCB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZC5cbi8vIFRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2Ugb25seSBvbmUgd2F0Y2hlclxuLy8gY2FuIGJlIGV2YWx1YXRlZCBhdCBhIHRpbWUuXG5EZXAudGFyZ2V0ID0gbnVsbDtcbnZhciB0YXJnZXRTdGFjayA9IFtdO1xuXG5mdW5jdGlvbiBwdXNoVGFyZ2V0ICh0YXJnZXQpIHtcbiAgdGFyZ2V0U3RhY2sucHVzaCh0YXJnZXQpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBwb3BUYXJnZXQgKCkge1xuICB0YXJnZXRTdGFjay5wb3AoKTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldFN0YWNrW3RhcmdldFN0YWNrLmxlbmd0aCAtIDFdO1xufVxuXG4vKiAgKi9cblxudmFyIFZOb2RlID0gZnVuY3Rpb24gVk5vZGUgKFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICB0ZXh0LFxuICBlbG0sXG4gIGNvbnRleHQsXG4gIGNvbXBvbmVudE9wdGlvbnMsXG4gIGFzeW5jRmFjdG9yeVxuKSB7XG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMudGV4dCA9IHRleHQ7XG4gIHRoaXMuZWxtID0gZWxtO1xuICB0aGlzLm5zID0gdW5kZWZpbmVkO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLmZuQ29udGV4dCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mbk9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5TY29wZUlkID0gdW5kZWZpbmVkO1xuICB0aGlzLmtleSA9IGRhdGEgJiYgZGF0YS5rZXk7XG4gIHRoaXMuY29tcG9uZW50T3B0aW9ucyA9IGNvbXBvbmVudE9wdGlvbnM7XG4gIHRoaXMuY29tcG9uZW50SW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICB0aGlzLnJhdyA9IGZhbHNlO1xuICB0aGlzLmlzU3RhdGljID0gZmFsc2U7XG4gIHRoaXMuaXNSb290SW5zZXJ0ID0gdHJ1ZTtcbiAgdGhpcy5pc0NvbW1lbnQgPSBmYWxzZTtcbiAgdGhpcy5pc0Nsb25lZCA9IGZhbHNlO1xuICB0aGlzLmlzT25jZSA9IGZhbHNlO1xuICB0aGlzLmFzeW5jRmFjdG9yeSA9IGFzeW5jRmFjdG9yeTtcbiAgdGhpcy5hc3luY01ldGEgPSB1bmRlZmluZWQ7XG4gIHRoaXMuaXNBc3luY1BsYWNlaG9sZGVyID0gZmFsc2U7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBjaGlsZDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xucHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2Vcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWTm9kZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgY3JlYXRlRW1wdHlWTm9kZSA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIGlmICggdGV4dCA9PT0gdm9pZCAwICkgdGV4dCA9ICcnO1xuXG4gIHZhciBub2RlID0gbmV3IFZOb2RlKCk7XG4gIG5vZGUudGV4dCA9IHRleHQ7XG4gIG5vZGUuaXNDb21tZW50ID0gdHJ1ZTtcbiAgcmV0dXJuIG5vZGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSAodmFsKSB7XG4gIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG59XG5cbi8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXG4vLyB1c2VkIGZvciBzdGF0aWMgbm9kZXMgYW5kIHNsb3Qgbm9kZXMgYmVjYXVzZSB0aGV5IG1heSBiZSByZXVzZWQgYWNyb3NzXG4vLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcbi8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXG5mdW5jdGlvbiBjbG9uZVZOb2RlICh2bm9kZSkge1xuICB2YXIgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgIHZub2RlLnRhZyxcbiAgICB2bm9kZS5kYXRhLFxuICAgIC8vICM3OTc1XG4gICAgLy8gY2xvbmUgY2hpbGRyZW4gYXJyYXkgdG8gYXZvaWQgbXV0YXRpbmcgb3JpZ2luYWwgaW4gY2FzZSBvZiBjbG9uaW5nXG4gICAgLy8gYSBjaGlsZC5cbiAgICB2bm9kZS5jaGlsZHJlbiAmJiB2bm9kZS5jaGlsZHJlbi5zbGljZSgpLFxuICAgIHZub2RlLnRleHQsXG4gICAgdm5vZGUuZWxtLFxuICAgIHZub2RlLmNvbnRleHQsXG4gICAgdm5vZGUuY29tcG9uZW50T3B0aW9ucyxcbiAgICB2bm9kZS5hc3luY0ZhY3RvcnlcbiAgKTtcbiAgY2xvbmVkLm5zID0gdm5vZGUubnM7XG4gIGNsb25lZC5pc1N0YXRpYyA9IHZub2RlLmlzU3RhdGljO1xuICBjbG9uZWQua2V5ID0gdm5vZGUua2V5O1xuICBjbG9uZWQuaXNDb21tZW50ID0gdm5vZGUuaXNDb21tZW50O1xuICBjbG9uZWQuZm5Db250ZXh0ID0gdm5vZGUuZm5Db250ZXh0O1xuICBjbG9uZWQuZm5PcHRpb25zID0gdm5vZGUuZm5PcHRpb25zO1xuICBjbG9uZWQuZm5TY29wZUlkID0gdm5vZGUuZm5TY29wZUlkO1xuICBjbG9uZWQuYXN5bmNNZXRhID0gdm5vZGUuYXN5bmNNZXRhO1xuICBjbG9uZWQuaXNDbG9uZWQgPSB0cnVlO1xuICByZXR1cm4gY2xvbmVkXG59XG5cbi8qXG4gKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGhcbiAqIGR5bmFtaWNhbGx5IGFjY2Vzc2luZyBtZXRob2RzIG9uIEFycmF5IHByb3RvdHlwZVxuICovXG5cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xudmFyIGFycmF5TWV0aG9kcyA9IE9iamVjdC5jcmVhdGUoYXJyYXlQcm90byk7XG5cbnZhciBtZXRob2RzVG9QYXRjaCA9IFtcbiAgJ3B1c2gnLFxuICAncG9wJyxcbiAgJ3NoaWZ0JyxcbiAgJ3Vuc2hpZnQnLFxuICAnc3BsaWNlJyxcbiAgJ3NvcnQnLFxuICAncmV2ZXJzZSdcbl07XG5cbi8qKlxuICogSW50ZXJjZXB0IG11dGF0aW5nIG1ldGhvZHMgYW5kIGVtaXQgZXZlbnRzXG4gKi9cbm1ldGhvZHNUb1BhdGNoLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAvLyBjYWNoZSBvcmlnaW5hbCBtZXRob2RcbiAgdmFyIG9yaWdpbmFsID0gYXJyYXlQcm90b1ttZXRob2RdO1xuICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IgKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB2YXIgb2IgPSB0aGlzLl9fb2JfXztcbiAgICB2YXIgaW5zZXJ0ZWQ7XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgJ3B1c2gnOlxuICAgICAgY2FzZSAndW5zaGlmdCc6XG4gICAgICAgIGluc2VydGVkID0gYXJncztcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3NwbGljZSc6XG4gICAgICAgIGluc2VydGVkID0gYXJncy5zbGljZSgyKTtcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgaWYgKGluc2VydGVkKSB7IG9iLm9ic2VydmVBcnJheShpbnNlcnRlZCk7IH1cbiAgICAvLyBub3RpZnkgY2hhbmdlXG4gICAgb2IuZGVwLm5vdGlmeSgpO1xuICAgIHJldHVybiByZXN1bHRcbiAgfSk7XG59KTtcblxuLyogICovXG5cbnZhciBhcnJheUtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcnJheU1ldGhvZHMpO1xuXG4vKipcbiAqIEluIHNvbWUgY2FzZXMgd2UgbWF5IHdhbnQgdG8gZGlzYWJsZSBvYnNlcnZhdGlvbiBpbnNpZGUgYSBjb21wb25lbnQnc1xuICogdXBkYXRlIGNvbXB1dGF0aW9uLlxuICovXG52YXIgc2hvdWxkT2JzZXJ2ZSA9IHRydWU7XG5cbmZ1bmN0aW9uIHRvZ2dsZU9ic2VydmluZyAodmFsdWUpIHtcbiAgc2hvdWxkT2JzZXJ2ZSA9IHZhbHVlO1xufVxuXG4vKipcbiAqIE9ic2VydmVyIGNsYXNzIHRoYXQgaXMgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxuICogb2JqZWN0LiBPbmNlIGF0dGFjaGVkLCB0aGUgb2JzZXJ2ZXIgY29udmVydHMgdGhlIHRhcmdldFxuICogb2JqZWN0J3MgcHJvcGVydHkga2V5cyBpbnRvIGdldHRlci9zZXR0ZXJzIHRoYXRcbiAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaCB1cGRhdGVzLlxuICovXG52YXIgT2JzZXJ2ZXIgPSBmdW5jdGlvbiBPYnNlcnZlciAodmFsdWUpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcbiAgdGhpcy52bUNvdW50ID0gMDtcbiAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGlmIChoYXNQcm90bykge1xuICAgICAgcHJvdG9BdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb3B5QXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgIH1cbiAgICB0aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53YWxrKHZhbHVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXYWxrIHRocm91Z2ggYWxsIHByb3BlcnRpZXMgYW5kIGNvbnZlcnQgdGhlbSBpbnRvXG4gKiBnZXR0ZXIvc2V0dGVycy4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW5cbiAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIHdhbGsgKG9iaikge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKG9iaiwga2V5c1tpXSk7XG4gIH1cbn07XG5cbi8qKlxuICogT2JzZXJ2ZSBhIGxpc3Qgb2YgQXJyYXkgaXRlbXMuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlQXJyYXkgPSBmdW5jdGlvbiBvYnNlcnZlQXJyYXkgKGl0ZW1zKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb2JzZXJ2ZShpdGVtc1tpXSk7XG4gIH1cbn07XG5cbi8vIGhlbHBlcnNcblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcbiAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fXG4gKi9cbmZ1bmN0aW9uIHByb3RvQXVnbWVudCAodGFyZ2V0LCBzcmMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgdGFyZ2V0Ll9fcHJvdG9fXyA9IHNyYztcbiAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xufVxuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYjtcbiAgaWYgKGhhc093bih2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7XG4gICAgb2IgPSB2YWx1ZS5fX29iX187XG4gIH0gZWxzZSBpZiAoXG4gICAgc2hvdWxkT2JzZXJ2ZSAmJlxuICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmXG4gICAgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxuICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXG4gICAgIXZhbHVlLl9pc1Z1ZVxuICApIHtcbiAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKGFzUm9vdERhdGEgJiYgb2IpIHtcbiAgICBvYi52bUNvdW50Kys7XG4gIH1cbiAgcmV0dXJuIG9iXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICovXG5mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSQkMSAoXG4gIG9iaixcbiAga2V5LFxuICB2YWwsXG4gIGN1c3RvbVNldHRlcixcbiAgc2hhbGxvd1xuKSB7XG4gIHZhciBkZXAgPSBuZXcgRGVwKCk7XG5cbiAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG4gIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgdmFyIHNldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LnNldDtcbiAgaWYgKCghZ2V0dGVyIHx8IHNldHRlcikgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHZhbCA9IG9ialtrZXldO1xuICB9XG5cbiAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGRlcGVuZEFycmF5KHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlciAobmV3VmFsKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAobmV3VmFsID09PSB2YWx1ZSB8fCAobmV3VmFsICE9PSBuZXdWYWwgJiYgdmFsdWUgIT09IHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICAvLyAjNzk4MTogZm9yIGFjY2Vzc29yIHByb3BlcnRpZXMgd2l0aG91dCBzZXR0ZXJcbiAgICAgIGlmIChnZXR0ZXIgJiYgIXNldHRlcikgeyByZXR1cm4gfVxuICAgICAgaWYgKHNldHRlcikge1xuICAgICAgICBzZXR0ZXIuY2FsbChvYmosIG5ld1ZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBuZXdWYWw7XG4gICAgICB9XG4gICAgICBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZShuZXdWYWwpO1xuICAgICAgZGVwLm5vdGlmeSgpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LiBBZGRzIHRoZSBuZXcgcHJvcGVydHkgYW5kXG4gKiB0cmlnZ2VycyBjaGFuZ2Ugbm90aWZpY2F0aW9uIGlmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0XG4gKiBhbHJlYWR5IGV4aXN0LlxuICovXG5mdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWwpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IHNldCByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0Lmxlbmd0aCA9IE1hdGgubWF4KHRhcmdldC5sZW5ndGgsIGtleSk7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEsIHZhbCk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmIChrZXkgaW4gdGFyZ2V0ICYmICEoa2V5IGluIE9iamVjdC5wcm90b3R5cGUpKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGFkZGluZyByZWFjdGl2ZSBwcm9wZXJ0aWVzIHRvIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJ2F0IHJ1bnRpbWUgLSBkZWNsYXJlIGl0IHVwZnJvbnQgaW4gdGhlIGRhdGEgb3B0aW9uLidcbiAgICApO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoIW9iKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGRlZmluZVJlYWN0aXZlJCQxKG9iLnZhbHVlLCBrZXksIHZhbCk7XG4gIG9iLmRlcC5ub3RpZnkoKTtcbiAgcmV0dXJuIHZhbFxufVxuXG4vKipcbiAqIERlbGV0ZSBhIHByb3BlcnR5IGFuZCB0cmlnZ2VyIGNoYW5nZSBpZiBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIGRlbCAodGFyZ2V0LCBrZXkpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IGRlbGV0ZSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEpO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGRlbGV0aW5nIHByb3BlcnRpZXMgb24gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnLSBqdXN0IHNldCBpdCB0byBudWxsLidcbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICghaGFzT3duKHRhcmdldCwga2V5KSkge1xuICAgIHJldHVyblxuICB9XG4gIGRlbGV0ZSB0YXJnZXRba2V5XTtcbiAgaWYgKCFvYikge1xuICAgIHJldHVyblxuICB9XG4gIG9iLmRlcC5ub3RpZnkoKTtcbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRlcGVuZGVuY2llcyBvbiBhcnJheSBlbGVtZW50cyB3aGVuIHRoZSBhcnJheSBpcyB0b3VjaGVkLCBzaW5jZVxuICogd2UgY2Fubm90IGludGVyY2VwdCBhcnJheSBlbGVtZW50IGFjY2VzcyBsaWtlIHByb3BlcnR5IGdldHRlcnMuXG4gKi9cbmZ1bmN0aW9uIGRlcGVuZEFycmF5ICh2YWx1ZSkge1xuICBmb3IgKHZhciBlID0gKHZvaWQgMCksIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZSA9IHZhbHVlW2ldO1xuICAgIGUgJiYgZS5fX29iX18gJiYgZS5fX29iX18uZGVwLmRlcGVuZCgpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICBkZXBlbmRBcnJheShlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogT3B0aW9uIG92ZXJ3cml0aW5nIHN0cmF0ZWdpZXMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZVxuICogaG93IHRvIG1lcmdlIGEgcGFyZW50IG9wdGlvbiB2YWx1ZSBhbmQgYSBjaGlsZCBvcHRpb25cbiAqIHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxuICovXG52YXIgc3RyYXRzID0gY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztcblxuLyoqXG4gKiBPcHRpb25zIHdpdGggcmVzdHJpY3Rpb25zXG4gKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHN0cmF0cy5lbCA9IHN0cmF0cy5wcm9wc0RhdGEgPSBmdW5jdGlvbiAocGFyZW50LCBjaGlsZCwgdm0sIGtleSkge1xuICAgIGlmICghdm0pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwib3B0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBpbnN0YW5jZSBcIiArXG4gICAgICAgICdjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0U3RyYXQocGFyZW50LCBjaGlsZClcbiAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhICh0bywgZnJvbSkge1xuICBpZiAoIWZyb20pIHsgcmV0dXJuIHRvIH1cbiAgdmFyIGtleSwgdG9WYWwsIGZyb21WYWw7XG5cbiAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICA/IFJlZmxlY3Qub3duS2V5cyhmcm9tKVxuICAgIDogT2JqZWN0LmtleXMoZnJvbSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICAvLyBpbiBjYXNlIHRoZSBvYmplY3QgaXMgYWxyZWFkeSBvYnNlcnZlZC4uLlxuICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xuICAgICAgc2V0KHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0b1ZhbCAhPT0gZnJvbVZhbCAmJlxuICAgICAgaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QoZnJvbVZhbClcbiAgICApIHtcbiAgICAgIG1lcmdlRGF0YSh0b1ZhbCwgZnJvbVZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIERhdGFcbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhT3JGbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIC8vIGluIGEgVnVlLmV4dGVuZCBtZXJnZSwgYm90aCBzaG91bGQgYmUgZnVuY3Rpb25zXG4gICAgaWYgKCFjaGlsZFZhbCkge1xuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICBpZiAoIXBhcmVudFZhbCkge1xuICAgICAgcmV0dXJuIGNoaWxkVmFsXG4gICAgfVxuICAgIC8vIHdoZW4gcGFyZW50VmFsICYgY2hpbGRWYWwgYXJlIGJvdGggcHJlc2VudCxcbiAgICAvLyB3ZSBuZWVkIHRvIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgICAvLyBtZXJnZWQgcmVzdWx0IG9mIGJvdGggZnVuY3Rpb25zLi4uIG5vIG5lZWQgdG9cbiAgICAvLyBjaGVjayBpZiBwYXJlbnRWYWwgaXMgYSBmdW5jdGlvbiBoZXJlIGJlY2F1c2VcbiAgICAvLyBpdCBoYXMgdG8gYmUgYSBmdW5jdGlvbiB0byBwYXNzIHByZXZpb3VzIG1lcmdlcy5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuICgpIHtcbiAgICAgIHJldHVybiBtZXJnZURhdGEoXG4gICAgICAgIHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkVmFsLmNhbGwodGhpcywgdGhpcykgOiBjaGlsZFZhbCxcbiAgICAgICAgdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmVudFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogcGFyZW50VmFsXG4gICAgICApXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbiAoKSB7XG4gICAgICAvLyBpbnN0YW5jZSBtZXJnZVxuICAgICAgdmFyIGluc3RhbmNlRGF0YSA9IHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IGNoaWxkVmFsO1xuICAgICAgdmFyIGRlZmF1bHREYXRhID0gdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHBhcmVudFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBwYXJlbnRWYWw7XG4gICAgICBpZiAoaW5zdGFuY2VEYXRhKSB7XG4gICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0RGF0YVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5zdHJhdHMuZGF0YSA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgaWYgKGNoaWxkVmFsICYmIHR5cGVvZiBjaGlsZFZhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnVGhlIFwiZGF0YVwiIG9wdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvbiAnICtcbiAgICAgICAgJ3RoYXQgcmV0dXJucyBhIHBlci1pbnN0YW5jZSB2YWx1ZSBpbiBjb21wb25lbnQgJyArXG4gICAgICAgICdkZWZpbml0aW9ucy4nLFxuICAgICAgICB2bVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsKVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pXG59O1xuXG4vKipcbiAqIEhvb2tzIGFuZCBwcm9wcyBhcmUgbWVyZ2VkIGFzIGFycmF5cy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VIb29rIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbFxuKSB7XG4gIHZhciByZXMgPSBjaGlsZFZhbFxuICAgID8gcGFyZW50VmFsXG4gICAgICA/IHBhcmVudFZhbC5jb25jYXQoY2hpbGRWYWwpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRWYWwpXG4gICAgICAgID8gY2hpbGRWYWxcbiAgICAgICAgOiBbY2hpbGRWYWxdXG4gICAgOiBwYXJlbnRWYWw7XG4gIHJldHVybiByZXNcbiAgICA/IGRlZHVwZUhvb2tzKHJlcylcbiAgICA6IHJlc1xufVxuXG5mdW5jdGlvbiBkZWR1cGVIb29rcyAoaG9va3MpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHJlcy5pbmRleE9mKGhvb2tzW2ldKSA9PT0gLTEpIHtcbiAgICAgIHJlcy5wdXNoKGhvb2tzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5MSUZFQ1lDTEVfSE9PS1MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICBzdHJhdHNbaG9va10gPSBtZXJnZUhvb2s7XG59KTtcblxuLyoqXG4gKiBBc3NldHNcbiAqXG4gKiBXaGVuIGEgdm0gaXMgcHJlc2VudCAoaW5zdGFuY2UgY3JlYXRpb24pLCB3ZSBuZWVkIHRvIGRvXG4gKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG4gKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VBc3NldHMgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xuICBpZiAoY2hpbGRWYWwpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICAgIHJldHVybiBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcbn0pO1xuXG4vKipcbiAqIFdhdGNoZXJzLlxuICpcbiAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuICovXG5zdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICAvLyB3b3JrIGFyb3VuZCBGaXJlZm94J3MgT2JqZWN0LnByb3RvdHlwZS53YXRjaC4uLlxuICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaCkgeyBwYXJlbnRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgeyBjaGlsZFZhbCA9IHVuZGVmaW5lZDsgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCkgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSB7fTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZm9yICh2YXIga2V5JDEgaW4gY2hpbGRWYWwpIHtcbiAgICB2YXIgcGFyZW50ID0gcmV0W2tleSQxXTtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZFZhbFtrZXkkMV07XG4gICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSBbcGFyZW50XTtcbiAgICB9XG4gICAgcmV0W2tleSQxXSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuaW5qZWN0ID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIGlmIChjaGlsZFZhbCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGlmIChjaGlsZFZhbCkgeyBleHRlbmQocmV0LCBjaGlsZFZhbCk7IH1cbiAgcmV0dXJuIHJldFxufTtcbnN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjtcblxuLyoqXG4gKiBEZWZhdWx0IHN0cmF0ZWd5LlxuICovXG52YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcbiAgICA/IHBhcmVudFZhbFxuICAgIDogY2hpbGRWYWxcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyAob3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lIChuYW1lKSB7XG4gIGlmICghbmV3IFJlZ0V4cCgoXCJeW2EtekEtWl1bXFxcXC1cXFxcLjAtOV9cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIl0qJFwiKSkudGVzdChuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBjb21wb25lbnQgbmFtZTogXCInICsgbmFtZSArICdcIi4gQ29tcG9uZW50IG5hbWVzICcgK1xuICAgICAgJ3Nob3VsZCBjb25mb3JtIHRvIHZhbGlkIGN1c3RvbSBlbGVtZW50IG5hbWUgaW4gaHRtbDUgc3BlY2lmaWNhdGlvbi4nXG4gICAgKTtcbiAgfVxuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgJ2lkOiAnICsgbmFtZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zLCB2bSkge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwicHJvcHNcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUocHJvcHMpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIG9wdGlvbnMucHJvcHMgPSByZXM7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGFsbCBpbmplY3Rpb25zIGludG8gT2JqZWN0LWJhc2VkIGZvcm1hdFxuICovXG5mdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBpbmplY3QgPSBvcHRpb25zLmluamVjdDtcbiAgaWYgKCFpbmplY3QpIHsgcmV0dXJuIH1cbiAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbmplY3QpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IHsgZnJvbTogaW5qZWN0W2ldIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGtleSBpbiBpbmplY3QpIHtcbiAgICAgIHZhciB2YWwgPSBpbmplY3Rba2V5XTtcbiAgICAgIG5vcm1hbGl6ZWRba2V5XSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXG4gICAgICAgIDogeyBmcm9tOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiaW5qZWN0XFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKGluamVjdCkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmJCQxID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYkJDEsIHVwZGF0ZTogZGVmJCQxIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUgKG5hbWUsIHZhbHVlLCB2bSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJcIiArIG5hbWUgKyBcIlxcXCI6IGV4cGVjdGVkIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICB2bVxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2tDb21wb25lbnRzKGNoaWxkKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjaGlsZCA9IGNoaWxkLm9wdGlvbnM7XG4gIH1cblxuICBub3JtYWxpemVQcm9wcyhjaGlsZCwgdm0pO1xuICBub3JtYWxpemVJbmplY3QoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplRGlyZWN0aXZlcyhjaGlsZCk7XG5cbiAgLy8gQXBwbHkgZXh0ZW5kcyBhbmQgbWl4aW5zIG9uIHRoZSBjaGlsZCBvcHRpb25zLFxuICAvLyBidXQgb25seSBpZiBpdCBpcyBhIHJhdyBvcHRpb25zIG9iamVjdCB0aGF0IGlzbid0XG4gIC8vIHRoZSByZXN1bHQgb2YgYW5vdGhlciBtZXJnZU9wdGlvbnMgY2FsbC5cbiAgLy8gT25seSBtZXJnZWQgb3B0aW9ucyBoYXMgdGhlIF9iYXNlIHByb3BlcnR5LlxuICBpZiAoIWNoaWxkLl9iYXNlKSB7XG4gICAgaWYgKGNoaWxkLmV4dGVuZHMpIHtcbiAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLmV4dGVuZHMsIHZtKTtcbiAgICB9XG4gICAgaWYgKGNoaWxkLm1peGlucykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZC5taXhpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLm1peGluc1tpXSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBvcHRpb25zID0ge307XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIHBhcmVudCkge1xuICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgfVxuICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgIGlmICghaGFzT3duKHBhcmVudCwga2V5KSkge1xuICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgb3B0aW9uc1trZXldID0gc3RyYXQocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtLCBrZXkpO1xuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbi8qKlxuICogUmVzb2x2ZSBhbiBhc3NldC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQgKFxuICBvcHRpb25zLFxuICB0eXBlLFxuICBpZCxcbiAgd2Fybk1pc3Npbmdcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3RcbiAgaWYgKGhhc093bihhc3NldHMsIGlkKSkgeyByZXR1cm4gYXNzZXRzW2lkXSB9XG4gIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSkgeyByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXSB9XG4gIHZhciBQYXNjYWxDYXNlSWQgPSBjYXBpdGFsaXplKGNhbWVsaXplZElkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluXG4gIHZhciByZXMgPSBhc3NldHNbaWRdIHx8IGFzc2V0c1tjYW1lbGl6ZWRJZF0gfHwgYXNzZXRzW1Bhc2NhbENhc2VJZF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AgKFxuICBrZXksXG4gIHByb3BPcHRpb25zLFxuICBwcm9wc0RhdGEsXG4gIHZtXG4pIHtcbiAgdmFyIHByb3AgPSBwcm9wT3B0aW9uc1trZXldO1xuICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7XG4gIHZhciB2YWx1ZSA9IHByb3BzRGF0YVtrZXldO1xuICAvLyBib29sZWFuIGNhc3RpbmdcbiAgdmFyIGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xuICBpZiAoYm9vbGVhbkluZGV4ID4gLTEpIHtcbiAgICBpZiAoYWJzZW50ICYmICFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpIHtcbiAgICAgIC8vIG9ubHkgY2FzdCBlbXB0eSBzdHJpbmcgLyBzYW1lIG5hbWUgdG8gYm9vbGVhbiBpZlxuICAgICAgLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5XG4gICAgICB2YXIgc3RyaW5nSW5kZXggPSBnZXRUeXBlSW5kZXgoU3RyaW5nLCBwcm9wLnR5cGUpO1xuICAgICAgaWYgKHN0cmluZ0luZGV4IDwgMCB8fCBib29sZWFuSW5kZXggPCBzdHJpbmdJbmRleCkge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGNoZWNrIGRlZmF1bHQgdmFsdWVcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG4gICAgLy8gc2luY2UgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBmcmVzaCBjb3B5LFxuICAgIC8vIG1ha2Ugc3VyZSB0byBvYnNlcnZlIGl0LlxuICAgIHZhciBwcmV2U2hvdWxkT2JzZXJ2ZSA9IHNob3VsZE9ic2VydmU7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIG9ic2VydmUodmFsdWUpO1xuICAgIHRvZ2dsZU9ic2VydmluZyhwcmV2U2hvdWxkT2JzZXJ2ZSk7XG4gIH1cbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAvLyBza2lwIHZhbGlkYXRpb24gZm9yIHdlZXggcmVjeWNsZS1saXN0IGNoaWxkIGNvbXBvbmVudCBwcm9wc1xuICAgICEoZmFsc2UpXG4gICkge1xuICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkge1xuICAvLyBubyBkZWZhdWx0LCByZXR1cm4gdW5kZWZpbmVkXG4gIGlmICghaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc09iamVjdChkZWYpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgXCInICsga2V5ICsgJ1wiOiAnICtcbiAgICAgICdQcm9wcyB3aXRoIHR5cGUgT2JqZWN0L0FycmF5IG11c3QgdXNlIGEgZmFjdG9yeSBmdW5jdGlvbiAnICtcbiAgICAgICd0byByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUuJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyB0aGUgcmF3IHByb3AgdmFsdWUgd2FzIGFsc28gdW5kZWZpbmVkIGZyb20gcHJldmlvdXMgcmVuZGVyLFxuICAvLyByZXR1cm4gcHJldmlvdXMgZGVmYXVsdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB3YXRjaGVyIHRyaWdnZXJcbiAgaWYgKHZtICYmIHZtLiRvcHRpb25zLnByb3BzRGF0YSAmJlxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YVtrZXldID09PSB1bmRlZmluZWQgJiZcbiAgICB2bS5fcHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHJldHVybiB2bS5fcHJvcHNba2V5XVxuICB9XG4gIC8vIGNhbGwgZmFjdG9yeSBmdW5jdGlvbiBmb3Igbm9uLUZ1bmN0aW9uIHR5cGVzXG4gIC8vIGEgdmFsdWUgaXMgRnVuY3Rpb24gaWYgaXRzIHByb3RvdHlwZSBpcyBmdW5jdGlvbiBldmVuIGFjcm9zcyBkaWZmZXJlbnQgZXhlY3V0aW9uIGNvbnRleHRcbiAgcmV0dXJuIHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZ2V0VHlwZShwcm9wLnR5cGUpICE9PSAnRnVuY3Rpb24nXG4gICAgPyBkZWYuY2FsbCh2bSlcbiAgICA6IGRlZlxufVxuXG4vKipcbiAqIEFzc2VydCB3aGV0aGVyIGEgcHJvcCBpcyB2YWxpZC5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UHJvcCAoXG4gIHByb3AsXG4gIG5hbWUsXG4gIHZhbHVlLFxuICB2bSxcbiAgYWJzZW50XG4pIHtcbiAgaWYgKHByb3AucmVxdWlyZWQgJiYgYWJzZW50KSB7XG4gICAgd2FybihcbiAgICAgICdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsICYmICFwcm9wLnJlcXVpcmVkKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHR5cGUgPSBwcm9wLnR5cGU7XG4gIHZhciB2YWxpZCA9ICF0eXBlIHx8IHR5cGUgPT09IHRydWU7XG4gIHZhciBleHBlY3RlZFR5cGVzID0gW107XG4gIGlmICh0eXBlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICB0eXBlID0gW3R5cGVdO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoICYmICF2YWxpZDsgaSsrKSB7XG4gICAgICB2YXIgYXNzZXJ0ZWRUeXBlID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZVtpXSk7XG4gICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSB8fCAnJyk7XG4gICAgICB2YWxpZCA9IGFzc2VydGVkVHlwZS52YWxpZDtcbiAgICB9XG4gIH1cblxuICBpZiAoIXZhbGlkKSB7XG4gICAgd2FybihcbiAgICAgIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcyksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICBpZiAodmFsaWRhdG9yKSB7XG4gICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc2ltcGxlQ2hlY2tSRSA9IC9eKFN0cmluZ3xOdW1iZXJ8Qm9vbGVhbnxGdW5jdGlvbnxTeW1ib2wpJC87XG5cbmZ1bmN0aW9uIGFzc2VydFR5cGUgKHZhbHVlLCB0eXBlKSB7XG4gIHZhciB2YWxpZDtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gIGlmIChzaW1wbGVDaGVja1JFLnRlc3QoZXhwZWN0ZWRUeXBlKSkge1xuICAgIHZhciB0ID0gdHlwZW9mIHZhbHVlO1xuICAgIHZhbGlkID0gdCA9PT0gZXhwZWN0ZWRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gZm9yIHByaW1pdGl2ZSB3cmFwcGVyIG9iamVjdHNcbiAgICBpZiAoIXZhbGlkICYmIHQgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0Jykge1xuICAgIHZhbGlkID0gaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQXJyYXknKSB7XG4gICAgdmFsaWQgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbGlkOiB2YWxpZCxcbiAgICBleHBlY3RlZFR5cGU6IGV4cGVjdGVkVHlwZVxuICB9XG59XG5cbi8qKlxuICogVXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIGJ1aWx0LWluIHR5cGVzLFxuICogYmVjYXVzZSBhIHNpbXBsZSBlcXVhbGl0eSBjaGVjayB3aWxsIGZhaWwgd2hlbiBydW5uaW5nXG4gKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFR5cGUgKGZuKSB7XG4gIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJydcbn1cblxuZnVuY3Rpb24gaXNTYW1lVHlwZSAoYSwgYikge1xuICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlSW5kZXggKHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVHlwZXMpKSB7XG4gICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTFcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXhwZWN0ZWRUeXBlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXNbaV0sIHR5cGUpKSB7XG4gICAgICByZXR1cm4gaVxuICAgIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuZnVuY3Rpb24gZ2V0SW52YWxpZFR5cGVNZXNzYWdlIChuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICB2YXIgbWVzc2FnZSA9IFwiSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiICtcbiAgICBcIiBFeHBlY3RlZCBcIiArIChleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpKTtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XG4gIHZhciByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xuICB2YXIgZXhwZWN0ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciByZWNlaXZlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgcmVjZWl2ZWRUeXBlKTtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXG4gIGlmIChleHBlY3RlZFR5cGVzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiZcbiAgICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBcIiB3aXRoIHZhbHVlIFwiICsgZXhwZWN0ZWRWYWx1ZTtcbiAgfVxuICBtZXNzYWdlICs9IFwiLCBnb3QgXCIgKyByZWNlaXZlZFR5cGUgKyBcIiBcIjtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IHJlY2VpdmVkIHZhbHVlXG4gIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCJ3aXRoIHZhbHVlIFwiICsgcmVjZWl2ZWRWYWx1ZSArIFwiLlwiO1xuICB9XG4gIHJldHVybiBtZXNzYWdlXG59XG5cbmZ1bmN0aW9uIHN0eWxlVmFsdWUgKHZhbHVlLCB0eXBlKSB7XG4gIGlmICh0eXBlID09PSAnU3RyaW5nJykge1xuICAgIHJldHVybiAoXCJcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdOdW1iZXInKSB7XG4gICAgcmV0dXJuIChcIlwiICsgKE51bWJlcih2YWx1ZSkpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIHZhbHVlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzRXhwbGljYWJsZSAodmFsdWUpIHtcbiAgdmFyIGV4cGxpY2l0VHlwZXMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddO1xuICByZXR1cm4gZXhwbGljaXRUeXBlcy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtOyB9KVxufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4gKCkge1xuICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gIHJldHVybiBhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gJ2Jvb2xlYW4nOyB9KVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgLy8gRGVhY3RpdmF0ZSBkZXBzIHRyYWNraW5nIHdoaWxlIHByb2Nlc3NpbmcgZXJyb3IgaGFuZGxlciB0byBhdm9pZCBwb3NzaWJsZSBpbmZpbml0ZSByZW5kZXJpbmcuXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXgvaXNzdWVzLzE1MDVcbiAgcHVzaFRhcmdldCgpO1xuICB0cnkge1xuICAgIGlmICh2bSkge1xuICAgICAgdmFyIGN1ciA9IHZtO1xuICAgICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgICAgdmFyIGhvb2tzID0gY3VyLiRvcHRpb25zLmVycm9yQ2FwdHVyZWQ7XG4gICAgICAgIGlmIChob29rcykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHZhciBjYXB0dXJlID0gaG9va3NbaV0uY2FsbChjdXIsIGVyciwgdm0sIGluZm8pID09PSBmYWxzZTtcbiAgICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgZ2xvYmFsSGFuZGxlRXJyb3IoZSwgY3VyLCAnZXJyb3JDYXB0dXJlZCBob29rJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGdsb2JhbEhhbmRsZUVycm9yKGVyciwgdm0sIGluZm8pO1xuICB9IGZpbmFsbHkge1xuICAgIHBvcFRhcmdldCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZVdpdGhFcnJvckhhbmRsaW5nIChcbiAgaGFuZGxlcixcbiAgY29udGV4dCxcbiAgYXJncyxcbiAgdm0sXG4gIGluZm9cbikge1xuICB2YXIgcmVzO1xuICB0cnkge1xuICAgIHJlcyA9IGFyZ3MgPyBoYW5kbGVyLmFwcGx5KGNvbnRleHQsIGFyZ3MpIDogaGFuZGxlci5jYWxsKGNvbnRleHQpO1xuICAgIGlmIChyZXMgJiYgIXJlcy5faXNWdWUgJiYgaXNQcm9taXNlKHJlcykgJiYgIXJlcy5faGFuZGxlZCkge1xuICAgICAgcmVzLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyArIFwiIChQcm9taXNlL2FzeW5jKVwiKTsgfSk7XG4gICAgICAvLyBpc3N1ZSAjOTUxMVxuICAgICAgLy8gYXZvaWQgY2F0Y2ggdHJpZ2dlcmluZyBtdWx0aXBsZSB0aW1lcyB3aGVuIG5lc3RlZCBjYWxsc1xuICAgICAgcmVzLl9oYW5kbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnbG9iYWxIYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsIGVyciwgdm0sIGluZm8pXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gaWYgdGhlIHVzZXIgaW50ZW50aW9uYWxseSB0aHJvd3MgdGhlIG9yaWdpbmFsIGVycm9yIGluIHRoZSBoYW5kbGVyLFxuICAgICAgLy8gZG8gbm90IGxvZyBpdCB0d2ljZVxuICAgICAgaWYgKGUgIT09IGVycikge1xuICAgICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBsb2dFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKChcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyLnRvU3RyaW5nKCkpICsgXCJcXFwiXCIpLCB2bSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKChpbkJyb3dzZXIgfHwgaW5XZWV4KSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpc1VzaW5nTWljcm9UYXNrID0gZmFsc2U7XG5cbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3BpZXNbaV0oKTtcbiAgfVxufVxuXG4vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIG1pY3JvdGFza3MuXG4vLyBJbiAyLjUgd2UgdXNlZCAobWFjcm8pIHRhc2tzIChpbiBjb21iaW5hdGlvbiB3aXRoIG1pY3JvdGFza3MpLlxuLy8gSG93ZXZlciwgaXQgaGFzIHN1YnRsZSBwcm9ibGVtcyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnRcbi8vIChlLmcuICM2ODEzLCBvdXQtaW4gdHJhbnNpdGlvbnMpLlxuLy8gQWxzbywgdXNpbmcgKG1hY3JvKSB0YXNrcyBpbiBldmVudCBoYW5kbGVyIHdvdWxkIGNhdXNlIHNvbWUgd2VpcmQgYmVoYXZpb3JzXG4vLyB0aGF0IGNhbm5vdCBiZSBjaXJjdW12ZW50ZWQgKGUuZy4gIzcxMDksICM3MTUzLCAjNzU0NiwgIzc4MzQsICM4MTA5KS5cbi8vIFNvIHdlIG5vdyB1c2UgbWljcm90YXNrcyBldmVyeXdoZXJlLCBhZ2Fpbi5cbi8vIEEgbWFqb3IgZHJhd2JhY2sgb2YgdGhpcyB0cmFkZW9mZiBpcyB0aGF0IHRoZXJlIGFyZSBzb21lIHNjZW5hcmlvc1xuLy8gd2hlcmUgbWljcm90YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmUgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XG4vLyBzZXF1ZW50aWFsIGV2ZW50cyAoZS5nLiAjNDUyMSwgIzY2OTAsIHdoaWNoIGhhdmUgd29ya2Fyb3VuZHMpXG4vLyBvciBldmVuIGJldHdlZW4gYnViYmxpbmcgb2YgdGhlIHNhbWUgZXZlbnQgKCM2NTY2KS5cbnZhciB0aW1lckZ1bmM7XG5cbi8vIFRoZSBuZXh0VGljayBiZWhhdmlvciBsZXZlcmFnZXMgdGhlIG1pY3JvdGFzayBxdWV1ZSwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkXG4vLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci5cbi8vIE11dGF0aW9uT2JzZXJ2ZXIgaGFzIHdpZGVyIHN1cHBvcnQsIGhvd2V2ZXIgaXQgaXMgc2VyaW91c2x5IGJ1Z2dlZCBpblxuLy8gVUlXZWJWaWV3IGluIGlPUyA+PSA5LjMuMyB3aGVuIHRyaWdnZXJlZCBpbiB0b3VjaCBldmVudCBoYW5kbGVycy4gSXRcbi8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmVcbi8vIFByb21pc2UgaXMgYXZhaWxhYmxlLCB3ZSB3aWxsIHVzZSBpdDpcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0LCAkZmxvdy1kaXNhYmxlLWxpbmUgKi9cbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJvbWlzZSkpIHtcbiAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7XG4gICAgLy8gSW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbiAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAoIWlzSUUgJiYgdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG4gIE11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgTXV0YXRpb25PYnNlcnZlckNvbnN0cnVjdG9yXSdcbikpIHtcbiAgLy8gVXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcbiAgLy8gZS5nLiBQaGFudG9tSlMsIGlPUzcsIEFuZHJvaWQgNC40XG4gIC8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSlcbiAgdmFyIGNvdW50ZXIgPSAxO1xuICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaENhbGxiYWNrcyk7XG4gIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7XG4gIG9ic2VydmVyLm9ic2VydmUodGV4dE5vZGUsIHtcbiAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gIH0pO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY291bnRlciA9IChjb3VudGVyICsgMSkgJSAyO1xuICAgIHRleHROb2RlLmRhdGEgPSBTdHJpbmcoY291bnRlcik7XG4gIH07XG4gIGlzVXNpbmdNaWNyb1Rhc2sgPSB0cnVlO1xufSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldEltbWVkaWF0ZS5cbiAgLy8gVGVjaGluaWNhbGx5IGl0IGxldmVyYWdlcyB0aGUgKG1hY3JvKSB0YXNrIHF1ZXVlLFxuICAvLyBidXQgaXQgaXMgc3RpbGwgYSBiZXR0ZXIgY2hvaWNlIHRoYW4gc2V0VGltZW91dC5cbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHNldEltbWVkaWF0ZShmbHVzaENhbGxiYWNrcyk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBGYWxsYmFjayB0byBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dChmbHVzaENhbGxiYWNrcywgMCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrIChjYiwgY3R4KSB7XG4gIHZhciBfcmVzb2x2ZTtcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbChjdHgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCBjdHgsICduZXh0VGljaycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX3Jlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlKGN0eCk7XG4gICAgfVxuICB9KTtcbiAgaWYgKCFwZW5kaW5nKSB7XG4gICAgcGVuZGluZyA9IHRydWU7XG4gICAgdGltZXJGdW5jKCk7XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIFByb3h5ICovXG5cbnZhciBpbml0UHJveHk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBhbGxvd2VkR2xvYmFscyA9IG1ha2VNYXAoXG4gICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArXG4gICAgJ3BhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LCcgK1xuICAgICdNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsJyArXG4gICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgKTtcblxuICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIgK1xuICAgICAgJ3JlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyByZWFjdGl2ZSwgJyArXG4gICAgICAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgK1xuICAgICAgJ2luaXRpYWxpemluZyB0aGUgcHJvcGVydHkuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1sI0RlY2xhcmluZy1SZWFjdGl2ZS1Qcm9wZXJ0aWVzLicsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciB3YXJuUmVzZXJ2ZWRQcmVmaXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbXVzdCBiZSBhY2Nlc3NlZCB3aXRoIFxcXCIkZGF0YS5cIiArIGtleSArIFwiXFxcIiBiZWNhdXNlIFwiICtcbiAgICAgICdwcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggXCIkXCIgb3IgXCJfXCIgYXJlIG5vdCBwcm94aWVkIGluIHRoZSBWdWUgaW5zdGFuY2UgdG8gJyArXG4gICAgICAncHJldmVudCBjb25mbGljdHMgd2l0aCBWdWUgaW50ZXJuYWxzJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9hcGkvI2RhdGEnLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgaGFzUHJveHkgPVxuICAgIHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJveHkpO1xuXG4gIGlmIChoYXNQcm94eSkge1xuICAgIHZhciBpc0J1aWx0SW5Nb2RpZmllciA9IG1ha2VNYXAoJ3N0b3AscHJldmVudCxzZWxmLGN0cmwsc2hpZnQsYWx0LG1ldGEsZXhhY3QnKTtcbiAgICBjb25maWcua2V5Q29kZXMgPSBuZXcgUHJveHkoY29uZmlnLmtleUNvZGVzLCB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0J1aWx0SW5Nb2RpZmllcihrZXkpKSB7XG4gICAgICAgICAgd2FybigoXCJBdm9pZCBvdmVyd3JpdGluZyBidWlsdC1pbiBtb2RpZmllciBpbiBjb25maWcua2V5Q29kZXM6IC5cIiArIGtleSkpO1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhc0hhbmRsZXIgPSB7XG4gICAgaGFzOiBmdW5jdGlvbiBoYXMgKHRhcmdldCwga2V5KSB7XG4gICAgICB2YXIgaGFzID0ga2V5IGluIHRhcmdldDtcbiAgICAgIHZhciBpc0FsbG93ZWQgPSBhbGxvd2VkR2xvYmFscyhrZXkpIHx8XG4gICAgICAgICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnXycgJiYgIShrZXkgaW4gdGFyZ2V0LiRkYXRhKSk7XG4gICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhcyB8fCAhaXNBbGxvd2VkXG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRIYW5kbGVyID0ge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICh0YXJnZXQsIGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmICEoa2V5IGluIHRhcmdldCkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHwgT2JqZWN0LmlzRnJvemVuKHZhbCkgfHwgdmFsIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbnZhciBtYXJrO1xudmFyIG1lYXN1cmU7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwZXJmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBwZXJmICYmXG4gICAgcGVyZi5tYXJrICYmXG4gICAgcGVyZi5tZWFzdXJlICYmXG4gICAgcGVyZi5jbGVhck1hcmtzICYmXG4gICAgcGVyZi5jbGVhck1lYXN1cmVzXG4gICkge1xuICAgIG1hcmsgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBwZXJmLm1hcmsodGFnKTsgfTtcbiAgICBtZWFzdXJlID0gZnVuY3Rpb24gKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpIHtcbiAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICAgIC8vIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKVxuICAgIH07XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBub3JtYWxpemVFdmVudCA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgcGFzc2l2ZSA9IG5hbWUuY2hhckF0KDApID09PSAnJic7XG4gIG5hbWUgPSBwYXNzaXZlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBvbmNlJCQxID0gbmFtZS5jaGFyQXQoMCkgPT09ICd+JzsgLy8gUHJlZml4ZWQgbGFzdCwgY2hlY2tlZCBmaXJzdFxuICBuYW1lID0gb25jZSQkMSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgY2FwdHVyZSA9IG5hbWUuY2hhckF0KDApID09PSAnISc7XG4gIG5hbWUgPSBjYXB0dXJlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBvbmNlOiBvbmNlJCQxLFxuICAgIGNhcHR1cmU6IGNhcHR1cmUsXG4gICAgcGFzc2l2ZTogcGFzc2l2ZVxuICB9XG59KTtcblxuZnVuY3Rpb24gY3JlYXRlRm5JbnZva2VyIChmbnMsIHZtKSB7XG4gIGZ1bmN0aW9uIGludm9rZXIgKCkge1xuICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmbnMgPSBpbnZva2VyLmZucztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7XG4gICAgICB2YXIgY2xvbmVkID0gZm5zLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhjbG9uZWRbaV0sIG51bGwsIGFyZ3VtZW50cyQxLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJldHVybiBoYW5kbGVyIHJldHVybiB2YWx1ZSBmb3Igc2luZ2xlIGhhbmRsZXJzXG4gICAgICByZXR1cm4gaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoZm5zLCBudWxsLCBhcmd1bWVudHMsIHZtLCBcInYtb24gaGFuZGxlclwiKVxuICAgIH1cbiAgfVxuICBpbnZva2VyLmZucyA9IGZucztcbiAgcmV0dXJuIGludm9rZXJcbn1cblxuZnVuY3Rpb24gdXBkYXRlTGlzdGVuZXJzIChcbiAgb24sXG4gIG9sZE9uLFxuICBhZGQsXG4gIHJlbW92ZSQkMSxcbiAgY3JlYXRlT25jZUhhbmRsZXIsXG4gIHZtXG4pIHtcbiAgdmFyIG5hbWUsIGRlZiQkMSwgY3VyLCBvbGQsIGV2ZW50O1xuICBmb3IgKG5hbWUgaW4gb24pIHtcbiAgICBkZWYkJDEgPSBjdXIgPSBvbltuYW1lXTtcbiAgICBvbGQgPSBvbGRPbltuYW1lXTtcbiAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgIGlmIChpc1VuZGVmKGN1cikpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJJbnZhbGlkIGhhbmRsZXIgZm9yIGV2ZW50IFxcXCJcIiArIChldmVudC5uYW1lKSArIFwiXFxcIjogZ290IFwiICsgU3RyaW5nKGN1ciksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGQpKSB7XG4gICAgICBpZiAoaXNVbmRlZihjdXIuZm5zKSkge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZUZuSW52b2tlcihjdXIsIHZtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1RydWUoZXZlbnQub25jZSkpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVPbmNlSGFuZGxlcihldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUpO1xuICAgICAgfVxuICAgICAgYWRkKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSwgZXZlbnQucGFzc2l2ZSwgZXZlbnQucGFyYW1zKTtcbiAgICB9IGVsc2UgaWYgKGN1ciAhPT0gb2xkKSB7XG4gICAgICBvbGQuZm5zID0gY3VyO1xuICAgICAgb25bbmFtZV0gPSBvbGQ7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBvbGRPbikge1xuICAgIGlmIChpc1VuZGVmKG9uW25hbWVdKSkge1xuICAgICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAgIHJlbW92ZSQkMShldmVudC5uYW1lLCBvbGRPbltuYW1lXSwgZXZlbnQuY2FwdHVyZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBtZXJnZVZOb2RlSG9vayAoZGVmLCBob29rS2V5LCBob29rKSB7XG4gIGlmIChkZWYgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIGRlZiA9IGRlZi5kYXRhLmhvb2sgfHwgKGRlZi5kYXRhLmhvb2sgPSB7fSk7XG4gIH1cbiAgdmFyIGludm9rZXI7XG4gIHZhciBvbGRIb29rID0gZGVmW2hvb2tLZXldO1xuXG4gIGZ1bmN0aW9uIHdyYXBwZWRIb29rICgpIHtcbiAgICBob29rLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgLy8gaW1wb3J0YW50OiByZW1vdmUgbWVyZ2VkIGhvb2sgdG8gZW5zdXJlIGl0J3MgY2FsbGVkIG9ubHkgb25jZVxuICAgIC8vIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrXG4gICAgcmVtb3ZlKGludm9rZXIuZm5zLCB3cmFwcGVkSG9vayk7XG4gIH1cblxuICBpZiAoaXNVbmRlZihvbGRIb29rKSkge1xuICAgIC8vIG5vIGV4aXN0aW5nIGhvb2tcbiAgICBpbnZva2VyID0gY3JlYXRlRm5JbnZva2VyKFt3cmFwcGVkSG9va10pO1xuICB9IGVsc2Uge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc0RlZihvbGRIb29rLmZucykgJiYgaXNUcnVlKG9sZEhvb2subWVyZ2VkKSkge1xuICAgICAgLy8gYWxyZWFkeSBhIG1lcmdlZCBpbnZva2VyXG4gICAgICBpbnZva2VyID0gb2xkSG9vaztcbiAgICAgIGludm9rZXIuZm5zLnB1c2god3JhcHBlZEhvb2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBwbGFpbiBob29rXG4gICAgICBpbnZva2VyID0gY3JlYXRlRm5JbnZva2VyKFtvbGRIb29rLCB3cmFwcGVkSG9va10pO1xuICAgIH1cbiAgfVxuXG4gIGludm9rZXIubWVyZ2VkID0gdHJ1ZTtcbiAgZGVmW2hvb2tLZXldID0gaW52b2tlcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEgKFxuICBkYXRhLFxuICBDdG9yLFxuICB0YWdcbikge1xuICAvLyB3ZSBhcmUgb25seSBleHRyYWN0aW5nIHJhdyB2YWx1ZXMgaGVyZS5cbiAgLy8gdmFsaWRhdGlvbiBhbmQgZGVmYXVsdCB2YWx1ZXMgYXJlIGhhbmRsZWQgaW4gdGhlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCBpdHNlbGYuXG4gIHZhciBwcm9wT3B0aW9ucyA9IEN0b3Iub3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzVW5kZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzO1xuICB2YXIgcHJvcHMgPSBkYXRhLnByb3BzO1xuICBpZiAoaXNEZWYoYXR0cnMpIHx8IGlzRGVmKHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgdmFyIGFsdEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIGtleUluTG93ZXJDYXNlID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgIT09IGtleUluTG93ZXJDYXNlICYmXG4gICAgICAgICAgYXR0cnMgJiYgaGFzT3duKGF0dHJzLCBrZXlJbkxvd2VyQ2FzZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGlwKFxuICAgICAgICAgICAgXCJQcm9wIFxcXCJcIiArIGtleUluTG93ZXJDYXNlICsgXCJcXFwiIGlzIHBhc3NlZCB0byBjb21wb25lbnQgXCIgK1xuICAgICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodGFnIHx8IEN0b3IpKSArIFwiLCBidXQgdGhlIGRlY2xhcmVkIHByb3AgbmFtZSBpc1wiICtcbiAgICAgICAgICAgIFwiIFxcXCJcIiArIGtleSArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCBjYW1lbENhc2VkIFwiICtcbiAgICAgICAgICAgIFwicHJvcHMgbmVlZCB0byB1c2UgdGhlaXIga2ViYWItY2FzZSBlcXVpdmFsZW50cyB3aGVuIHVzaW5nIGluLURPTSBcIiArXG4gICAgICAgICAgICBcInRlbXBsYXRlcy4gWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgYWx0S2V5ICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hlY2tQcm9wKHJlcywgcHJvcHMsIGtleSwgYWx0S2V5LCB0cnVlKSB8fFxuICAgICAgY2hlY2tQcm9wKHJlcywgYXR0cnMsIGtleSwgYWx0S2V5LCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wIChcbiAgcmVzLFxuICBoYXNoLFxuICBrZXksXG4gIGFsdEtleSxcbiAgcHJlc2VydmVcbikge1xuICBpZiAoaXNEZWYoaGFzaCkpIHtcbiAgICBpZiAoaGFzT3duKGhhc2gsIGtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFtrZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2UgaWYgKGhhc093bihoYXNoLCBhbHRLZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hbYWx0S2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hbYWx0S2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxuLy8gVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGF0dGVtcHRzIHRvIG1pbmltaXplIHRoZSBuZWVkIGZvciBub3JtYWxpemF0aW9uIGJ5XG4vLyBzdGF0aWNhbGx5IGFuYWx5emluZyB0aGUgdGVtcGxhdGUgYXQgY29tcGlsZSB0aW1lLlxuLy9cbi8vIEZvciBwbGFpbiBIVE1MIG1hcmt1cCwgbm9ybWFsaXphdGlvbiBjYW4gYmUgY29tcGxldGVseSBza2lwcGVkIGJlY2F1c2UgdGhlXG4vLyBnZW5lcmF0ZWQgcmVuZGVyIGZ1bmN0aW9uIGlzIGd1YXJhbnRlZWQgdG8gcmV0dXJuIEFycmF5PFZOb2RlPi4gVGhlcmUgYXJlXG4vLyB0d28gY2FzZXMgd2hlcmUgZXh0cmEgbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQ6XG5cbi8vIDEuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbXBvbmVudHMgLSBiZWNhdXNlIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbi8vIG1heSByZXR1cm4gYW4gQXJyYXkgaW5zdGVhZCBvZiBhIHNpbmdsZSByb290LiBJbiB0aGlzIGNhc2UsIGp1c3QgYSBzaW1wbGVcbi8vIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkIC0gaWYgYW55IGNoaWxkIGlzIGFuIEFycmF5LCB3ZSBmbGF0dGVuIHRoZSB3aG9sZVxuLy8gdGhpbmcgd2l0aCBBcnJheS5wcm90b3R5cGUuY29uY2F0LiBJdCBpcyBndWFyYW50ZWVkIHRvIGJlIG9ubHkgMS1sZXZlbCBkZWVwXG4vLyBiZWNhdXNlIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhbHJlYWR5IG5vcm1hbGl6ZSB0aGVpciBvd24gY2hpbGRyZW4uXG5mdW5jdGlvbiBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuW2ldKSkge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGNoaWxkcmVuKVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2hpbGRyZW5cbn1cblxuLy8gMi4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29uc3RydWN0cyB0aGF0IGFsd2F5cyBnZW5lcmF0ZWQgbmVzdGVkIEFycmF5cyxcbi8vIGUuZy4gPHRlbXBsYXRlPiwgPHNsb3Q+LCB2LWZvciwgb3Igd2hlbiB0aGUgY2hpbGRyZW4gaXMgcHJvdmlkZWQgYnkgdXNlclxuLy8gd2l0aCBoYW5kLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucyAvIEpTWC4gSW4gc3VjaCBjYXNlcyBhIGZ1bGwgbm9ybWFsaXphdGlvblxuLy8gaXMgbmVlZGVkIHRvIGNhdGVyIHRvIGFsbCBwb3NzaWJsZSB0eXBlcyBvZiBjaGlsZHJlbiB2YWx1ZXMuXG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGlzUHJpbWl0aXZlKGNoaWxkcmVuKVxuICAgID8gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildXG4gICAgOiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKVxuICAgICAgPyBub3JtYWxpemVBcnJheUNoaWxkcmVuKGNoaWxkcmVuKVxuICAgICAgOiB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gaXNUZXh0Tm9kZSAobm9kZSkge1xuICByZXR1cm4gaXNEZWYobm9kZSkgJiYgaXNEZWYobm9kZS50ZXh0KSAmJiBpc0ZhbHNlKG5vZGUuaXNDb21tZW50KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheUNoaWxkcmVuIChjaGlsZHJlbiwgbmVzdGVkSW5kZXgpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB2YXIgaSwgYywgbGFzdEluZGV4LCBsYXN0O1xuICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjID0gY2hpbGRyZW5baV07XG4gICAgaWYgKGlzVW5kZWYoYykgfHwgdHlwZW9mIGMgPT09ICdib29sZWFuJykgeyBjb250aW51ZSB9XG4gICAgbGFzdEluZGV4ID0gcmVzLmxlbmd0aCAtIDE7XG4gICAgbGFzdCA9IHJlc1tsYXN0SW5kZXhdO1xuICAgIC8vICBuZXN0ZWRcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjKSkge1xuICAgICAgaWYgKGMubGVuZ3RoID4gMCkge1xuICAgICAgICBjID0gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjLCAoKG5lc3RlZEluZGV4IHx8ICcnKSArIFwiX1wiICsgaSkpO1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIGlmIChpc1RleHROb2RlKGNbMF0pICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyAoY1swXSkudGV4dCk7XG4gICAgICAgICAgYy5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoLmFwcGx5KHJlcywgYyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZShjKSkge1xuICAgICAgaWYgKGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICAvLyB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgU1NSIGh5ZHJhdGlvbiBiZWNhdXNlIHRleHQgbm9kZXMgYXJlXG4gICAgICAgIC8vIGVzc2VudGlhbGx5IG1lcmdlZCB3aGVuIHJlbmRlcmVkIHRvIEhUTUwgc3RyaW5nc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjKTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPT0gJycpIHtcbiAgICAgICAgLy8gY29udmVydCBwcmltaXRpdmUgdG8gdm5vZGVcbiAgICAgICAgcmVzLnB1c2goY3JlYXRlVGV4dFZOb2RlKGMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzVGV4dE5vZGUoYykgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMudGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWZhdWx0IGtleSBmb3IgbmVzdGVkIGFycmF5IGNoaWxkcmVuIChsaWtlbHkgZ2VuZXJhdGVkIGJ5IHYtZm9yKVxuICAgICAgICBpZiAoaXNUcnVlKGNoaWxkcmVuLl9pc1ZMaXN0KSAmJlxuICAgICAgICAgIGlzRGVmKGMudGFnKSAmJlxuICAgICAgICAgIGlzVW5kZWYoYy5rZXkpICYmXG4gICAgICAgICAgaXNEZWYobmVzdGVkSW5kZXgpKSB7XG4gICAgICAgICAgYy5rZXkgPSBcIl9fdmxpc3RcIiArIG5lc3RlZEluZGV4ICsgXCJfXCIgKyBpICsgXCJfX1wiO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UHJvdmlkZSAodm0pIHtcbiAgdmFyIHByb3ZpZGUgPSB2bS4kb3B0aW9ucy5wcm92aWRlO1xuICBpZiAocHJvdmlkZSkge1xuICAgIHZtLl9wcm92aWRlZCA9IHR5cGVvZiBwcm92aWRlID09PSAnZnVuY3Rpb24nXG4gICAgICA/IHByb3ZpZGUuY2FsbCh2bSlcbiAgICAgIDogcHJvdmlkZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0SW5qZWN0aW9ucyAodm0pIHtcbiAgdmFyIHJlc3VsdCA9IHJlc29sdmVJbmplY3Qodm0uJG9wdGlvbnMuaW5qZWN0LCB2bSk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhbiBpbmplY3RlZCB2YWx1ZSBkaXJlY3RseSBzaW5jZSB0aGUgY2hhbmdlcyB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHByb3ZpZGVkIGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcImluamVjdGlvbiBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCByZXN1bHRba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVJbmplY3QgKGluamVjdCwgdm0pIHtcbiAgaWYgKGluamVjdCkge1xuICAgIC8vIGluamVjdCBpcyA6YW55IGJlY2F1c2UgZmxvdyBpcyBub3Qgc21hcnQgZW5vdWdoIHRvIGZpZ3VyZSBvdXQgY2FjaGVkXG4gICAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICAgID8gUmVmbGVjdC5vd25LZXlzKGluamVjdClcbiAgICAgIDogT2JqZWN0LmtleXMoaW5qZWN0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAvLyAjNjU3NCBpbiBjYXNlIHRoZSBpbmplY3Qgb2JqZWN0IGlzIG9ic2VydmVkLi4uXG4gICAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgICB2YXIgcHJvdmlkZUtleSA9IGluamVjdFtrZXldLmZyb207XG4gICAgICB2YXIgc291cmNlID0gdm07XG4gICAgICB3aGlsZSAoc291cmNlKSB7XG4gICAgICAgIGlmIChzb3VyY2UuX3Byb3ZpZGVkICYmIGhhc093bihzb3VyY2UuX3Byb3ZpZGVkLCBwcm92aWRlS2V5KSkge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gc291cmNlLl9wcm92aWRlZFtwcm92aWRlS2V5XTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIHNvdXJjZSA9IHNvdXJjZS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgaWYgKCdkZWZhdWx0JyBpbiBpbmplY3Rba2V5XSkge1xuICAgICAgICAgIHZhciBwcm92aWRlRGVmYXVsdCA9IGluamVjdFtrZXldLmRlZmF1bHQ7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSB0eXBlb2YgcHJvdmlkZURlZmF1bHQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gcHJvdmlkZURlZmF1bHQuY2FsbCh2bSlcbiAgICAgICAgICAgIDogcHJvdmlkZURlZmF1bHQ7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm4oKFwiSW5qZWN0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBub3QgZm91bmRcIiksIHZtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cbn1cblxuLyogICovXG5cblxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgcmF3IGNoaWxkcmVuIFZOb2RlcyBpbnRvIGEgc2xvdCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVTbG90cyAoXG4gIGNoaWxkcmVuLFxuICBjb250ZXh0XG4pIHtcbiAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH1cbiAgdmFyIHNsb3RzID0ge307XG4gIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgdmFyIGRhdGEgPSBjaGlsZC5kYXRhO1xuICAgIC8vIHJlbW92ZSBzbG90IGF0dHJpYnV0ZSBpZiB0aGUgbm9kZSBpcyByZXNvbHZlZCBhcyBhIFZ1ZSBzbG90IG5vZGVcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMuc2xvdCkge1xuICAgICAgZGVsZXRlIGRhdGEuYXR0cnMuc2xvdDtcbiAgICB9XG4gICAgLy8gbmFtZWQgc2xvdHMgc2hvdWxkIG9ubHkgYmUgcmVzcGVjdGVkIGlmIHRoZSB2bm9kZSB3YXMgcmVuZGVyZWQgaW4gdGhlXG4gICAgLy8gc2FtZSBjb250ZXh0LlxuICAgIGlmICgoY2hpbGQuY29udGV4dCA9PT0gY29udGV4dCB8fCBjaGlsZC5mbkNvbnRleHQgPT09IGNvbnRleHQpICYmXG4gICAgICBkYXRhICYmIGRhdGEuc2xvdCAhPSBudWxsXG4gICAgKSB7XG4gICAgICB2YXIgbmFtZSA9IGRhdGEuc2xvdDtcbiAgICAgIHZhciBzbG90ID0gKHNsb3RzW25hbWVdIHx8IChzbG90c1tuYW1lXSA9IFtdKSk7XG4gICAgICBpZiAoY2hpbGQudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHNsb3QucHVzaC5hcHBseShzbG90LCBjaGlsZC5jaGlsZHJlbiB8fCBbXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbG90LnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAoc2xvdHMuZGVmYXVsdCB8fCAoc2xvdHMuZGVmYXVsdCA9IFtdKSkucHVzaChjaGlsZCk7XG4gICAgfVxuICB9XG4gIC8vIGlnbm9yZSBzbG90cyB0aGF0IGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZVxuICBmb3IgKHZhciBuYW1lJDEgaW4gc2xvdHMpIHtcbiAgICBpZiAoc2xvdHNbbmFtZSQxXS5ldmVyeShpc1doaXRlc3BhY2UpKSB7XG4gICAgICBkZWxldGUgc2xvdHNbbmFtZSQxXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNsb3RzXG59XG5cbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZSAobm9kZSkge1xuICByZXR1cm4gKG5vZGUuaXNDb21tZW50ICYmICFub2RlLmFzeW5jRmFjdG9yeSkgfHwgbm9kZS50ZXh0ID09PSAnICdcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3RzIChcbiAgc2xvdHMsXG4gIG5vcm1hbFNsb3RzLFxuICBwcmV2U2xvdHNcbikge1xuICB2YXIgcmVzO1xuICB2YXIgaGFzTm9ybWFsU2xvdHMgPSBPYmplY3Qua2V5cyhub3JtYWxTbG90cykubGVuZ3RoID4gMDtcbiAgdmFyIGlzU3RhYmxlID0gc2xvdHMgPyAhIXNsb3RzLiRzdGFibGUgOiAhaGFzTm9ybWFsU2xvdHM7XG4gIHZhciBrZXkgPSBzbG90cyAmJiBzbG90cy4ka2V5O1xuICBpZiAoIXNsb3RzKSB7XG4gICAgcmVzID0ge307XG4gIH0gZWxzZSBpZiAoc2xvdHMuX25vcm1hbGl6ZWQpIHtcbiAgICAvLyBmYXN0IHBhdGggMTogY2hpbGQgY29tcG9uZW50IHJlLXJlbmRlciBvbmx5LCBwYXJlbnQgZGlkIG5vdCBjaGFuZ2VcbiAgICByZXR1cm4gc2xvdHMuX25vcm1hbGl6ZWRcbiAgfSBlbHNlIGlmIChcbiAgICBpc1N0YWJsZSAmJlxuICAgIHByZXZTbG90cyAmJlxuICAgIHByZXZTbG90cyAhPT0gZW1wdHlPYmplY3QgJiZcbiAgICBrZXkgPT09IHByZXZTbG90cy4ka2V5ICYmXG4gICAgIWhhc05vcm1hbFNsb3RzICYmXG4gICAgIXByZXZTbG90cy4kaGFzTm9ybWFsXG4gICkge1xuICAgIC8vIGZhc3QgcGF0aCAyOiBzdGFibGUgc2NvcGVkIHNsb3RzIHcvIG5vIG5vcm1hbCBzbG90cyB0byBwcm94eSxcbiAgICAvLyBvbmx5IG5lZWQgdG8gbm9ybWFsaXplIG9uY2VcbiAgICByZXR1cm4gcHJldlNsb3RzXG4gIH0gZWxzZSB7XG4gICAgcmVzID0ge307XG4gICAgZm9yICh2YXIga2V5JDEgaW4gc2xvdHMpIHtcbiAgICAgIGlmIChzbG90c1trZXkkMV0gJiYga2V5JDFbMF0gIT09ICckJykge1xuICAgICAgICByZXNba2V5JDFdID0gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5JDEsIHNsb3RzW2tleSQxXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGV4cG9zZSBub3JtYWwgc2xvdHMgb24gc2NvcGVkU2xvdHNcbiAgZm9yICh2YXIga2V5JDIgaW4gbm9ybWFsU2xvdHMpIHtcbiAgICBpZiAoIShrZXkkMiBpbiByZXMpKSB7XG4gICAgICByZXNba2V5JDJdID0gcHJveHlOb3JtYWxTbG90KG5vcm1hbFNsb3RzLCBrZXkkMik7XG4gICAgfVxuICB9XG4gIC8vIGF2b3JpYXogc2VlbXMgdG8gbW9jayBhIG5vbi1leHRlbnNpYmxlICRzY29wZWRTbG90cyBvYmplY3RcbiAgLy8gYW5kIHdoZW4gdGhhdCBpcyBwYXNzZWQgZG93biB0aGlzIHdvdWxkIGNhdXNlIGFuIGVycm9yXG4gIGlmIChzbG90cyAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKHNsb3RzKSkge1xuICAgIChzbG90cykuX25vcm1hbGl6ZWQgPSByZXM7XG4gIH1cbiAgZGVmKHJlcywgJyRzdGFibGUnLCBpc1N0YWJsZSk7XG4gIGRlZihyZXMsICcka2V5Jywga2V5KTtcbiAgZGVmKHJlcywgJyRoYXNOb3JtYWwnLCBoYXNOb3JtYWxTbG90cyk7XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5LCBmbikge1xuICB2YXIgbm9ybWFsaXplZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzID0gYXJndW1lbnRzLmxlbmd0aCA/IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cykgOiBmbih7fSk7XG4gICAgcmVzID0gcmVzICYmIHR5cGVvZiByZXMgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHJlcylcbiAgICAgID8gW3Jlc10gLy8gc2luZ2xlIHZub2RlXG4gICAgICA6IG5vcm1hbGl6ZUNoaWxkcmVuKHJlcyk7XG4gICAgcmV0dXJuIHJlcyAmJiAoXG4gICAgICByZXMubGVuZ3RoID09PSAwIHx8XG4gICAgICAocmVzLmxlbmd0aCA9PT0gMSAmJiByZXNbMF0uaXNDb21tZW50KSAvLyAjOTY1OFxuICAgICkgPyB1bmRlZmluZWRcbiAgICAgIDogcmVzXG4gIH07XG4gIC8vIHRoaXMgaXMgYSBzbG90IHVzaW5nIHRoZSBuZXcgdi1zbG90IHN5bnRheCB3aXRob3V0IHNjb3BlLiBhbHRob3VnaCBpdCBpc1xuICAvLyBjb21waWxlZCBhcyBhIHNjb3BlZCBzbG90LCByZW5kZXIgZm4gdXNlcnMgd291bGQgZXhwZWN0IGl0IHRvIGJlIHByZXNlbnRcbiAgLy8gb24gdGhpcy4kc2xvdHMgYmVjYXVzZSB0aGUgdXNhZ2UgaXMgc2VtYW50aWNhbGx5IGEgbm9ybWFsIHNsb3QuXG4gIGlmIChmbi5wcm94eSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub3JtYWxTbG90cywga2V5LCB7XG4gICAgICBnZXQ6IG5vcm1hbGl6ZWQsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZWRcbn1cblxuZnVuY3Rpb24gcHJveHlOb3JtYWxTbG90KHNsb3RzLCBrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNsb3RzW2tleV07IH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyB2LWZvciBsaXN0cy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyTGlzdCAoXG4gIHZhbCxcbiAgcmVuZGVyXG4pIHtcbiAgdmFyIHJldCwgaSwgbCwga2V5cywga2V5O1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpIHx8IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbC5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGwgPSB2YWwubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIodmFsW2ldLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdmFsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcihpICsgMSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICBpZiAoaGFzU3ltYm9sICYmIHZhbFtTeW1ib2wuaXRlcmF0b3JdKSB7XG4gICAgICByZXQgPSBbXTtcbiAgICAgIHZhciBpdGVyYXRvciA9IHZhbFtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICB2YXIgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgd2hpbGUgKCFyZXN1bHQuZG9uZSkge1xuICAgICAgICByZXQucHVzaChyZW5kZXIocmVzdWx0LnZhbHVlLCByZXQubGVuZ3RoKSk7XG4gICAgICAgIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgICByZXQgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxba2V5XSwga2V5LCBpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc0RlZihyZXQpKSB7XG4gICAgcmV0ID0gW107XG4gIH1cbiAgKHJldCkuX2lzVkxpc3QgPSB0cnVlO1xuICByZXR1cm4gcmV0XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgPHNsb3Q+XG4gKi9cbmZ1bmN0aW9uIHJlbmRlclNsb3QgKFxuICBuYW1lLFxuICBmYWxsYmFjayxcbiAgcHJvcHMsXG4gIGJpbmRPYmplY3Rcbikge1xuICB2YXIgc2NvcGVkU2xvdEZuID0gdGhpcy4kc2NvcGVkU2xvdHNbbmFtZV07XG4gIHZhciBub2RlcztcbiAgaWYgKHNjb3BlZFNsb3RGbikgeyAvLyBzY29wZWQgc2xvdFxuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgaWYgKGJpbmRPYmplY3QpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc09iamVjdChiaW5kT2JqZWN0KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdzbG90IHYtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0JyxcbiAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBwcm9wcyA9IGV4dGVuZChleHRlbmQoe30sIGJpbmRPYmplY3QpLCBwcm9wcyk7XG4gICAgfVxuICAgIG5vZGVzID0gc2NvcGVkU2xvdEZuKHByb3BzKSB8fCBmYWxsYmFjaztcbiAgfSBlbHNlIHtcbiAgICBub2RlcyA9IHRoaXMuJHNsb3RzW25hbWVdIHx8IGZhbGxiYWNrO1xuICB9XG5cbiAgdmFyIHRhcmdldCA9IHByb3BzICYmIHByb3BzLnNsb3Q7XG4gIGlmICh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnLCB7IHNsb3Q6IHRhcmdldCB9LCBub2RlcylcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbm9kZXNcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIGZpbHRlcnNcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUZpbHRlciAoaWQpIHtcbiAgcmV0dXJuIHJlc29sdmVBc3NldCh0aGlzLiRvcHRpb25zLCAnZmlsdGVycycsIGlkLCB0cnVlKSB8fCBpZGVudGl0eVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNLZXlOb3RNYXRjaCAoZXhwZWN0LCBhY3R1YWwpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0KSkge1xuICAgIHJldHVybiBleHBlY3QuaW5kZXhPZihhY3R1YWwpID09PSAtMVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBleHBlY3QgIT09IGFjdHVhbFxuICB9XG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIGNoZWNraW5nIGtleUNvZGVzIGZyb20gY29uZmlnLlxuICogZXhwb3NlZCBhcyBWdWUucHJvdG90eXBlLl9rXG4gKiBwYXNzaW5nIGluIGV2ZW50S2V5TmFtZSBhcyBsYXN0IGFyZ3VtZW50IHNlcGFyYXRlbHkgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAqL1xuZnVuY3Rpb24gY2hlY2tLZXlDb2RlcyAoXG4gIGV2ZW50S2V5Q29kZSxcbiAga2V5LFxuICBidWlsdEluS2V5Q29kZSxcbiAgZXZlbnRLZXlOYW1lLFxuICBidWlsdEluS2V5TmFtZVxuKSB7XG4gIHZhciBtYXBwZWRLZXlDb2RlID0gY29uZmlnLmtleUNvZGVzW2tleV0gfHwgYnVpbHRJbktleUNvZGU7XG4gIGlmIChidWlsdEluS2V5TmFtZSAmJiBldmVudEtleU5hbWUgJiYgIWNvbmZpZy5rZXlDb2Rlc1trZXldKSB7XG4gICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2goYnVpbHRJbktleU5hbWUsIGV2ZW50S2V5TmFtZSlcbiAgfSBlbHNlIGlmIChtYXBwZWRLZXlDb2RlKSB7XG4gICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2gobWFwcGVkS2V5Q29kZSwgZXZlbnRLZXlDb2RlKVxuICB9IGVsc2UgaWYgKGV2ZW50S2V5TmFtZSkge1xuICAgIHJldHVybiBoeXBoZW5hdGUoZXZlbnRLZXlOYW1lKSAhPT0ga2V5XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIG1lcmdpbmcgdi1iaW5kPVwib2JqZWN0XCIgaW50byBhIFZOb2RlJ3MgZGF0YS5cbiAqL1xuZnVuY3Rpb24gYmluZE9iamVjdFByb3BzIChcbiAgZGF0YSxcbiAgdGFnLFxuICB2YWx1ZSxcbiAgYXNQcm9wLFxuICBpc1N5bmNcbikge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3Qgb3IgQXJyYXkgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB0b09iamVjdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YXIgaGFzaDtcbiAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgPT09ICdjbGFzcycgfHxcbiAgICAgICAgICBrZXkgPT09ICdzdHlsZScgfHxcbiAgICAgICAgICBpc1Jlc2VydmVkQXR0cmlidXRlKGtleSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaGFzaCA9IGRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMudHlwZTtcbiAgICAgICAgICBoYXNoID0gYXNQcm9wIHx8IGNvbmZpZy5tdXN0VXNlUHJvcCh0YWcsIHR5cGUsIGtleSlcbiAgICAgICAgICAgID8gZGF0YS5kb21Qcm9wcyB8fCAoZGF0YS5kb21Qcm9wcyA9IHt9KVxuICAgICAgICAgICAgOiBkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYW1lbGl6ZWRLZXkgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgICBpZiAoIShjYW1lbGl6ZWRLZXkgaW4gaGFzaCkgJiYgIShoeXBoZW5hdGVkS2V5IGluIGhhc2gpKSB7XG4gICAgICAgICAgaGFzaFtrZXldID0gdmFsdWVba2V5XTtcblxuICAgICAgICAgIGlmIChpc1N5bmMpIHtcbiAgICAgICAgICAgIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gICAgICAgICAgICBvblsoXCJ1cGRhdGU6XCIgKyBrZXkpXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFsdWVba2V5XSA9ICRldmVudDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIGxvb3AoIGtleSApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHN0YXRpYyB0cmVlcy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU3RhdGljIChcbiAgaW5kZXgsXG4gIGlzSW5Gb3Jcbikge1xuICB2YXIgY2FjaGVkID0gdGhpcy5fc3RhdGljVHJlZXMgfHwgKHRoaXMuX3N0YXRpY1RyZWVzID0gW10pO1xuICB2YXIgdHJlZSA9IGNhY2hlZFtpbmRleF07XG4gIC8vIGlmIGhhcyBhbHJlYWR5LXJlbmRlcmVkIHN0YXRpYyB0cmVlIGFuZCBub3QgaW5zaWRlIHYtZm9yLFxuICAvLyB3ZSBjYW4gcmV1c2UgdGhlIHNhbWUgdHJlZS5cbiAgaWYgKHRyZWUgJiYgIWlzSW5Gb3IpIHtcbiAgICByZXR1cm4gdHJlZVxuICB9XG4gIC8vIG90aGVyd2lzZSwgcmVuZGVyIGEgZnJlc2ggdHJlZS5cbiAgdHJlZSA9IGNhY2hlZFtpbmRleF0gPSB0aGlzLiRvcHRpb25zLnN0YXRpY1JlbmRlckZuc1tpbmRleF0uY2FsbChcbiAgICB0aGlzLl9yZW5kZXJQcm94eSxcbiAgICBudWxsLFxuICAgIHRoaXMgLy8gZm9yIHJlbmRlciBmbnMgZ2VuZXJhdGVkIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCB0ZW1wbGF0ZXNcbiAgKTtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX3N0YXRpY19fXCIgKyBpbmRleCksIGZhbHNlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3Igdi1vbmNlLlxuICogRWZmZWN0aXZlbHkgaXQgbWVhbnMgbWFya2luZyB0aGUgbm9kZSBhcyBzdGF0aWMgd2l0aCBhIHVuaXF1ZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIG1hcmtPbmNlIChcbiAgdHJlZSxcbiAgaW5kZXgsXG4gIGtleVxuKSB7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19vbmNlX19cIiArIGluZGV4ICsgKGtleSA/IChcIl9cIiArIGtleSkgOiBcIlwiKSksIHRydWUpO1xuICByZXR1cm4gdHJlZVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljIChcbiAgdHJlZSxcbiAga2V5LFxuICBpc09uY2Vcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh0cmVlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRyZWVbaV0gJiYgdHlwZW9mIHRyZWVbaV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG1hcmtTdGF0aWNOb2RlKHRyZWVbaV0sIChrZXkgKyBcIl9cIiArIGkpLCBpc09uY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBtYXJrU3RhdGljTm9kZSh0cmVlLCBrZXksIGlzT25jZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpY05vZGUgKG5vZGUsIGtleSwgaXNPbmNlKSB7XG4gIG5vZGUuaXNTdGF0aWMgPSB0cnVlO1xuICBub2RlLmtleSA9IGtleTtcbiAgbm9kZS5pc09uY2UgPSBpc09uY2U7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kT2JqZWN0TGlzdGVuZXJzIChkYXRhLCB2YWx1ZSkge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LW9uIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgb24gPSBkYXRhLm9uID0gZGF0YS5vbiA/IGV4dGVuZCh7fSwgZGF0YS5vbikgOiB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICB2YXIgZXhpc3RpbmcgPSBvbltrZXldO1xuICAgICAgICB2YXIgb3VycyA9IHZhbHVlW2tleV07XG4gICAgICAgIG9uW2tleV0gPSBleGlzdGluZyA/IFtdLmNvbmNhdChleGlzdGluZywgb3VycykgOiBvdXJzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVNjb3BlZFNsb3RzIChcbiAgZm5zLCAvLyBzZWUgZmxvdy92bm9kZVxuICByZXMsXG4gIC8vIHRoZSBmb2xsb3dpbmcgYXJlIGFkZGVkIGluIDIuNlxuICBoYXNEeW5hbWljS2V5cyxcbiAgY29udGVudEhhc2hLZXlcbikge1xuICByZXMgPSByZXMgfHwgeyAkc3RhYmxlOiAhaGFzRHluYW1pY0tleXMgfTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2xvdCA9IGZuc1tpXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzbG90KSkge1xuICAgICAgcmVzb2x2ZVNjb3BlZFNsb3RzKHNsb3QsIHJlcywgaGFzRHluYW1pY0tleXMpO1xuICAgIH0gZWxzZSBpZiAoc2xvdCkge1xuICAgICAgLy8gbWFya2VyIGZvciByZXZlcnNlIHByb3h5aW5nIHYtc2xvdCB3aXRob3V0IHNjb3BlIG9uIHRoaXMuJHNsb3RzXG4gICAgICBpZiAoc2xvdC5wcm94eSkge1xuICAgICAgICBzbG90LmZuLnByb3h5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJlc1tzbG90LmtleV0gPSBzbG90LmZuO1xuICAgIH1cbiAgfVxuICBpZiAoY29udGVudEhhc2hLZXkpIHtcbiAgICAocmVzKS4ka2V5ID0gY29udGVudEhhc2hLZXk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZER5bmFtaWNLZXlzIChiYXNlT2JqLCB2YWx1ZXMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIga2V5ID0gdmFsdWVzW2ldO1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkpIHtcbiAgICAgIGJhc2VPYmpbdmFsdWVzW2ldXSA9IHZhbHVlc1tpICsgMV07XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGtleSAhPT0gJycgJiYga2V5ICE9PSBudWxsKSB7XG4gICAgICAvLyBudWxsIGlzIGEgc3BlaWNhbCB2YWx1ZSBmb3IgZXhwbGljaXRseSByZW1vdmluZyBhIGJpbmRpbmdcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkludmFsaWQgdmFsdWUgZm9yIGR5bmFtaWMgZGlyZWN0aXZlIGFyZ3VtZW50IChleHBlY3RlZCBzdHJpbmcgb3IgbnVsbCk6IFwiICsga2V5KSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJhc2VPYmpcbn1cblxuLy8gaGVscGVyIHRvIGR5bmFtaWNhbGx5IGFwcGVuZCBtb2RpZmllciBydW50aW1lIG1hcmtlcnMgdG8gZXZlbnQgbmFtZXMuXG4vLyBlbnN1cmUgb25seSBhcHBlbmQgd2hlbiB2YWx1ZSBpcyBhbHJlYWR5IHN0cmluZywgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgY2FzdFxuLy8gdG8gc3RyaW5nIGFuZCBjYXVzZSB0aGUgdHlwZSBjaGVjayB0byBtaXNzLlxuZnVuY3Rpb24gcHJlcGVuZE1vZGlmaWVyICh2YWx1ZSwgc3ltYm9sKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gc3ltYm9sICsgdmFsdWUgOiB2YWx1ZVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5zdGFsbFJlbmRlckhlbHBlcnMgKHRhcmdldCkge1xuICB0YXJnZXQuX28gPSBtYXJrT25jZTtcbiAgdGFyZ2V0Ll9uID0gdG9OdW1iZXI7XG4gIHRhcmdldC5fcyA9IHRvU3RyaW5nO1xuICB0YXJnZXQuX2wgPSByZW5kZXJMaXN0O1xuICB0YXJnZXQuX3QgPSByZW5kZXJTbG90O1xuICB0YXJnZXQuX3EgPSBsb29zZUVxdWFsO1xuICB0YXJnZXQuX2kgPSBsb29zZUluZGV4T2Y7XG4gIHRhcmdldC5fbSA9IHJlbmRlclN0YXRpYztcbiAgdGFyZ2V0Ll9mID0gcmVzb2x2ZUZpbHRlcjtcbiAgdGFyZ2V0Ll9rID0gY2hlY2tLZXlDb2RlcztcbiAgdGFyZ2V0Ll9iID0gYmluZE9iamVjdFByb3BzO1xuICB0YXJnZXQuX3YgPSBjcmVhdGVUZXh0Vk5vZGU7XG4gIHRhcmdldC5fZSA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gIHRhcmdldC5fdSA9IHJlc29sdmVTY29wZWRTbG90cztcbiAgdGFyZ2V0Ll9nID0gYmluZE9iamVjdExpc3RlbmVycztcbiAgdGFyZ2V0Ll9kID0gYmluZER5bmFtaWNLZXlzO1xuICB0YXJnZXQuX3AgPSBwcmVwZW5kTW9kaWZpZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCAoXG4gIGRhdGEsXG4gIHByb3BzLFxuICBjaGlsZHJlbixcbiAgcGFyZW50LFxuICBDdG9yXG4pIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIC8vIGVuc3VyZSB0aGUgY3JlYXRlRWxlbWVudCBmdW5jdGlvbiBpbiBmdW5jdGlvbmFsIGNvbXBvbmVudHNcbiAgLy8gZ2V0cyBhIHVuaXF1ZSBjb250ZXh0IC0gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIGNvcnJlY3QgbmFtZWQgc2xvdCBjaGVja1xuICB2YXIgY29udGV4dFZtO1xuICBpZiAoaGFzT3duKHBhcmVudCwgJ191aWQnKSkge1xuICAgIGNvbnRleHRWbSA9IE9iamVjdC5jcmVhdGUocGFyZW50KTtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBjb250ZXh0Vm0uX29yaWdpbmFsID0gcGFyZW50O1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjb250ZXh0IHZtIHBhc3NlZCBpbiBpcyBhIGZ1bmN0aW9uYWwgY29udGV4dCBhcyB3ZWxsLlxuICAgIC8vIGluIHRoaXMgY2FzZSB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB3ZSBhcmUgYWJsZSB0byBnZXQgYSBob2xkIHRvIHRoZVxuICAgIC8vIHJlYWwgY29udGV4dCBpbnN0YW5jZS5cbiAgICBjb250ZXh0Vm0gPSBwYXJlbnQ7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcGFyZW50ID0gcGFyZW50Ll9vcmlnaW5hbDtcbiAgfVxuICB2YXIgaXNDb21waWxlZCA9IGlzVHJ1ZShvcHRpb25zLl9jb21waWxlZCk7XG4gIHZhciBuZWVkTm9ybWFsaXphdGlvbiA9ICFpc0NvbXBpbGVkO1xuXG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5saXN0ZW5lcnMgPSBkYXRhLm9uIHx8IGVtcHR5T2JqZWN0O1xuICB0aGlzLmluamVjdGlvbnMgPSByZXNvbHZlSW5qZWN0KG9wdGlvbnMuaW5qZWN0LCBwYXJlbnQpO1xuICB0aGlzLnNsb3RzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcyQxLiRzbG90cykge1xuICAgICAgbm9ybWFsaXplU2NvcGVkU2xvdHMoXG4gICAgICAgIGRhdGEuc2NvcGVkU2xvdHMsXG4gICAgICAgIHRoaXMkMS4kc2xvdHMgPSByZXNvbHZlU2xvdHMoY2hpbGRyZW4sIHBhcmVudClcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzJDEuJHNsb3RzXG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzY29wZWRTbG90cycsICh7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICByZXR1cm4gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy5zbG90cygpKVxuICAgIH1cbiAgfSkpO1xuXG4gIC8vIHN1cHBvcnQgZm9yIGNvbXBpbGVkIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGlzQ29tcGlsZWQpIHtcbiAgICAvLyBleHBvc2luZyAkb3B0aW9ucyBmb3IgcmVuZGVyU3RhdGljKClcbiAgICB0aGlzLiRvcHRpb25zID0gb3B0aW9ucztcbiAgICAvLyBwcmUtcmVzb2x2ZSBzbG90cyBmb3IgcmVuZGVyU2xvdCgpXG4gICAgdGhpcy4kc2xvdHMgPSB0aGlzLnNsb3RzKCk7XG4gICAgdGhpcy4kc2NvcGVkU2xvdHMgPSBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLiRzbG90cyk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5fc2NvcGVJZCkge1xuICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xuICAgICAgdmFyIHZub2RlID0gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTtcbiAgICAgIGlmICh2bm9kZSAmJiAhQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgdm5vZGUuZm5TY29wZUlkID0gb3B0aW9ucy5fc2NvcGVJZDtcbiAgICAgICAgdm5vZGUuZm5Db250ZXh0ID0gcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZub2RlXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7IH07XG4gIH1cbn1cblxuaW5zdGFsbFJlbmRlckhlbHBlcnMoRnVuY3Rpb25hbFJlbmRlckNvbnRleHQucHJvdG90eXBlKTtcblxuZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCAoXG4gIEN0b3IsXG4gIHByb3BzRGF0YSxcbiAgZGF0YSxcbiAgY29udGV4dFZtLFxuICBjaGlsZHJlblxuKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgcHJvcHMgPSB7fTtcbiAgdmFyIHByb3BPcHRpb25zID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzRGVmKHByb3BPcHRpb25zKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEgfHwgZW1wdHlPYmplY3QpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNEZWYoZGF0YS5hdHRycykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5hdHRycyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YS5wcm9wcykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5wcm9wcyk7IH1cbiAgfVxuXG4gIHZhciByZW5kZXJDb250ZXh0ID0gbmV3IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0KFxuICAgIGRhdGEsXG4gICAgcHJvcHMsXG4gICAgY2hpbGRyZW4sXG4gICAgY29udGV4dFZtLFxuICAgIEN0b3JcbiAgKTtcblxuICB2YXIgdm5vZGUgPSBvcHRpb25zLnJlbmRlci5jYWxsKG51bGwsIHJlbmRlckNvbnRleHQuX2MsIHJlbmRlckNvbnRleHQpO1xuXG4gIGlmICh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGUsIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgdmFyIHZub2RlcyA9IG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlKSB8fCBbXTtcbiAgICB2YXIgcmVzID0gbmV3IEFycmF5KHZub2Rlcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXNbaV0gPSBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2Rlc1tpXSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuZnVuY3Rpb24gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCAodm5vZGUsIGRhdGEsIGNvbnRleHRWbSwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCkge1xuICAvLyAjNzgxNyBjbG9uZSBub2RlIGJlZm9yZSBzZXR0aW5nIGZuQ29udGV4dCwgb3RoZXJ3aXNlIGlmIHRoZSBub2RlIGlzIHJldXNlZFxuICAvLyAoZS5nLiBpdCB3YXMgZnJvbSBhIGNhY2hlZCBub3JtYWwgc2xvdCkgdGhlIGZuQ29udGV4dCBjYXVzZXMgbmFtZWQgc2xvdHNcbiAgLy8gdGhhdCBzaG91bGQgbm90IGJlIG1hdGNoZWQgdG8gbWF0Y2guXG4gIHZhciBjbG9uZSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICBjbG9uZS5mbkNvbnRleHQgPSBjb250ZXh0Vm07XG4gIGNsb25lLmZuT3B0aW9ucyA9IG9wdGlvbnM7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgKGNsb25lLmRldnRvb2xzTWV0YSA9IGNsb25lLmRldnRvb2xzTWV0YSB8fCB7fSkucmVuZGVyQ29udGV4dCA9IHJlbmRlckNvbnRleHQ7XG4gIH1cbiAgaWYgKGRhdGEuc2xvdCkge1xuICAgIChjbG9uZS5kYXRhIHx8IChjbG9uZS5kYXRhID0ge30pKS5zbG90ID0gZGF0YS5zbG90O1xuICB9XG4gIHJldHVybiBjbG9uZVxufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzICh0bywgZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuICAgIHRvW2NhbWVsaXplKGtleSldID0gZnJvbVtrZXldO1xuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbmxpbmUgaG9va3MgdG8gYmUgaW52b2tlZCBvbiBjb21wb25lbnQgVk5vZGVzIGR1cmluZyBwYXRjaFxudmFyIGNvbXBvbmVudFZOb2RlSG9va3MgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICBpZiAoXG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJlxuICAgICAgIXZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCAmJlxuICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmVcbiAgICApIHtcbiAgICAgIC8vIGtlcHQtYWxpdmUgY29tcG9uZW50cywgdHJlYXQgYXMgYSBwYXRjaFxuICAgICAgdmFyIG1vdW50ZWROb2RlID0gdm5vZGU7IC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICAgIGNvbXBvbmVudFZOb2RlSG9va3MucHJlcGF0Y2gobW91bnRlZE5vZGUsIG1vdW50ZWROb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlKFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgYWN0aXZlSW5zdGFuY2VcbiAgICAgICk7XG4gICAgICBjaGlsZC4kbW91bnQoaHlkcmF0aW5nID8gdm5vZGUuZWxtIDogdW5kZWZpbmVkLCBoeWRyYXRpbmcpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwYXRjaDogZnVuY3Rpb24gcHJlcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBvcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIHVwZGF0ZUNoaWxkQ29tcG9uZW50KFxuICAgICAgY2hpbGQsXG4gICAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgICAgb3B0aW9ucy5saXN0ZW5lcnMsIC8vIHVwZGF0ZWQgbGlzdGVuZXJzXG4gICAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxuICAgICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gdm5vZGUuY29udGV4dDtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG4gICAgfVxuICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgaWYgKGNvbnRleHQuX2lzTW91bnRlZCkge1xuICAgICAgICAvLyB2dWUtcm91dGVyIzEyMTJcbiAgICAgICAgLy8gRHVyaW5nIHVwZGF0ZXMsIGEga2VwdC1hbGl2ZSBjb21wb25lbnQncyBjaGlsZCBjb21wb25lbnRzIG1heVxuICAgICAgICAvLyBjaGFuZ2UsIHNvIGRpcmVjdGx5IHdhbGtpbmcgdGhlIHRyZWUgaGVyZSBtYXkgY2FsbCBhY3RpdmF0ZWQgaG9va3NcbiAgICAgICAgLy8gb24gaW5jb3JyZWN0IGNoaWxkcmVuLiBJbnN0ZWFkIHdlIHB1c2ggdGhlbSBpbnRvIGEgcXVldWUgd2hpY2ggd2lsbFxuICAgICAgICAvLyBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHdob2xlIHBhdGNoIHByb2Nlc3MgZW5kZWQuXG4gICAgICAgIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgaG9va3NUb01lcmdlID0gT2JqZWN0LmtleXMoY29tcG9uZW50Vk5vZGVIb29rcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gIEN0b3IsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICBpZiAoaXNVbmRlZihDdG9yKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcblxuICAvLyBwbGFpbiBvcHRpb25zIG9iamVjdDogdHVybiBpdCBpbnRvIGEgY29uc3RydWN0b3JcbiAgaWYgKGlzT2JqZWN0KEN0b3IpKSB7XG4gICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgfVxuXG4gIC8vIGlmIGF0IHRoaXMgc3RhZ2UgaXQncyBub3QgYSBjb25zdHJ1Y3RvciBvciBhbiBhc3luYyBjb21wb25lbnQgZmFjdG9yeSxcbiAgLy8gcmVqZWN0LlxuICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybigoXCJJbnZhbGlkIENvbXBvbmVudCBkZWZpbml0aW9uOiBcIiArIChTdHJpbmcoQ3RvcikpKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gYXN5bmMgY29tcG9uZW50XG4gIHZhciBhc3luY0ZhY3Rvcnk7XG4gIGlmIChpc1VuZGVmKEN0b3IuY2lkKSkge1xuICAgIGFzeW5jRmFjdG9yeSA9IEN0b3I7XG4gICAgQ3RvciA9IHJlc29sdmVBc3luY0NvbXBvbmVudChhc3luY0ZhY3RvcnksIGJhc2VDdG9yKTtcbiAgICBpZiAoQ3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciBub2RlIGZvciBhc3luYyBjb21wb25lbnQsIHdoaWNoIGlzIHJlbmRlcmVkXG4gICAgICAvLyBhcyBhIGNvbW1lbnQgbm9kZSBidXQgcHJlc2VydmVzIGFsbCB0aGUgcmF3IGluZm9ybWF0aW9uIGZvciB0aGUgbm9kZS5cbiAgICAgIC8vIHRoZSBpbmZvcm1hdGlvbiB3aWxsIGJlIHVzZWQgZm9yIGFzeW5jIHNlcnZlci1yZW5kZXJpbmcgYW5kIGh5ZHJhdGlvbi5cbiAgICAgIHJldHVybiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyKFxuICAgICAgICBhc3luY0ZhY3RvcnksXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICB0YWdcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBkYXRhID0gZGF0YSB8fCB7fTtcblxuICAvLyByZXNvbHZlIGNvbnN0cnVjdG9yIG9wdGlvbnMgaW4gY2FzZSBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGFmdGVyXG4gIC8vIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBjcmVhdGlvblxuICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpO1xuXG4gIC8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBkYXRhIGludG8gcHJvcHMgJiBldmVudHNcbiAgaWYgKGlzRGVmKGRhdGEubW9kZWwpKSB7XG4gICAgdHJhbnNmb3JtTW9kZWwoQ3Rvci5vcHRpb25zLCBkYXRhKTtcbiAgfVxuXG4gIC8vIGV4dHJhY3QgcHJvcHNcbiAgdmFyIHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3RvciwgdGFnKTtcblxuICAvLyBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5mdW5jdGlvbmFsKSkge1xuICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pXG4gIH1cblxuICAvLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xuICAvLyBjaGlsZCBjb21wb25lbnQgbGlzdGVuZXJzIGluc3RlYWQgb2YgRE9NIGxpc3RlbmVyc1xuICB2YXIgbGlzdGVuZXJzID0gZGF0YS5vbjtcbiAgLy8gcmVwbGFjZSB3aXRoIGxpc3RlbmVycyB3aXRoIC5uYXRpdmUgbW9kaWZpZXJcbiAgLy8gc28gaXQgZ2V0cyBwcm9jZXNzZWQgZHVyaW5nIHBhcmVudCBjb21wb25lbnQgcGF0Y2guXG4gIGRhdGEub24gPSBkYXRhLm5hdGl2ZU9uO1xuXG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmFic3RyYWN0KSkge1xuICAgIC8vIGFic3RyYWN0IGNvbXBvbmVudHMgZG8gbm90IGtlZXAgYW55dGhpbmdcbiAgICAvLyBvdGhlciB0aGFuIHByb3BzICYgbGlzdGVuZXJzICYgc2xvdFxuXG4gICAgLy8gd29yayBhcm91bmQgZmxvd1xuICAgIHZhciBzbG90ID0gZGF0YS5zbG90O1xuICAgIGRhdGEgPSB7fTtcbiAgICBpZiAoc2xvdCkge1xuICAgICAgZGF0YS5zbG90ID0gc2xvdDtcbiAgICB9XG4gIH1cblxuICAvLyBpbnN0YWxsIGNvbXBvbmVudCBtYW5hZ2VtZW50IGhvb2tzIG9udG8gdGhlIHBsYWNlaG9sZGVyIG5vZGVcbiAgaW5zdGFsbENvbXBvbmVudEhvb2tzKGRhdGEpO1xuXG4gIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIHZub2RlXG4gIHZhciBuYW1lID0gQ3Rvci5vcHRpb25zLm5hbWUgfHwgdGFnO1xuICB2YXIgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgKFwidnVlLWNvbXBvbmVudC1cIiArIChDdG9yLmNpZCkgKyAobmFtZSA/IChcIi1cIiArIG5hbWUpIDogJycpKSxcbiAgICBkYXRhLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0LFxuICAgIHsgQ3RvcjogQ3RvciwgcHJvcHNEYXRhOiBwcm9wc0RhdGEsIGxpc3RlbmVyczogbGlzdGVuZXJzLCB0YWc6IHRhZywgY2hpbGRyZW46IGNoaWxkcmVuIH0sXG4gICAgYXN5bmNGYWN0b3J5XG4gICk7XG5cbiAgcmV0dXJuIHZub2RlXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUgKFxuICB2bm9kZSwgLy8gd2Uga25vdyBpdCdzIE1vdW50ZWRDb21wb25lbnRWTm9kZSBidXQgZmxvdyBkb2Vzbid0XG4gIHBhcmVudCAvLyBhY3RpdmVJbnN0YW5jZSBpbiBsaWZlY3ljbGUgc3RhdGVcbikge1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBfaXNDb21wb25lbnQ6IHRydWUsXG4gICAgX3BhcmVudFZub2RlOiB2bm9kZSxcbiAgICBwYXJlbnQ6IHBhcmVudFxuICB9O1xuICAvLyBjaGVjayBpbmxpbmUtdGVtcGxhdGUgcmVuZGVyIGZ1bmN0aW9uc1xuICB2YXIgaW5saW5lVGVtcGxhdGUgPSB2bm9kZS5kYXRhLmlubGluZVRlbXBsYXRlO1xuICBpZiAoaXNEZWYoaW5saW5lVGVtcGxhdGUpKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSBpbmxpbmVUZW1wbGF0ZS5yZW5kZXI7XG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBpbmxpbmVUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnM7XG4gIH1cbiAgcmV0dXJuIG5ldyB2bm9kZS5jb21wb25lbnRPcHRpb25zLkN0b3Iob3B0aW9ucylcbn1cblxuZnVuY3Rpb24gaW5zdGFsbENvbXBvbmVudEhvb2tzIChkYXRhKSB7XG4gIHZhciBob29rcyA9IGRhdGEuaG9vayB8fCAoZGF0YS5ob29rID0ge30pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzVG9NZXJnZS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBob29rc1RvTWVyZ2VbaV07XG4gICAgdmFyIGV4aXN0aW5nID0gaG9va3Nba2V5XTtcbiAgICB2YXIgdG9NZXJnZSA9IGNvbXBvbmVudFZOb2RlSG9va3Nba2V5XTtcbiAgICBpZiAoZXhpc3RpbmcgIT09IHRvTWVyZ2UgJiYgIShleGlzdGluZyAmJiBleGlzdGluZy5fbWVyZ2VkKSkge1xuICAgICAgaG9va3Nba2V5XSA9IGV4aXN0aW5nID8gbWVyZ2VIb29rJDEodG9NZXJnZSwgZXhpc3RpbmcpIDogdG9NZXJnZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2VIb29rJDEgKGYxLCBmMikge1xuICB2YXIgbWVyZ2VkID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAvLyBmbG93IGNvbXBsYWlucyBhYm91dCBleHRyYSBhcmdzIHdoaWNoIGlzIHdoeSB3ZSB1c2UgYW55XG4gICAgZjEoYSwgYik7XG4gICAgZjIoYSwgYik7XG4gIH07XG4gIG1lcmdlZC5fbWVyZ2VkID0gdHJ1ZTtcbiAgcmV0dXJuIG1lcmdlZFxufVxuXG4vLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgaW5mbyAodmFsdWUgYW5kIGNhbGxiYWNrKSBpbnRvXG4vLyBwcm9wIGFuZCBldmVudCBoYW5kbGVyIHJlc3BlY3RpdmVseS5cbmZ1bmN0aW9uIHRyYW5zZm9ybU1vZGVsIChvcHRpb25zLCBkYXRhKSB7XG4gIHZhciBwcm9wID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5wcm9wKSB8fCAndmFsdWUnO1xuICB2YXIgZXZlbnQgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLmV2ZW50KSB8fCAnaW5wdXQnXG4gIDsoZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KSlbcHJvcF0gPSBkYXRhLm1vZGVsLnZhbHVlO1xuICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICB2YXIgZXhpc3RpbmcgPSBvbltldmVudF07XG4gIHZhciBjYWxsYmFjayA9IGRhdGEubW9kZWwuY2FsbGJhY2s7XG4gIGlmIChpc0RlZihleGlzdGluZykpIHtcbiAgICBpZiAoXG4gICAgICBBcnJheS5pc0FycmF5KGV4aXN0aW5nKVxuICAgICAgICA/IGV4aXN0aW5nLmluZGV4T2YoY2FsbGJhY2spID09PSAtMVxuICAgICAgICA6IGV4aXN0aW5nICE9PSBjYWxsYmFja1xuICAgICkge1xuICAgICAgb25bZXZlbnRdID0gW2NhbGxiYWNrXS5jb25jYXQoZXhpc3RpbmcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvbltldmVudF0gPSBjYWxsYmFjaztcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIFNJTVBMRV9OT1JNQUxJWkUgPSAxO1xudmFyIEFMV0FZU19OT1JNQUxJWkUgPSAyO1xuXG4vLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxuLy8gd2l0aG91dCBnZXR0aW5nIHllbGxlZCBhdCBieSBmbG93XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGUsXG4gIGFsd2F5c05vcm1hbGl6ZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzUHJpbWl0aXZlKGRhdGEpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBjaGlsZHJlbjtcbiAgICBjaGlsZHJlbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoaXNUcnVlKGFsd2F5c05vcm1hbGl6ZSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IEFMV0FZU19OT1JNQUxJWkU7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsIHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlKVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlXG4pIHtcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKChkYXRhKS5fX29iX18pKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJBdm9pZCB1c2luZyBvYnNlcnZlZCBkYXRhIG9iamVjdCBhcyB2bm9kZSBkYXRhOiBcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkgKyBcIlxcblwiICtcbiAgICAgICdBbHdheXMgY3JlYXRlIGZyZXNoIHZub2RlIGRhdGEgb2JqZWN0cyBpbiBlYWNoIHJlbmRlciEnLFxuICAgICAgY29udGV4dFxuICAgICk7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIG9iamVjdCBzeW50YXggaW4gdi1iaW5kXG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmlzKSkge1xuICAgIHRhZyA9IGRhdGEuaXM7XG4gIH1cbiAgaWYgKCF0YWcpIHtcbiAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tcHJpbWl0aXZlIGtleVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEua2V5KSAmJiAhaXNQcmltaXRpdmUoZGF0YS5rZXkpXG4gICkge1xuICAgIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCB1c2luZyBub24tcHJpbWl0aXZlIHZhbHVlIGFzIGtleSwgJyArXG4gICAgICAgICd1c2Ugc3RyaW5nL251bWJlciB2YWx1ZSBpbnN0ZWFkLicsXG4gICAgICAgIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIC8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3RcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmXG4gICAgdHlwZW9mIGNoaWxkcmVuWzBdID09PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIGRhdGEuc2NvcGVkU2xvdHMgPSB7IGRlZmF1bHQ6IGNoaWxkcmVuWzBdIH07XG4gICAgY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgfVxuICBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IEFMV0FZU19OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IG5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfSBlbHNlIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gU0lNUExFX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9XG4gIHZhciB2bm9kZSwgbnM7XG4gIGlmICh0eXBlb2YgdGFnID09PSAnc3RyaW5nJykge1xuICAgIHZhciBDdG9yO1xuICAgIG5zID0gKGNvbnRleHQuJHZub2RlICYmIGNvbnRleHQuJHZub2RlLm5zKSB8fCBjb25maWcuZ2V0VGFnTmFtZXNwYWNlKHRhZyk7XG4gICAgaWYgKGNvbmZpZy5pc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICAgIC8vIHBsYXRmb3JtIGJ1aWx0LWluIGVsZW1lbnRzXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCghZGF0YSB8fCAhZGF0YS5wcmUpICYmIGlzRGVmKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIGlmIChpc0RlZih2bm9kZSkpIHtcbiAgICBpZiAoaXNEZWYobnMpKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgIGlmIChpc0RlZihkYXRhKSkgeyByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKTsgfVxuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMsIGZvcmNlKSB7XG4gIHZub2RlLm5zID0gbnM7XG4gIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuICAgIG5zID0gdW5kZWZpbmVkO1xuICAgIGZvcmNlID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgKFxuICAgICAgICBpc1VuZGVmKGNoaWxkLm5zKSB8fCAoaXNUcnVlKGZvcmNlKSAmJiBjaGlsZC50YWcgIT09ICdzdmcnKSkpIHtcbiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMsIGZvcmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gcmVmICM1MzE4XG4vLyBuZWNlc3NhcnkgdG8gZW5zdXJlIHBhcmVudCByZS1yZW5kZXIgd2hlbiBkZWVwIGJpbmRpbmdzIGxpa2UgOnN0eWxlIGFuZFxuLy8gOmNsYXNzIGFyZSB1c2VkIG9uIHNsb3Qgbm9kZXNcbmZ1bmN0aW9uIHJlZ2lzdGVyRGVlcEJpbmRpbmdzIChkYXRhKSB7XG4gIGlmIChpc09iamVjdChkYXRhLnN0eWxlKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuc3R5bGUpO1xuICB9XG4gIGlmIChpc09iamVjdChkYXRhLmNsYXNzKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuY2xhc3MpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzXG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gIHZhciBwYXJlbnRWbm9kZSA9IHZtLiR2bm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gIHZtLiRzY29wZWRTbG90cyA9IGVtcHR5T2JqZWN0O1xuICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxuICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG5cbiAgLy8gJGF0dHJzICYgJGxpc3RlbmVycyBhcmUgZXhwb3NlZCBmb3IgZWFzaWVyIEhPQyBjcmVhdGlvbi5cbiAgLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZFxuICB2YXIgcGFyZW50RGF0YSA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmRhdGE7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGF0dHJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkbGlzdGVuZXJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gIH1cbn1cblxudmFyIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XG5cbmZ1bmN0aW9uIHJlbmRlck1peGluIChWdWUpIHtcbiAgLy8gaW5zdGFsbCBydW50aW1lIGNvbnZlbmllbmNlIGhlbHBlcnNcbiAgaW5zdGFsbFJlbmRlckhlbHBlcnMoVnVlLnByb3RvdHlwZSk7XG5cbiAgVnVlLnByb3RvdHlwZS4kbmV4dFRpY2sgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gbmV4dFRpY2soZm4sIHRoaXMpXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS5fcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHJlZiA9IHZtLiRvcHRpb25zO1xuICAgIHZhciByZW5kZXIgPSByZWYucmVuZGVyO1xuICAgIHZhciBfcGFyZW50Vm5vZGUgPSByZWYuX3BhcmVudFZub2RlO1xuXG4gICAgaWYgKF9wYXJlbnRWbm9kZSkge1xuICAgICAgdm0uJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoXG4gICAgICAgIF9wYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB2bS4kc2xvdHMsXG4gICAgICAgIHZtLiRzY29wZWRTbG90c1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBzZXQgcGFyZW50IHZub2RlLiB0aGlzIGFsbG93cyByZW5kZXIgZnVuY3Rpb25zIHRvIGhhdmUgYWNjZXNzXG4gICAgLy8gdG8gdGhlIGRhdGEgb24gdGhlIHBsYWNlaG9sZGVyIG5vZGUuXG4gICAgdm0uJHZub2RlID0gX3BhcmVudFZub2RlO1xuICAgIC8vIHJlbmRlciBzZWxmXG4gICAgdmFyIHZub2RlO1xuICAgIHRyeSB7XG4gICAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gbWFpbnRhaW4gYSBzdGFjayBiZWNhdWVzIGFsbCByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHNlcGFyYXRlbHkgZnJvbSBvbmUgYW5vdGhlci4gTmVzdGVkIGNvbXBvbmVudCdzIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgLy8gd2hlbiBwYXJlbnQgY29tcG9uZW50IGlzIHBhdGNoZWQuXG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSB2bTtcbiAgICAgIHZub2RlID0gcmVuZGVyLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyXCIpO1xuICAgICAgLy8gcmV0dXJuIGVycm9yIHJlbmRlciByZXN1bHQsXG4gICAgICAvLyBvciBwcmV2aW91cyB2bm9kZSB0byBwcmV2ZW50IHJlbmRlciBlcnJvciBjYXVzaW5nIGJsYW5rIGNvbXBvbmVudFxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHZtLiRvcHRpb25zLnJlbmRlckVycm9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdm5vZGUgPSB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQsIGUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyRXJyb3JcIik7XG4gICAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgICAvLyBpZiB0aGUgcmV0dXJuZWQgYXJyYXkgY29udGFpbnMgb25seSBhIHNpbmdsZSBub2RlLCBhbGxvdyBpdFxuICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSAmJiB2bm9kZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZub2RlID0gdm5vZGVbMF07XG4gICAgfVxuICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnTXVsdGlwbGUgcm9vdCBub2RlcyByZXR1cm5lZCBmcm9tIHJlbmRlciBmdW5jdGlvbi4gUmVuZGVyIGZ1bmN0aW9uICcgK1xuICAgICAgICAgICdzaG91bGQgcmV0dXJuIGEgc2luZ2xlIHJvb3Qgbm9kZS4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgICB9XG4gICAgLy8gc2V0IHBhcmVudFxuICAgIHZub2RlLnBhcmVudCA9IF9wYXJlbnRWbm9kZTtcbiAgICByZXR1cm4gdm5vZGVcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVuc3VyZUN0b3IgKGNvbXAsIGJhc2UpIHtcbiAgaWYgKFxuICAgIGNvbXAuX19lc01vZHVsZSB8fFxuICAgIChoYXNTeW1ib2wgJiYgY29tcFtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJylcbiAgKSB7XG4gICAgY29tcCA9IGNvbXAuZGVmYXVsdDtcbiAgfVxuICByZXR1cm4gaXNPYmplY3QoY29tcClcbiAgICA/IGJhc2UuZXh0ZW5kKGNvbXApXG4gICAgOiBjb21wXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIgKFxuICBmYWN0b3J5LFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgdmFyIG5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gIG5vZGUuYXN5bmNGYWN0b3J5ID0gZmFjdG9yeTtcbiAgbm9kZS5hc3luY01ldGEgPSB7IGRhdGE6IGRhdGEsIGNvbnRleHQ6IGNvbnRleHQsIGNoaWxkcmVuOiBjaGlsZHJlbiwgdGFnOiB0YWcgfTtcbiAgcmV0dXJuIG5vZGVcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUFzeW5jQ29tcG9uZW50IChcbiAgZmFjdG9yeSxcbiAgYmFzZUN0b3Jcbikge1xuICBpZiAoaXNUcnVlKGZhY3RvcnkuZXJyb3IpICYmIGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkge1xuICAgIHJldHVybiBmYWN0b3J5LmVycm9yQ29tcFxuICB9XG5cbiAgaWYgKGlzRGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxuXG4gIHZhciBvd25lciA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgaWYgKG93bmVyICYmIGlzRGVmKGZhY3Rvcnkub3duZXJzKSAmJiBmYWN0b3J5Lm93bmVycy5pbmRleE9mKG93bmVyKSA9PT0gLTEpIHtcbiAgICAvLyBhbHJlYWR5IHBlbmRpbmdcbiAgICBmYWN0b3J5Lm93bmVycy5wdXNoKG93bmVyKTtcbiAgfVxuXG4gIGlmIChpc1RydWUoZmFjdG9yeS5sb2FkaW5nKSAmJiBpc0RlZihmYWN0b3J5LmxvYWRpbmdDb21wKSkge1xuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdDb21wXG4gIH1cblxuICBpZiAob3duZXIgJiYgIWlzRGVmKGZhY3Rvcnkub3duZXJzKSkge1xuICAgIHZhciBvd25lcnMgPSBmYWN0b3J5Lm93bmVycyA9IFtvd25lcl07XG4gICAgdmFyIHN5bmMgPSB0cnVlO1xuICAgIHZhciB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgIHZhciB0aW1lclRpbWVvdXQgPSBudWxsXG5cbiAgICA7KG93bmVyKS4kb24oJ2hvb2s6ZGVzdHJveWVkJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlKG93bmVycywgb3duZXIpOyB9KTtcblxuICAgIHZhciBmb3JjZVJlbmRlciA9IGZ1bmN0aW9uIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb3duZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAob3duZXJzW2ldKS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbmRlckNvbXBsZXRlZCkge1xuICAgICAgICBvd25lcnMubGVuZ3RoID0gMDtcbiAgICAgICAgaWYgKHRpbWVyTG9hZGluZyAhPT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lckxvYWRpbmcpO1xuICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVyVGltZW91dCAhPT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lclRpbWVvdXQpO1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJlc29sdmUgPSBvbmNlKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIC8vIGNhY2hlIHJlc29sdmVkXG4gICAgICBmYWN0b3J5LnJlc29sdmVkID0gZW5zdXJlQ3RvcihyZXMsIGJhc2VDdG9yKTtcbiAgICAgIC8vIGludm9rZSBjYWxsYmFja3Mgb25seSBpZiB0aGlzIGlzIG5vdCBhIHN5bmNocm9ub3VzIHJlc29sdmVcbiAgICAgIC8vIChhc3luYyByZXNvbHZlcyBhcmUgc2hpbW1lZCBhcyBzeW5jaHJvbm91cyBkdXJpbmcgU1NSKVxuICAgICAgaWYgKCFzeW5jKSB7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgcmVqZWN0ID0gb25jZShmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHRvIHJlc29sdmUgYXN5bmMgY29tcG9uZW50OiBcIiArIChTdHJpbmcoZmFjdG9yeSkpICtcbiAgICAgICAgKHJlYXNvbiA/IChcIlxcblJlYXNvbjogXCIgKyByZWFzb24pIDogJycpXG4gICAgICApO1xuICAgICAgaWYgKGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkge1xuICAgICAgICBmYWN0b3J5LmVycm9yID0gdHJ1ZTtcbiAgICAgICAgZm9yY2VSZW5kZXIodHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgcmVzID0gZmFjdG9yeShyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgaWYgKGlzT2JqZWN0KHJlcykpIHtcbiAgICAgIGlmIChpc1Byb21pc2UocmVzKSkge1xuICAgICAgICAvLyAoKSA9PiBQcm9taXNlXG4gICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc1Byb21pc2UocmVzLmNvbXBvbmVudCkpIHtcbiAgICAgICAgcmVzLmNvbXBvbmVudC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5lcnJvcikpIHtcbiAgICAgICAgICBmYWN0b3J5LmVycm9yQ29tcCA9IGVuc3VyZUN0b3IocmVzLmVycm9yLCBiYXNlQ3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLmxvYWRpbmcpKSB7XG4gICAgICAgICAgZmFjdG9yeS5sb2FkaW5nQ29tcCA9IGVuc3VyZUN0b3IocmVzLmxvYWRpbmcsIGJhc2VDdG9yKTtcbiAgICAgICAgICBpZiAocmVzLmRlbGF5ID09PSAwKSB7XG4gICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkgJiYgaXNVbmRlZihmYWN0b3J5LmVycm9yKSkge1xuICAgICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yY2VSZW5kZXIoZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCByZXMuZGVsYXkgfHwgMjAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLnRpbWVvdXQpKSB7XG4gICAgICAgICAgdGltZXJUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgICAgICAgICAgICAgID8gKFwidGltZW91dCAoXCIgKyAocmVzLnRpbWVvdXQpICsgXCJtcylcIilcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHJlcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHN5bmMgPSBmYWxzZTtcbiAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ1xuICAgICAgPyBmYWN0b3J5LmxvYWRpbmdDb21wXG4gICAgICA6IGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNBc3luY1BsYWNlaG9sZGVyIChub2RlKSB7XG4gIHJldHVybiBub2RlLmlzQ29tbWVudCAmJiBub2RlLmFzeW5jRmFjdG9yeVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCAoY2hpbGRyZW4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiAoaXNEZWYoYy5jb21wb25lbnRPcHRpb25zKSB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYykpKSB7XG4gICAgICAgIHJldHVybiBjXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV2ZW50cyAodm0pIHtcbiAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZtLl9oYXNIb29rRXZlbnQgPSBmYWxzZTtcbiAgLy8gaW5pdCBwYXJlbnQgYXR0YWNoZWQgZXZlbnRzXG4gIHZhciBsaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMpO1xuICB9XG59XG5cbnZhciB0YXJnZXQ7XG5cbmZ1bmN0aW9uIGFkZCAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb24oZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDEgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9mZihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciAoZXZlbnQsIGZuKSB7XG4gIHZhciBfdGFyZ2V0ID0gdGFyZ2V0O1xuICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgIHZhciByZXMgPSBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIF90YXJnZXQuJG9mZihldmVudCwgb25jZUhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMgKFxuICB2bSxcbiAgbGlzdGVuZXJzLFxuICBvbGRMaXN0ZW5lcnNcbikge1xuICB0YXJnZXQgPSB2bTtcbiAgdXBkYXRlTGlzdGVuZXJzKGxpc3RlbmVycywgb2xkTGlzdGVuZXJzIHx8IHt9LCBhZGQsIHJlbW92ZSQxLCBjcmVhdGVPbmNlSGFuZGxlciwgdm0pO1xuICB0YXJnZXQgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGV2ZW50c01peGluIChWdWUpIHtcbiAgdmFyIGhvb2tSRSA9IC9eaG9vazovO1xuICBWdWUucHJvdG90eXBlLiRvbiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdm0uJG9uKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICh2bS5fZXZlbnRzW2V2ZW50XSB8fCAodm0uX2V2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goZm4pO1xuICAgICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cbiAgICAgIC8vIGluc3RlYWQgb2YgYSBoYXNoIGxvb2t1cFxuICAgICAgaWYgKGhvb2tSRS50ZXN0KGV2ZW50KSkge1xuICAgICAgICB2bS5faGFzSG9va0V2ZW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb25jZSA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGZ1bmN0aW9uIG9uICgpIHtcbiAgICAgIHZtLiRvZmYoZXZlbnQsIG9uKTtcbiAgICAgIGZuLmFwcGx5KHZtLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBvbi5mbiA9IGZuO1xuICAgIHZtLiRvbihldmVudCwgb24pO1xuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9mZiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGFsbFxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gYXJyYXkgb2YgZXZlbnRzXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpJDEgPCBsOyBpJDErKykge1xuICAgICAgICB2bS4kb2ZmKGV2ZW50W2kkMV0sIGZuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBldmVudFxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoIWNicykge1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIGlmICghZm4pIHtcbiAgICAgIHZtLl9ldmVudHNbZXZlbnRdID0gbnVsbDtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBoYW5kbGVyXG4gICAgdmFyIGNiO1xuICAgIHZhciBpID0gY2JzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjYiA9IGNic1tpXTtcbiAgICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XG4gICAgICAgIGNicy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiB2bS5fZXZlbnRzW2xvd2VyQ2FzZUV2ZW50XSkge1xuICAgICAgICB0aXAoXG4gICAgICAgICAgXCJFdmVudCBcXFwiXCIgKyBsb3dlckNhc2VFdmVudCArIFwiXFxcIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiIGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgXCIgK1xuICAgICAgICAgIFwidi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIFwiICtcbiAgICAgICAgICBcIllvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIChoeXBoZW5hdGUoZXZlbnQpKSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoY2JzKSB7XG4gICAgICBjYnMgPSBjYnMubGVuZ3RoID4gMSA/IHRvQXJyYXkoY2JzKSA6IGNicztcbiAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgICAgdmFyIGluZm8gPSBcImV2ZW50IGhhbmRsZXIgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiXCI7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2JzW2ldLCB2bSwgYXJncywgdm0sIGluZm8pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG52YXIgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHNldEFjdGl2ZUluc3RhbmNlKHZtKSB7XG4gIHZhciBwcmV2QWN0aXZlSW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZTtcbiAgYWN0aXZlSW5zdGFuY2UgPSB2bTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBhY3RpdmVJbnN0YW5jZSA9IHByZXZBY3RpdmVJbnN0YW5jZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TGlmZWN5Y2xlICh2bSkge1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuXG4gIC8vIGxvY2F0ZSBmaXJzdCBub24tYWJzdHJhY3QgcGFyZW50XG4gIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgaWYgKHBhcmVudCAmJiAhb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHdoaWxlIChwYXJlbnQuJG9wdGlvbnMuYWJzdHJhY3QgJiYgcGFyZW50LiRwYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgIH1cbiAgICBwYXJlbnQuJGNoaWxkcmVuLnB1c2godm0pO1xuICB9XG5cbiAgdm0uJHBhcmVudCA9IHBhcmVudDtcbiAgdm0uJHJvb3QgPSBwYXJlbnQgPyBwYXJlbnQuJHJvb3QgOiB2bTtcblxuICB2bS4kY2hpbGRyZW4gPSBbXTtcbiAgdm0uJHJlZnMgPSB7fTtcblxuICB2bS5fd2F0Y2hlciA9IG51bGw7XG4gIHZtLl9pbmFjdGl2ZSA9IG51bGw7XG4gIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICB2bS5faXNNb3VudGVkID0gZmFsc2U7XG4gIHZtLl9pc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBsaWZlY3ljbGVNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcHJldkVsID0gdm0uJGVsO1xuICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHZtKTtcbiAgICB2bS5fdm5vZGUgPSB2bm9kZTtcbiAgICAvLyBWdWUucHJvdG90eXBlLl9fcGF0Y2hfXyBpcyBpbmplY3RlZCBpbiBlbnRyeSBwb2ludHNcbiAgICAvLyBiYXNlZCBvbiB0aGUgcmVuZGVyaW5nIGJhY2tlbmQgdXNlZC5cbiAgICBpZiAoIXByZXZWbm9kZSkge1xuICAgICAgLy8gaW5pdGlhbCByZW5kZXJcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyh2bS4kZWwsIHZub2RlLCBoeWRyYXRpbmcsIGZhbHNlIC8qIHJlbW92ZU9ubHkgKi8pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1cGRhdGVzXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18ocHJldlZub2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgIC8vIHVwZGF0ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmIChwcmV2RWwpIHtcbiAgICAgIHByZXZFbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSB2bTtcbiAgICB9XG4gICAgLy8gaWYgcGFyZW50IGlzIGFuIEhPQywgdXBkYXRlIGl0cyAkZWwgYXMgd2VsbFxuICAgIGlmICh2bS4kdm5vZGUgJiYgdm0uJHBhcmVudCAmJiB2bS4kdm5vZGUgPT09IHZtLiRwYXJlbnQuX3Zub2RlKSB7XG4gICAgICB2bS4kcGFyZW50LiRlbCA9IHZtLiRlbDtcbiAgICB9XG4gICAgLy8gdXBkYXRlZCBob29rIGlzIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyIHRvIGVuc3VyZSB0aGF0IGNoaWxkcmVuIGFyZVxuICAgIC8vIHVwZGF0ZWQgaW4gYSBwYXJlbnQncyB1cGRhdGVkIGhvb2suXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRkZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVEZXN0cm95Jyk7XG4gICAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gcGFyZW50XG4gICAgdmFyIHBhcmVudCA9IHZtLiRwYXJlbnQ7XG4gICAgaWYgKHBhcmVudCAmJiAhcGFyZW50Ll9pc0JlaW5nRGVzdHJveWVkICYmICF2bS4kb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgICAgcmVtb3ZlKHBhcmVudC4kY2hpbGRyZW4sIHZtKTtcbiAgICB9XG4gICAgLy8gdGVhcmRvd24gd2F0Y2hlcnNcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIHZhciBpID0gdm0uX3dhdGNoZXJzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2bS5fd2F0Y2hlcnNbaV0udGVhcmRvd24oKTtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIHJlZmVyZW5jZSBmcm9tIGRhdGEgb2JcbiAgICAvLyBmcm96ZW4gb2JqZWN0IG1heSBub3QgaGF2ZSBvYnNlcnZlci5cbiAgICBpZiAodm0uX2RhdGEuX19vYl9fKSB7XG4gICAgICB2bS5fZGF0YS5fX29iX18udm1Db3VudC0tO1xuICAgIH1cbiAgICAvLyBjYWxsIHRoZSBsYXN0IGhvb2suLi5cbiAgICB2bS5faXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIGludm9rZSBkZXN0cm95IGhvb2tzIG9uIGN1cnJlbnQgcmVuZGVyZWQgdHJlZVxuICAgIHZtLl9fcGF0Y2hfXyh2bS5fdm5vZGUsIG51bGwpO1xuICAgIC8vIGZpcmUgZGVzdHJveWVkIGhvb2tcbiAgICBjYWxsSG9vayh2bSwgJ2Rlc3Ryb3llZCcpO1xuICAgIC8vIHR1cm4gb2ZmIGFsbCBpbnN0YW5jZSBsaXN0ZW5lcnMuXG4gICAgdm0uJG9mZigpO1xuICAgIC8vIHJlbW92ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgLy8gcmVsZWFzZSBjaXJjdWxhciByZWZlcmVuY2UgKCM2NzU5KVxuICAgIGlmICh2bS4kdm5vZGUpIHtcbiAgICAgIHZtLiR2bm9kZS5wYXJlbnQgPSBudWxsO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbW91bnRDb21wb25lbnQgKFxuICB2bSxcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIHZtLiRlbCA9IGVsO1xuICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikge1xuICAgIHZtLiRvcHRpb25zLnJlbmRlciA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCh2bS4kb3B0aW9ucy50ZW1wbGF0ZSAmJiB2bS4kb3B0aW9ucy50ZW1wbGF0ZS5jaGFyQXQoMCkgIT09ICcjJykgfHxcbiAgICAgICAgdm0uJG9wdGlvbnMuZWwgfHwgZWwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IGFyZSB1c2luZyB0aGUgcnVudGltZS1vbmx5IGJ1aWxkIG9mIFZ1ZSB3aGVyZSB0aGUgdGVtcGxhdGUgJyArXG4gICAgICAgICAgJ2NvbXBpbGVyIGlzIG5vdCBhdmFpbGFibGUuIEVpdGhlciBwcmUtY29tcGlsZSB0aGUgdGVtcGxhdGVzIGludG8gJyArXG4gICAgICAgICAgJ3JlbmRlciBmdW5jdGlvbnMsIG9yIHVzZSB0aGUgY29tcGlsZXItaW5jbHVkZWQgYnVpbGQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnRmFpbGVkIHRvIG1vdW50IGNvbXBvbmVudDogdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uIG5vdCBkZWZpbmVkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2FsbEhvb2sodm0sICdiZWZvcmVNb3VudCcpO1xuXG4gIHZhciB1cGRhdGVDb21wb25lbnQ7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBuYW1lID0gdm0uX25hbWU7XG4gICAgICB2YXIgaWQgPSB2bS5fdWlkO1xuICAgICAgdmFyIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArIGlkO1xuICAgICAgdmFyIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgaWQ7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdmFyIHZub2RlID0gdm0uX3JlbmRlcigpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcmVuZGVyXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcblxuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgICB2bS5fdXBkYXRlKHZub2RlLCBoeWRyYXRpbmcpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcGF0Y2hcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdm0uX3VwZGF0ZSh2bS5fcmVuZGVyKCksIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIHdlIHNldCB0aGlzIHRvIHZtLl93YXRjaGVyIGluc2lkZSB0aGUgd2F0Y2hlcidzIGNvbnN0cnVjdG9yXG4gIC8vIHNpbmNlIHRoZSB3YXRjaGVyJ3MgaW5pdGlhbCBwYXRjaCBtYXkgY2FsbCAkZm9yY2VVcGRhdGUgKGUuZy4gaW5zaWRlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCdzIG1vdW50ZWQgaG9vayksIHdoaWNoIHJlbGllcyBvbiB2bS5fd2F0Y2hlciBiZWluZyBhbHJlYWR5IGRlZmluZWRcbiAgbmV3IFdhdGNoZXIodm0sIHVwZGF0ZUNvbXBvbmVudCwgbm9vcCwge1xuICAgIGJlZm9yZTogZnVuY3Rpb24gYmVmb3JlICgpIHtcbiAgICAgIGlmICh2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVVcGRhdGUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG5cbiAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgaWYgKHZtLiR2bm9kZSA9PSBudWxsKSB7XG4gICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gIH1cbiAgcmV0dXJuIHZtXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkQ29tcG9uZW50IChcbiAgdm0sXG4gIHByb3BzRGF0YSxcbiAgbGlzdGVuZXJzLFxuICBwYXJlbnRWbm9kZSxcbiAgcmVuZGVyQ2hpbGRyZW5cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IHRydWU7XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciBjb21wb25lbnQgaGFzIHNsb3QgY2hpbGRyZW5cbiAgLy8gd2UgbmVlZCB0byBkbyB0aGlzIGJlZm9yZSBvdmVyd3JpdGluZyAkb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4uXG5cbiAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGR5bmFtaWMgc2NvcGVkU2xvdHMgKGhhbmQtd3JpdHRlbiBvciBjb21waWxlZCBidXQgd2l0aFxuICAvLyBkeW5hbWljIHNsb3QgbmFtZXMpLiBTdGF0aWMgc2NvcGVkIHNsb3RzIGNvbXBpbGVkIGZyb20gdGVtcGxhdGUgaGFzIHRoZVxuICAvLyBcIiRzdGFibGVcIiBtYXJrZXIuXG4gIHZhciBuZXdTY29wZWRTbG90cyA9IHBhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHM7XG4gIHZhciBvbGRTY29wZWRTbG90cyA9IHZtLiRzY29wZWRTbG90cztcbiAgdmFyIGhhc0R5bmFtaWNTY29wZWRTbG90ID0gISEoXG4gICAgKG5ld1Njb3BlZFNsb3RzICYmICFuZXdTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChvbGRTY29wZWRTbG90cyAhPT0gZW1wdHlPYmplY3QgJiYgIW9sZFNjb3BlZFNsb3RzLiRzdGFibGUpIHx8XG4gICAgKG5ld1Njb3BlZFNsb3RzICYmIHZtLiRzY29wZWRTbG90cy4ka2V5ICE9PSBuZXdTY29wZWRTbG90cy4ka2V5KVxuICApO1xuXG4gIC8vIEFueSBzdGF0aWMgc2xvdCBjaGlsZHJlbiBmcm9tIHRoZSBwYXJlbnQgbWF5IGhhdmUgY2hhbmdlZCBkdXJpbmcgcGFyZW50J3NcbiAgLy8gdXBkYXRlLiBEeW5hbWljIHNjb3BlZCBzbG90cyBtYXkgYWxzbyBoYXZlIGNoYW5nZWQuIEluIHN1Y2ggY2FzZXMsIGEgZm9yY2VkXG4gIC8vIHVwZGF0ZSBpcyBuZWNlc3NhcnkgdG8gZW5zdXJlIGNvcnJlY3RuZXNzLlxuICB2YXIgbmVlZHNGb3JjZVVwZGF0ZSA9ICEhKFxuICAgIHJlbmRlckNoaWxkcmVuIHx8ICAgICAgICAgICAgICAgLy8gaGFzIG5ldyBzdGF0aWMgc2xvdHNcbiAgICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gfHwgIC8vIGhhcyBvbGQgc3RhdGljIHNsb3RzXG4gICAgaGFzRHluYW1pY1Njb3BlZFNsb3RcbiAgKTtcblxuICB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcbiAgdm0uJHZub2RlID0gcGFyZW50Vm5vZGU7IC8vIHVwZGF0ZSB2bSdzIHBsYWNlaG9sZGVyIG5vZGUgd2l0aG91dCByZS1yZW5kZXJcblxuICBpZiAodm0uX3Zub2RlKSB7IC8vIHVwZGF0ZSBjaGlsZCB0cmVlJ3MgcGFyZW50XG4gICAgdm0uX3Zub2RlLnBhcmVudCA9IHBhcmVudFZub2RlO1xuICB9XG4gIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiA9IHJlbmRlckNoaWxkcmVuO1xuXG4gIC8vIHVwZGF0ZSAkYXR0cnMgYW5kICRsaXN0ZW5lcnMgaGFzaFxuICAvLyB0aGVzZSBhcmUgYWxzbyByZWFjdGl2ZSBzbyB0aGV5IG1heSB0cmlnZ2VyIGNoaWxkIHVwZGF0ZSBpZiB0aGUgY2hpbGRcbiAgLy8gdXNlZCB0aGVtIGR1cmluZyByZW5kZXJcbiAgdm0uJGF0dHJzID0gcGFyZW50Vm5vZGUuZGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdDtcbiAgdm0uJGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcblxuICAvLyB1cGRhdGUgcHJvcHNcbiAgaWYgKHByb3BzRGF0YSAmJiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgdmFyIHByb3BzID0gdm0uX3Byb3BzO1xuICAgIHZhciBwcm9wS2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcEtleXNbaV07XG4gICAgICB2YXIgcHJvcE9wdGlvbnMgPSB2bS4kb3B0aW9ucy5wcm9wczsgLy8gd3RmIGZsb3c/XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSwgdm0pO1xuICAgIH1cbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgLy8ga2VlcCBhIGNvcHkgb2YgcmF3IHByb3BzRGF0YVxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YSA9IHByb3BzRGF0YTtcbiAgfVxuXG4gIC8vIHVwZGF0ZSBsaXN0ZW5lcnNcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuICB2YXIgb2xkTGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyk7XG5cbiAgLy8gcmVzb2x2ZSBzbG90cyArIGZvcmNlIHVwZGF0ZSBpZiBoYXMgY2hpbGRyZW5cbiAgaWYgKG5lZWRzRm9yY2VVcGRhdGUpIHtcbiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcbiAgICBpZiAodm0uX2luYWN0aXZlKSB7IHJldHVybiB0cnVlIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2RlYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEhvb2sgKHZtLCBob29rKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBsaWZlY3ljbGUgaG9va3NcbiAgcHVzaFRhcmdldCgpO1xuICB2YXIgaGFuZGxlcnMgPSB2bS4kb3B0aW9uc1tob29rXTtcbiAgdmFyIGluZm8gPSBob29rICsgXCIgaG9va1wiO1xuICBpZiAoaGFuZGxlcnMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoaGFuZGxlcnNbaV0sIHZtLCBudWxsLCB2bSwgaW5mbyk7XG4gICAgfVxuICB9XG4gIGlmICh2bS5faGFzSG9va0V2ZW50KSB7XG4gICAgdm0uJGVtaXQoJ2hvb2s6JyArIGhvb2spO1xuICB9XG4gIHBvcFRhcmdldCgpO1xufVxuXG4vKiAgKi9cblxudmFyIE1BWF9VUERBVEVfQ09VTlQgPSAxMDA7XG5cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGFjdGl2YXRlZENoaWxkcmVuID0gW107XG52YXIgaGFzID0ge307XG52YXIgY2lyY3VsYXIgPSB7fTtcbnZhciB3YWl0aW5nID0gZmFsc2U7XG52YXIgZmx1c2hpbmcgPSBmYWxzZTtcbnZhciBpbmRleCA9IDA7XG5cbi8qKlxuICogUmVzZXQgdGhlIHNjaGVkdWxlcidzIHN0YXRlLlxuICovXG5mdW5jdGlvbiByZXNldFNjaGVkdWxlclN0YXRlICgpIHtcbiAgaW5kZXggPSBxdWV1ZS5sZW5ndGggPSBhY3RpdmF0ZWRDaGlsZHJlbi5sZW5ndGggPSAwO1xuICBoYXMgPSB7fTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaXJjdWxhciA9IHt9O1xuICB9XG4gIHdhaXRpbmcgPSBmbHVzaGluZyA9IGZhbHNlO1xufVxuXG4vLyBBc3luYyBlZGdlIGNhc2UgIzY1NjYgcmVxdWlyZXMgc2F2aW5nIHRoZSB0aW1lc3RhbXAgd2hlbiBldmVudCBsaXN0ZW5lcnMgYXJlXG4vLyBhdHRhY2hlZC4gSG93ZXZlciwgY2FsbGluZyBwZXJmb3JtYW5jZS5ub3coKSBoYXMgYSBwZXJmIG92ZXJoZWFkIGVzcGVjaWFsbHlcbi8vIGlmIHRoZSBwYWdlIGhhcyB0aG91c2FuZHMgb2YgZXZlbnQgbGlzdGVuZXJzLiBJbnN0ZWFkLCB3ZSB0YWtlIGEgdGltZXN0YW1wXG4vLyBldmVyeSB0aW1lIHRoZSBzY2hlZHVsZXIgZmx1c2hlcyBhbmQgdXNlIHRoYXQgZm9yIGFsbCBldmVudCBsaXN0ZW5lcnNcbi8vIGF0dGFjaGVkIGR1cmluZyB0aGF0IGZsdXNoLlxudmFyIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IDA7XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSBmaXggcmVxdWlyZXMgc3RvcmluZyBhbiBldmVudCBsaXN0ZW5lcidzIGF0dGFjaCB0aW1lc3RhbXAuXG52YXIgZ2V0Tm93ID0gRGF0ZS5ub3c7XG5cbi8vIERldGVybWluZSB3aGF0IGV2ZW50IHRpbWVzdGFtcCB0aGUgYnJvd3NlciBpcyB1c2luZy4gQW5ub3lpbmdseSwgdGhlXG4vLyB0aW1lc3RhbXAgY2FuIGVpdGhlciBiZSBoaS1yZXMgKHJlbGF0aXZlIHRvIHBhZ2UgbG9hZCkgb3IgbG93LXJlc1xuLy8gKHJlbGF0aXZlIHRvIFVOSVggZXBvY2gpLCBzbyBpbiBvcmRlciB0byBjb21wYXJlIHRpbWUgd2UgaGF2ZSB0byB1c2UgdGhlXG4vLyBzYW1lIHRpbWVzdGFtcCB0eXBlIHdoZW4gc2F2aW5nIHRoZSBmbHVzaCB0aW1lc3RhbXAuXG4vLyBBbGwgSUUgdmVyc2lvbnMgdXNlIGxvdy1yZXMgZXZlbnQgdGltZXN0YW1wcywgYW5kIGhhdmUgcHJvYmxlbWF0aWMgY2xvY2tcbi8vIGltcGxlbWVudGF0aW9ucyAoIzk2MzIpXG5pZiAoaW5Ccm93c2VyICYmICFpc0lFKSB7XG4gIHZhciBwZXJmb3JtYW5jZSA9IHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgaWYgKFxuICAgIHBlcmZvcm1hbmNlICYmXG4gICAgdHlwZW9mIHBlcmZvcm1hbmNlLm5vdyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIGdldE5vdygpID4gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50JykudGltZVN0YW1wXG4gICkge1xuICAgIC8vIGlmIHRoZSBldmVudCB0aW1lc3RhbXAsIGFsdGhvdWdoIGV2YWx1YXRlZCBBRlRFUiB0aGUgRGF0ZS5ub3coKSwgaXNcbiAgICAvLyBzbWFsbGVyIHRoYW4gaXQsIGl0IG1lYW5zIHRoZSBldmVudCBpcyB1c2luZyBhIGhpLXJlcyB0aW1lc3RhbXAsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gdXNlIHRoZSBoaS1yZXMgdmVyc2lvbiBmb3IgZXZlbnQgbGlzdGVuZXIgdGltZXN0YW1wcyBhc1xuICAgIC8vIHdlbGwuXG4gICAgZ2V0Tm93ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7IH07XG4gIH1cbn1cblxuLyoqXG4gKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy5cbiAqL1xuZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG4gIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IGdldE5vdygpO1xuICBmbHVzaGluZyA9IHRydWU7XG4gIHZhciB3YXRjaGVyLCBpZDtcblxuICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQ6XG4gIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcbiAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkKVxuICAvLyAyLiBBIGNvbXBvbmVudCdzIHVzZXIgd2F0Y2hlcnMgYXJlIHJ1biBiZWZvcmUgaXRzIHJlbmRlciB3YXRjaGVyIChiZWNhdXNlXG4gIC8vICAgIHVzZXIgd2F0Y2hlcnMgYXJlIGNyZWF0ZWQgYmVmb3JlIHRoZSByZW5kZXIgd2F0Y2hlcilcbiAgLy8gMy4gSWYgYSBjb21wb25lbnQgaXMgZGVzdHJveWVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB3YXRjaGVyIHJ1bixcbiAgLy8gICAgaXRzIHdhdGNoZXJzIGNhbiBiZSBza2lwcGVkLlxuICBxdWV1ZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG5cbiAgLy8gZG8gbm90IGNhY2hlIGxlbmd0aCBiZWNhdXNlIG1vcmUgd2F0Y2hlcnMgbWlnaHQgYmUgcHVzaGVkXG4gIC8vIGFzIHdlIHJ1biBleGlzdGluZyB3YXRjaGVyc1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBxdWV1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICB3YXRjaGVyID0gcXVldWVbaW5kZXhdO1xuICAgIGlmICh3YXRjaGVyLmJlZm9yZSkge1xuICAgICAgd2F0Y2hlci5iZWZvcmUoKTtcbiAgICB9XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhc1tpZF0gPSBudWxsO1xuICAgIHdhdGNoZXIucnVuKCk7XG4gICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGhhc1tpZF0gIT0gbnVsbCkge1xuICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7XG4gICAgICBpZiAoY2lyY3VsYXJbaWRdID4gTUFYX1VQREFURV9DT1VOVCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJyArIChcbiAgICAgICAgICAgIHdhdGNoZXIudXNlclxuICAgICAgICAgICAgICA/IChcImluIHdhdGNoZXIgd2l0aCBleHByZXNzaW9uIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpXG4gICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIHdhdGNoZXIudm1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBrZWVwIGNvcGllcyBvZiBwb3N0IHF1ZXVlcyBiZWZvcmUgcmVzZXR0aW5nIHN0YXRlXG4gIHZhciBhY3RpdmF0ZWRRdWV1ZSA9IGFjdGl2YXRlZENoaWxkcmVuLnNsaWNlKCk7XG4gIHZhciB1cGRhdGVkUXVldWUgPSBxdWV1ZS5zbGljZSgpO1xuXG4gIHJlc2V0U2NoZWR1bGVyU3RhdGUoKTtcblxuICAvLyBjYWxsIGNvbXBvbmVudCB1cGRhdGVkIGFuZCBhY3RpdmF0ZWQgaG9va3NcbiAgY2FsbEFjdGl2YXRlZEhvb2tzKGFjdGl2YXRlZFF1ZXVlKTtcbiAgY2FsbFVwZGF0ZWRIb29rcyh1cGRhdGVkUXVldWUpO1xuXG4gIC8vIGRldnRvb2wgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGRldnRvb2xzICYmIGNvbmZpZy5kZXZ0b29scykge1xuICAgIGRldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbFVwZGF0ZWRIb29rcyAocXVldWUpIHtcbiAgdmFyIGkgPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgd2F0Y2hlciA9IHF1ZXVlW2ldO1xuICAgIHZhciB2bSA9IHdhdGNoZXIudm07XG4gICAgaWYgKHZtLl93YXRjaGVyID09PSB3YXRjaGVyICYmIHZtLl9pc01vdW50ZWQgJiYgIXZtLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgY2FsbEhvb2sodm0sICd1cGRhdGVkJyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUXVldWUgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCB0aGF0IHdhcyBhY3RpdmF0ZWQgZHVyaW5nIHBhdGNoLlxuICogVGhlIHF1ZXVlIHdpbGwgYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSBlbnRpcmUgdHJlZSBoYXMgYmVlbiBwYXRjaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudCAodm0pIHtcbiAgLy8gc2V0dGluZyBfaW5hY3RpdmUgdG8gZmFsc2UgaGVyZSBzbyB0aGF0IGEgcmVuZGVyIGZ1bmN0aW9uIGNhblxuICAvLyByZWx5IG9uIGNoZWNraW5nIHdoZXRoZXIgaXQncyBpbiBhbiBpbmFjdGl2ZSB0cmVlIChlLmcuIHJvdXRlci12aWV3KVxuICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgYWN0aXZhdGVkQ2hpbGRyZW4ucHVzaCh2bSk7XG59XG5cbmZ1bmN0aW9uIGNhbGxBY3RpdmF0ZWRIb29rcyAocXVldWUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgIHF1ZXVlW2ldLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChxdWV1ZVtpXSwgdHJ1ZSAvKiB0cnVlICovKTtcbiAgfVxufVxuXG4vKipcbiAqIFB1c2ggYSB3YXRjaGVyIGludG8gdGhlIHdhdGNoZXIgcXVldWUuXG4gKiBKb2JzIHdpdGggZHVwbGljYXRlIElEcyB3aWxsIGJlIHNraXBwZWQgdW5sZXNzIGl0J3NcbiAqIHB1c2hlZCB3aGVuIHRoZSBxdWV1ZSBpcyBiZWluZyBmbHVzaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZVdhdGNoZXIgKHdhdGNoZXIpIHtcbiAgdmFyIGlkID0gd2F0Y2hlci5pZDtcbiAgaWYgKGhhc1tpZF0gPT0gbnVsbCkge1xuICAgIGhhc1tpZF0gPSB0cnVlO1xuICAgIGlmICghZmx1c2hpbmcpIHtcbiAgICAgIHF1ZXVlLnB1c2god2F0Y2hlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGlmIGFscmVhZHkgZmx1c2hpbmcsIHNwbGljZSB0aGUgd2F0Y2hlciBiYXNlZCBvbiBpdHMgaWRcbiAgICAgIC8vIGlmIGFscmVhZHkgcGFzdCBpdHMgaWQsIGl0IHdpbGwgYmUgcnVuIG5leHQgaW1tZWRpYXRlbHkuXG4gICAgICB2YXIgaSA9IHF1ZXVlLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoaSA+IGluZGV4ICYmIHF1ZXVlW2ldLmlkID4gd2F0Y2hlci5pZCkge1xuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgICBxdWV1ZS5zcGxpY2UoaSArIDEsIDAsIHdhdGNoZXIpO1xuICAgIH1cbiAgICAvLyBxdWV1ZSB0aGUgZmx1c2hcbiAgICBpZiAoIXdhaXRpbmcpIHtcbiAgICAgIHdhaXRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgICAgIGZsdXNoU2NoZWR1bGVyUXVldWUoKTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cblxuXG52YXIgdWlkJDIgPSAwO1xuXG4vKipcbiAqIEEgd2F0Y2hlciBwYXJzZXMgYW4gZXhwcmVzc2lvbiwgY29sbGVjdHMgZGVwZW5kZW5jaWVzLFxuICogYW5kIGZpcmVzIGNhbGxiYWNrIHdoZW4gdGhlIGV4cHJlc3Npb24gdmFsdWUgY2hhbmdlcy5cbiAqIFRoaXMgaXMgdXNlZCBmb3IgYm90aCB0aGUgJHdhdGNoKCkgYXBpIGFuZCBkaXJlY3RpdmVzLlxuICovXG52YXIgV2F0Y2hlciA9IGZ1bmN0aW9uIFdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgY2IsXG4gIG9wdGlvbnMsXG4gIGlzUmVuZGVyV2F0Y2hlclxuKSB7XG4gIHRoaXMudm0gPSB2bTtcbiAgaWYgKGlzUmVuZGVyV2F0Y2hlcikge1xuICAgIHZtLl93YXRjaGVyID0gdGhpcztcbiAgfVxuICB2bS5fd2F0Y2hlcnMucHVzaCh0aGlzKTtcbiAgLy8gb3B0aW9uc1xuICBpZiAob3B0aW9ucykge1xuICAgIHRoaXMuZGVlcCA9ICEhb3B0aW9ucy5kZWVwO1xuICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyO1xuICAgIHRoaXMubGF6eSA9ICEhb3B0aW9ucy5sYXp5O1xuICAgIHRoaXMuc3luYyA9ICEhb3B0aW9ucy5zeW5jO1xuICAgIHRoaXMuYmVmb3JlID0gb3B0aW9ucy5iZWZvcmU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kZWVwID0gdGhpcy51c2VyID0gdGhpcy5sYXp5ID0gdGhpcy5zeW5jID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5jYiA9IGNiO1xuICB0aGlzLmlkID0gKyt1aWQkMjsgLy8gdWlkIGZvciBiYXRjaGluZ1xuICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZGlydHkgPSB0aGlzLmxhenk7IC8vIGZvciBsYXp5IHdhdGNoZXJzXG4gIHRoaXMuZGVwcyA9IFtdO1xuICB0aGlzLm5ld0RlcHMgPSBbXTtcbiAgdGhpcy5kZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLm5ld0RlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMuZXhwcmVzc2lvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICA/IGV4cE9yRm4udG9TdHJpbmcoKVxuICAgIDogJyc7XG4gIC8vIHBhcnNlIGV4cHJlc3Npb24gZm9yIGdldHRlclxuICBpZiAodHlwZW9mIGV4cE9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLmdldHRlciA9IGV4cE9yRm47XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBwYXJzZVBhdGgoZXhwT3JGbik7XG4gICAgaWYgKCF0aGlzLmdldHRlcikge1xuICAgICAgdGhpcy5nZXR0ZXIgPSBub29wO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGRlcCA9IHRoaXMuZGVwc1tpXTtcbiAgICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxuICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XG4gIHRoaXMuZGVwSWRzID0gdGhpcy5uZXdEZXBJZHM7XG4gIHRoaXMubmV3RGVwSWRzID0gdG1wO1xuICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuICB0bXAgPSB0aGlzLmRlcHM7XG4gIHRoaXMuZGVwcyA9IHRoaXMubmV3RGVwcztcbiAgdGhpcy5uZXdEZXBzID0gdG1wO1xuICB0aGlzLm5ld0RlcHMubGVuZ3RoID0gMDtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlciBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodGhpcy5sYXp5KSB7XG4gICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7XG4gICAgdGhpcy5ydW4oKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZVdhdGNoZXIodGhpcyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2NoZWR1bGVyIGpvYiBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiBydW4gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLmdldCgpO1xuICAgIGlmIChcbiAgICAgIHZhbHVlICE9PSB0aGlzLnZhbHVlIHx8XG4gICAgICAvLyBEZWVwIHdhdGNoZXJzIGFuZCB3YXRjaGVycyBvbiBPYmplY3QvQXJyYXlzIHNob3VsZCBmaXJlIGV2ZW5cbiAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbiAgICAgIC8vIGhhdmUgbXV0YXRlZC5cbiAgICAgIGlzT2JqZWN0KHZhbHVlKSB8fFxuICAgICAgdGhpcy5kZWVwXG4gICAgKSB7XG4gICAgICAvLyBzZXQgbmV3IHZhbHVlXG4gICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdGhpcy52bSwgKFwiY2FsbGJhY2sgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gIHRoaXMuZGlydHkgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHRoaXMuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAvLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4gICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJlbW92ZSh0aGlzLnZtLl93YXRjaGVycywgdGhpcyk7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgaWYgKCFpc1Jvb3QpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoaHlwaGVuYXRlZEtleSkgfHxcbiAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBoeXBoZW5hdGVkS2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghaXNSb290ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhIHByb3AgZGlyZWN0bHkgc2luY2UgdGhlIHZhbHVlIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcGFyZW50IGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcIkluc3RlYWQsIHVzZSBhIGRhdGEgb3IgY29tcHV0ZWQgcHJvcGVydHkgYmFzZWQgb24gdGhlIHByb3AncyBcIiArXG4gICAgICAgICAgICBcInZhbHVlLiBQcm9wIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEocHJvcHMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlXG4gICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICB2YXIgZGF0YSA9IHZtLiRvcHRpb25zLmRhdGE7XG4gIGRhdGEgPSB2bS5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nXG4gICAgPyBnZXREYXRhKGRhdGEsIHZtKVxuICAgIDogZGF0YSB8fCB7fTtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgZGF0YSA9IHt9O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdkYXRhIGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGFuIG9iamVjdDpcXG4nICtcbiAgICAgICdodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9jb21wb25lbnRzLmh0bWwjZGF0YS1NdXN0LUJlLWEtRnVuY3Rpb24nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIHZhciBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAobWV0aG9kcyAmJiBoYXNPd24obWV0aG9kcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgZGF0YSBwcm9wZXJ0eS5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIlRoZSBkYXRhIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlY2xhcmVkIGFzIGEgcHJvcC4gXCIgK1xuICAgICAgICBcIlVzZSBwcm9wIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICghaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICBwcm94eSh2bSwgXCJfZGF0YVwiLCBrZXkpO1xuICAgIH1cbiAgfVxuICAvLyBvYnNlcnZlIGRhdGFcbiAgb2JzZXJ2ZShkYXRhLCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhIChkYXRhLCB2bSkge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgZGF0YSBnZXR0ZXJzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGF0YS5jYWxsKHZtLCB2bSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcImRhdGEoKVwiKTtcbiAgICByZXR1cm4ge31cbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG52YXIgY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyA9IHsgbGF6eTogdHJ1ZSB9O1xuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQgKHZtLCBjb21wdXRlZCkge1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIHdhdGNoZXJzID0gdm0uX2NvbXB1dGVkV2F0Y2hlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBqdXN0IGdldHRlcnMgZHVyaW5nIFNTUlxuICB2YXIgaXNTU1IgPSBpc1NlcnZlclJlbmRlcmluZygpO1xuXG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIHZhciB1c2VyRGVmID0gY29tcHV0ZWRba2V5XTtcbiAgICB2YXIgZ2V0dGVyID0gdHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicgPyB1c2VyRGVmIDogdXNlckRlZi5nZXQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZ2V0dGVyID09IG51bGwpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkdldHRlciBpcyBtaXNzaW5nIGZvciBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzU1NSKSB7XG4gICAgICAvLyBjcmVhdGUgaW50ZXJuYWwgd2F0Y2hlciBmb3IgdGhlIGNvbXB1dGVkIHByb3BlcnR5LlxuICAgICAgd2F0Y2hlcnNba2V5XSA9IG5ldyBXYXRjaGVyKFxuICAgICAgICB2bSxcbiAgICAgICAgZ2V0dGVyIHx8IG5vb3AsXG4gICAgICAgIG5vb3AsXG4gICAgICAgIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gY29tcG9uZW50LWRlZmluZWQgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgYWxyZWFkeSBkZWZpbmVkIG9uIHRoZVxuICAgIC8vIGNvbXBvbmVudCBwcm90b3R5cGUuIFdlIG9ubHkgbmVlZCB0byBkZWZpbmUgY29tcHV0ZWQgcHJvcGVydGllcyBkZWZpbmVkXG4gICAgLy8gYXQgaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIGRlZmluZUNvbXB1dGVkKHZtLCBrZXksIHVzZXJEZWYpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGtleSBpbiB2bS4kZGF0YSkge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluIGRhdGEuXCIpLCB2bSk7XG4gICAgICB9IGVsc2UgaWYgKHZtLiRvcHRpb25zLnByb3BzICYmIGtleSBpbiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgcHJvcC5cIiksIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lQ29tcHV0ZWQgKFxuICB0YXJnZXQsXG4gIGtleSxcbiAgdXNlckRlZlxuKSB7XG4gIHZhciBzaG91bGRDYWNoZSA9ICFpc1NlcnZlclJlbmRlcmluZygpO1xuICBpZiAodHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gc2hvdWxkQ2FjaGVcbiAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYpO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBub29wO1xuICB9IGVsc2Uge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSB1c2VyRGVmLmdldFxuICAgICAgPyBzaG91bGRDYWNoZSAmJiB1c2VyRGVmLmNhY2hlICE9PSBmYWxzZVxuICAgICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYuZ2V0KVxuICAgICAgOiBub29wO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSB1c2VyRGVmLnNldCB8fCBub29wO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID09PSBub29wKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgYXNzaWduZWQgdG8gYnV0IGl0IGhhcyBubyBzZXR0ZXIuXCIpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wdXRlZEdldHRlciAoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgdmFyIHdhdGNoZXIgPSB0aGlzLl9jb21wdXRlZFdhdGNoZXJzICYmIHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnNba2V5XTtcbiAgICBpZiAod2F0Y2hlcikge1xuICAgICAgaWYgKHdhdGNoZXIuZGlydHkpIHtcbiAgICAgICAgd2F0Y2hlci5ldmFsdWF0ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgd2F0Y2hlci5kZXBlbmQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3YXRjaGVyLnZhbHVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUdldHRlckludm9rZXIoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHtcbiAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCB0aGlzKVxuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRNZXRob2RzICh2bSwgbWV0aG9kcykge1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIG1ldGhvZHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIHR5cGUgXFxcIlwiICsgKHR5cGVvZiBtZXRob2RzW2tleV0pICsgXCJcXFwiIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gXCIgK1xuICAgICAgICAgIFwiRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9cIixcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICgoa2V5IGluIHZtKSAmJiBpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY29uZmxpY3RzIHdpdGggYW4gZXhpc3RpbmcgVnVlIGluc3RhbmNlIG1ldGhvZC4gXCIgK1xuICAgICAgICAgIFwiQXZvaWQgZGVmaW5pbmcgY29tcG9uZW50IG1ldGhvZHMgdGhhdCBzdGFydCB3aXRoIF8gb3IgJC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2bVtrZXldID0gdHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJyA/IG5vb3AgOiBiaW5kKG1ldGhvZHNba2V5XSwgdm0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRXYXRjaCAodm0sIHdhdGNoKSB7XG4gIGZvciAodmFyIGtleSBpbiB3YXRjaCkge1xuICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgaGFuZGxlcixcbiAgb3B0aW9uc1xuKSB7XG4gIGlmIChpc1BsYWluT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgb3B0aW9ucyA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcbiAgfVxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgaGFuZGxlciA9IHZtW2hhbmRsZXJdO1xuICB9XG4gIHJldHVybiB2bS4kd2F0Y2goZXhwT3JGbiwgaGFuZGxlciwgb3B0aW9ucylcbn1cblxuZnVuY3Rpb24gc3RhdGVNaXhpbiAoVnVlKSB7XG4gIC8vIGZsb3cgc29tZWhvdyBoYXMgcHJvYmxlbXMgd2l0aCBkaXJlY3RseSBkZWNsYXJlZCBkZWZpbml0aW9uIG9iamVjdFxuICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXBcbiAgLy8gdGhlIG9iamVjdCBoZXJlLlxuICB2YXIgZGF0YURlZiA9IHt9O1xuICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEgfTtcbiAgdmFyIHByb3BzRGVmID0ge307XG4gIHByb3BzRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Byb3BzIH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGF0YURlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgcmVwbGFjaW5nIGluc3RhbmNlIHJvb3QgJGRhdGEuICcgK1xuICAgICAgICAnVXNlIG5lc3RlZCBkYXRhIHByb3BlcnRpZXMgaW5zdGVhZC4nLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gICAgcHJvcHNEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcIiRwcm9wcyBpcyByZWFkb25seS5cIiwgdGhpcyk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRkYXRhJywgZGF0YURlZik7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHByb3BzJywgcHJvcHNEZWYpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHNldCA9IHNldDtcbiAgVnVlLnByb3RvdHlwZS4kZGVsZXRlID0gZGVsO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHdhdGNoID0gZnVuY3Rpb24gKFxuICAgIGV4cE9yRm4sXG4gICAgY2IsXG4gICAgb3B0aW9uc1xuICApIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChpc1BsYWluT2JqZWN0KGNiKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKVxuICAgIH1cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLnVzZXIgPSB0cnVlO1xuICAgIHZhciB3YXRjaGVyID0gbmV3IFdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5pbW1lZGlhdGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNiLmNhbGwodm0sIHdhdGNoZXIudmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZXJyb3IsIHZtLCAoXCJjYWxsYmFjayBmb3IgaW1tZWRpYXRlIHdhdGNoZXIgXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gdW53YXRjaEZuICgpIHtcbiAgICAgIHdhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkJDMgPSAwO1xuXG5mdW5jdGlvbiBpbml0TWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGEgdWlkXG4gICAgdm0uX3VpZCA9IHVpZCQzKys7XG5cbiAgICB2YXIgc3RhcnRUYWcsIGVuZFRhZztcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLXN0YXJ0OlwiICsgKHZtLl91aWQpO1xuICAgICAgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICB9XG5cbiAgICAvLyBhIGZsYWcgdG8gYXZvaWQgdGhpcyBiZWluZyBvYnNlcnZlZFxuICAgIHZtLl9pc1Z1ZSA9IHRydWU7XG4gICAgLy8gbWVyZ2Ugb3B0aW9uc1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2lzQ29tcG9uZW50KSB7XG4gICAgICAvLyBvcHRpbWl6ZSBpbnRlcm5hbCBjb21wb25lbnQgaW5zdGFudGlhdGlvblxuICAgICAgLy8gc2luY2UgZHluYW1pYyBvcHRpb25zIG1lcmdpbmcgaXMgcHJldHR5IHNsb3csIGFuZCBub25lIG9mIHRoZVxuICAgICAgLy8gaW50ZXJuYWwgY29tcG9uZW50IG9wdGlvbnMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQuXG4gICAgICBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgICAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyh2bS5jb25zdHJ1Y3RvciksXG4gICAgICAgIG9wdGlvbnMgfHwge30sXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpbml0UHJveHkodm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gICAgLy8gZXhwb3NlIHJlYWwgc2VsZlxuICAgIHZtLl9zZWxmID0gdm07XG4gICAgaW5pdExpZmVjeWNsZSh2bSk7XG4gICAgaW5pdEV2ZW50cyh2bSk7XG4gICAgaW5pdFJlbmRlcih2bSk7XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVDcmVhdGUnKTtcbiAgICBpbml0SW5qZWN0aW9ucyh2bSk7IC8vIHJlc29sdmUgaW5qZWN0aW9ucyBiZWZvcmUgZGF0YS9wcm9wc1xuICAgIGluaXRTdGF0ZSh2bSk7XG4gICAgaW5pdFByb3ZpZGUodm0pOyAvLyByZXNvbHZlIHByb3ZpZGUgYWZ0ZXIgZGF0YS9wcm9wc1xuICAgIGNhbGxIb29rKHZtLCAnY3JlYXRlZCcpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHZtLl9uYW1lID0gZm9ybWF0Q29tcG9uZW50TmFtZSh2bSwgZmFsc2UpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyAodm0uX25hbWUpICsgXCIgaW5pdFwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgfVxuXG4gICAgaWYgKHZtLiRvcHRpb25zLmVsKSB7XG4gICAgICB2bS4kbW91bnQodm0uJG9wdGlvbnMuZWwpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdEludGVybmFsQ29tcG9uZW50ICh2bSwgb3B0aW9ucykge1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zID0gT2JqZWN0LmNyZWF0ZSh2bS5jb25zdHJ1Y3Rvci5vcHRpb25zKTtcbiAgLy8gZG9pbmcgdGhpcyBiZWNhdXNlIGl0J3MgZmFzdGVyIHRoYW4gZHluYW1pYyBlbnVtZXJhdGlvbi5cbiAgdmFyIHBhcmVudFZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gIG9wdHMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIG9wdHMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG5cbiAgdmFyIHZub2RlQ29tcG9uZW50T3B0aW9ucyA9IHBhcmVudFZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIG9wdHMucHJvcHNEYXRhID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YTtcbiAgb3B0cy5fcGFyZW50TGlzdGVuZXJzID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmxpc3RlbmVycztcbiAgb3B0cy5fcmVuZGVyQ2hpbGRyZW4gPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW47XG4gIG9wdHMuX2NvbXBvbmVudFRhZyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy50YWc7XG5cbiAgaWYgKG9wdGlvbnMucmVuZGVyKSB7XG4gICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICBvcHRzLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIGlmIChDdG9yLnN1cGVyKSB7XG4gICAgdmFyIHN1cGVyT3B0aW9ucyA9IHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvci5zdXBlcik7XG4gICAgdmFyIGNhY2hlZFN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXJPcHRpb25zO1xuICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykge1xuICAgICAgLy8gc3VwZXIgb3B0aW9uIGNoYW5nZWQsXG4gICAgICAvLyBuZWVkIHRvIHJlc29sdmUgbmV3IG9wdGlvbnMuXG4gICAgICBDdG9yLnN1cGVyT3B0aW9ucyA9IHN1cGVyT3B0aW9ucztcbiAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbGF0ZS1tb2RpZmllZC9hdHRhY2hlZCBvcHRpb25zICgjNDk3NilcbiAgICAgIHZhciBtb2RpZmllZE9wdGlvbnMgPSByZXNvbHZlTW9kaWZpZWRPcHRpb25zKEN0b3IpO1xuICAgICAgLy8gdXBkYXRlIGJhc2UgZXh0ZW5kIG9wdGlvbnNcbiAgICAgIGlmIChtb2RpZmllZE9wdGlvbnMpIHtcbiAgICAgICAgZXh0ZW5kKEN0b3IuZXh0ZW5kT3B0aW9ucywgbW9kaWZpZWRPcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLCBDdG9yLmV4dGVuZE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXSA9IEN0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVNb2RpZmllZE9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG1vZGlmaWVkO1xuICB2YXIgbGF0ZXN0ID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgc2VhbGVkID0gQ3Rvci5zZWFsZWRPcHRpb25zO1xuICBmb3IgKHZhciBrZXkgaW4gbGF0ZXN0KSB7XG4gICAgaWYgKGxhdGVzdFtrZXldICE9PSBzZWFsZWRba2V5XSkge1xuICAgICAgaWYgKCFtb2RpZmllZCkgeyBtb2RpZmllZCA9IHt9OyB9XG4gICAgICBtb2RpZmllZFtrZXldID0gbGF0ZXN0W2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBtb2RpZmllZFxufVxuXG5mdW5jdGlvbiBWdWUgKG9wdGlvbnMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAhKHRoaXMgaW5zdGFuY2VvZiBWdWUpXG4gICkge1xuICAgIHdhcm4oJ1Z1ZSBpcyBhIGNvbnN0cnVjdG9yIGFuZCBzaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIGBuZXdgIGtleXdvcmQnKTtcbiAgfVxuICB0aGlzLl9pbml0KG9wdGlvbnMpO1xufVxuXG5pbml0TWl4aW4oVnVlKTtcbnN0YXRlTWl4aW4oVnVlKTtcbmV2ZW50c01peGluKFZ1ZSk7XG5saWZlY3ljbGVNaXhpbihWdWUpO1xucmVuZGVyTWl4aW4oVnVlKTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRVc2UgKFZ1ZSkge1xuICBWdWUudXNlID0gZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIHZhciBpbnN0YWxsZWRQbHVnaW5zID0gKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgfHwgKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgPSBbXSkpO1xuICAgIGlmIChpbnN0YWxsZWRQbHVnaW5zLmluZGV4T2YocGx1Z2luKSA+IC0xKSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8vIGFkZGl0aW9uYWwgcGFyYW1ldGVyc1xuICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICBpZiAodHlwZW9mIHBsdWdpbi5pbnN0YWxsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdWdpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgICBpbnN0YWxsZWRQbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdE1peGluJDEgKFZ1ZSkge1xuICBWdWUubWl4aW4gPSBmdW5jdGlvbiAobWl4aW4pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnModGhpcy5vcHRpb25zLCBtaXhpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFeHRlbmQgKFZ1ZSkge1xuICAvKipcbiAgICogRWFjaCBpbnN0YW5jZSBjb25zdHJ1Y3RvciwgaW5jbHVkaW5nIFZ1ZSwgaGFzIGEgdW5pcXVlXG4gICAqIGNpZC4gVGhpcyBlbmFibGVzIHVzIHRvIGNyZWF0ZSB3cmFwcGVkIFwiY2hpbGRcbiAgICogY29uc3RydWN0b3JzXCIgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UgYW5kIGNhY2hlIHRoZW0uXG4gICAqL1xuICBWdWUuY2lkID0gMDtcbiAgdmFyIGNpZCA9IDE7XG5cbiAgLyoqXG4gICAqIENsYXNzIGluaGVyaXRhbmNlXG4gICAqL1xuICBWdWUuZXh0ZW5kID0gZnVuY3Rpb24gKGV4dGVuZE9wdGlvbnMpIHtcbiAgICBleHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgU3VwZXIgPSB0aGlzO1xuICAgIHZhciBTdXBlcklkID0gU3VwZXIuY2lkO1xuICAgIHZhciBjYWNoZWRDdG9ycyA9IGV4dGVuZE9wdGlvbnMuX0N0b3IgfHwgKGV4dGVuZE9wdGlvbnMuX0N0b3IgPSB7fSk7XG4gICAgaWYgKGNhY2hlZEN0b3JzW1N1cGVySWRdKSB7XG4gICAgICByZXR1cm4gY2FjaGVkQ3RvcnNbU3VwZXJJZF1cbiAgICB9XG5cbiAgICB2YXIgbmFtZSA9IGV4dGVuZE9wdGlvbnMubmFtZSB8fCBTdXBlci5vcHRpb25zLm5hbWU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgbmFtZSkge1xuICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBTdWIgPSBmdW5jdGlvbiBWdWVDb21wb25lbnQgKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX2luaXQob3B0aW9ucyk7XG4gICAgfTtcbiAgICBTdWIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpO1xuICAgIFN1Yi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdWI7XG4gICAgU3ViLmNpZCA9IGNpZCsrO1xuICAgIFN1Yi5vcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgU3VwZXIub3B0aW9ucyxcbiAgICAgIGV4dGVuZE9wdGlvbnNcbiAgICApO1xuICAgIFN1Ylsnc3VwZXInXSA9IFN1cGVyO1xuXG4gICAgLy8gRm9yIHByb3BzIGFuZCBjb21wdXRlZCBwcm9wZXJ0aWVzLCB3ZSBkZWZpbmUgdGhlIHByb3h5IGdldHRlcnMgb25cbiAgICAvLyB0aGUgVnVlIGluc3RhbmNlcyBhdCBleHRlbnNpb24gdGltZSwgb24gdGhlIGV4dGVuZGVkIHByb3RvdHlwZS4gVGhpc1xuICAgIC8vIGF2b2lkcyBPYmplY3QuZGVmaW5lUHJvcGVydHkgY2FsbHMgZm9yIGVhY2ggaW5zdGFuY2UgY3JlYXRlZC5cbiAgICBpZiAoU3ViLm9wdGlvbnMucHJvcHMpIHtcbiAgICAgIGluaXRQcm9wcyQxKFN1Yik7XG4gICAgfVxuICAgIGlmIChTdWIub3B0aW9ucy5jb21wdXRlZCkge1xuICAgICAgaW5pdENvbXB1dGVkJDEoU3ViKTtcbiAgICB9XG5cbiAgICAvLyBhbGxvdyBmdXJ0aGVyIGV4dGVuc2lvbi9taXhpbi9wbHVnaW4gdXNhZ2VcbiAgICBTdWIuZXh0ZW5kID0gU3VwZXIuZXh0ZW5kO1xuICAgIFN1Yi5taXhpbiA9IFN1cGVyLm1peGluO1xuICAgIFN1Yi51c2UgPSBTdXBlci51c2U7XG5cbiAgICAvLyBjcmVhdGUgYXNzZXQgcmVnaXN0ZXJzLCBzbyBleHRlbmRlZCBjbGFzc2VzXG4gICAgLy8gY2FuIGhhdmUgdGhlaXIgcHJpdmF0ZSBhc3NldHMgdG9vLlxuICAgIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIFN1Ylt0eXBlXSA9IFN1cGVyW3R5cGVdO1xuICAgIH0pO1xuICAgIC8vIGVuYWJsZSByZWN1cnNpdmUgc2VsZi1sb29rdXBcbiAgICBpZiAobmFtZSkge1xuICAgICAgU3ViLm9wdGlvbnMuY29tcG9uZW50c1tuYW1lXSA9IFN1YjtcbiAgICB9XG5cbiAgICAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBzdXBlciBvcHRpb25zIGF0IGV4dGVuc2lvbiB0aW1lLlxuICAgIC8vIGxhdGVyIGF0IGluc3RhbnRpYXRpb24gd2UgY2FuIGNoZWNrIGlmIFN1cGVyJ3Mgb3B0aW9ucyBoYXZlXG4gICAgLy8gYmVlbiB1cGRhdGVkLlxuICAgIFN1Yi5zdXBlck9wdGlvbnMgPSBTdXBlci5vcHRpb25zO1xuICAgIFN1Yi5leHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucztcbiAgICBTdWIuc2VhbGVkT3B0aW9ucyA9IGV4dGVuZCh7fSwgU3ViLm9wdGlvbnMpO1xuXG4gICAgLy8gY2FjaGUgY29uc3RydWN0b3JcbiAgICBjYWNoZWRDdG9yc1tTdXBlcklkXSA9IFN1YjtcbiAgICByZXR1cm4gU3ViXG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyQxIChDb21wKSB7XG4gIHZhciBwcm9wcyA9IENvbXAub3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgcHJveHkoQ29tcC5wcm90b3R5cGUsIFwiX3Byb3BzXCIsIGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkJDEgKENvbXApIHtcbiAgdmFyIGNvbXB1dGVkID0gQ29tcC5vcHRpb25zLmNvbXB1dGVkO1xuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICBkZWZpbmVDb21wdXRlZChDb21wLnByb3RvdHlwZSwga2V5LCBjb21wdXRlZFtrZXldKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEFzc2V0UmVnaXN0ZXJzIChWdWUpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhc3NldCByZWdpc3RyYXRpb24gbWV0aG9kcy5cbiAgICovXG4gIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWVbdHlwZV0gPSBmdW5jdGlvbiAoXG4gICAgICBpZCxcbiAgICAgIGRlZmluaXRpb25cbiAgICApIHtcbiAgICAgIGlmICghZGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGUgPT09ICdjb21wb25lbnQnKSB7XG4gICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbXBvbmVudCcgJiYgaXNQbGFpbk9iamVjdChkZWZpbml0aW9uKSkge1xuICAgICAgICAgIGRlZmluaXRpb24ubmFtZSA9IGRlZmluaXRpb24ubmFtZSB8fCBpZDtcbiAgICAgICAgICBkZWZpbml0aW9uID0gdGhpcy5vcHRpb25zLl9iYXNlLmV4dGVuZChkZWZpbml0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2RpcmVjdGl2ZScgJiYgdHlwZW9mIGRlZmluaXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBkZWZpbml0aW9uID0geyBiaW5kOiBkZWZpbml0aW9uLCB1cGRhdGU6IGRlZmluaXRpb24gfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25cbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lIChvcHRzKSB7XG4gIHJldHVybiBvcHRzICYmIChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnKVxufVxuXG5mdW5jdGlvbiBtYXRjaGVzIChwYXR0ZXJuLCBuYW1lKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uc3BsaXQoJywnKS5pbmRleE9mKG5hbWUpID4gLTFcbiAgfSBlbHNlIGlmIChpc1JlZ0V4cChwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobmFtZSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gcHJ1bmVDYWNoZSAoa2VlcEFsaXZlSW5zdGFuY2UsIGZpbHRlcikge1xuICB2YXIgY2FjaGUgPSBrZWVwQWxpdmVJbnN0YW5jZS5jYWNoZTtcbiAgdmFyIGtleXMgPSBrZWVwQWxpdmVJbnN0YW5jZS5rZXlzO1xuICB2YXIgX3Zub2RlID0ga2VlcEFsaXZlSW5zdGFuY2UuX3Zub2RlO1xuICBmb3IgKHZhciBrZXkgaW4gY2FjaGUpIHtcbiAgICB2YXIgY2FjaGVkTm9kZSA9IGNhY2hlW2tleV07XG4gICAgaWYgKGNhY2hlZE5vZGUpIHtcbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjYWNoZWROb2RlLmNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgaWYgKG5hbWUgJiYgIWZpbHRlcihuYW1lKSkge1xuICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleSwga2V5cywgX3Zub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5IChcbiAgY2FjaGUsXG4gIGtleSxcbiAga2V5cyxcbiAgY3VycmVudFxuKSB7XG4gIHZhciBjYWNoZWQkJDEgPSBjYWNoZVtrZXldO1xuICBpZiAoY2FjaGVkJCQxICYmICghY3VycmVudCB8fCBjYWNoZWQkJDEudGFnICE9PSBjdXJyZW50LnRhZykpIHtcbiAgICBjYWNoZWQkJDEuY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgfVxuICBjYWNoZVtrZXldID0gbnVsbDtcbiAgcmVtb3ZlKGtleXMsIGtleSk7XG59XG5cbnZhciBwYXR0ZXJuVHlwZXMgPSBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XTtcblxudmFyIEtlZXBBbGl2ZSA9IHtcbiAgbmFtZTogJ2tlZXAtYWxpdmUnLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICBwcm9wczoge1xuICAgIGluY2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBleGNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgbWF4OiBbU3RyaW5nLCBOdW1iZXJdXG4gIH0sXG5cbiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCAoKSB7XG4gICAgdGhpcy5jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5rZXlzID0gW107XG4gIH0sXG5cbiAgZGVzdHJveWVkOiBmdW5jdGlvbiBkZXN0cm95ZWQgKCkge1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmNhY2hlKSB7XG4gICAgICBwcnVuZUNhY2hlRW50cnkodGhpcy5jYWNoZSwga2V5LCB0aGlzLmtleXMpO1xuICAgIH1cbiAgfSxcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMuJHdhdGNoKCdpbmNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0pO1xuICAgIHRoaXMuJHdhdGNoKCdleGNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgdmFyIHNsb3QgPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIHZhciB2bm9kZSA9IGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoc2xvdCk7XG4gICAgdmFyIGNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIGlmIChjb21wb25lbnRPcHRpb25zKSB7XG4gICAgICAvLyBjaGVjayBwYXR0ZXJuXG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgIHZhciBpbmNsdWRlID0gcmVmLmluY2x1ZGU7XG4gICAgICB2YXIgZXhjbHVkZSA9IHJlZi5leGNsdWRlO1xuICAgICAgaWYgKFxuICAgICAgICAvLyBub3QgaW5jbHVkZWRcbiAgICAgICAgKGluY2x1ZGUgJiYgKCFuYW1lIHx8ICFtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKSkgfHxcbiAgICAgICAgLy8gZXhjbHVkZWRcbiAgICAgICAgKGV4Y2x1ZGUgJiYgbmFtZSAmJiBtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB2bm9kZVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVmJDEgPSB0aGlzO1xuICAgICAgdmFyIGNhY2hlID0gcmVmJDEuY2FjaGU7XG4gICAgICB2YXIga2V5cyA9IHJlZiQxLmtleXM7XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5ID09IG51bGxcbiAgICAgICAgLy8gc2FtZSBjb25zdHJ1Y3RvciBtYXkgZ2V0IHJlZ2lzdGVyZWQgYXMgZGlmZmVyZW50IGxvY2FsIGNvbXBvbmVudHNcbiAgICAgICAgLy8gc28gY2lkIGFsb25lIGlzIG5vdCBlbm91Z2ggKCMzMjY5KVxuICAgICAgICA/IGNvbXBvbmVudE9wdGlvbnMuQ3Rvci5jaWQgKyAoY29tcG9uZW50T3B0aW9ucy50YWcgPyAoXCI6OlwiICsgKGNvbXBvbmVudE9wdGlvbnMudGFnKSkgOiAnJylcbiAgICAgICAgOiB2bm9kZS5rZXk7XG4gICAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNhY2hlW2tleV0uY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICAgIC8vIG1ha2UgY3VycmVudCBrZXkgZnJlc2hlc3RcbiAgICAgICAgcmVtb3ZlKGtleXMsIGtleSk7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FjaGVba2V5XSA9IHZub2RlO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5XG4gICAgICAgIGlmICh0aGlzLm1heCAmJiBrZXlzLmxlbmd0aCA+IHBhcnNlSW50KHRoaXMubWF4KSkge1xuICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5c1swXSwga2V5cywgdGhpcy5fdm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlIHx8IChzbG90ICYmIHNsb3RbMF0pXG4gIH1cbn07XG5cbnZhciBidWlsdEluQ29tcG9uZW50cyA9IHtcbiAgS2VlcEFsaXZlOiBLZWVwQWxpdmVcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0R2xvYmFsQVBJIChWdWUpIHtcbiAgLy8gY29uZmlnXG4gIHZhciBjb25maWdEZWYgPSB7fTtcbiAgY29uZmlnRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZzsgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25maWdEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0RvIG5vdCByZXBsYWNlIHRoZSBWdWUuY29uZmlnIG9iamVjdCwgc2V0IGluZGl2aWR1YWwgZmllbGRzIGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdjb25maWcnLCBjb25maWdEZWYpO1xuXG4gIC8vIGV4cG9zZWQgdXRpbCBtZXRob2RzLlxuICAvLyBOT1RFOiB0aGVzZSBhcmUgbm90IGNvbnNpZGVyZWQgcGFydCBvZiB0aGUgcHVibGljIEFQSSAtIGF2b2lkIHJlbHlpbmcgb25cbiAgLy8gdGhlbSB1bmxlc3MgeW91IGFyZSBhd2FyZSBvZiB0aGUgcmlzay5cbiAgVnVlLnV0aWwgPSB7XG4gICAgd2Fybjogd2FybixcbiAgICBleHRlbmQ6IGV4dGVuZCxcbiAgICBtZXJnZU9wdGlvbnM6IG1lcmdlT3B0aW9ucyxcbiAgICBkZWZpbmVSZWFjdGl2ZTogZGVmaW5lUmVhY3RpdmUkJDFcbiAgfTtcblxuICBWdWUuc2V0ID0gc2V0O1xuICBWdWUuZGVsZXRlID0gZGVsO1xuICBWdWUubmV4dFRpY2sgPSBuZXh0VGljaztcblxuICAvLyAyLjYgZXhwbGljaXQgb2JzZXJ2YWJsZSBBUElcbiAgVnVlLm9ic2VydmFibGUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgb2JzZXJ2ZShvYmopO1xuICAgIHJldHVybiBvYmpcbiAgfTtcblxuICBWdWUub3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWUub3B0aW9uc1t0eXBlICsgJ3MnXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH0pO1xuXG4gIC8vIHRoaXMgaXMgdXNlZCB0byBpZGVudGlmeSB0aGUgXCJiYXNlXCIgY29uc3RydWN0b3IgdG8gZXh0ZW5kIGFsbCBwbGFpbi1vYmplY3RcbiAgLy8gY29tcG9uZW50cyB3aXRoIGluIFdlZXgncyBtdWx0aS1pbnN0YW5jZSBzY2VuYXJpb3MuXG4gIFZ1ZS5vcHRpb25zLl9iYXNlID0gVnVlO1xuXG4gIGV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBidWlsdEluQ29tcG9uZW50cyk7XG5cbiAgaW5pdFVzZShWdWUpO1xuICBpbml0TWl4aW4kMShWdWUpO1xuICBpbml0RXh0ZW5kKFZ1ZSk7XG4gIGluaXRBc3NldFJlZ2lzdGVycyhWdWUpO1xufVxuXG5pbml0R2xvYmFsQVBJKFZ1ZSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGlzU2VydmVyJywge1xuICBnZXQ6IGlzU2VydmVyUmVuZGVyaW5nXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckc3NyQ29udGV4dCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHRcbiAgfVxufSk7XG5cbi8vIGV4cG9zZSBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCBmb3Igc3NyIHJ1bnRpbWUgaGVscGVyIGluc3RhbGxhdGlvblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ0Z1bmN0aW9uYWxSZW5kZXJDb250ZXh0Jywge1xuICB2YWx1ZTogRnVuY3Rpb25hbFJlbmRlckNvbnRleHRcbn0pO1xuXG5WdWUudmVyc2lvbiA9ICcyLjYuMTAnO1xuXG4vKiAgKi9cblxuLy8gdGhlc2UgYXJlIHJlc2VydmVkIGZvciB3ZWIgYmVjYXVzZSB0aGV5IGFyZSBkaXJlY3RseSBjb21waWxlZCBhd2F5XG4vLyBkdXJpbmcgdGVtcGxhdGUgY29tcGlsYXRpb25cbnZhciBpc1Jlc2VydmVkQXR0ciA9IG1ha2VNYXAoJ3N0eWxlLGNsYXNzJyk7XG5cbi8vIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgdXNpbmcgcHJvcHMgZm9yIGJpbmRpbmdcbnZhciBhY2NlcHRWYWx1ZSA9IG1ha2VNYXAoJ2lucHV0LHRleHRhcmVhLG9wdGlvbixzZWxlY3QscHJvZ3Jlc3MnKTtcbnZhciBtdXN0VXNlUHJvcCA9IGZ1bmN0aW9uICh0YWcsIHR5cGUsIGF0dHIpIHtcbiAgcmV0dXJuIChcbiAgICAoYXR0ciA9PT0gJ3ZhbHVlJyAmJiBhY2NlcHRWYWx1ZSh0YWcpKSAmJiB0eXBlICE9PSAnYnV0dG9uJyB8fFxuICAgIChhdHRyID09PSAnc2VsZWN0ZWQnICYmIHRhZyA9PT0gJ29wdGlvbicpIHx8XG4gICAgKGF0dHIgPT09ICdjaGVja2VkJyAmJiB0YWcgPT09ICdpbnB1dCcpIHx8XG4gICAgKGF0dHIgPT09ICdtdXRlZCcgJiYgdGFnID09PSAndmlkZW8nKVxuICApXG59O1xuXG52YXIgaXNFbnVtZXJhdGVkQXR0ciA9IG1ha2VNYXAoJ2NvbnRlbnRlZGl0YWJsZSxkcmFnZ2FibGUsc3BlbGxjaGVjaycpO1xuXG52YXIgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlID0gbWFrZU1hcCgnZXZlbnRzLGNhcmV0LHR5cGluZyxwbGFpbnRleHQtb25seScpO1xuXG52YXIgY29udmVydEVudW1lcmF0ZWRWYWx1ZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJ1xuICAgID8gJ2ZhbHNlJ1xuICAgIC8vIGFsbG93IGFyYml0cmFyeSBzdHJpbmcgdmFsdWUgZm9yIGNvbnRlbnRlZGl0YWJsZVxuICAgIDoga2V5ID09PSAnY29udGVudGVkaXRhYmxlJyAmJiBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUodmFsdWUpXG4gICAgICA/IHZhbHVlXG4gICAgICA6ICd0cnVlJ1xufTtcblxudmFyIGlzQm9vbGVhbkF0dHIgPSBtYWtlTWFwKFxuICAnYWxsb3dmdWxsc2NyZWVuLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjaGVja2VkLGNvbXBhY3QsY29udHJvbHMsZGVjbGFyZSwnICtcbiAgJ2RlZmF1bHQsZGVmYXVsdGNoZWNrZWQsZGVmYXVsdG11dGVkLGRlZmF1bHRzZWxlY3RlZCxkZWZlcixkaXNhYmxlZCwnICtcbiAgJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJyArXG4gICdtdXRlZCxub2hyZWYsbm9yZXNpemUsbm9zaGFkZSxub3ZhbGlkYXRlLG5vd3JhcCxvcGVuLHBhdXNlb25leGl0LHJlYWRvbmx5LCcgK1xuICAncmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLHNlbGVjdGVkLHNvcnRhYmxlLHRyYW5zbGF0ZSwnICtcbiAgJ3RydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGUnXG4pO1xuXG52YXIgeGxpbmtOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcblxudmFyIGlzWGxpbmsgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gbmFtZS5jaGFyQXQoNSkgPT09ICc6JyAmJiBuYW1lLnNsaWNlKDAsIDUpID09PSAneGxpbmsnXG59O1xuXG52YXIgZ2V0WGxpbmtQcm9wID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGlzWGxpbmsobmFtZSkgPyBuYW1lLnNsaWNlKDYsIG5hbWUubGVuZ3RoKSA6ICcnXG59O1xuXG52YXIgaXNGYWxzeUF0dHJWYWx1ZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gZmFsc2Vcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZW5DbGFzc0ZvclZub2RlICh2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKGlzRGVmKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIGlmIChjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShjaGlsZE5vZGUuZGF0YSwgZGF0YSk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChpc0RlZihwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoZGF0YSwgcGFyZW50Tm9kZS5kYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlbmRlckNsYXNzKGRhdGEuc3RhdGljQ2xhc3MsIGRhdGEuY2xhc3MpXG59XG5cbmZ1bmN0aW9uIG1lcmdlQ2xhc3NEYXRhIChjaGlsZCwgcGFyZW50KSB7XG4gIHJldHVybiB7XG4gICAgc3RhdGljQ2xhc3M6IGNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcywgcGFyZW50LnN0YXRpY0NsYXNzKSxcbiAgICBjbGFzczogaXNEZWYoY2hpbGQuY2xhc3MpXG4gICAgICA/IFtjaGlsZC5jbGFzcywgcGFyZW50LmNsYXNzXVxuICAgICAgOiBwYXJlbnQuY2xhc3NcbiAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJDbGFzcyAoXG4gIHN0YXRpY0NsYXNzLFxuICBkeW5hbWljQ2xhc3Ncbikge1xuICBpZiAoaXNEZWYoc3RhdGljQ2xhc3MpIHx8IGlzRGVmKGR5bmFtaWNDbGFzcykpIHtcbiAgICByZXR1cm4gY29uY2F0KHN0YXRpY0NsYXNzLCBzdHJpbmdpZnlDbGFzcyhkeW5hbWljQ2xhc3MpKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBjb25jYXQgKGEsIGIpIHtcbiAgcmV0dXJuIGEgPyBiID8gKGEgKyAnICcgKyBiKSA6IGEgOiAoYiB8fCAnJylcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5Q2xhc3MgKHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlBcnJheSh2YWx1ZSlcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeU9iamVjdCh2YWx1ZSlcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlBcnJheSAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgc3RyaW5naWZpZWQ7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGlzRGVmKHN0cmluZ2lmaWVkID0gc3RyaW5naWZ5Q2xhc3ModmFsdWVbaV0pKSAmJiBzdHJpbmdpZmllZCAhPT0gJycpIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IHN0cmluZ2lmaWVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeU9iamVjdCAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAodmFsdWVba2V5XSkge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgbmFtZXNwYWNlTWFwID0ge1xuICBzdmc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gIG1hdGg6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MJ1xufTtcblxudmFyIGlzSFRNTFRhZyA9IG1ha2VNYXAoXG4gICdodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSwnICtcbiAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbiwnICtcbiAgJ2RpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLCcgK1xuICAnYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LCcgK1xuICAncyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sJyArXG4gICdlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucywnICtcbiAgJ2NhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLCcgK1xuICAnYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbiwnICtcbiAgJ291dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxtZW51LG1lbnVpdGVtLHN1bW1hcnksJyArXG4gICdjb250ZW50LGVsZW1lbnQsc2hhZG93LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290J1xuKTtcblxuLy8gdGhpcyBtYXAgaXMgaW50ZW50aW9uYWxseSBzZWxlY3RpdmUsIG9ubHkgY292ZXJpbmcgU1ZHIGVsZW1lbnRzIHRoYXQgbWF5XG4vLyBjb250YWluIGNoaWxkIGVsZW1lbnRzLlxudmFyIGlzU1ZHID0gbWFrZU1hcChcbiAgJ3N2ZyxhbmltYXRlLGNpcmNsZSxjbGlwcGF0aCxjdXJzb3IsZGVmcyxkZXNjLGVsbGlwc2UsZmlsdGVyLGZvbnQtZmFjZSwnICtcbiAgJ2ZvcmVpZ25PYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLCcgK1xuICAncG9seWdvbixwb2x5bGluZSxyZWN0LHN3aXRjaCxzeW1ib2wsdGV4dCx0ZXh0cGF0aCx0c3Bhbix1c2UsdmlldycsXG4gIHRydWVcbik7XG5cbnZhciBpc1Jlc2VydmVkVGFnID0gZnVuY3Rpb24gKHRhZykge1xuICByZXR1cm4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkcodGFnKVxufTtcblxuZnVuY3Rpb24gZ2V0VGFnTmFtZXNwYWNlICh0YWcpIHtcbiAgaWYgKGlzU1ZHKHRhZykpIHtcbiAgICByZXR1cm4gJ3N2ZydcbiAgfVxuICAvLyBiYXNpYyBzdXBwb3J0IGZvciBNYXRoTUxcbiAgLy8gbm90ZSBpdCBkb2Vzbid0IHN1cHBvcnQgb3RoZXIgTWF0aE1MIGVsZW1lbnRzIGJlaW5nIGNvbXBvbmVudCByb290c1xuICBpZiAodGFnID09PSAnbWF0aCcpIHtcbiAgICByZXR1cm4gJ21hdGgnXG4gIH1cbn1cblxudmFyIHVua25vd25FbGVtZW50Q2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCAodGFnKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWluQnJvd3Nlcikge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgaWYgKGlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHRhZyA9IHRhZy50b0xvd2VyQ2FzZSgpO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHVua25vd25FbGVtZW50Q2FjaGVbdGFnXVxuICB9XG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgaWYgKHRhZy5pbmRleE9mKCctJykgPiAtMSkge1xuICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI4MjEwMzY0LzEwNzAyNDRcbiAgICByZXR1cm4gKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSA9IChcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTFVua25vd25FbGVtZW50IHx8XG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxFbGVtZW50XG4gICAgKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSA9IC9IVE1MVW5rbm93bkVsZW1lbnQvLnRlc3QoZWwudG9TdHJpbmcoKSkpXG4gIH1cbn1cblxudmFyIGlzVGV4dElucHV0VHlwZSA9IG1ha2VNYXAoJ3RleHQsbnVtYmVyLHBhc3N3b3JkLHNlYXJjaCxlbWFpbCx0ZWwsdXJsJyk7XG5cbi8qICAqL1xuXG4vKipcbiAqIFF1ZXJ5IGFuIGVsZW1lbnQgc2VsZWN0b3IgaWYgaXQncyBub3QgYW4gZWxlbWVudCBhbHJlYWR5LlxuICovXG5mdW5jdGlvbiBxdWVyeSAoZWwpIHtcbiAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgc2VsZWN0ZWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICBpZiAoIXNlbGVjdGVkKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdDYW5ub3QgZmluZCBlbGVtZW50OiAnICsgZWxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdGVkXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVsXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQkMSAodGFnTmFtZSwgdm5vZGUpIHtcbiAgdmFyIGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gIGlmICh0YWdOYW1lICE9PSAnc2VsZWN0Jykge1xuICAgIHJldHVybiBlbG1cbiAgfVxuICAvLyBmYWxzZSBvciBudWxsIHdpbGwgcmVtb3ZlIHRoZSBhdHRyaWJ1dGUgYnV0IHVuZGVmaW5lZCB3aWxsIG5vdFxuICBpZiAodm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLmF0dHJzICYmIHZub2RlLmRhdGEuYXR0cnMubXVsdGlwbGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgJ211bHRpcGxlJyk7XG4gIH1cbiAgcmV0dXJuIGVsbVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMgKG5hbWVzcGFjZSwgdGFnTmFtZSkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZU1hcFtuYW1lc3BhY2VdLCB0YWdOYW1lKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZSAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dClcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tbWVudCAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCh0ZXh0KVxufVxuXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUgKHBhcmVudE5vZGUsIG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLnJlbW92ZUNoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBwYXJlbnROb2RlIChub2RlKSB7XG4gIHJldHVybiBub2RlLnBhcmVudE5vZGVcbn1cblxuZnVuY3Rpb24gbmV4dFNpYmxpbmcgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmdcbn1cblxuZnVuY3Rpb24gdGFnTmFtZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS50YWdOYW1lXG59XG5cbmZ1bmN0aW9uIHNldFRleHRDb250ZW50IChub2RlLCB0ZXh0KSB7XG4gIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufVxuXG5mdW5jdGlvbiBzZXRTdHlsZVNjb3BlIChub2RlLCBzY29wZUlkKSB7XG4gIG5vZGUuc2V0QXR0cmlidXRlKHNjb3BlSWQsICcnKTtcbn1cblxudmFyIG5vZGVPcHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQkMSxcbiAgY3JlYXRlRWxlbWVudE5TOiBjcmVhdGVFbGVtZW50TlMsXG4gIGNyZWF0ZVRleHROb2RlOiBjcmVhdGVUZXh0Tm9kZSxcbiAgY3JlYXRlQ29tbWVudDogY3JlYXRlQ29tbWVudCxcbiAgaW5zZXJ0QmVmb3JlOiBpbnNlcnRCZWZvcmUsXG4gIHJlbW92ZUNoaWxkOiByZW1vdmVDaGlsZCxcbiAgYXBwZW5kQ2hpbGQ6IGFwcGVuZENoaWxkLFxuICBwYXJlbnROb2RlOiBwYXJlbnROb2RlLFxuICBuZXh0U2libGluZzogbmV4dFNpYmxpbmcsXG4gIHRhZ05hbWU6IHRhZ05hbWUsXG4gIHNldFRleHRDb250ZW50OiBzZXRUZXh0Q29udGVudCxcbiAgc2V0U3R5bGVTY29wZTogc2V0U3R5bGVTY29wZVxufSk7XG5cbi8qICAqL1xuXG52YXIgcmVmID0ge1xuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSAoXywgdm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICBpZiAob2xkVm5vZGUuZGF0YS5yZWYgIT09IHZub2RlLmRhdGEucmVmKSB7XG4gICAgICByZWdpc3RlclJlZihvbGRWbm9kZSwgdHJ1ZSk7XG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgfVxuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlLCB0cnVlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJSZWYgKHZub2RlLCBpc1JlbW92YWwpIHtcbiAgdmFyIGtleSA9IHZub2RlLmRhdGEucmVmO1xuICBpZiAoIWlzRGVmKGtleSkpIHsgcmV0dXJuIH1cblxuICB2YXIgdm0gPSB2bm9kZS5jb250ZXh0O1xuICB2YXIgcmVmID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgfHwgdm5vZGUuZWxtO1xuICB2YXIgcmVmcyA9IHZtLiRyZWZzO1xuICBpZiAoaXNSZW1vdmFsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgcmVtb3ZlKHJlZnNba2V5XSwgcmVmKTtcbiAgICB9IGVsc2UgaWYgKHJlZnNba2V5XSA9PT0gcmVmKSB7XG4gICAgICByZWZzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh2bm9kZS5kYXRhLnJlZkluRm9yKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgICByZWZzW2tleV0gPSBbcmVmXTtcbiAgICAgIH0gZWxzZSBpZiAocmVmc1trZXldLmluZGV4T2YocmVmKSA8IDApIHtcbiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICAgIHJlZnNba2V5XS5wdXNoKHJlZik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZnNba2V5XSA9IHJlZjtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBWaXJ0dWFsIERPTSBwYXRjaGluZyBhbGdvcml0aG0gYmFzZWQgb24gU25hYmJkb20gYnlcbiAqIFNpbW9uIEZyaWlzIFZpbmR1bSAoQHBhbGRlcGluZClcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhbGRlcGluZC9zbmFiYmRvbS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogbW9kaWZpZWQgYnkgRXZhbiBZb3UgKEB5eXg5OTA4MDMpXG4gKlxuICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBiZWNhdXNlIHRoaXMgZmlsZSBpcyBwZXJmLWNyaXRpY2FsIGFuZCB0aGUgY29zdFxuICogb2YgbWFraW5nIGZsb3cgdW5kZXJzdGFuZCBpdCBpcyBub3Qgd29ydGggaXQuXG4gKi9cblxudmFyIGVtcHR5Tm9kZSA9IG5ldyBWTm9kZSgnJywge30sIFtdKTtcblxudmFyIGhvb2tzID0gWydjcmVhdGUnLCAnYWN0aXZhdGUnLCAndXBkYXRlJywgJ3JlbW92ZScsICdkZXN0cm95J107XG5cbmZ1bmN0aW9uIHNhbWVWbm9kZSAoYSwgYikge1xuICByZXR1cm4gKFxuICAgIGEua2V5ID09PSBiLmtleSAmJiAoXG4gICAgICAoXG4gICAgICAgIGEudGFnID09PSBiLnRhZyAmJlxuICAgICAgICBhLmlzQ29tbWVudCA9PT0gYi5pc0NvbW1lbnQgJiZcbiAgICAgICAgaXNEZWYoYS5kYXRhKSA9PT0gaXNEZWYoYi5kYXRhKSAmJlxuICAgICAgICBzYW1lSW5wdXRUeXBlKGEsIGIpXG4gICAgICApIHx8IChcbiAgICAgICAgaXNUcnVlKGEuaXNBc3luY1BsYWNlaG9sZGVyKSAmJlxuICAgICAgICBhLmFzeW5jRmFjdG9yeSA9PT0gYi5hc3luY0ZhY3RvcnkgJiZcbiAgICAgICAgaXNVbmRlZihiLmFzeW5jRmFjdG9yeS5lcnJvcilcbiAgICAgIClcbiAgICApXG4gIClcbn1cblxuZnVuY3Rpb24gc2FtZUlucHV0VHlwZSAoYSwgYikge1xuICBpZiAoYS50YWcgIT09ICdpbnB1dCcpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaTtcbiAgdmFyIHR5cGVBID0gaXNEZWYoaSA9IGEuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgdmFyIHR5cGVCID0gaXNEZWYoaSA9IGIuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgcmV0dXJuIHR5cGVBID09PSB0eXBlQiB8fCBpc1RleHRJbnB1dFR5cGUodHlwZUEpICYmIGlzVGV4dElucHV0VHlwZSh0eXBlQilcbn1cblxuZnVuY3Rpb24gY3JlYXRlS2V5VG9PbGRJZHggKGNoaWxkcmVuLCBiZWdpbklkeCwgZW5kSWR4KSB7XG4gIHZhciBpLCBrZXk7XG4gIHZhciBtYXAgPSB7fTtcbiAgZm9yIChpID0gYmVnaW5JZHg7IGkgPD0gZW5kSWR4OyArK2kpIHtcbiAgICBrZXkgPSBjaGlsZHJlbltpXS5rZXk7XG4gICAgaWYgKGlzRGVmKGtleSkpIHsgbWFwW2tleV0gPSBpOyB9XG4gIH1cbiAgcmV0dXJuIG1hcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVQYXRjaEZ1bmN0aW9uIChiYWNrZW5kKSB7XG4gIHZhciBpLCBqO1xuICB2YXIgY2JzID0ge307XG5cbiAgdmFyIG1vZHVsZXMgPSBiYWNrZW5kLm1vZHVsZXM7XG4gIHZhciBub2RlT3BzID0gYmFja2VuZC5ub2RlT3BzO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7ICsraSkge1xuICAgIGNic1tob29rc1tpXV0gPSBbXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgbW9kdWxlcy5sZW5ndGg7ICsraikge1xuICAgICAgaWYgKGlzRGVmKG1vZHVsZXNbal1baG9va3NbaV1dKSkge1xuICAgICAgICBjYnNbaG9va3NbaV1dLnB1c2gobW9kdWxlc1tqXVtob29rc1tpXV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtcHR5Tm9kZUF0IChlbG0pIHtcbiAgICByZXR1cm4gbmV3IFZOb2RlKG5vZGVPcHMudGFnTmFtZShlbG0pLnRvTG93ZXJDYXNlKCksIHt9LCBbXSwgdW5kZWZpbmVkLCBlbG0pXG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVSbUNiIChjaGlsZEVsbSwgbGlzdGVuZXJzKSB7XG4gICAgZnVuY3Rpb24gcmVtb3ZlJCQxICgpIHtcbiAgICAgIGlmICgtLXJlbW92ZSQkMS5saXN0ZW5lcnMgPT09IDApIHtcbiAgICAgICAgcmVtb3ZlTm9kZShjaGlsZEVsbSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlbW92ZSQkMS5saXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gICAgcmV0dXJuIHJlbW92ZSQkMVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlTm9kZSAoZWwpIHtcbiAgICB2YXIgcGFyZW50ID0gbm9kZU9wcy5wYXJlbnROb2RlKGVsKTtcbiAgICAvLyBlbGVtZW50IG1heSBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkIGR1ZSB0byB2LWh0bWwgLyB2LXRleHRcbiAgICBpZiAoaXNEZWYocGFyZW50KSkge1xuICAgICAgbm9kZU9wcy5yZW1vdmVDaGlsZChwYXJlbnQsIGVsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1Vua25vd25FbGVtZW50JCQxICh2bm9kZSwgaW5WUHJlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICFpblZQcmUgJiZcbiAgICAgICF2bm9kZS5ucyAmJlxuICAgICAgIShcbiAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5sZW5ndGggJiZcbiAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5zb21lKGZ1bmN0aW9uIChpZ25vcmUpIHtcbiAgICAgICAgICByZXR1cm4gaXNSZWdFeHAoaWdub3JlKVxuICAgICAgICAgICAgPyBpZ25vcmUudGVzdCh2bm9kZS50YWcpXG4gICAgICAgICAgICA6IGlnbm9yZSA9PT0gdm5vZGUudGFnXG4gICAgICAgIH0pXG4gICAgICApICYmXG4gICAgICBjb25maWcuaXNVbmtub3duRWxlbWVudCh2bm9kZS50YWcpXG4gICAgKVxuICB9XG5cbiAgdmFyIGNyZWF0aW5nRWxtSW5WUHJlID0gMDtcblxuICBmdW5jdGlvbiBjcmVhdGVFbG0gKFxuICAgIHZub2RlLFxuICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICBwYXJlbnRFbG0sXG4gICAgcmVmRWxtLFxuICAgIG5lc3RlZCxcbiAgICBvd25lckFycmF5LFxuICAgIGluZGV4XG4gICkge1xuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBUaGlzIHZub2RlIHdhcyB1c2VkIGluIGEgcHJldmlvdXMgcmVuZGVyIVxuICAgICAgLy8gbm93IGl0J3MgdXNlZCBhcyBhIG5ldyBub2RlLCBvdmVyd3JpdGluZyBpdHMgZWxtIHdvdWxkIGNhdXNlXG4gICAgICAvLyBwb3RlbnRpYWwgcGF0Y2ggZXJyb3JzIGRvd24gdGhlIHJvYWQgd2hlbiBpdCdzIHVzZWQgYXMgYW4gaW5zZXJ0aW9uXG4gICAgICAvLyByZWZlcmVuY2Ugbm9kZS4gSW5zdGVhZCwgd2UgY2xvbmUgdGhlIG5vZGUgb24tZGVtYW5kIGJlZm9yZSBjcmVhdGluZ1xuICAgICAgLy8gYXNzb2NpYXRlZCBET00gZWxlbWVudCBmb3IgaXQuXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdm5vZGUuaXNSb290SW5zZXJ0ID0gIW5lc3RlZDsgLy8gZm9yIHRyYW5zaXRpb24gZW50ZXIgY2hlY2tcbiAgICBpZiAoY3JlYXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgICAgY3JlYXRpbmdFbG1JblZQcmUrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgY3JlYXRpbmdFbG1JblZQcmUpKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgICdVbmtub3duIGN1c3RvbSBlbGVtZW50OiA8JyArIHRhZyArICc+IC0gZGlkIHlvdSAnICtcbiAgICAgICAgICAgICdyZWdpc3RlciB0aGUgY29tcG9uZW50IGNvcnJlY3RseT8gRm9yIHJlY3Vyc2l2ZSBjb21wb25lbnRzLCAnICtcbiAgICAgICAgICAgICdtYWtlIHN1cmUgdG8gcHJvdmlkZSB0aGUgXCJuYW1lXCIgb3B0aW9uLicsXG4gICAgICAgICAgICB2bm9kZS5jb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5lbG0gPSB2bm9kZS5uc1xuICAgICAgICA/IG5vZGVPcHMuY3JlYXRlRWxlbWVudE5TKHZub2RlLm5zLCB0YWcpXG4gICAgICAgIDogbm9kZU9wcy5jcmVhdGVFbGVtZW50KHRhZywgdm5vZGUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIHtcbiAgICAgICAgY3JlYXRlQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgY3JlYXRpbmdFbG1JblZQcmUtLTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpKSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZUNvbW1lbnQodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIHZhciBpc1JlYWN0aXZhdGVkID0gaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGkua2VlcEFsaXZlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7XG4gICAgICAgIGkodm5vZGUsIGZhbHNlIC8qIGh5ZHJhdGluZyAqLyk7XG4gICAgICB9XG4gICAgICAvLyBhZnRlciBjYWxsaW5nIHRoZSBpbml0IGhvb2ssIGlmIHRoZSB2bm9kZSBpcyBhIGNoaWxkIGNvbXBvbmVudFxuICAgICAgLy8gaXQgc2hvdWxkJ3ZlIGNyZWF0ZWQgYSBjaGlsZCBpbnN0YW5jZSBhbmQgbW91bnRlZCBpdC4gdGhlIGNoaWxkXG4gICAgICAvLyBjb21wb25lbnQgYWxzbyBoYXMgc2V0IHRoZSBwbGFjZWhvbGRlciB2bm9kZSdzIGVsbS5cbiAgICAgIC8vIGluIHRoYXQgY2FzZSB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIGVsZW1lbnQgYW5kIGJlIGRvbmUuXG4gICAgICBpZiAoaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgICAgaWYgKGlzVHJ1ZShpc1JlYWN0aXZhdGVkKSkge1xuICAgICAgICAgIHJlYWN0aXZhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdENvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpKSB7XG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaC5hcHBseShpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCk7XG4gICAgICB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQgPSBudWxsO1xuICAgIH1cbiAgICB2bm9kZS5lbG0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZWw7XG4gICAgaWYgKGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVtcHR5IGNvbXBvbmVudCByb290LlxuICAgICAgLy8gc2tpcCBhbGwgZWxlbWVudC1yZWxhdGVkIG1vZHVsZXMgZXhjZXB0IGZvciByZWYgKCMzNDU1KVxuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgICAgLy8gbWFrZSBzdXJlIHRvIGludm9rZSB0aGUgaW5zZXJ0IGhvb2tcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFjdGl2YXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpO1xuICAgIC8vIGhhY2sgZm9yICM0MzM5OiBhIHJlYWN0aXZhdGVkIGNvbXBvbmVudCB3aXRoIGlubmVyIHRyYW5zaXRpb25cbiAgICAvLyBkb2VzIG5vdCB0cmlnZ2VyIGJlY2F1c2UgdGhlIGlubmVyIG5vZGUncyBjcmVhdGVkIGhvb2tzIGFyZSBub3QgY2FsbGVkXG4gICAgLy8gYWdhaW4uIEl0J3Mgbm90IGlkZWFsIHRvIGludm9sdmUgbW9kdWxlLXNwZWNpZmljIGxvZ2ljIGluIGhlcmUgYnV0XG4gICAgLy8gdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgYmV0dGVyIHdheSB0byBkbyBpdC5cbiAgICB2YXIgaW5uZXJOb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgaW5uZXJOb2RlID0gaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChpc0RlZihpID0gaW5uZXJOb2RlLmRhdGEpICYmIGlzRGVmKGkgPSBpLnRyYW5zaXRpb24pKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuYWN0aXZhdGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBjYnMuYWN0aXZhdGVbaV0oZW1wdHlOb2RlLCBpbm5lck5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKGlubmVyTm9kZSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVubGlrZSBhIG5ld2x5IGNyZWF0ZWQgY29tcG9uZW50LFxuICAgIC8vIGEgcmVhY3RpdmF0ZWQga2VlcC1hbGl2ZSBjb21wb25lbnQgZG9lc24ndCBpbnNlcnQgaXRzZWxmXG4gICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zZXJ0IChwYXJlbnQsIGVsbSwgcmVmJCQxKSB7XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIGlmIChpc0RlZihyZWYkJDEpKSB7XG4gICAgICAgIGlmIChub2RlT3BzLnBhcmVudE5vZGUocmVmJCQxKSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50LCBlbG0sIHJlZiQkMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQocGFyZW50LCBlbG0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkcmVuICh2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKGNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY3JlYXRlRWxtKGNoaWxkcmVuW2ldLCBpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmVsbSwgbnVsbCwgdHJ1ZSwgY2hpbGRyZW4sIGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUodm5vZGUudGV4dCkpIHtcbiAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQodm5vZGUuZWxtLCBub2RlT3BzLmNyZWF0ZVRleHROb2RlKFN0cmluZyh2bm9kZS50ZXh0KSkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUGF0Y2hhYmxlICh2bm9kZSkge1xuICAgIHdoaWxlICh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgdm5vZGUgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgfVxuICAgIHJldHVybiBpc0RlZih2bm9kZS50YWcpXG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VDcmVhdGVIb29rcyAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICBpID0gdm5vZGUuZGF0YS5ob29rOyAvLyBSZXVzZSB2YXJpYWJsZVxuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgaWYgKGlzRGVmKGkuY3JlYXRlKSkgeyBpLmNyZWF0ZShlbXB0eU5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkuaW5zZXJ0KSkgeyBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICAvLyBzZXQgc2NvcGUgaWQgYXR0cmlidXRlIGZvciBzY29wZWQgQ1NTLlxuICAvLyB0aGlzIGlzIGltcGxlbWVudGVkIGFzIGEgc3BlY2lhbCBjYXNlIHRvIGF2b2lkIHRoZSBvdmVyaGVhZFxuICAvLyBvZiBnb2luZyB0aHJvdWdoIHRoZSBub3JtYWwgYXR0cmlidXRlIHBhdGNoaW5nIHByb2Nlc3MuXG4gIGZ1bmN0aW9uIHNldFNjb3BlICh2bm9kZSkge1xuICAgIHZhciBpO1xuICAgIGlmIChpc0RlZihpID0gdm5vZGUuZm5TY29wZUlkKSkge1xuICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlO1xuICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgIGlmIChpc0RlZihpID0gYW5jZXN0b3IuY29udGV4dCkgJiYgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpKSB7XG4gICAgICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGZvciBzbG90IGNvbnRlbnQgdGhleSBzaG91bGQgYWxzbyBnZXQgdGhlIHNjb3BlSWQgZnJvbSB0aGUgaG9zdCBpbnN0YW5jZS5cbiAgICBpZiAoaXNEZWYoaSA9IGFjdGl2ZUluc3RhbmNlKSAmJlxuICAgICAgaSAhPT0gdm5vZGUuY29udGV4dCAmJlxuICAgICAgaSAhPT0gdm5vZGUuZm5Db250ZXh0ICYmXG4gICAgICBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZClcbiAgICApIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFZub2RlcyAocGFyZW50RWxtLCByZWZFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgY3JlYXRlRWxtKHZub2Rlc1tzdGFydElkeF0sIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0sIGZhbHNlLCB2bm9kZXMsIHN0YXJ0SWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VEZXN0cm95SG9vayAodm5vZGUpIHtcbiAgICB2YXIgaSwgajtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuZGVzdHJveSkpIHsgaSh2bm9kZSk7IH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkgeyBjYnMuZGVzdHJveVtpXSh2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jaGlsZHJlbikpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7ICsraikge1xuICAgICAgICBpbnZva2VEZXN0cm95SG9vayh2bm9kZS5jaGlsZHJlbltqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlVm5vZGVzIChwYXJlbnRFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIHZhciBjaCA9IHZub2Rlc1tzdGFydElkeF07XG4gICAgICBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihjaC50YWcpKSB7XG4gICAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhjaCk7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2soY2gpO1xuICAgICAgICB9IGVsc2UgeyAvLyBUZXh0IG5vZGVcbiAgICAgICAgICByZW1vdmVOb2RlKGNoLmVsbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rICh2bm9kZSwgcm0pIHtcbiAgICBpZiAoaXNEZWYocm0pIHx8IGlzRGVmKHZub2RlLmRhdGEpKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjYnMucmVtb3ZlLmxlbmd0aCArIDE7XG4gICAgICBpZiAoaXNEZWYocm0pKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgYSByZWN1cnNpdmVseSBwYXNzZWQgZG93biBybSBjYWxsYmFja1xuICAgICAgICAvLyBpbmNyZWFzZSB0aGUgbGlzdGVuZXJzIGNvdW50XG4gICAgICAgIHJtLmxpc3RlbmVycyArPSBsaXN0ZW5lcnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkaXJlY3RseSByZW1vdmluZ1xuICAgICAgICBybSA9IGNyZWF0ZVJtQ2Iodm5vZGUuZWxtLCBsaXN0ZW5lcnMpO1xuICAgICAgfVxuICAgICAgLy8gcmVjdXJzaXZlbHkgaW52b2tlIGhvb2tzIG9uIGNoaWxkIGNvbXBvbmVudCByb290IG5vZGVcbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGlzRGVmKGkgPSBpLl92bm9kZSkgJiYgaXNEZWYoaS5kYXRhKSkge1xuICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGksIHJtKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMucmVtb3ZlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNicy5yZW1vdmVbaV0odm5vZGUsIHJtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5yZW1vdmUpKSB7XG4gICAgICAgIGkodm5vZGUsIHJtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJtKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZU5vZGUodm5vZGUuZWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDaGlsZHJlbiAocGFyZW50RWxtLCBvbGRDaCwgbmV3Q2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIHZhciBvbGRTdGFydElkeCA9IDA7XG4gICAgdmFyIG5ld1N0YXJ0SWR4ID0gMDtcbiAgICB2YXIgb2xkRW5kSWR4ID0gb2xkQ2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgb2xkU3RhcnRWbm9kZSA9IG9sZENoWzBdO1xuICAgIHZhciBvbGRFbmRWbm9kZSA9IG9sZENoW29sZEVuZElkeF07XG4gICAgdmFyIG5ld0VuZElkeCA9IG5ld0NoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFswXTtcbiAgICB2YXIgbmV3RW5kVm5vZGUgPSBuZXdDaFtuZXdFbmRJZHhdO1xuICAgIHZhciBvbGRLZXlUb0lkeCwgaWR4SW5PbGQsIHZub2RlVG9Nb3ZlLCByZWZFbG07XG5cbiAgICAvLyByZW1vdmVPbmx5IGlzIGEgc3BlY2lhbCBmbGFnIHVzZWQgb25seSBieSA8dHJhbnNpdGlvbi1ncm91cD5cbiAgICAvLyB0byBlbnN1cmUgcmVtb3ZlZCBlbGVtZW50cyBzdGF5IGluIGNvcnJlY3QgcmVsYXRpdmUgcG9zaXRpb25zXG4gICAgLy8gZHVyaW5nIGxlYXZpbmcgdHJhbnNpdGlvbnNcbiAgICB2YXIgY2FuTW92ZSA9ICFyZW1vdmVPbmx5O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhuZXdDaCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKG9sZFN0YXJ0SWR4IDw9IG9sZEVuZElkeCAmJiBuZXdTdGFydElkeCA8PSBuZXdFbmRJZHgpIHtcbiAgICAgIGlmIChpc1VuZGVmKG9sZFN0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsgLy8gVm5vZGUgaGFzIGJlZW4gbW92ZWQgbGVmdFxuICAgICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZEVuZFZub2RlKSkge1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCByaWdodFxuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdFbmRJZHgpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRW5kVm5vZGUuZWxtKSk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgbGVmdFxuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRFbmRWbm9kZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1VuZGVmKG9sZEtleVRvSWR4KSkgeyBvbGRLZXlUb0lkeCA9IGNyZWF0ZUtleVRvT2xkSWR4KG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTsgfVxuICAgICAgICBpZHhJbk9sZCA9IGlzRGVmKG5ld1N0YXJ0Vm5vZGUua2V5KVxuICAgICAgICAgID8gb2xkS2V5VG9JZHhbbmV3U3RhcnRWbm9kZS5rZXldXG4gICAgICAgICAgOiBmaW5kSWR4SW5PbGQobmV3U3RhcnRWbm9kZSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgICAgICBpZiAoaXNVbmRlZihpZHhJbk9sZCkpIHsgLy8gTmV3IGVsZW1lbnRcbiAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2bm9kZVRvTW92ZSA9IG9sZENoW2lkeEluT2xkXTtcbiAgICAgICAgICBpZiAoc2FtZVZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICAgICAgcGF0Y2hWbm9kZSh2bm9kZVRvTW92ZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIHZub2RlVG9Nb3ZlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG4gICAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob2xkU3RhcnRJZHggPiBvbGRFbmRJZHgpIHtcbiAgICAgIHJlZkVsbSA9IGlzVW5kZWYobmV3Q2hbbmV3RW5kSWR4ICsgMV0pID8gbnVsbCA6IG5ld0NoW25ld0VuZElkeCArIDFdLmVsbTtcbiAgICAgIGFkZFZub2RlcyhwYXJlbnRFbG0sIHJlZkVsbSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIGlmIChuZXdTdGFydElkeCA+IG5ld0VuZElkeCkge1xuICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlS2V5cyAoY2hpbGRyZW4pIHtcbiAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChcbiAgICBvbGRWbm9kZSxcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleCxcbiAgICByZW1vdmVPbmx5XG4gICkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBjbG9uZSByZXVzZWQgdm5vZGVcbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZShvbGRWbm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIpKSB7XG4gICAgICBpZiAoaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICBoeWRyYXRlKG9sZFZub2RlLmVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gcmV1c2UgZWxlbWVudCBmb3Igc3RhdGljIHRyZWVzLlxuICAgIC8vIG5vdGUgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgLVxuICAgIC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlblxuICAgIC8vIHJlc2V0IGJ5IHRoZSBob3QtcmVsb2FkLWFwaSBhbmQgd2UgbmVlZCB0byBkbyBhIHByb3BlciByZS1yZW5kZXIuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIGlzVHJ1ZShvbGRWbm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIHZub2RlLmtleSA9PT0gb2xkVm5vZGUua2V5ICYmXG4gICAgICAoaXNUcnVlKHZub2RlLmlzQ2xvbmVkKSB8fCBpc1RydWUodm5vZGUuaXNPbmNlKSlcbiAgICApIHtcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnByZXBhdGNoKSkge1xuICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuICAgIHZhciBjaCA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKSB7IGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnVwZGF0ZSkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAob2xkQ2ggIT09IGNoKSB7IHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2gsIGNoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpOyB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7IG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7IH1cbiAgICAgICAgYWRkVm5vZGVzKGVsbSwgbnVsbCwgY2gsIDAsIGNoLmxlbmd0aCAtIDEsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZENoKSkge1xuICAgICAgICByZW1vdmVWbm9kZXMoZWxtLCBvbGRDaCwgMCwgb2xkQ2gubGVuZ3RoIC0gMSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7XG4gICAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbGRWbm9kZS50ZXh0ICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgdm5vZGUudGV4dCk7XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnBvc3RwYXRjaCkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlSW5zZXJ0SG9vayAodm5vZGUsIHF1ZXVlLCBpbml0aWFsKSB7XG4gICAgLy8gZGVsYXkgaW5zZXJ0IGhvb2tzIGZvciBjb21wb25lbnQgcm9vdCBub2RlcywgaW52b2tlIHRoZW0gYWZ0ZXIgdGhlXG4gICAgLy8gZWxlbWVudCBpcyByZWFsbHkgaW5zZXJ0ZWRcbiAgICBpZiAoaXNUcnVlKGluaXRpYWwpICYmIGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgIHZub2RlLnBhcmVudC5kYXRhLnBlbmRpbmdJbnNlcnQgPSBxdWV1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBxdWV1ZVtpXS5kYXRhLmhvb2suaW5zZXJ0KHF1ZXVlW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgaHlkcmF0aW9uQmFpbGVkID0gZmFsc2U7XG4gIC8vIGxpc3Qgb2YgbW9kdWxlcyB0aGF0IGNhbiBza2lwIGNyZWF0ZSBob29rIGR1cmluZyBoeWRyYXRpb24gYmVjYXVzZSB0aGV5XG4gIC8vIGFyZSBhbHJlYWR5IHJlbmRlcmVkIG9uIHRoZSBjbGllbnQgb3IgaGFzIG5vIG5lZWQgZm9yIGluaXRpYWxpemF0aW9uXG4gIC8vIE5vdGU6IHN0eWxlIGlzIGV4Y2x1ZGVkIGJlY2F1c2UgaXQgcmVsaWVzIG9uIGluaXRpYWwgY2xvbmUgZm9yIGZ1dHVyZVxuICAvLyBkZWVwIHVwZGF0ZXMgKCM3MDYzKS5cbiAgdmFyIGlzUmVuZGVyZWRNb2R1bGUgPSBtYWtlTWFwKCdhdHRycyxjbGFzcyxzdGF0aWNDbGFzcyxzdGF0aWNTdHlsZSxrZXknKTtcblxuICAvLyBOb3RlOiB0aGlzIGlzIGEgYnJvd3Nlci1vbmx5IGZ1bmN0aW9uIHNvIHdlIGNhbiBhc3N1bWUgZWxtcyBhcmUgRE9NIG5vZGVzLlxuICBmdW5jdGlvbiBoeWRyYXRlIChlbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGluVlByZSkge1xuICAgIHZhciBpO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGluVlByZSA9IGluVlByZSB8fCAoZGF0YSAmJiBkYXRhLnByZSk7XG4gICAgdm5vZGUuZWxtID0gZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpICYmIGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeSkpIHtcbiAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICAvLyBhc3NlcnQgbm9kZSBtYXRjaFxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIWFzc2VydE5vZGVNYXRjaChlbG0sIHZub2RlLCBpblZQcmUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkgeyBpKHZub2RlLCB0cnVlIC8qIGh5ZHJhdGluZyAqLyk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgIC8vIGNoaWxkIGNvbXBvbmVudC4gaXQgc2hvdWxkIGhhdmUgaHlkcmF0ZWQgaXRzIG93biB0cmVlLlxuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAgaWYgKGlzRGVmKGNoaWxkcmVuKSkge1xuICAgICAgICAvLyBlbXB0eSBlbGVtZW50LCBhbGxvdyBjbGllbnQgdG8gcGljayB1cCBhbmQgcG9wdWxhdGUgY2hpbGRyZW5cbiAgICAgICAgaWYgKCFlbG0uaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgY3JlYXRlQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHYtaHRtbCBhbmQgZG9tUHJvcHM6IGlubmVySFRNTFxuICAgICAgICAgIGlmIChpc0RlZihpID0gZGF0YSkgJiYgaXNEZWYoaSA9IGkuZG9tUHJvcHMpICYmIGlzRGVmKGkgPSBpLmlubmVySFRNTCkpIHtcbiAgICAgICAgICAgIGlmIChpICE9PSBlbG0uaW5uZXJIVE1MKSB7XG4gICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICFoeWRyYXRpb25CYWlsZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3NlcnZlciBpbm5lckhUTUw6ICcsIGkpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignY2xpZW50IGlubmVySFRNTDogJywgZWxtLmlubmVySFRNTCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGl0ZXJhdGUgYW5kIGNvbXBhcmUgY2hpbGRyZW4gbGlzdHNcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbk1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSBlbG0uZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgICAgICAgaWYgKCFjaGlsZE5vZGUgfHwgIWh5ZHJhdGUoY2hpbGROb2RlLCBjaGlsZHJlbltpJDFdLCBpbnNlcnRlZFZub2RlUXVldWUsIGluVlByZSkpIHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbk1hdGNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiBjaGlsZE5vZGUgaXMgbm90IG51bGwsIGl0IG1lYW5zIHRoZSBhY3R1YWwgY2hpbGROb2RlcyBsaXN0IGlzXG4gICAgICAgICAgICAvLyBsb25nZXIgdGhhbiB0aGUgdmlydHVhbCBjaGlsZHJlbiBsaXN0LlxuICAgICAgICAgICAgaWYgKCFjaGlsZHJlbk1hdGNoIHx8IGNoaWxkTm9kZSkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdNaXNtYXRjaGluZyBjaGlsZE5vZGVzIHZzLiBWTm9kZXM6ICcsIGVsbS5jaGlsZE5vZGVzLCBjaGlsZHJlbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgdmFyIGZ1bGxJbnZva2UgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICBpZiAoIWlzUmVuZGVyZWRNb2R1bGUoa2V5KSkge1xuICAgICAgICAgICAgZnVsbEludm9rZSA9IHRydWU7XG4gICAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZnVsbEludm9rZSAmJiBkYXRhWydjbGFzcyddKSB7XG4gICAgICAgICAgLy8gZW5zdXJlIGNvbGxlY3RpbmcgZGVwcyBmb3IgZGVlcCBjbGFzcyBiaW5kaW5ncyBmb3IgZnV0dXJlIHVwZGF0ZXNcbiAgICAgICAgICB0cmF2ZXJzZShkYXRhWydjbGFzcyddKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWxtLmRhdGEgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIGVsbS5kYXRhID0gdm5vZGUudGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydE5vZGVNYXRjaCAobm9kZSwgdm5vZGUsIGluVlByZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS50YWcpKSB7XG4gICAgICByZXR1cm4gdm5vZGUudGFnLmluZGV4T2YoJ3Z1ZS1jb21wb25lbnQnKSA9PT0gMCB8fCAoXG4gICAgICAgICFpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBpblZQcmUpICYmXG4gICAgICAgIHZub2RlLnRhZy50b0xvd2VyQ2FzZSgpID09PSAobm9kZS50YWdOYW1lICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKVxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gKHZub2RlLmlzQ29tbWVudCA/IDggOiAzKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwYXRjaCAob2xkVm5vZGUsIHZub2RlLCBoeWRyYXRpbmcsIHJlbW92ZU9ubHkpIHtcbiAgICBpZiAoaXNVbmRlZih2bm9kZSkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRWbm9kZSkpIHsgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpOyB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaXNJbml0aWFsUGF0Y2ggPSBmYWxzZTtcbiAgICB2YXIgaW5zZXJ0ZWRWbm9kZVF1ZXVlID0gW107XG5cbiAgICBpZiAoaXNVbmRlZihvbGRWbm9kZSkpIHtcbiAgICAgIC8vIGVtcHR5IG1vdW50IChsaWtlbHkgYXMgY29tcG9uZW50KSwgY3JlYXRlIG5ldyByb290IGVsZW1lbnRcbiAgICAgIGlzSW5pdGlhbFBhdGNoID0gdHJ1ZTtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGlzUmVhbEVsZW1lbnQgPSBpc0RlZihvbGRWbm9kZS5ub2RlVHlwZSk7XG4gICAgICBpZiAoIWlzUmVhbEVsZW1lbnQgJiYgc2FtZVZub2RlKG9sZFZub2RlLCB2bm9kZSkpIHtcbiAgICAgICAgLy8gcGF0Y2ggZXhpc3Rpbmcgcm9vdCBub2RlXG4gICAgICAgIHBhdGNoVm5vZGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG51bGwsIG51bGwsIHJlbW92ZU9ubHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzUmVhbEVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBtb3VudGluZyB0byBhIHJlYWwgZWxlbWVudFxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQgYW5kIGlmIHdlIGNhbiBwZXJmb3JtXG4gICAgICAgICAgLy8gYSBzdWNjZXNzZnVsIGh5ZHJhdGlvbi5cbiAgICAgICAgICBpZiAob2xkVm5vZGUubm9kZVR5cGUgPT09IDEgJiYgb2xkVm5vZGUuaGFzQXR0cmlidXRlKFNTUl9BVFRSKSkge1xuICAgICAgICAgICAgb2xkVm5vZGUucmVtb3ZlQXR0cmlidXRlKFNTUl9BVFRSKTtcbiAgICAgICAgICAgIGh5ZHJhdGluZyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1RydWUoaHlkcmF0aW5nKSkge1xuICAgICAgICAgICAgaWYgKGh5ZHJhdGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHJldHVybiBvbGRWbm9kZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICAgJ1RoZSBjbGllbnQtc2lkZSByZW5kZXJlZCB2aXJ0dWFsIERPTSB0cmVlIGlzIG5vdCBtYXRjaGluZyAnICtcbiAgICAgICAgICAgICAgICAnc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQuIFRoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBpbmNvcnJlY3QgJyArXG4gICAgICAgICAgICAgICAgJ0hUTUwgbWFya3VwLCBmb3IgZXhhbXBsZSBuZXN0aW5nIGJsb2NrLWxldmVsIGVsZW1lbnRzIGluc2lkZSAnICtcbiAgICAgICAgICAgICAgICAnPHA+LCBvciBtaXNzaW5nIDx0Ym9keT4uIEJhaWxpbmcgaHlkcmF0aW9uIGFuZCBwZXJmb3JtaW5nICcgK1xuICAgICAgICAgICAgICAgICdmdWxsIGNsaWVudC1zaWRlIHJlbmRlci4nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGVpdGhlciBub3Qgc2VydmVyLXJlbmRlcmVkLCBvciBoeWRyYXRpb24gZmFpbGVkLlxuICAgICAgICAgIC8vIGNyZWF0ZSBhbiBlbXB0eSBub2RlIGFuZCByZXBsYWNlIGl0XG4gICAgICAgICAgb2xkVm5vZGUgPSBlbXB0eU5vZGVBdChvbGRWbm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXBsYWNpbmcgZXhpc3RpbmcgZWxlbWVudFxuICAgICAgICB2YXIgb2xkRWxtID0gb2xkVm5vZGUuZWxtO1xuICAgICAgICB2YXIgcGFyZW50RWxtID0gbm9kZU9wcy5wYXJlbnROb2RlKG9sZEVsbSk7XG5cbiAgICAgICAgLy8gY3JlYXRlIG5ldyBub2RlXG4gICAgICAgIGNyZWF0ZUVsbShcbiAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgICAgICAgLy8gZXh0cmVtZWx5IHJhcmUgZWRnZSBjYXNlOiBkbyBub3QgaW5zZXJ0IGlmIG9sZCBlbGVtZW50IGlzIGluIGFcbiAgICAgICAgICAvLyBsZWF2aW5nIHRyYW5zaXRpb24uIE9ubHkgaGFwcGVucyB3aGVuIGNvbWJpbmluZyB0cmFuc2l0aW9uICtcbiAgICAgICAgICAvLyBrZWVwLWFsaXZlICsgSE9Dcy4gKCM0NTkwKVxuICAgICAgICAgIG9sZEVsbS5fbGVhdmVDYiA/IG51bGwgOiBwYXJlbnRFbG0sXG4gICAgICAgICAgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbG0pXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gdXBkYXRlIHBhcmVudCBwbGFjZWhvbGRlciBub2RlIGVsZW1lbnQsIHJlY3Vyc2l2ZWx5XG4gICAgICAgIGlmIChpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGUucGFyZW50O1xuICAgICAgICAgIHZhciBwYXRjaGFibGUgPSBpc1BhdGNoYWJsZSh2bm9kZSk7XG4gICAgICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgIGNicy5kZXN0cm95W2ldKGFuY2VzdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFuY2VzdG9yLmVsbSA9IHZub2RlLmVsbTtcbiAgICAgICAgICAgIGlmIChwYXRjaGFibGUpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSQxKSB7XG4gICAgICAgICAgICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgYW5jZXN0b3IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vICM2NTEzXG4gICAgICAgICAgICAgIC8vIGludm9rZSBpbnNlcnQgaG9va3MgdGhhdCBtYXkgaGF2ZSBiZWVuIG1lcmdlZCBieSBjcmVhdGUgaG9va3MuXG4gICAgICAgICAgICAgIC8vIGUuZy4gZm9yIGRpcmVjdGl2ZXMgdGhhdCB1c2VzIHRoZSBcImluc2VydGVkXCIgaG9vay5cbiAgICAgICAgICAgICAgdmFyIGluc2VydCA9IGFuY2VzdG9yLmRhdGEuaG9vay5pbnNlcnQ7XG4gICAgICAgICAgICAgIGlmIChpbnNlcnQubWVyZ2VkKSB7XG4gICAgICAgICAgICAgICAgLy8gc3RhcnQgYXQgaW5kZXggMSB0byBhdm9pZCByZS1pbnZva2luZyBjb21wb25lbnQgbW91bnRlZCBob29rXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSQyID0gMTsgaSQyIDwgaW5zZXJ0LmZucy5sZW5ndGg7IGkkMisrKSB7XG4gICAgICAgICAgICAgICAgICBpbnNlcnQuZm5zW2kkMl0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlZ2lzdGVyUmVmKGFuY2VzdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRlc3Ryb3kgb2xkIG5vZGVcbiAgICAgICAgaWYgKGlzRGVmKHBhcmVudEVsbSkpIHtcbiAgICAgICAgICByZW1vdmVWbm9kZXMocGFyZW50RWxtLCBbb2xkVm5vZGVdLCAwLCAwKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50YWcpKSB7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpc0luaXRpYWxQYXRjaCk7XG4gICAgcmV0dXJuIHZub2RlLmVsbVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgZGlyZWN0aXZlcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICB1cGRhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIHVuYmluZERpcmVjdGl2ZXMgKHZub2RlKSB7XG4gICAgdXBkYXRlRGlyZWN0aXZlcyh2bm9kZSwgZW1wdHlOb2RlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdXBkYXRlRGlyZWN0aXZlcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMgfHwgdm5vZGUuZGF0YS5kaXJlY3RpdmVzKSB7XG4gICAgX3VwZGF0ZShvbGRWbm9kZSwgdm5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF91cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgaXNDcmVhdGUgPSBvbGRWbm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgaXNEZXN0cm95ID0gdm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIG9sZERpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBvbGRWbm9kZS5jb250ZXh0KTtcbiAgdmFyIG5ld0RpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEodm5vZGUuZGF0YS5kaXJlY3RpdmVzLCB2bm9kZS5jb250ZXh0KTtcblxuICB2YXIgZGlyc1dpdGhJbnNlcnQgPSBbXTtcbiAgdmFyIGRpcnNXaXRoUG9zdHBhdGNoID0gW107XG5cbiAgdmFyIGtleSwgb2xkRGlyLCBkaXI7XG4gIGZvciAoa2V5IGluIG5ld0RpcnMpIHtcbiAgICBvbGREaXIgPSBvbGREaXJzW2tleV07XG4gICAgZGlyID0gbmV3RGlyc1trZXldO1xuICAgIGlmICghb2xkRGlyKSB7XG4gICAgICAvLyBuZXcgZGlyZWN0aXZlLCBiaW5kXG4gICAgICBjYWxsSG9vayQxKGRpciwgJ2JpbmQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5pbnNlcnRlZCkge1xuICAgICAgICBkaXJzV2l0aEluc2VydC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIGRpcmVjdGl2ZSwgdXBkYXRlXG4gICAgICBkaXIub2xkVmFsdWUgPSBvbGREaXIudmFsdWU7XG4gICAgICBkaXIub2xkQXJnID0gb2xkRGlyLmFyZztcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAndXBkYXRlJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuY29tcG9uZW50VXBkYXRlZCkge1xuICAgICAgICBkaXJzV2l0aFBvc3RwYXRjaC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aCkge1xuICAgIHZhciBjYWxsSW5zZXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aEluc2VydC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoSW5zZXJ0W2ldLCAnaW5zZXJ0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGlzQ3JlYXRlKSB7XG4gICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGNhbGxJbnNlcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsSW5zZXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aCkge1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoUG9zdHBhdGNoW2ldLCAnY29tcG9uZW50VXBkYXRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIWlzQ3JlYXRlKSB7XG4gICAgZm9yIChrZXkgaW4gb2xkRGlycykge1xuICAgICAgaWYgKCFuZXdEaXJzW2tleV0pIHtcbiAgICAgICAgLy8gbm8gbG9uZ2VyIHByZXNlbnQsIHVuYmluZFxuICAgICAgICBjYWxsSG9vayQxKG9sZERpcnNba2V5XSwgJ3VuYmluZCcsIG9sZFZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIGVtcHR5TW9kaWZpZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyQxIChcbiAgZGlycyxcbiAgdm1cbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKCFkaXJzKSB7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcmV0dXJuIHJlc1xuICB9XG4gIHZhciBpLCBkaXI7XG4gIGZvciAoaSA9IDA7IGkgPCBkaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGlyID0gZGlyc1tpXTtcbiAgICBpZiAoIWRpci5tb2RpZmllcnMpIHtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZGlyLm1vZGlmaWVycyA9IGVtcHR5TW9kaWZpZXJzO1xuICAgIH1cbiAgICByZXNbZ2V0UmF3RGlyTmFtZShkaXIpXSA9IGRpcjtcbiAgICBkaXIuZGVmID0gcmVzb2x2ZUFzc2V0KHZtLiRvcHRpb25zLCAnZGlyZWN0aXZlcycsIGRpci5uYW1lLCB0cnVlKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnZXRSYXdEaXJOYW1lIChkaXIpIHtcbiAgcmV0dXJuIGRpci5yYXdOYW1lIHx8ICgoZGlyLm5hbWUpICsgXCIuXCIgKyAoT2JqZWN0LmtleXMoZGlyLm1vZGlmaWVycyB8fCB7fSkuam9pbignLicpKSlcbn1cblxuZnVuY3Rpb24gY2FsbEhvb2skMSAoZGlyLCBob29rLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSkge1xuICB2YXIgZm4gPSBkaXIuZGVmICYmIGRpci5kZWZbaG9va107XG4gIGlmIChmbikge1xuICAgIHRyeSB7XG4gICAgICBmbih2bm9kZS5lbG0sIGRpciwgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZub2RlLmNvbnRleHQsIChcImRpcmVjdGl2ZSBcIiArIChkaXIubmFtZSkgKyBcIiBcIiArIGhvb2sgKyBcIiBob29rXCIpKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGJhc2VNb2R1bGVzID0gW1xuICByZWYsXG4gIGRpcmVjdGl2ZXNcbl07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVBdHRycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBvcHRzID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGlzRGVmKG9wdHMpICYmIG9wdHMuQ3Rvci5vcHRpb25zLmluaGVyaXRBdHRycyA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmF0dHJzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuYXR0cnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyLCBvbGQ7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRBdHRycyA9IG9sZFZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIHZhciBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYoYXR0cnMuX19vYl9fKSkge1xuICAgIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYXR0cnMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICBjdXIgPSBhdHRyc1trZXldO1xuICAgIG9sZCA9IG9sZEF0dHJzW2tleV07XG4gICAgaWYgKG9sZCAhPT0gY3VyKSB7XG4gICAgICBzZXRBdHRyKGVsbSwga2V5LCBjdXIpO1xuICAgIH1cbiAgfVxuICAvLyAjNDM5MTogaW4gSUU5LCBzZXR0aW5nIHR5cGUgY2FuIHJlc2V0IHZhbHVlIGZvciBpbnB1dFt0eXBlPXJhZGlvXVxuICAvLyAjNjY2NjogSUUvRWRnZSBmb3JjZXMgcHJvZ3Jlc3MgdmFsdWUgZG93biB0byAxIGJlZm9yZSBzZXR0aW5nIGEgbWF4XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoKGlzSUUgfHwgaXNFZGdlKSAmJiBhdHRycy52YWx1ZSAhPT0gb2xkQXR0cnMudmFsdWUpIHtcbiAgICBzZXRBdHRyKGVsbSwgJ3ZhbHVlJywgYXR0cnMudmFsdWUpO1xuICB9XG4gIGZvciAoa2V5IGluIG9sZEF0dHJzKSB7XG4gICAgaWYgKGlzVW5kZWYoYXR0cnNba2V5XSkpIHtcbiAgICAgIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChlbC50YWdOYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9IGVsc2UgaWYgKGlzQm9vbGVhbkF0dHIoa2V5KSkge1xuICAgIC8vIHNldCBhdHRyaWJ1dGUgZm9yIGJsYW5rIHZhbHVlXG4gICAgLy8gZS5nLiA8b3B0aW9uIGRpc2FibGVkPlNlbGVjdCBvbmU8L29wdGlvbj5cbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0ZWNobmljYWxseSBhbGxvd2Z1bGxzY3JlZW4gaXMgYSBib29sZWFuIGF0dHJpYnV0ZSBmb3IgPGlmcmFtZT4sXG4gICAgICAvLyBidXQgRmxhc2ggZXhwZWN0cyBhIHZhbHVlIG9mIFwidHJ1ZVwiIHdoZW4gdXNlZCBvbiA8ZW1iZWQ+IHRhZ1xuICAgICAgdmFsdWUgPSBrZXkgPT09ICdhbGxvd2Z1bGxzY3JlZW4nICYmIGVsLnRhZ05hbWUgPT09ICdFTUJFRCdcbiAgICAgICAgPyAndHJ1ZSdcbiAgICAgICAgOiBrZXk7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUoa2V5LCB2YWx1ZSkpO1xuICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2VTZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICAvLyAjNzEzODogSUUxMCAmIDExIGZpcmVzIGlucHV0IGV2ZW50IHdoZW4gc2V0dGluZyBwbGFjZWhvbGRlciBvblxuICAgIC8vIDx0ZXh0YXJlYT4uLi4gYmxvY2sgdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFuZCByZW1vdmUgdGhlIGJsb2NrZXJcbiAgICAvLyBpbW1lZGlhdGVseS5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoXG4gICAgICBpc0lFICYmICFpc0lFOSAmJlxuICAgICAgZWwudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJlxuICAgICAga2V5ID09PSAncGxhY2Vob2xkZXInICYmIHZhbHVlICE9PSAnJyAmJiAhZWwuX19pZXBoXG4gICAgKSB7XG4gICAgICB2YXIgYmxvY2tlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcik7XG4gICAgICB9O1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZWwuX19pZXBoID0gdHJ1ZTsgLyogSUUgcGxhY2Vob2xkZXIgcGF0Y2hlZCAqL1xuICAgIH1cbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxudmFyIGF0dHJzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUF0dHJzLFxuICB1cGRhdGU6IHVwZGF0ZUF0dHJzXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQ2xhc3MgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuICBpZiAoXG4gICAgaXNVbmRlZihkYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgIGlzVW5kZWYoZGF0YS5jbGFzcykgJiYgKFxuICAgICAgaXNVbmRlZihvbGREYXRhKSB8fCAoXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLmNsYXNzKVxuICAgICAgKVxuICAgIClcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY2xzID0gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSk7XG5cbiAgLy8gaGFuZGxlIHRyYW5zaXRpb24gY2xhc3Nlc1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzO1xuICBpZiAoaXNEZWYodHJhbnNpdGlvbkNsYXNzKSkge1xuICAgIGNscyA9IGNvbmNhdChjbHMsIHN0cmluZ2lmeUNsYXNzKHRyYW5zaXRpb25DbGFzcykpO1xuICB9XG5cbiAgLy8gc2V0IHRoZSBjbGFzc1xuICBpZiAoY2xzICE9PSBlbC5fcHJldkNsYXNzKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNscyk7XG4gICAgZWwuX3ByZXZDbGFzcyA9IGNscztcbiAgfVxufVxuXG52YXIga2xhc3MgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQ2xhc3MsXG4gIHVwZGF0ZTogdXBkYXRlQ2xhc3Ncbn07XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbiBzb21lIGNhc2VzLCB0aGUgZXZlbnQgdXNlZCBoYXMgdG8gYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lXG4vLyBzbyB3ZSB1c2VkIHNvbWUgcmVzZXJ2ZWQgdG9rZW5zIGR1cmluZyBjb21waWxlLlxudmFyIFJBTkdFX1RPS0VOID0gJ19fcic7XG52YXIgQ0hFQ0tCT1hfUkFESU9fVE9LRU4gPSAnX19jJztcblxuLyogICovXG5cbi8vIG5vcm1hbGl6ZSB2LW1vZGVsIGV2ZW50IHRva2VucyB0aGF0IGNhbiBvbmx5IGJlIGRldGVybWluZWQgYXQgcnVudGltZS5cbi8vIGl0J3MgaW1wb3J0YW50IHRvIHBsYWNlIHRoZSBldmVudCBhcyB0aGUgZmlyc3QgaW4gdGhlIGFycmF5IGJlY2F1c2Vcbi8vIHRoZSB3aG9sZSBwb2ludCBpcyBlbnN1cmluZyB0aGUgdi1tb2RlbCBjYWxsYmFjayBnZXRzIGNhbGxlZCBiZWZvcmVcbi8vIHVzZXItYXR0YWNoZWQgaGFuZGxlcnMuXG5mdW5jdGlvbiBub3JtYWxpemVFdmVudHMgKG9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bUkFOR0VfVE9LRU5dKSkge1xuICAgIC8vIElFIGlucHV0W3R5cGU9cmFuZ2VdIG9ubHkgc3VwcG9ydHMgYGNoYW5nZWAgZXZlbnRcbiAgICB2YXIgZXZlbnQgPSBpc0lFID8gJ2NoYW5nZScgOiAnaW5wdXQnO1xuICAgIG9uW2V2ZW50XSA9IFtdLmNvbmNhdChvbltSQU5HRV9UT0tFTl0sIG9uW2V2ZW50XSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW1JBTkdFX1RPS0VOXTtcbiAgfVxuICAvLyBUaGlzIHdhcyBvcmlnaW5hbGx5IGludGVuZGVkIHRvIGZpeCAjNDUyMSBidXQgbm8gbG9uZ2VyIG5lY2Vzc2FyeVxuICAvLyBhZnRlciAyLjUuIEtlZXBpbmcgaXQgZm9yIGJhY2t3YXJkcyBjb21wYXQgd2l0aCBnZW5lcmF0ZWQgY29kZSBmcm9tIDwgMi40XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dKSkge1xuICAgIG9uLmNoYW5nZSA9IFtdLmNvbmNhdChvbltDSEVDS0JPWF9SQURJT19UT0tFTl0sIG9uLmNoYW5nZSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0JDE7XG5cbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyJDEgKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gIHZhciBfdGFyZ2V0ID0gdGFyZ2V0JDE7IC8vIHNhdmUgY3VycmVudCB0YXJnZXQgZWxlbWVudCBpbiBjbG9zdXJlXG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgdmFyIHJlcyA9IGhhbmRsZXIuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICByZW1vdmUkMihldmVudCwgb25jZUhhbmRsZXIsIGNhcHR1cmUsIF90YXJnZXQpO1xuICAgIH1cbiAgfVxufVxuXG4vLyAjOTQ0NjogRmlyZWZveCA8PSA1MyAoaW4gcGFydGljdWxhciwgRVNSIDUyKSBoYXMgaW5jb3JyZWN0IEV2ZW50LnRpbWVTdGFtcFxuLy8gaW1wbGVtZW50YXRpb24gYW5kIGRvZXMgbm90IGZpcmUgbWljcm90YXNrcyBpbiBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLCBzb1xuLy8gc2FmZSB0byBleGNsdWRlLlxudmFyIHVzZU1pY3JvdGFza0ZpeCA9IGlzVXNpbmdNaWNyb1Rhc2sgJiYgIShpc0ZGICYmIE51bWJlcihpc0ZGWzFdKSA8PSA1Myk7XG5cbmZ1bmN0aW9uIGFkZCQxIChcbiAgbmFtZSxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgcGFzc2l2ZVxuKSB7XG4gIC8vIGFzeW5jIGVkZ2UgY2FzZSAjNjU2NjogaW5uZXIgY2xpY2sgZXZlbnQgdHJpZ2dlcnMgcGF0Y2gsIGV2ZW50IGhhbmRsZXJcbiAgLy8gYXR0YWNoZWQgdG8gb3V0ZXIgZWxlbWVudCBkdXJpbmcgcGF0Y2gsIGFuZCB0cmlnZ2VyZWQgYWdhaW4uIFRoaXNcbiAgLy8gaGFwcGVucyBiZWNhdXNlIGJyb3dzZXJzIGZpcmUgbWljcm90YXNrIHRpY2tzIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24uXG4gIC8vIHRoZSBzb2x1dGlvbiBpcyBzaW1wbGU6IHdlIHNhdmUgdGhlIHRpbWVzdGFtcCB3aGVuIGEgaGFuZGxlciBpcyBhdHRhY2hlZCxcbiAgLy8gYW5kIHRoZSBoYW5kbGVyIHdvdWxkIG9ubHkgZmlyZSBpZiB0aGUgZXZlbnQgcGFzc2VkIHRvIGl0IHdhcyBmaXJlZFxuICAvLyBBRlRFUiBpdCB3YXMgYXR0YWNoZWQuXG4gIGlmICh1c2VNaWNyb3Rhc2tGaXgpIHtcbiAgICB2YXIgYXR0YWNoZWRUaW1lc3RhbXAgPSBjdXJyZW50Rmx1c2hUaW1lc3RhbXA7XG4gICAgdmFyIG9yaWdpbmFsID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gb3JpZ2luYWwuX3dyYXBwZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKFxuICAgICAgICAvLyBubyBidWJibGluZywgc2hvdWxkIGFsd2F5cyBmaXJlLlxuICAgICAgICAvLyB0aGlzIGlzIGp1c3QgYSBzYWZldHkgbmV0IGluIGNhc2UgZXZlbnQudGltZVN0YW1wIGlzIHVucmVsaWFibGUgaW5cbiAgICAgICAgLy8gY2VydGFpbiB3ZWlyZCBlbnZpcm9ubWVudHMuLi5cbiAgICAgICAgZS50YXJnZXQgPT09IGUuY3VycmVudFRhcmdldCB8fFxuICAgICAgICAvLyBldmVudCBpcyBmaXJlZCBhZnRlciBoYW5kbGVyIGF0dGFjaG1lbnRcbiAgICAgICAgZS50aW1lU3RhbXAgPj0gYXR0YWNoZWRUaW1lc3RhbXAgfHxcbiAgICAgICAgLy8gYmFpbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgaGF2ZSBidWdneSBldmVudC50aW1lU3RhbXAgaW1wbGVtZW50YXRpb25zXG4gICAgICAgIC8vICM5NDYyIGlPUyA5IGJ1ZzogZXZlbnQudGltZVN0YW1wIGlzIDAgYWZ0ZXIgaGlzdG9yeS5wdXNoU3RhdGVcbiAgICAgICAgLy8gIzk2ODEgUXRXZWJFbmdpbmUgZXZlbnQudGltZVN0YW1wIGlzIG5lZ2F0aXZlIHZhbHVlXG4gICAgICAgIGUudGltZVN0YW1wIDw9IDAgfHxcbiAgICAgICAgLy8gIzk0NDggYmFpbCBpZiBldmVudCBpcyBmaXJlZCBpbiBhbm90aGVyIGRvY3VtZW50IGluIGEgbXVsdGktcGFnZVxuICAgICAgICAvLyBlbGVjdHJvbi9udy5qcyBhcHAsIHNpbmNlIGV2ZW50LnRpbWVTdGFtcCB3aWxsIGJlIHVzaW5nIGEgZGlmZmVyZW50XG4gICAgICAgIC8vIHN0YXJ0aW5nIHJlZmVyZW5jZVxuICAgICAgICBlLnRhcmdldC5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudFxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlcixcbiAgICBzdXBwb3J0c1Bhc3NpdmVcbiAgICAgID8geyBjYXB0dXJlOiBjYXB0dXJlLCBwYXNzaXZlOiBwYXNzaXZlIH1cbiAgICAgIDogY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMiAoXG4gIG5hbWUsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIF90YXJnZXRcbikge1xuICAoX3RhcmdldCB8fCB0YXJnZXQkMSkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICBuYW1lLFxuICAgIGhhbmRsZXIuX3dyYXBwZXIgfHwgaGFuZGxlcixcbiAgICBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTUxpc3RlbmVycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEub24pICYmIGlzVW5kZWYodm5vZGUuZGF0YS5vbikpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb24gPSB2bm9kZS5kYXRhLm9uIHx8IHt9O1xuICB2YXIgb2xkT24gPSBvbGRWbm9kZS5kYXRhLm9uIHx8IHt9O1xuICB0YXJnZXQkMSA9IHZub2RlLmVsbTtcbiAgbm9ybWFsaXplRXZlbnRzKG9uKTtcbiAgdXBkYXRlTGlzdGVuZXJzKG9uLCBvbGRPbiwgYWRkJDEsIHJlbW92ZSQyLCBjcmVhdGVPbmNlSGFuZGxlciQxLCB2bm9kZS5jb250ZXh0KTtcbiAgdGFyZ2V0JDEgPSB1bmRlZmluZWQ7XG59XG5cbnZhciBldmVudHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzLFxuICB1cGRhdGU6IHVwZGF0ZURPTUxpc3RlbmVyc1xufTtcblxuLyogICovXG5cbnZhciBzdmdDb250YWluZXI7XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTVByb3BzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5kb21Qcm9wcykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmRvbVByb3BzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1cjtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFByb3BzID0gb2xkVm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgdmFyIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihwcm9wcy5fX29iX18pKSB7XG4gICAgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzID0gZXh0ZW5kKHt9LCBwcm9wcyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBvbGRQcm9wcykge1xuICAgIGlmICghKGtleSBpbiBwcm9wcykpIHtcbiAgICAgIGVsbVtrZXldID0gJyc7XG4gICAgfVxuICB9XG5cbiAgZm9yIChrZXkgaW4gcHJvcHMpIHtcbiAgICBjdXIgPSBwcm9wc1trZXldO1xuICAgIC8vIGlnbm9yZSBjaGlsZHJlbiBpZiB0aGUgbm9kZSBoYXMgdGV4dENvbnRlbnQgb3IgaW5uZXJIVE1MLFxuICAgIC8vIGFzIHRoZXNlIHdpbGwgdGhyb3cgYXdheSBleGlzdGluZyBET00gbm9kZXMgYW5kIGNhdXNlIHJlbW92YWwgZXJyb3JzXG4gICAgLy8gb24gc3Vic2VxdWVudCBwYXRjaGVzICgjMzM2MClcbiAgICBpZiAoa2V5ID09PSAndGV4dENvbnRlbnQnIHx8IGtleSA9PT0gJ2lubmVySFRNTCcpIHtcbiAgICAgIGlmICh2bm9kZS5jaGlsZHJlbikgeyB2bm9kZS5jaGlsZHJlbi5sZW5ndGggPSAwOyB9XG4gICAgICBpZiAoY3VyID09PSBvbGRQcm9wc1trZXldKSB7IGNvbnRpbnVlIH1cbiAgICAgIC8vICM2NjAxIHdvcmsgYXJvdW5kIENocm9tZSB2ZXJzaW9uIDw9IDU1IGJ1ZyB3aGVyZSBzaW5nbGUgdGV4dE5vZGVcbiAgICAgIC8vIHJlcGxhY2VkIGJ5IGlubmVySFRNTC90ZXh0Q29udGVudCByZXRhaW5zIGl0cyBwYXJlbnROb2RlIHByb3BlcnR5XG4gICAgICBpZiAoZWxtLmNoaWxkTm9kZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3ZhbHVlJyAmJiBlbG0udGFnTmFtZSAhPT0gJ1BST0dSRVNTJykge1xuICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgX3ZhbHVlIGFzIHdlbGwgc2luY2VcbiAgICAgIC8vIG5vbi1zdHJpbmcgdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWRcbiAgICAgIGVsbS5fdmFsdWUgPSBjdXI7XG4gICAgICAvLyBhdm9pZCByZXNldHRpbmcgY3Vyc29yIHBvc2l0aW9uIHdoZW4gdmFsdWUgaXMgdGhlIHNhbWVcbiAgICAgIHZhciBzdHJDdXIgPSBpc1VuZGVmKGN1cikgPyAnJyA6IFN0cmluZyhjdXIpO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVZhbHVlKGVsbSwgc3RyQ3VyKSkge1xuICAgICAgICBlbG0udmFsdWUgPSBzdHJDdXI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdpbm5lckhUTUwnICYmIGlzU1ZHKGVsbS50YWdOYW1lKSAmJiBpc1VuZGVmKGVsbS5pbm5lckhUTUwpKSB7XG4gICAgICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgaW5uZXJIVE1MIGZvciBTVkcgZWxlbWVudHNcbiAgICAgIHN2Z0NvbnRhaW5lciA9IHN2Z0NvbnRhaW5lciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHN2Z0NvbnRhaW5lci5pbm5lckhUTUwgPSBcIjxzdmc+XCIgKyBjdXIgKyBcIjwvc3ZnPlwiO1xuICAgICAgdmFyIHN2ZyA9IHN2Z0NvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgd2hpbGUgKGVsbS5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoc3ZnLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxtLmFwcGVuZENoaWxkKHN2Zy5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgLy8gc2tpcCB0aGUgdXBkYXRlIGlmIG9sZCBhbmQgbmV3IFZET00gc3RhdGUgaXMgdGhlIHNhbWUuXG4gICAgICAvLyBgdmFsdWVgIGlzIGhhbmRsZWQgc2VwYXJhdGVseSBiZWNhdXNlIHRoZSBET00gdmFsdWUgbWF5IGJlIHRlbXBvcmFyaWx5XG4gICAgICAvLyBvdXQgb2Ygc3luYyB3aXRoIFZET00gc3RhdGUgZHVlIHRvIGZvY3VzLCBjb21wb3NpdGlvbiBhbmQgbW9kaWZpZXJzLlxuICAgICAgLy8gVGhpcyAgIzQ1MjEgYnkgc2tpcHBpbmcgdGhlIHVubmVjZXNhcnJ5IGBjaGVja2VkYCB1cGRhdGUuXG4gICAgICBjdXIgIT09IG9sZFByb3BzW2tleV1cbiAgICApIHtcbiAgICAgIC8vIHNvbWUgcHJvcGVydHkgdXBkYXRlcyBjYW4gdGhyb3dcbiAgICAgIC8vIGUuZy4gYHZhbHVlYCBvbiA8cHJvZ3Jlc3M+IHcvIG5vbi1maW5pdGUgdmFsdWVcbiAgICAgIHRyeSB7XG4gICAgICAgIGVsbVtrZXldID0gY3VyO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gIH1cbn1cblxuLy8gY2hlY2sgcGxhdGZvcm1zL3dlYi91dGlsL2F0dHJzLmpzIGFjY2VwdFZhbHVlXG5cblxuZnVuY3Rpb24gc2hvdWxkVXBkYXRlVmFsdWUgKGVsbSwgY2hlY2tWYWwpIHtcbiAgcmV0dXJuICghZWxtLmNvbXBvc2luZyAmJiAoXG4gICAgZWxtLnRhZ05hbWUgPT09ICdPUFRJT04nIHx8XG4gICAgaXNOb3RJbkZvY3VzQW5kRGlydHkoZWxtLCBjaGVja1ZhbCkgfHxcbiAgICBpc0RpcnR5V2l0aE1vZGlmaWVycyhlbG0sIGNoZWNrVmFsKVxuICApKVxufVxuXG5mdW5jdGlvbiBpc05vdEluRm9jdXNBbmREaXJ0eSAoZWxtLCBjaGVja1ZhbCkge1xuICAvLyByZXR1cm4gdHJ1ZSB3aGVuIHRleHRib3ggKC5udW1iZXIgYW5kIC50cmltKSBsb3NlcyBmb2N1cyBhbmQgaXRzIHZhbHVlIGlzXG4gIC8vIG5vdCBlcXVhbCB0byB0aGUgdXBkYXRlZCB2YWx1ZVxuICB2YXIgbm90SW5Gb2N1cyA9IHRydWU7XG4gIC8vICM2MTU3XG4gIC8vIHdvcmsgYXJvdW5kIElFIGJ1ZyB3aGVuIGFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluIGFuIGlmcmFtZVxuICB0cnkgeyBub3RJbkZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZWxtOyB9IGNhdGNoIChlKSB7fVxuICByZXR1cm4gbm90SW5Gb2N1cyAmJiBlbG0udmFsdWUgIT09IGNoZWNrVmFsXG59XG5cbmZ1bmN0aW9uIGlzRGlydHlXaXRoTW9kaWZpZXJzIChlbG0sIG5ld1ZhbCkge1xuICB2YXIgdmFsdWUgPSBlbG0udmFsdWU7XG4gIHZhciBtb2RpZmllcnMgPSBlbG0uX3ZNb2RpZmllcnM7IC8vIGluamVjdGVkIGJ5IHYtbW9kZWwgcnVudGltZVxuICBpZiAoaXNEZWYobW9kaWZpZXJzKSkge1xuICAgIGlmIChtb2RpZmllcnMubnVtYmVyKSB7XG4gICAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpICE9PSB0b051bWJlcihuZXdWYWwpXG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMudHJpbSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRyaW0oKSAhPT0gbmV3VmFsLnRyaW0oKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWUgIT09IG5ld1ZhbFxufVxuXG52YXIgZG9tUHJvcHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NUHJvcHMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NUHJvcHNcbn07XG5cbi8qICAqL1xuXG52YXIgcGFyc2VTdHlsZVRleHQgPSBjYWNoZWQoZnVuY3Rpb24gKGNzc1RleHQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgbGlzdERlbGltaXRlciA9IC87KD8hW14oXSpcXCkpL2c7XG4gIHZhciBwcm9wZXJ0eURlbGltaXRlciA9IC86KC4rKS87XG4gIGNzc1RleHQuc3BsaXQobGlzdERlbGltaXRlcikuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGlmIChpdGVtKSB7XG4gICAgICB2YXIgdG1wID0gaXRlbS5zcGxpdChwcm9wZXJ0eURlbGltaXRlcik7XG4gICAgICB0bXAubGVuZ3RoID4gMSAmJiAocmVzW3RtcFswXS50cmltKCldID0gdG1wWzFdLnRyaW0oKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8vIG1lcmdlIHN0YXRpYyBhbmQgZHluYW1pYyBzdHlsZSBkYXRhIG9uIHRoZSBzYW1lIHZub2RlXG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZURhdGEgKGRhdGEpIHtcbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKGRhdGEuc3R5bGUpO1xuICAvLyBzdGF0aWMgc3R5bGUgaXMgcHJlLXByb2Nlc3NlZCBpbnRvIGFuIG9iamVjdCBkdXJpbmcgY29tcGlsYXRpb25cbiAgLy8gYW5kIGlzIGFsd2F5cyBhIGZyZXNoIG9iamVjdCwgc28gaXQncyBzYWZlIHRvIG1lcmdlIGludG8gaXRcbiAgcmV0dXJuIGRhdGEuc3RhdGljU3R5bGVcbiAgICA/IGV4dGVuZChkYXRhLnN0YXRpY1N0eWxlLCBzdHlsZSlcbiAgICA6IHN0eWxlXG59XG5cbi8vIG5vcm1hbGl6ZSBwb3NzaWJsZSBhcnJheSAvIHN0cmluZyB2YWx1ZXMgaW50byBPYmplY3RcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlQmluZGluZyAoYmluZGluZ1N0eWxlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmdTdHlsZSkpIHtcbiAgICByZXR1cm4gdG9PYmplY3QoYmluZGluZ1N0eWxlKVxuICB9XG4gIGlmICh0eXBlb2YgYmluZGluZ1N0eWxlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXJzZVN0eWxlVGV4dChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgcmV0dXJuIGJpbmRpbmdTdHlsZVxufVxuXG4vKipcbiAqIHBhcmVudCBjb21wb25lbnQgc3R5bGUgc2hvdWxkIGJlIGFmdGVyIGNoaWxkJ3NcbiAqIHNvIHRoYXQgcGFyZW50IGNvbXBvbmVudCdzIHN0eWxlIGNvdWxkIG92ZXJyaWRlIGl0XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlICh2bm9kZSwgY2hlY2tDaGlsZCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBzdHlsZURhdGE7XG5cbiAgaWYgKGNoZWNrQ2hpbGQpIHtcbiAgICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChcbiAgICAgICAgY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhICYmXG4gICAgICAgIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEoY2hpbGROb2RlLmRhdGEpKVxuICAgICAgKSB7XG4gICAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEodm5vZGUuZGF0YSkpKSB7XG4gICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgfVxuXG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHdoaWxlICgocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlLmRhdGEgJiYgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShwYXJlbnROb2RlLmRhdGEpKSkge1xuICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIGNzc1ZhclJFID0gL14tLS87XG52YXIgaW1wb3J0YW50UkUgPSAvXFxzKiFpbXBvcnRhbnQkLztcbnZhciBzZXRQcm9wID0gZnVuY3Rpb24gKGVsLCBuYW1lLCB2YWwpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjc3NWYXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsKTtcbiAgfSBlbHNlIGlmIChpbXBvcnRhbnRSRS50ZXN0KHZhbCkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShoeXBoZW5hdGUobmFtZSksIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCAnJyksICdpbXBvcnRhbnQnKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemUobmFtZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgLy8gU3VwcG9ydCB2YWx1ZXMgYXJyYXkgY3JlYXRlZCBieSBhdXRvcHJlZml4ZXIsIGUuZy5cbiAgICAgIC8vIHtkaXNwbGF5OiBbXCItd2Via2l0LWJveFwiLCBcIi1tcy1mbGV4Ym94XCIsIFwiZmxleFwiXX1cbiAgICAgIC8vIFNldCB0aGVtIG9uZSBieSBvbmUsIGFuZCB0aGUgYnJvd3NlciB3aWxsIG9ubHkgc2V0IHRob3NlIGl0IGNhbiByZWNvZ25pemVcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdmVuZG9yTmFtZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcblxudmFyIGVtcHR5U3R5bGU7XG52YXIgbm9ybWFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChwcm9wKSB7XG4gIGVtcHR5U3R5bGUgPSBlbXB0eVN0eWxlIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICBwcm9wID0gY2FtZWxpemUocHJvcCk7XG4gIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiAocHJvcCBpbiBlbXB0eVN0eWxlKSkge1xuICAgIHJldHVybiBwcm9wXG4gIH1cbiAgdmFyIGNhcE5hbWUgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuYW1lID0gdmVuZG9yTmFtZXNbaV0gKyBjYXBOYW1lO1xuICAgIGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcbiAgICAgIHJldHVybiBuYW1lXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcblxuICBpZiAoaXNVbmRlZihkYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKGRhdGEuc3R5bGUpICYmXG4gICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKG9sZERhdGEuc3R5bGUpXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGN1ciwgbmFtZTtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkU3RhdGljU3R5bGUgPSBvbGREYXRhLnN0YXRpY1N0eWxlO1xuICB2YXIgb2xkU3R5bGVCaW5kaW5nID0gb2xkRGF0YS5ub3JtYWxpemVkU3R5bGUgfHwgb2xkRGF0YS5zdHlsZSB8fCB7fTtcblxuICAvLyBpZiBzdGF0aWMgc3R5bGUgZXhpc3RzLCBzdHlsZWJpbmRpbmcgYWxyZWFkeSBtZXJnZWQgaW50byBpdCB3aGVuIGRvaW5nIG5vcm1hbGl6ZVN0eWxlRGF0YVxuICB2YXIgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XG5cbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKHZub2RlLmRhdGEuc3R5bGUpIHx8IHt9O1xuXG4gIC8vIHN0b3JlIG5vcm1hbGl6ZWQgc3R5bGUgdW5kZXIgYSBkaWZmZXJlbnQga2V5IGZvciBuZXh0IGRpZmZcbiAgLy8gbWFrZSBzdXJlIHRvIGNsb25lIGl0IGlmIGl0J3MgcmVhY3RpdmUsIHNpbmNlIHRoZSB1c2VyIGxpa2VseSB3YW50c1xuICAvLyB0byBtdXRhdGUgaXQuXG4gIHZub2RlLmRhdGEubm9ybWFsaXplZFN0eWxlID0gaXNEZWYoc3R5bGUuX19vYl9fKVxuICAgID8gZXh0ZW5kKHt9LCBzdHlsZSlcbiAgICA6IHN0eWxlO1xuXG4gIHZhciBuZXdTdHlsZSA9IGdldFN0eWxlKHZub2RlLCB0cnVlKTtcblxuICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICBpZiAoaXNVbmRlZihuZXdTdHlsZVtuYW1lXSkpIHtcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsICcnKTtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG5ld1N0eWxlKSB7XG4gICAgY3VyID0gbmV3U3R5bGVbbmFtZV07XG4gICAgaWYgKGN1ciAhPT0gb2xkU3R5bGVbbmFtZV0pIHtcbiAgICAgIC8vIGllOSBzZXR0aW5nIHRvIG51bGwgaGFzIG5vIGVmZmVjdCwgbXVzdCB1c2UgZW1wdHkgc3RyaW5nXG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHN0eWxlID0ge1xuICBjcmVhdGU6IHVwZGF0ZVN0eWxlLFxuICB1cGRhdGU6IHVwZGF0ZVN0eWxlXG59O1xuXG4vKiAgKi9cblxudmFyIHdoaXRlc3BhY2VSRSA9IC9cXHMrLztcblxuLyoqXG4gKiBBZGQgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiBhZGRDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5hZGQoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGNscyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgaWYgKGN1ci5pbmRleE9mKCcgJyArIGNscyArICcgJykgPCAwKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGN1ciArIGNscykudHJpbSgpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiByZW1vdmVDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gICAgfVxuICAgIGlmICghZWwuY2xhc3NMaXN0Lmxlbmd0aCkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIHZhciB0YXIgPSAnICcgKyBjbHMgKyAnICc7XG4gICAgd2hpbGUgKGN1ci5pbmRleE9mKHRhcikgPj0gMCkge1xuICAgICAgY3VyID0gY3VyLnJlcGxhY2UodGFyLCAnICcpO1xuICAgIH1cbiAgICBjdXIgPSBjdXIudHJpbSgpO1xuICAgIGlmIChjdXIpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjdXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvbiAoZGVmJCQxKSB7XG4gIGlmICghZGVmJCQxKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIGlmIChkZWYkJDEuY3NzICE9PSBmYWxzZSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxLm5hbWUgfHwgJ3YnKSk7XG4gICAgfVxuICAgIGV4dGVuZChyZXMsIGRlZiQkMSk7XG4gICAgcmV0dXJuIHJlc1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMSlcbiAgfVxufVxuXG52YXIgYXV0b0Nzc1RyYW5zaXRpb24gPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnRlckNsYXNzOiAobmFtZSArIFwiLWVudGVyXCIpLFxuICAgIGVudGVyVG9DbGFzczogKG5hbWUgKyBcIi1lbnRlci10b1wiKSxcbiAgICBlbnRlckFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWVudGVyLWFjdGl2ZVwiKSxcbiAgICBsZWF2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlXCIpLFxuICAgIGxlYXZlVG9DbGFzczogKG5hbWUgKyBcIi1sZWF2ZS10b1wiKSxcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlLWFjdGl2ZVwiKVxuICB9XG59KTtcblxudmFyIGhhc1RyYW5zaXRpb24gPSBpbkJyb3dzZXIgJiYgIWlzSUU5O1xudmFyIFRSQU5TSVRJT04gPSAndHJhbnNpdGlvbic7XG52YXIgQU5JTUFUSU9OID0gJ2FuaW1hdGlvbic7XG5cbi8vIFRyYW5zaXRpb24gcHJvcGVydHkvZXZlbnQgc25pZmZpbmdcbnZhciB0cmFuc2l0aW9uUHJvcCA9ICd0cmFuc2l0aW9uJztcbnZhciB0cmFuc2l0aW9uRW5kRXZlbnQgPSAndHJhbnNpdGlvbmVuZCc7XG52YXIgYW5pbWF0aW9uUHJvcCA9ICdhbmltYXRpb24nO1xudmFyIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ2FuaW1hdGlvbmVuZCc7XG5pZiAoaGFzVHJhbnNpdGlvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHdpbmRvdy5vbnRyYW5zaXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdHRyYW5zaXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICB0cmFuc2l0aW9uUHJvcCA9ICdXZWJraXRUcmFuc2l0aW9uJztcbiAgICB0cmFuc2l0aW9uRW5kRXZlbnQgPSAnd2Via2l0VHJhbnNpdGlvbkVuZCc7XG4gIH1cbiAgaWYgKHdpbmRvdy5vbmFuaW1hdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0YW5pbWF0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgYW5pbWF0aW9uUHJvcCA9ICdXZWJraXRBbmltYXRpb24nO1xuICAgIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdEFuaW1hdGlvbkVuZCc7XG4gIH1cbn1cblxuLy8gYmluZGluZyB0byB3aW5kb3cgaXMgbmVjZXNzYXJ5IHRvIG1ha2UgaG90IHJlbG9hZCB3b3JrIGluIElFIGluIHN0cmljdCBtb2RlXG52YXIgcmFmID0gaW5Ccm93c2VyXG4gID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdylcbiAgICA6IHNldFRpbWVvdXRcbiAgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbiAoZm4pIHsgcmV0dXJuIGZuKCk7IH07XG5cbmZ1bmN0aW9uIG5leHRGcmFtZSAoZm4pIHtcbiAgcmFmKGZ1bmN0aW9uICgpIHtcbiAgICByYWYoZm4pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIHZhciB0cmFuc2l0aW9uQ2xhc3NlcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcyB8fCAoZWwuX3RyYW5zaXRpb25DbGFzc2VzID0gW10pO1xuICBpZiAodHJhbnNpdGlvbkNsYXNzZXMuaW5kZXhPZihjbHMpIDwgMCkge1xuICAgIHRyYW5zaXRpb25DbGFzc2VzLnB1c2goY2xzKTtcbiAgICBhZGRDbGFzcyhlbCwgY2xzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgIHJlbW92ZShlbC5fdHJhbnNpdGlvbkNsYXNzZXMsIGNscyk7XG4gIH1cbiAgcmVtb3ZlQ2xhc3MoZWwsIGNscyk7XG59XG5cbmZ1bmN0aW9uIHdoZW5UcmFuc2l0aW9uRW5kcyAoXG4gIGVsLFxuICBleHBlY3RlZFR5cGUsXG4gIGNiXG4pIHtcbiAgdmFyIHJlZiA9IGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICB2YXIgdGltZW91dCA9IHJlZi50aW1lb3V0O1xuICB2YXIgcHJvcENvdW50ID0gcmVmLnByb3BDb3VudDtcbiAgaWYgKCF0eXBlKSB7IHJldHVybiBjYigpIH1cbiAgdmFyIGV2ZW50ID0gdHlwZSA9PT0gVFJBTlNJVElPTiA/IHRyYW5zaXRpb25FbmRFdmVudCA6IGFuaW1hdGlvbkVuZEV2ZW50O1xuICB2YXIgZW5kZWQgPSAwO1xuICB2YXIgZW5kID0gZnVuY3Rpb24gKCkge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbiAgICBjYigpO1xuICB9O1xuICB2YXIgb25FbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZWwpIHtcbiAgICAgIGlmICgrK2VuZGVkID49IHByb3BDb3VudCkge1xuICAgICAgICBlbmQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbmRlZCA8IHByb3BDb3VudCkge1xuICAgICAgZW5kKCk7XG4gICAgfVxuICB9LCB0aW1lb3V0ICsgMSk7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbn1cblxudmFyIHRyYW5zZm9ybVJFID0gL1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLztcblxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkluZm8gKGVsLCBleHBlY3RlZFR5cGUpIHtcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgLy8gSlNET00gbWF5IHJldHVybiB1bmRlZmluZWQgZm9yIHRyYW5zaXRpb24gcHJvcGVydGllc1xuICB2YXIgdHJhbnNpdGlvbkRlbGF5cyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uRHVyYXRpb25zID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dCh0cmFuc2l0aW9uRGVsYXlzLCB0cmFuc2l0aW9uRHVyYXRpb25zKTtcbiAgdmFyIGFuaW1hdGlvbkRlbGF5cyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvbkR1cmF0aW9ucyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KGFuaW1hdGlvbkRlbGF5cywgYW5pbWF0aW9uRHVyYXRpb25zKTtcblxuICB2YXIgdHlwZTtcbiAgdmFyIHRpbWVvdXQgPSAwO1xuICB2YXIgcHJvcENvdW50ID0gMDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChleHBlY3RlZFR5cGUgPT09IFRSQU5TSVRJT04pIHtcbiAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gVFJBTlNJVElPTjtcbiAgICAgIHRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IEFOSU1BVElPTikge1xuICAgIGlmIChhbmltYXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IEFOSU1BVElPTjtcbiAgICAgIHRpbWVvdXQgPSBhbmltYXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGltZW91dCA9IE1hdGgubWF4KHRyYW5zaXRpb25UaW1lb3V0LCBhbmltYXRpb25UaW1lb3V0KTtcbiAgICB0eXBlID0gdGltZW91dCA+IDBcbiAgICAgID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0XG4gICAgICAgID8gVFJBTlNJVElPTlxuICAgICAgICA6IEFOSU1BVElPTlxuICAgICAgOiBudWxsO1xuICAgIHByb3BDb3VudCA9IHR5cGVcbiAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxuICAgICAgICA/IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICAgIDogYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgOiAwO1xuICB9XG4gIHZhciBoYXNUcmFuc2Zvcm0gPVxuICAgIHR5cGUgPT09IFRSQU5TSVRJT04gJiZcbiAgICB0cmFuc2Zvcm1SRS50ZXN0KHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdQcm9wZXJ0eSddKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgcHJvcENvdW50OiBwcm9wQ291bnQsXG4gICAgaGFzVHJhbnNmb3JtOiBoYXNUcmFuc2Zvcm1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUaW1lb3V0IChkZWxheXMsIGR1cmF0aW9ucykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcbiAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XG4gIH1cblxuICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgZHVyYXRpb25zLm1hcChmdW5jdGlvbiAoZCwgaSkge1xuICAgIHJldHVybiB0b01zKGQpICsgdG9NcyhkZWxheXNbaV0pXG4gIH0pKVxufVxuXG4vLyBPbGQgdmVyc2lvbnMgb2YgQ2hyb21pdW0gKGJlbG93IDYxLjAuMzE2My4xMDApIGZvcm1hdHMgZmxvYXRpbmcgcG9pbnRlciBudW1iZXJzXG4vLyBpbiBhIGxvY2FsZS1kZXBlbmRlbnQgd2F5LCB1c2luZyBhIGNvbW1hIGluc3RlYWQgb2YgYSBkb3QuXG4vLyBJZiBjb21tYSBpcyBub3QgcmVwbGFjZWQgd2l0aCBhIGRvdCwgdGhlIGlucHV0IHdpbGwgYmUgcm91bmRlZCBkb3duIChpLmUuIGFjdGluZ1xuLy8gYXMgYSBmbG9vciBmdW5jdGlvbikgY2F1c2luZyB1bmV4cGVjdGVkIGJlaGF2aW9yc1xuZnVuY3Rpb24gdG9NcyAocykge1xuICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpLnJlcGxhY2UoJywnLCAnLicpKSAqIDEwMDBcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVudGVyICh2bm9kZSwgdG9nZ2xlRGlzcGxheSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBsZWF2ZSBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2xlYXZlQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgZW50ZXJDbGFzcyA9IGRhdGEuZW50ZXJDbGFzcztcbiAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzO1xuICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIGFwcGVhckNsYXNzID0gZGF0YS5hcHBlYXJDbGFzcztcbiAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7XG4gIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlciA9IGRhdGEuYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7XG4gIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWQgPSBkYXRhLmVudGVyQ2FuY2VsbGVkO1xuICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7XG4gIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgdmFyIGFmdGVyQXBwZWFyID0gZGF0YS5hZnRlckFwcGVhcjtcbiAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXNcbiAgLy8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG4gIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLlxuICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlO1xuICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gIHdoaWxlICh0cmFuc2l0aW9uTm9kZSAmJiB0cmFuc2l0aW9uTm9kZS5wYXJlbnQpIHtcbiAgICBjb250ZXh0ID0gdHJhbnNpdGlvbk5vZGUuY29udGV4dDtcbiAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcbiAgfVxuXG4gIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDtcblxuICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckNsYXNzXG4gICAgPyBhcHBlYXJDbGFzc1xuICAgIDogZW50ZXJDbGFzcztcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA/IGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgOiBlbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3NcbiAgICA/IGFwcGVhclRvQ2xhc3NcbiAgICA6IGVudGVyVG9DbGFzcztcblxuICB2YXIgYmVmb3JlRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChiZWZvcmVBcHBlYXIgfHwgYmVmb3JlRW50ZXIpXG4gICAgOiBiZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAodHlwZW9mIGFwcGVhciA9PT0gJ2Z1bmN0aW9uJyA/IGFwcGVhciA6IGVudGVyKVxuICAgIDogZW50ZXI7XG4gIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYWZ0ZXJBcHBlYXIgfHwgYWZ0ZXJFbnRlcilcbiAgICA6IGFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFwcGVhckNhbmNlbGxlZCB8fCBlbnRlckNhbmNlbGxlZClcbiAgICA6IGVudGVyQ2FuY2VsbGVkO1xuXG4gIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24uZW50ZXJcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBleHBsaWNpdEVudGVyRHVyYXRpb24gIT0gbnVsbCkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uLCAnZW50ZXInLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgoZW50ZXJIb29rKTtcblxuICB2YXIgY2IgPSBlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICB9XG4gICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJFbnRlckhvb2sgJiYgYWZ0ZXJFbnRlckhvb2soZWwpO1xuICAgIH1cbiAgICBlbC5fZW50ZXJDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgLy8gcmVtb3ZlIHBlbmRpbmcgbGVhdmUgZWxlbWVudCBvbiBlbnRlciBieSBpbmplY3RpbmcgYW4gaW5zZXJ0IGhvb2tcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgdmFyIHBlbmRpbmdOb2RlID0gcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcbiAgICAgIGlmIChwZW5kaW5nTm9kZSAmJlxuICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2JcbiAgICAgICkge1xuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgIH1cbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHN0YXJ0IGVudGVyIHRyYW5zaXRpb25cbiAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uKSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRFbnRlckR1cmF0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAodm5vZGUuZGF0YS5zaG93KSB7XG4gICAgdG9nZ2xlRGlzcGxheSAmJiB0b2dnbGVEaXNwbGF5KCk7XG4gICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICB9XG5cbiAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgY2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZWF2ZSAodm5vZGUsIHJtKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGVudGVyIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpKSB7XG4gICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fZW50ZXJDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBybSgpXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGxlYXZlQ2xhc3MgPSBkYXRhLmxlYXZlQ2xhc3M7XG4gIHZhciBsZWF2ZVRvQ2xhc3MgPSBkYXRhLmxlYXZlVG9DbGFzcztcbiAgdmFyIGxlYXZlQWN0aXZlQ2xhc3MgPSBkYXRhLmxlYXZlQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVMZWF2ZSA9IGRhdGEuYmVmb3JlTGVhdmU7XG4gIHZhciBsZWF2ZSA9IGRhdGEubGVhdmU7XG4gIHZhciBhZnRlckxlYXZlID0gZGF0YS5hZnRlckxlYXZlO1xuICB2YXIgbGVhdmVDYW5jZWxsZWQgPSBkYXRhLmxlYXZlQ2FuY2VsbGVkO1xuICB2YXIgZGVsYXlMZWF2ZSA9IGRhdGEuZGVsYXlMZWF2ZTtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgobGVhdmUpO1xuXG4gIHZhciBleHBsaWNpdExlYXZlRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24ubGVhdmVcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0RlZihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24sICdsZWF2ZScsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBjYiA9IGVsLl9sZWF2ZUNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUgJiYgZWwucGFyZW50Tm9kZS5fcGVuZGluZykge1xuICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICB9XG4gICAgICBsZWF2ZUNhbmNlbGxlZCAmJiBsZWF2ZUNhbmNlbGxlZChlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoZWwpO1xuICAgIH1cbiAgICBlbC5fbGVhdmVDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmIChkZWxheUxlYXZlKSB7XG4gICAgZGVsYXlMZWF2ZShwZXJmb3JtTGVhdmUpO1xuICB9IGVsc2Uge1xuICAgIHBlcmZvcm1MZWF2ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVyZm9ybUxlYXZlICgpIHtcbiAgICAvLyB0aGUgZGVsYXllZCBsZWF2ZSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gY2FuY2VsbGVkXG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcbiAgICBpZiAoIXZub2RlLmRhdGEuc2hvdyAmJiBlbC5wYXJlbnROb2RlKSB7XG4gICAgICAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyB8fCAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyA9IHt9KSlbKHZub2RlLmtleSldID0gdm5vZGU7XG4gICAgfVxuICAgIGJlZm9yZUxlYXZlICYmIGJlZm9yZUxlYXZlKGVsKTtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdExlYXZlRHVyYXRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgbGVhdmUgJiYgbGVhdmUoZWwsIGNiKTtcbiAgICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9XG59XG5cbi8vIG9ubHkgdXNlZCBpbiBkZXYgbW9kZVxuZnVuY3Rpb24gY2hlY2tEdXJhdGlvbiAodmFsLCBuYW1lLCB2bm9kZSkge1xuICBpZiAodHlwZW9mIHZhbCAhPT0gJ251bWJlcicpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgXCIgKyBuYW1lICsgXCIgZHVyYXRpb24gaXMgbm90IGEgdmFsaWQgbnVtYmVyIC0gXCIgK1xuICAgICAgXCJnb3QgXCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsKSkgKyBcIi5cIixcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9IGVsc2UgaWYgKGlzTmFOKHZhbCkpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgXCIgKyBuYW1lICsgXCIgZHVyYXRpb24gaXMgTmFOIC0gXCIgK1xuICAgICAgJ3RoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC4nLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNWYWxpZER1cmF0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInICYmICFpc05hTih2YWwpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdHJhbnNpdGlvbiBob29rJ3MgYXJndW1lbnQgbGVuZ3RoLiBUaGUgaG9vayBtYXkgYmU6XG4gKiAtIGEgbWVyZ2VkIGhvb2sgKGludm9rZXIpIHdpdGggdGhlIG9yaWdpbmFsIGluIC5mbnNcbiAqIC0gYSB3cmFwcGVkIGNvbXBvbmVudCBtZXRob2QgKGNoZWNrIC5fbGVuZ3RoKVxuICogLSBhIHBsYWluIGZ1bmN0aW9uICgubGVuZ3RoKVxuICovXG5mdW5jdGlvbiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoIChmbikge1xuICBpZiAoaXNVbmRlZihmbikpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB2YXIgaW52b2tlckZucyA9IGZuLmZucztcbiAgaWYgKGlzRGVmKGludm9rZXJGbnMpKSB7XG4gICAgLy8gaW52b2tlclxuICAgIHJldHVybiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKFxuICAgICAgQXJyYXkuaXNBcnJheShpbnZva2VyRm5zKVxuICAgICAgICA/IGludm9rZXJGbnNbMF1cbiAgICAgICAgOiBpbnZva2VyRm5zXG4gICAgKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZm4uX2xlbmd0aCB8fCBmbi5sZW5ndGgpID4gMVxuICB9XG59XG5cbmZ1bmN0aW9uIF9lbnRlciAoXywgdm5vZGUpIHtcbiAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgIGVudGVyKHZub2RlKTtcbiAgfVxufVxuXG52YXIgdHJhbnNpdGlvbiA9IGluQnJvd3NlciA/IHtcbiAgY3JlYXRlOiBfZW50ZXIsXG4gIGFjdGl2YXRlOiBfZW50ZXIsXG4gIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlJCQxICh2bm9kZSwgcm0pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICAgIGxlYXZlKHZub2RlLCBybSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgfVxuICB9XG59IDoge307XG5cbnZhciBwbGF0Zm9ybU1vZHVsZXMgPSBbXG4gIGF0dHJzLFxuICBrbGFzcyxcbiAgZXZlbnRzLFxuICBkb21Qcm9wcyxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb25cbl07XG5cbi8qICAqL1xuXG4vLyB0aGUgZGlyZWN0aXZlIG1vZHVsZSBzaG91bGQgYmUgYXBwbGllZCBsYXN0LCBhZnRlciBhbGxcbi8vIGJ1aWx0LWluIG1vZHVsZXMgaGF2ZSBiZWVuIGFwcGxpZWQuXG52YXIgbW9kdWxlcyA9IHBsYXRmb3JtTW9kdWxlcy5jb25jYXQoYmFzZU1vZHVsZXMpO1xuXG52YXIgcGF0Y2ggPSBjcmVhdGVQYXRjaEZ1bmN0aW9uKHsgbm9kZU9wczogbm9kZU9wcywgbW9kdWxlczogbW9kdWxlcyB9KTtcblxuLyoqXG4gKiBOb3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgbGlrZSBhdHRhY2hpbmdcbiAqIHByb3BlcnRpZXMgdG8gRWxlbWVudHMuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAoaXNJRTkpIHtcbiAgLy8gaHR0cDovL3d3dy5tYXR0czQxMS5jb20vcG9zdC9pbnRlcm5ldC1leHBsb3Jlci05LW9uaW5wdXQvXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGlmIChlbCAmJiBlbC52bW9kZWwpIHtcbiAgICAgIHRyaWdnZXIoZWwsICdpbnB1dCcpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBkaXJlY3RpdmUgPSB7XG4gIGluc2VydGVkOiBmdW5jdGlvbiBpbnNlcnRlZCAoZWwsIGJpbmRpbmcsIHZub2RlLCBvbGRWbm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICAvLyAjNjkwM1xuICAgICAgaWYgKG9sZFZub2RlLmVsbSAmJiAhb2xkVm5vZGUuZWxtLl92T3B0aW9ucykge1xuICAgICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ3Bvc3RwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkaXJlY3RpdmUuY29tcG9uZW50VXBkYXRlZChlbCwgYmluZGluZywgdm5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZub2RlLnRhZyA9PT0gJ3RleHRhcmVhJyB8fCBpc1RleHRJbnB1dFR5cGUoZWwudHlwZSkpIHtcbiAgICAgIGVsLl92TW9kaWZpZXJzID0gYmluZGluZy5tb2RpZmllcnM7XG4gICAgICBpZiAoIWJpbmRpbmcubW9kaWZpZXJzLmxhenkpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25zdGFydCcsIG9uQ29tcG9zaXRpb25TdGFydCk7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIC8vIFNhZmFyaSA8IDEwLjIgJiBVSVdlYlZpZXcgZG9lc24ndCBmaXJlIGNvbXBvc2l0aW9uZW5kIHdoZW5cbiAgICAgICAgLy8gc3dpdGNoaW5nIGZvY3VzIGJlZm9yZSBjb25maXJtaW5nIGNvbXBvc2l0aW9uIGNob2ljZVxuICAgICAgICAvLyB0aGlzIGFsc28gZml4ZXMgdGhlIGlzc3VlIHdoZXJlIHNvbWUgYnJvd3NlcnMgZS5nLiBpT1MgQ2hyb21lXG4gICAgICAgIC8vIGZpcmVzIFwiY2hhbmdlXCIgaW5zdGVhZCBvZiBcImlucHV0XCIgb24gYXV0b2NvbXBsZXRlLlxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChpc0lFOSkge1xuICAgICAgICAgIGVsLnZtb2RlbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50VXBkYXRlZDogZnVuY3Rpb24gY29tcG9uZW50VXBkYXRlZCAoZWwsIGJpbmRpbmcsIHZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIC8vIGluIGNhc2UgdGhlIG9wdGlvbnMgcmVuZGVyZWQgYnkgdi1mb3IgaGF2ZSBjaGFuZ2VkLFxuICAgICAgLy8gaXQncyBwb3NzaWJsZSB0aGF0IHRoZSB2YWx1ZSBpcyBvdXQtb2Ytc3luYyB3aXRoIHRoZSByZW5kZXJlZCBvcHRpb25zLlxuICAgICAgLy8gZGV0ZWN0IHN1Y2ggY2FzZXMgYW5kIGZpbHRlciBvdXQgdmFsdWVzIHRoYXQgbm8gbG9uZ2VyIGhhcyBhIG1hdGNoaW5nXG4gICAgICAvLyBvcHRpb24gaW4gdGhlIERPTS5cbiAgICAgIHZhciBwcmV2T3B0aW9ucyA9IGVsLl92T3B0aW9ucztcbiAgICAgIHZhciBjdXJPcHRpb25zID0gZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgICAgaWYgKGN1ck9wdGlvbnMuc29tZShmdW5jdGlvbiAobywgaSkgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgcHJldk9wdGlvbnNbaV0pOyB9KSkge1xuICAgICAgICAvLyB0cmlnZ2VyIGNoYW5nZSBldmVudCBpZlxuICAgICAgICAvLyBubyBtYXRjaGluZyBvcHRpb24gZm91bmQgZm9yIGF0IGxlYXN0IG9uZSB2YWx1ZVxuICAgICAgICB2YXIgbmVlZFJlc2V0ID0gZWwubXVsdGlwbGVcbiAgICAgICAgICA/IGJpbmRpbmcudmFsdWUuc29tZShmdW5jdGlvbiAodikgeyByZXR1cm4gaGFzTm9NYXRjaGluZ09wdGlvbih2LCBjdXJPcHRpb25zKTsgfSlcbiAgICAgICAgICA6IGJpbmRpbmcudmFsdWUgIT09IGJpbmRpbmcub2xkVmFsdWUgJiYgaGFzTm9NYXRjaGluZ09wdGlvbihiaW5kaW5nLnZhbHVlLCBjdXJPcHRpb25zKTtcbiAgICAgICAgaWYgKG5lZWRSZXNldCkge1xuICAgICAgICAgIHRyaWdnZXIoZWwsICdjaGFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNJRSB8fCBpc0VkZ2UpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgICB9LCAwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhY3R1YWxseVNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgdmFyIHZhbHVlID0gYmluZGluZy52YWx1ZTtcbiAgdmFyIGlzTXVsdGlwbGUgPSBlbC5tdWx0aXBsZTtcbiAgaWYgKGlzTXVsdGlwbGUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCI8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw9XFxcIlwiICsgKGJpbmRpbmcuZXhwcmVzc2lvbikgKyBcIlxcXCI+IFwiICtcbiAgICAgIFwiZXhwZWN0cyBhbiBBcnJheSB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGJ1dCBnb3QgXCIgKyAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWxlY3RlZCwgb3B0aW9uO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcbiAgICBpZiAoaXNNdWx0aXBsZSkge1xuICAgICAgc2VsZWN0ZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIGdldFZhbHVlKG9wdGlvbikpID4gLTE7XG4gICAgICBpZiAob3B0aW9uLnNlbGVjdGVkICE9PSBzZWxlY3RlZCkge1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7XG4gICAgICAgIGlmIChlbC5zZWxlY3RlZEluZGV4ICE9PSBpKSB7XG4gICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNNdWx0aXBsZSkge1xuICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNOb01hdGNoaW5nT3B0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5ldmVyeShmdW5jdGlvbiAobykgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgdmFsdWUpOyB9KVxufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZSAob3B0aW9uKSB7XG4gIHJldHVybiAnX3ZhbHVlJyBpbiBvcHRpb25cbiAgICA/IG9wdGlvbi5fdmFsdWVcbiAgICA6IG9wdGlvbi52YWx1ZVxufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uU3RhcnQgKGUpIHtcbiAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZCAoZSkge1xuICAvLyBwcmV2ZW50IHRyaWdnZXJpbmcgYW4gaW5wdXQgZXZlbnQgZm9yIG5vIHJlYXNvblxuICBpZiAoIWUudGFyZ2V0LmNvbXBvc2luZykgeyByZXR1cm4gfVxuICBlLnRhcmdldC5jb21wb3NpbmcgPSBmYWxzZTtcbiAgdHJpZ2dlcihlLnRhcmdldCwgJ2lucHV0Jyk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIgKGVsLCB0eXBlKSB7XG4gIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgZS5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XG4gIGVsLmRpc3BhdGNoRXZlbnQoZSk7XG59XG5cbi8qICAqL1xuXG4vLyByZWN1cnNpdmVseSBzZWFyY2ggZm9yIHBvc3NpYmxlIHRyYW5zaXRpb24gZGVmaW5lZCBpbnNpZGUgdGhlIGNvbXBvbmVudCByb290XG5mdW5jdGlvbiBsb2NhdGVOb2RlICh2bm9kZSkge1xuICByZXR1cm4gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiYgKCF2bm9kZS5kYXRhIHx8ICF2bm9kZS5kYXRhLnRyYW5zaXRpb24pXG4gICAgPyBsb2NhdGVOb2RlKHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSlcbiAgICA6IHZub2RlXG59XG5cbnZhciBzaG93ID0ge1xuICBiaW5kOiBmdW5jdGlvbiBiaW5kIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcblxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICB2YXIgb3JpZ2luYWxEaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5ID1cbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTtcbiAgICBpZiAodmFsdWUgJiYgdHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBvcmlnaW5hbERpc3BsYXk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gb3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG4gICAgdmFyIG9sZFZhbHVlID0gcmVmLm9sZFZhbHVlO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCF2YWx1ZSA9PT0gIW9sZFZhbHVlKSB7IHJldHVybiB9XG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIGlmICh0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZWF2ZSh2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kIChcbiAgICBlbCxcbiAgICBiaW5kaW5nLFxuICAgIHZub2RlLFxuICAgIG9sZFZub2RlLFxuICAgIGlzRGVzdHJveVxuICApIHtcbiAgICBpZiAoIWlzRGVzdHJveSkge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBwbGF0Zm9ybURpcmVjdGl2ZXMgPSB7XG4gIG1vZGVsOiBkaXJlY3RpdmUsXG4gIHNob3c6IHNob3dcbn07XG5cbi8qICAqL1xuXG52YXIgdHJhbnNpdGlvblByb3BzID0ge1xuICBuYW1lOiBTdHJpbmcsXG4gIGFwcGVhcjogQm9vbGVhbixcbiAgY3NzOiBCb29sZWFuLFxuICBtb2RlOiBTdHJpbmcsXG4gIHR5cGU6IFN0cmluZyxcbiAgZW50ZXJDbGFzczogU3RyaW5nLFxuICBsZWF2ZUNsYXNzOiBTdHJpbmcsXG4gIGVudGVyVG9DbGFzczogU3RyaW5nLFxuICBsZWF2ZVRvQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcbiAgZHVyYXRpb246IFtOdW1iZXIsIFN0cmluZywgT2JqZWN0XVxufTtcblxuLy8gaW4gY2FzZSB0aGUgY2hpbGQgaXMgYWxzbyBhbiBhYnN0cmFjdCBjb21wb25lbnQsIGUuZy4gPGtlZXAtYWxpdmU+XG4vLyB3ZSB3YW50IHRvIHJlY3Vyc2l2ZWx5IHJldHJpZXZlIHRoZSByZWFsIGNvbXBvbmVudCB0byBiZSByZW5kZXJlZFxuZnVuY3Rpb24gZ2V0UmVhbENoaWxkICh2bm9kZSkge1xuICB2YXIgY29tcE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoY29tcE9wdGlvbnMgJiYgY29tcE9wdGlvbnMuQ3Rvci5vcHRpb25zLmFic3RyYWN0KSB7XG4gICAgcmV0dXJuIGdldFJlYWxDaGlsZChnZXRGaXJzdENvbXBvbmVudENoaWxkKGNvbXBPcHRpb25zLmNoaWxkcmVuKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VHJhbnNpdGlvbkRhdGEgKGNvbXApIHtcbiAgdmFyIGRhdGEgPSB7fTtcbiAgdmFyIG9wdGlvbnMgPSBjb21wLiRvcHRpb25zO1xuICAvLyBwcm9wc1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5wcm9wc0RhdGEpIHtcbiAgICBkYXRhW2tleV0gPSBjb21wW2tleV07XG4gIH1cbiAgLy8gZXZlbnRzLlxuICAvLyBleHRyYWN0IGxpc3RlbmVycyBhbmQgcGFzcyB0aGVtIGRpcmVjdGx5IHRvIHRoZSB0cmFuc2l0aW9uIG1ldGhvZHNcbiAgdmFyIGxpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgZm9yICh2YXIga2V5JDEgaW4gbGlzdGVuZXJzKSB7XG4gICAgZGF0YVtjYW1lbGl6ZShrZXkkMSldID0gbGlzdGVuZXJzW2tleSQxXTtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBwbGFjZWhvbGRlciAoaCwgcmF3Q2hpbGQpIHtcbiAgaWYgKC9cXGQta2VlcC1hbGl2ZSQvLnRlc3QocmF3Q2hpbGQudGFnKSkge1xuICAgIHJldHVybiBoKCdrZWVwLWFsaXZlJywge1xuICAgICAgcHJvcHM6IHJhd0NoaWxkLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNQYXJlbnRUcmFuc2l0aW9uICh2bm9kZSkge1xuICB3aGlsZSAoKHZub2RlID0gdm5vZGUucGFyZW50KSkge1xuICAgIGlmICh2bm9kZS5kYXRhLnRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU2FtZUNoaWxkIChjaGlsZCwgb2xkQ2hpbGQpIHtcbiAgcmV0dXJuIG9sZENoaWxkLmtleSA9PT0gY2hpbGQua2V5ICYmIG9sZENoaWxkLnRhZyA9PT0gY2hpbGQudGFnXG59XG5cbnZhciBpc05vdFRleHROb2RlID0gZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudGFnIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKTsgfTtcblxudmFyIGlzVlNob3dEaXJlY3RpdmUgPSBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnc2hvdyc7IH07XG5cbnZhciBUcmFuc2l0aW9uID0ge1xuICBuYW1lOiAndHJhbnNpdGlvbicsXG4gIHByb3BzOiB0cmFuc2l0aW9uUHJvcHMsXG4gIGFic3RyYWN0OiB0cnVlLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGZpbHRlciBvdXQgdGV4dCBub2RlcyAocG9zc2libGUgd2hpdGVzcGFjZXMpXG4gICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoaXNOb3RUZXh0Tm9kZSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdhcm4gbXVsdGlwbGUgZWxlbWVudHNcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudC4gVXNlICcgK1xuICAgICAgICAnPHRyYW5zaXRpb24tZ3JvdXA+IGZvciBsaXN0cy4nLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIG1vZGUgPSB0aGlzLm1vZGU7XG5cbiAgICAvLyB3YXJuIGludmFsaWQgbW9kZVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBtb2RlICYmIG1vZGUgIT09ICdpbi1vdXQnICYmIG1vZGUgIT09ICdvdXQtaW4nXG4gICAgKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnaW52YWxpZCA8dHJhbnNpdGlvbj4gbW9kZTogJyArIG1vZGUsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgcmF3Q2hpbGQgPSBjaGlsZHJlblswXTtcblxuICAgIC8vIGlmIHRoaXMgaXMgYSBjb21wb25lbnQgcm9vdCBub2RlIGFuZCB0aGUgY29tcG9uZW50J3NcbiAgICAvLyBwYXJlbnQgY29udGFpbmVyIG5vZGUgYWxzbyBoYXMgdHJhbnNpdGlvbiwgc2tpcC5cbiAgICBpZiAoaGFzUGFyZW50VHJhbnNpdGlvbih0aGlzLiR2bm9kZSkpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIC8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZFxuICAgIC8vIHVzZSBnZXRSZWFsQ2hpbGQoKSB0byBpZ25vcmUgYWJzdHJhY3QgY29tcG9uZW50cyBlLmcuIGtlZXAtYWxpdmVcbiAgICB2YXIgY2hpbGQgPSBnZXRSZWFsQ2hpbGQocmF3Q2hpbGQpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGQpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9sZWF2aW5nKSB7XG4gICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgfVxuXG4gICAgLy8gZW5zdXJlIGEga2V5IHRoYXQgaXMgdW5pcXVlIHRvIHRoZSB2bm9kZSB0eXBlIGFuZCB0byB0aGlzIHRyYW5zaXRpb25cbiAgICAvLyBjb21wb25lbnQgaW5zdGFuY2UuIFRoaXMga2V5IHdpbGwgYmUgdXNlZCB0byByZW1vdmUgcGVuZGluZyBsZWF2aW5nIG5vZGVzXG4gICAgLy8gZHVyaW5nIGVudGVyaW5nLlxuICAgIHZhciBpZCA9IFwiX190cmFuc2l0aW9uLVwiICsgKHRoaXMuX3VpZCkgKyBcIi1cIjtcbiAgICBjaGlsZC5rZXkgPSBjaGlsZC5rZXkgPT0gbnVsbFxuICAgICAgPyBjaGlsZC5pc0NvbW1lbnRcbiAgICAgICAgPyBpZCArICdjb21tZW50J1xuICAgICAgICA6IGlkICsgY2hpbGQudGFnXG4gICAgICA6IGlzUHJpbWl0aXZlKGNoaWxkLmtleSlcbiAgICAgICAgPyAoU3RyaW5nKGNoaWxkLmtleSkuaW5kZXhPZihpZCkgPT09IDAgPyBjaGlsZC5rZXkgOiBpZCArIGNoaWxkLmtleSlcbiAgICAgICAgOiBjaGlsZC5rZXk7XG5cbiAgICB2YXIgZGF0YSA9IChjaGlsZC5kYXRhIHx8IChjaGlsZC5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuICAgIHZhciBvbGRSYXdDaGlsZCA9IHRoaXMuX3Zub2RlO1xuICAgIHZhciBvbGRDaGlsZCA9IGdldFJlYWxDaGlsZChvbGRSYXdDaGlsZCk7XG5cbiAgICAvLyBtYXJrIHYtc2hvd1xuICAgIC8vIHNvIHRoYXQgdGhlIHRyYW5zaXRpb24gbW9kdWxlIGNhbiBoYW5kIG92ZXIgdGhlIGNvbnRyb2wgdG8gdGhlIGRpcmVjdGl2ZVxuICAgIGlmIChjaGlsZC5kYXRhLmRpcmVjdGl2ZXMgJiYgY2hpbGQuZGF0YS5kaXJlY3RpdmVzLnNvbWUoaXNWU2hvd0RpcmVjdGl2ZSkpIHtcbiAgICAgIGNoaWxkLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgb2xkQ2hpbGQgJiZcbiAgICAgIG9sZENoaWxkLmRhdGEgJiZcbiAgICAgICFpc1NhbWVDaGlsZChjaGlsZCwgb2xkQ2hpbGQpICYmXG4gICAgICAhaXNBc3luY1BsYWNlaG9sZGVyKG9sZENoaWxkKSAmJlxuICAgICAgLy8gIzY2ODcgY29tcG9uZW50IHJvb3QgaXMgYSBjb21tZW50IG5vZGVcbiAgICAgICEob2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UgJiYgb2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlLmlzQ29tbWVudClcbiAgICApIHtcbiAgICAgIC8vIHJlcGxhY2Ugb2xkIGNoaWxkIHRyYW5zaXRpb24gZGF0YSB3aXRoIGZyZXNoIG9uZVxuICAgICAgLy8gaW1wb3J0YW50IGZvciBkeW5hbWljIHRyYW5zaXRpb25zIVxuICAgICAgdmFyIG9sZERhdGEgPSBvbGRDaGlsZC5kYXRhLnRyYW5zaXRpb24gPSBleHRlbmQoe30sIGRhdGEpO1xuICAgICAgLy8gaGFuZGxlIHRyYW5zaXRpb24gbW9kZVxuICAgICAgaWYgKG1vZGUgPT09ICdvdXQtaW4nKSB7XG4gICAgICAgIC8vIHJldHVybiBwbGFjZWhvbGRlciBub2RlIGFuZCBxdWV1ZSB1cGRhdGUgd2hlbiBsZWF2ZSBmaW5pc2hlc1xuICAgICAgICB0aGlzLl9sZWF2aW5nID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2FmdGVyTGVhdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcyQxLl9sZWF2aW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhpcyQxLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0Jykge1xuICAgICAgICBpZiAoaXNBc3luY1BsYWNlaG9sZGVyKGNoaWxkKSkge1xuICAgICAgICAgIHJldHVybiBvbGRSYXdDaGlsZFxuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxheWVkTGVhdmU7XG4gICAgICAgIHZhciBwZXJmb3JtTGVhdmUgPSBmdW5jdGlvbiAoKSB7IGRlbGF5ZWRMZWF2ZSgpOyB9O1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnYWZ0ZXJFbnRlcicsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdlbnRlckNhbmNlbGxlZCcsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdkZWxheUxlYXZlJywgZnVuY3Rpb24gKGxlYXZlKSB7IGRlbGF5ZWRMZWF2ZSA9IGxlYXZlOyB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmF3Q2hpbGRcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBwcm9wcyA9IGV4dGVuZCh7XG4gIHRhZzogU3RyaW5nLFxuICBtb3ZlQ2xhc3M6IFN0cmluZ1xufSwgdHJhbnNpdGlvblByb3BzKTtcblxuZGVsZXRlIHByb3BzLm1vZGU7XG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSB7XG4gIHByb3BzOiBwcm9wcyxcblxuICBiZWZvcmVNb3VudDogZnVuY3Rpb24gYmVmb3JlTW91bnQgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHVwZGF0ZSA9IHRoaXMuX3VwZGF0ZTtcbiAgICB0aGlzLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHRoaXMkMSk7XG4gICAgICAvLyBmb3JjZSByZW1vdmluZyBwYXNzXG4gICAgICB0aGlzJDEuX19wYXRjaF9fKFxuICAgICAgICB0aGlzJDEuX3Zub2RlLFxuICAgICAgICB0aGlzJDEua2VwdCxcbiAgICAgICAgZmFsc2UsIC8vIGh5ZHJhdGluZ1xuICAgICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcylcbiAgICAgICk7XG4gICAgICB0aGlzJDEuX3Zub2RlID0gdGhpcyQxLmtlcHQ7XG4gICAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAgIHVwZGF0ZS5jYWxsKHRoaXMkMSwgdm5vZGUsIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0YWcgPSB0aGlzLnRhZyB8fCB0aGlzLiR2bm9kZS5kYXRhLnRhZyB8fCAnc3Bhbic7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICB2YXIgcmF3Q2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB2YXIgdHJhbnNpdGlvbkRhdGEgPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHJhd0NoaWxkcmVuW2ldO1xuICAgICAgaWYgKGMudGFnKSB7XG4gICAgICAgIGlmIChjLmtleSAhPSBudWxsICYmIFN0cmluZyhjLmtleSkuaW5kZXhPZignX192bGlzdCcpICE9PSAwKSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjKTtcbiAgICAgICAgICBtYXBbYy5rZXldID0gY1xuICAgICAgICAgIDsoYy5kYXRhIHx8IChjLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgICAgdmFyIG5hbWUgPSBvcHRzID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcgfHwgJycpIDogYy50YWc7XG4gICAgICAgICAgd2FybigoXCI8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZDogPFwiICsgbmFtZSArIFwiPlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICB2YXIga2VwdCA9IFtdO1xuICAgICAgdmFyIHJlbW92ZWQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTtcbiAgICAgICAgYyQxLmRhdGEudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICBjJDEuZGF0YS5wb3MgPSBjJDEuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAobWFwW2MkMS5rZXldKSB7XG4gICAgICAgICAga2VwdC5wdXNoKGMkMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlZC5wdXNoKGMkMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgfSxcblxuICB1cGRhdGVkOiBmdW5jdGlvbiB1cGRhdGVkICgpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbjtcbiAgICB2YXIgbW92ZUNsYXNzID0gdGhpcy5tb3ZlQ2xhc3MgfHwgKCh0aGlzLm5hbWUgfHwgJ3YnKSArICctbW92ZScpO1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoIHx8ICF0aGlzLmhhc01vdmUoY2hpbGRyZW5bMF0uZWxtLCBtb3ZlQ2xhc3MpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3ZSBkaXZpZGUgdGhlIHdvcmsgaW50byB0aHJlZSBsb29wcyB0byBhdm9pZCBtaXhpbmcgRE9NIHJlYWRzIGFuZCB3cml0ZXNcbiAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGFwcGx5VHJhbnNsYXRpb24pO1xuXG4gICAgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uXG4gICAgLy8gYXNzaWduIHRvIHRoaXMgdG8gYXZvaWQgYmVpbmcgcmVtb3ZlZCBpbiB0cmVlLXNoYWtpbmdcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0aGlzLl9yZWZsb3cgPSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodDtcblxuICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIGlmIChjLmRhdGEubW92ZWQpIHtcbiAgICAgICAgdmFyIGVsID0gYy5lbG07XG4gICAgICAgIHZhciBzID0gZWwuc3R5bGU7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJyc7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBlbC5fbW92ZUNiID0gZnVuY3Rpb24gY2IgKGUpIHtcbiAgICAgICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gZWwpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgY2IpO1xuICAgICAgICAgICAgZWwuX21vdmVDYiA9IG51bGw7XG4gICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgaGFzTW92ZTogZnVuY3Rpb24gaGFzTW92ZSAoZWwsIG1vdmVDbGFzcykge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoIWhhc1RyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICh0aGlzLl9oYXNNb3ZlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNNb3ZlXG4gICAgICB9XG4gICAgICAvLyBEZXRlY3Qgd2hldGhlciBhbiBlbGVtZW50IHdpdGggdGhlIG1vdmUgY2xhc3MgYXBwbGllZCBoYXNcbiAgICAgIC8vIENTUyB0cmFuc2l0aW9ucy4gU2luY2UgdGhlIGVsZW1lbnQgbWF5IGJlIGluc2lkZSBhbiBlbnRlcmluZ1xuICAgICAgLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxuICAgICAgLy8gYWxsIG90aGVyIHRyYW5zaXRpb24gY2xhc3NlcyBhcHBsaWVkIHRvIGVuc3VyZSBvbmx5IHRoZSBtb3ZlIGNsYXNzXG4gICAgICAvLyBpcyBhcHBsaWVkLlxuICAgICAgdmFyIGNsb25lID0gZWwuY2xvbmVOb2RlKCk7XG4gICAgICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgICAgIGVsLl90cmFuc2l0aW9uQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHsgcmVtb3ZlQ2xhc3MoY2xvbmUsIGNscyk7IH0pO1xuICAgICAgfVxuICAgICAgYWRkQ2xhc3MoY2xvbmUsIG1vdmVDbGFzcyk7XG4gICAgICBjbG9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgdGhpcy4kZWwuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgICAgdmFyIGluZm8gPSBnZXRUcmFuc2l0aW9uSW5mbyhjbG9uZSk7XG4gICAgICB0aGlzLiRlbC5yZW1vdmVDaGlsZChjbG9uZSk7XG4gICAgICByZXR1cm4gKHRoaXMuX2hhc01vdmUgPSBpbmZvLmhhc1RyYW5zZm9ybSlcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzIChjKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX21vdmVDYikge1xuICAgIGMuZWxtLl9tb3ZlQ2IoKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9lbnRlckNiKSB7XG4gICAgYy5lbG0uX2VudGVyQ2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWNvcmRQb3NpdGlvbiAoYykge1xuICBjLmRhdGEubmV3UG9zID0gYy5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24gKGMpIHtcbiAgdmFyIG9sZFBvcyA9IGMuZGF0YS5wb3M7XG4gIHZhciBuZXdQb3MgPSBjLmRhdGEubmV3UG9zO1xuICB2YXIgZHggPSBvbGRQb3MubGVmdCAtIG5ld1Bvcy5sZWZ0O1xuICB2YXIgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcbiAgaWYgKGR4IHx8IGR5KSB7XG4gICAgYy5kYXRhLm1vdmVkID0gdHJ1ZTtcbiAgICB2YXIgcyA9IGMuZWxtLnN0eWxlO1xuICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBcInRyYW5zbGF0ZShcIiArIGR4ICsgXCJweCxcIiArIGR5ICsgXCJweClcIjtcbiAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XG4gIH1cbn1cblxudmFyIHBsYXRmb3JtQ29tcG9uZW50cyA9IHtcbiAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcbiAgVHJhbnNpdGlvbkdyb3VwOiBUcmFuc2l0aW9uR3JvdXBcbn07XG5cbi8qICAqL1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHNwZWNpZmljIHV0aWxzXG5WdWUuY29uZmlnLm11c3RVc2VQcm9wID0gbXVzdFVzZVByb3A7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkQXR0ciA9IGlzUmVzZXJ2ZWRBdHRyO1xuVnVlLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2UgPSBnZXRUYWdOYW1lc3BhY2U7XG5WdWUuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQgPSBpc1Vua25vd25FbGVtZW50O1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHJ1bnRpbWUgZGlyZWN0aXZlcyAmIGNvbXBvbmVudHNcbmV4dGVuZChWdWUub3B0aW9ucy5kaXJlY3RpdmVzLCBwbGF0Zm9ybURpcmVjdGl2ZXMpO1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIHBsYXRmb3JtQ29tcG9uZW50cyk7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cblZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fID0gaW5Ccm93c2VyID8gcGF0Y2ggOiBub29wO1xuXG4vLyBwdWJsaWMgbW91bnQgbWV0aG9kXG5WdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgaW5Ccm93c2VyID8gcXVlcnkoZWwpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8vIGRldnRvb2xzIGdsb2JhbCBob29rXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGluQnJvd3Nlcikge1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG4gICAgICBpZiAoZGV2dG9vbHMpIHtcbiAgICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCdcbiAgICAgICkge1xuICAgICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgICAnRG93bmxvYWQgdGhlIFZ1ZSBEZXZ0b29scyBleHRlbnNpb24gZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6XFxuJyArXG4gICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtZGV2dG9vbHMnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICBjb25maWcucHJvZHVjdGlvblRpcCAhPT0gZmFsc2UgJiZcbiAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgIFwiWW91IGFyZSBydW5uaW5nIFZ1ZSBpbiBkZXZlbG9wbWVudCBtb2RlLlxcblwiICtcbiAgICAgICAgXCJNYWtlIHN1cmUgdG8gdHVybiBvbiBwcm9kdWN0aW9uIG1vZGUgd2hlbiBkZXBsb3lpbmcgZm9yIHByb2R1Y3Rpb24uXFxuXCIgK1xuICAgICAgICBcIlNlZSBtb3JlIHRpcHMgYXQgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZGVwbG95bWVudC5odG1sXCJcbiAgICAgICk7XG4gICAgfVxuICB9LCAwKTtcbn1cblxuLyogICovXG5cbmV4cG9ydCBkZWZhdWx0IFZ1ZTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9JbmRleFBhZ2UudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCJmMTUyNGNlNlwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vSW5kZXhQYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vSW5kZXhQYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Mb2dpblBhZ2UudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCJiYWQ5YmU4YVwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTG9naW5QYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTG9naW5QYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9DcmVhdGVUcmFuc2xhdGlvblBhZ2UudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCIzZDQ4YWQwZFwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ3JlYXRlVHJhbnNsYXRpb25QYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ3JlYXRlVHJhbnNsYXRpb25QYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9SZWFkVHJhbnNsYXRpb25QYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiMWVkNDI5OTlcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1JlYWRUcmFuc2xhdGlvblBhZ2UudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9SZWFkVHJhbnNsYXRpb25QYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9VcGRhdGVUcmFuc2xhdGlvblBhZ2UudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCIwYzA2OWI5YVwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vVXBkYXRlVHJhbnNsYXRpb25QYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vVXBkYXRlVHJhbnNsYXRpb25QYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9VcGRhdGVOYXRpdmVQYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiNDBhY2I2MDJcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1VwZGF0ZU5hdGl2ZVBhZ2UudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9VcGRhdGVOYXRpdmVQYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHBIZWFkZXIudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCJkMzJjYmViZVwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwSGVhZGVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwSGVhZGVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9NYWluTGF5b3V0LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiMDAwNjE3ZTRcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL01haW5MYXlvdXQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9NYWluTGF5b3V0LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8qKlxuICogdnVleCB2My4xLjFcbiAqIChjKSAyMDE5IEV2YW4gWW91XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuZnVuY3Rpb24gYXBwbHlNaXhpbiAoVnVlKSB7XG4gIHZhciB2ZXJzaW9uID0gTnVtYmVyKFZ1ZS52ZXJzaW9uLnNwbGl0KCcuJylbMF0pO1xuXG4gIGlmICh2ZXJzaW9uID49IDIpIHtcbiAgICBWdWUubWl4aW4oeyBiZWZvcmVDcmVhdGU6IHZ1ZXhJbml0IH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIG92ZXJyaWRlIGluaXQgYW5kIGluamVjdCB2dWV4IGluaXQgcHJvY2VkdXJlXG4gICAgLy8gZm9yIDEueCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbiAgICB2YXIgX2luaXQgPSBWdWUucHJvdG90eXBlLl9pbml0O1xuICAgIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgICAgIG9wdGlvbnMuaW5pdCA9IG9wdGlvbnMuaW5pdFxuICAgICAgICA/IFt2dWV4SW5pdF0uY29uY2F0KG9wdGlvbnMuaW5pdClcbiAgICAgICAgOiB2dWV4SW5pdDtcbiAgICAgIF9pbml0LmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWdWV4IGluaXQgaG9vaywgaW5qZWN0ZWQgaW50byBlYWNoIGluc3RhbmNlcyBpbml0IGhvb2tzIGxpc3QuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHZ1ZXhJbml0ICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHRoaXMuJG9wdGlvbnM7XG4gICAgLy8gc3RvcmUgaW5qZWN0aW9uXG4gICAgaWYgKG9wdGlvbnMuc3RvcmUpIHtcbiAgICAgIHRoaXMuJHN0b3JlID0gdHlwZW9mIG9wdGlvbnMuc3RvcmUgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBvcHRpb25zLnN0b3JlKClcbiAgICAgICAgOiBvcHRpb25zLnN0b3JlO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5wYXJlbnQgJiYgb3B0aW9ucy5wYXJlbnQuJHN0b3JlKSB7XG4gICAgICB0aGlzLiRzdG9yZSA9IG9wdGlvbnMucGFyZW50LiRzdG9yZTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHRhcmdldCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gID8gd2luZG93XG4gIDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IGdsb2JhbFxuICAgIDoge307XG52YXIgZGV2dG9vbEhvb2sgPSB0YXJnZXQuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuZnVuY3Rpb24gZGV2dG9vbFBsdWdpbiAoc3RvcmUpIHtcbiAgaWYgKCFkZXZ0b29sSG9vaykgeyByZXR1cm4gfVxuXG4gIHN0b3JlLl9kZXZ0b29sSG9vayA9IGRldnRvb2xIb29rO1xuXG4gIGRldnRvb2xIb29rLmVtaXQoJ3Z1ZXg6aW5pdCcsIHN0b3JlKTtcblxuICBkZXZ0b29sSG9vay5vbigndnVleDp0cmF2ZWwtdG8tc3RhdGUnLCBmdW5jdGlvbiAodGFyZ2V0U3RhdGUpIHtcbiAgICBzdG9yZS5yZXBsYWNlU3RhdGUodGFyZ2V0U3RhdGUpO1xuICB9KTtcblxuICBzdG9yZS5zdWJzY3JpYmUoZnVuY3Rpb24gKG11dGF0aW9uLCBzdGF0ZSkge1xuICAgIGRldnRvb2xIb29rLmVtaXQoJ3Z1ZXg6bXV0YXRpb24nLCBtdXRhdGlvbiwgc3RhdGUpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZpcnN0IGl0ZW0gdGhhdCBwYXNzIHRoZSB0ZXN0XG4gKiBieSBzZWNvbmQgYXJndW1lbnQgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBsaXN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmXG4gKiBAcmV0dXJuIHsqfVxuICovXG5cbi8qKlxuICogZm9yRWFjaCBmb3Igb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2hWYWx1ZSAob2JqLCBmbikge1xuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZm4ob2JqW2tleV0sIGtleSk7IH0pO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAmJiB0eXBlb2YgdmFsLnRoZW4gPT09ICdmdW5jdGlvbidcbn1cblxuZnVuY3Rpb24gYXNzZXJ0IChjb25kaXRpb24sIG1zZykge1xuICBpZiAoIWNvbmRpdGlvbikgeyB0aHJvdyBuZXcgRXJyb3IoKFwiW3Z1ZXhdIFwiICsgbXNnKSkgfVxufVxuXG5mdW5jdGlvbiBwYXJ0aWFsIChmbiwgYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZuKGFyZylcbiAgfVxufVxuXG4vLyBCYXNlIGRhdGEgc3RydWN0IGZvciBzdG9yZSdzIG1vZHVsZSwgcGFja2FnZSB3aXRoIHNvbWUgYXR0cmlidXRlIGFuZCBtZXRob2RcbnZhciBNb2R1bGUgPSBmdW5jdGlvbiBNb2R1bGUgKHJhd01vZHVsZSwgcnVudGltZSkge1xuICB0aGlzLnJ1bnRpbWUgPSBydW50aW1lO1xuICAvLyBTdG9yZSBzb21lIGNoaWxkcmVuIGl0ZW1cbiAgdGhpcy5fY2hpbGRyZW4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBTdG9yZSB0aGUgb3JpZ2luIG1vZHVsZSBvYmplY3Qgd2hpY2ggcGFzc2VkIGJ5IHByb2dyYW1tZXJcbiAgdGhpcy5fcmF3TW9kdWxlID0gcmF3TW9kdWxlO1xuICB2YXIgcmF3U3RhdGUgPSByYXdNb2R1bGUuc3RhdGU7XG5cbiAgLy8gU3RvcmUgdGhlIG9yaWdpbiBtb2R1bGUncyBzdGF0ZVxuICB0aGlzLnN0YXRlID0gKHR5cGVvZiByYXdTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IHJhd1N0YXRlKCkgOiByYXdTdGF0ZSkgfHwge307XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBuYW1lc3BhY2VkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5uYW1lc3BhY2VkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhdGhpcy5fcmF3TW9kdWxlLm5hbWVzcGFjZWRcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuYWRkQ2hpbGQgPSBmdW5jdGlvbiBhZGRDaGlsZCAoa2V5LCBtb2R1bGUpIHtcbiAgdGhpcy5fY2hpbGRyZW5ba2V5XSA9IG1vZHVsZTtcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiByZW1vdmVDaGlsZCAoa2V5KSB7XG4gIGRlbGV0ZSB0aGlzLl9jaGlsZHJlbltrZXldO1xufTtcblxuTW9kdWxlLnByb3RvdHlwZS5nZXRDaGlsZCA9IGZ1bmN0aW9uIGdldENoaWxkIChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuW2tleV1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChyYXdNb2R1bGUpIHtcbiAgdGhpcy5fcmF3TW9kdWxlLm5hbWVzcGFjZWQgPSByYXdNb2R1bGUubmFtZXNwYWNlZDtcbiAgaWYgKHJhd01vZHVsZS5hY3Rpb25zKSB7XG4gICAgdGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMgPSByYXdNb2R1bGUuYWN0aW9ucztcbiAgfVxuICBpZiAocmF3TW9kdWxlLm11dGF0aW9ucykge1xuICAgIHRoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMgPSByYXdNb2R1bGUubXV0YXRpb25zO1xuICB9XG4gIGlmIChyYXdNb2R1bGUuZ2V0dGVycykge1xuICAgIHRoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzID0gcmF3TW9kdWxlLmdldHRlcnM7XG4gIH1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaENoaWxkID0gZnVuY3Rpb24gZm9yRWFjaENoaWxkIChmbikge1xuICBmb3JFYWNoVmFsdWUodGhpcy5fY2hpbGRyZW4sIGZuKTtcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaEdldHRlciA9IGZ1bmN0aW9uIGZvckVhY2hHZXR0ZXIgKGZuKSB7XG4gIGlmICh0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycykge1xuICAgIGZvckVhY2hWYWx1ZSh0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycywgZm4pO1xuICB9XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hBY3Rpb24gPSBmdW5jdGlvbiBmb3JFYWNoQWN0aW9uIChmbikge1xuICBpZiAodGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMpIHtcbiAgICBmb3JFYWNoVmFsdWUodGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMsIGZuKTtcbiAgfVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoTXV0YXRpb24gPSBmdW5jdGlvbiBmb3JFYWNoTXV0YXRpb24gKGZuKSB7XG4gIGlmICh0aGlzLl9yYXdNb2R1bGUubXV0YXRpb25zKSB7XG4gICAgZm9yRWFjaFZhbHVlKHRoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMsIGZuKTtcbiAgfVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIE1vZHVsZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgTW9kdWxlQ29sbGVjdGlvbiA9IGZ1bmN0aW9uIE1vZHVsZUNvbGxlY3Rpb24gKHJhd1Jvb3RNb2R1bGUpIHtcbiAgLy8gcmVnaXN0ZXIgcm9vdCBtb2R1bGUgKFZ1ZXguU3RvcmUgb3B0aW9ucylcbiAgdGhpcy5yZWdpc3RlcihbXSwgcmF3Um9vdE1vZHVsZSwgZmFsc2UpO1xufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChwYXRoKSB7XG4gIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAobW9kdWxlLCBrZXkpIHtcbiAgICByZXR1cm4gbW9kdWxlLmdldENoaWxkKGtleSlcbiAgfSwgdGhpcy5yb290KVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0TmFtZXNwYWNlID0gZnVuY3Rpb24gZ2V0TmFtZXNwYWNlIChwYXRoKSB7XG4gIHZhciBtb2R1bGUgPSB0aGlzLnJvb3Q7XG4gIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBrZXkpIHtcbiAgICBtb2R1bGUgPSBtb2R1bGUuZ2V0Q2hpbGQoa2V5KTtcbiAgICByZXR1cm4gbmFtZXNwYWNlICsgKG1vZHVsZS5uYW1lc3BhY2VkID8ga2V5ICsgJy8nIDogJycpXG4gIH0sICcnKVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlJDEgKHJhd1Jvb3RNb2R1bGUpIHtcbiAgdXBkYXRlKFtdLCB0aGlzLnJvb3QsIHJhd1Jvb3RNb2R1bGUpO1xufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3RlciAocGF0aCwgcmF3TW9kdWxlLCBydW50aW1lKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgaWYgKCBydW50aW1lID09PSB2b2lkIDAgKSBydW50aW1lID0gdHJ1ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydFJhd01vZHVsZShwYXRoLCByYXdNb2R1bGUpO1xuICB9XG5cbiAgdmFyIG5ld01vZHVsZSA9IG5ldyBNb2R1bGUocmF3TW9kdWxlLCBydW50aW1lKTtcbiAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgdGhpcy5yb290ID0gbmV3TW9kdWxlO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLmdldChwYXRoLnNsaWNlKDAsIC0xKSk7XG4gICAgcGFyZW50LmFkZENoaWxkKHBhdGhbcGF0aC5sZW5ndGggLSAxXSwgbmV3TW9kdWxlKTtcbiAgfVxuXG4gIC8vIHJlZ2lzdGVyIG5lc3RlZCBtb2R1bGVzXG4gIGlmIChyYXdNb2R1bGUubW9kdWxlcykge1xuICAgIGZvckVhY2hWYWx1ZShyYXdNb2R1bGUubW9kdWxlcywgZnVuY3Rpb24gKHJhd0NoaWxkTW9kdWxlLCBrZXkpIHtcbiAgICAgIHRoaXMkMS5yZWdpc3RlcihwYXRoLmNvbmNhdChrZXkpLCByYXdDaGlsZE1vZHVsZSwgcnVudGltZSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLnVucmVnaXN0ZXIgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyIChwYXRoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLmdldChwYXRoLnNsaWNlKDAsIC0xKSk7XG4gIHZhciBrZXkgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gIGlmICghcGFyZW50LmdldENoaWxkKGtleSkucnVudGltZSkgeyByZXR1cm4gfVxuXG4gIHBhcmVudC5yZW1vdmVDaGlsZChrZXkpO1xufTtcblxuZnVuY3Rpb24gdXBkYXRlIChwYXRoLCB0YXJnZXRNb2R1bGUsIG5ld01vZHVsZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydFJhd01vZHVsZShwYXRoLCBuZXdNb2R1bGUpO1xuICB9XG5cbiAgLy8gdXBkYXRlIHRhcmdldCBtb2R1bGVcbiAgdGFyZ2V0TW9kdWxlLnVwZGF0ZShuZXdNb2R1bGUpO1xuXG4gIC8vIHVwZGF0ZSBuZXN0ZWQgbW9kdWxlc1xuICBpZiAobmV3TW9kdWxlLm1vZHVsZXMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gbmV3TW9kdWxlLm1vZHVsZXMpIHtcbiAgICAgIGlmICghdGFyZ2V0TW9kdWxlLmdldENoaWxkKGtleSkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBcIlt2dWV4XSB0cnlpbmcgdG8gYWRkIGEgbmV3IG1vZHVsZSAnXCIgKyBrZXkgKyBcIicgb24gaG90IHJlbG9hZGluZywgXCIgK1xuICAgICAgICAgICAgJ21hbnVhbCByZWxvYWQgaXMgbmVlZGVkJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB1cGRhdGUoXG4gICAgICAgIHBhdGguY29uY2F0KGtleSksXG4gICAgICAgIHRhcmdldE1vZHVsZS5nZXRDaGlsZChrZXkpLFxuICAgICAgICBuZXdNb2R1bGUubW9kdWxlc1trZXldXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgZnVuY3Rpb25Bc3NlcnQgPSB7XG4gIGFzc2VydDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7IH0sXG4gIGV4cGVjdGVkOiAnZnVuY3Rpb24nXG59O1xuXG52YXIgb2JqZWN0QXNzZXJ0ID0ge1xuICBhc3NlcnQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLmhhbmRsZXIgPT09ICdmdW5jdGlvbicpOyB9LFxuICBleHBlY3RlZDogJ2Z1bmN0aW9uIG9yIG9iamVjdCB3aXRoIFwiaGFuZGxlclwiIGZ1bmN0aW9uJ1xufTtcblxudmFyIGFzc2VydFR5cGVzID0ge1xuICBnZXR0ZXJzOiBmdW5jdGlvbkFzc2VydCxcbiAgbXV0YXRpb25zOiBmdW5jdGlvbkFzc2VydCxcbiAgYWN0aW9uczogb2JqZWN0QXNzZXJ0XG59O1xuXG5mdW5jdGlvbiBhc3NlcnRSYXdNb2R1bGUgKHBhdGgsIHJhd01vZHVsZSkge1xuICBPYmplY3Qua2V5cyhhc3NlcnRUeXBlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFyYXdNb2R1bGVba2V5XSkgeyByZXR1cm4gfVxuXG4gICAgdmFyIGFzc2VydE9wdGlvbnMgPSBhc3NlcnRUeXBlc1trZXldO1xuXG4gICAgZm9yRWFjaFZhbHVlKHJhd01vZHVsZVtrZXldLCBmdW5jdGlvbiAodmFsdWUsIHR5cGUpIHtcbiAgICAgIGFzc2VydChcbiAgICAgICAgYXNzZXJ0T3B0aW9ucy5hc3NlcnQodmFsdWUpLFxuICAgICAgICBtYWtlQXNzZXJ0aW9uTWVzc2FnZShwYXRoLCBrZXksIHR5cGUsIHZhbHVlLCBhc3NlcnRPcHRpb25zLmV4cGVjdGVkKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VBc3NlcnRpb25NZXNzYWdlIChwYXRoLCBrZXksIHR5cGUsIHZhbHVlLCBleHBlY3RlZCkge1xuICB2YXIgYnVmID0ga2V5ICsgXCIgc2hvdWxkIGJlIFwiICsgZXhwZWN0ZWQgKyBcIiBidXQgXFxcIlwiICsga2V5ICsgXCIuXCIgKyB0eXBlICsgXCJcXFwiXCI7XG4gIGlmIChwYXRoLmxlbmd0aCA+IDApIHtcbiAgICBidWYgKz0gXCIgaW4gbW9kdWxlIFxcXCJcIiArIChwYXRoLmpvaW4oJy4nKSkgKyBcIlxcXCJcIjtcbiAgfVxuICBidWYgKz0gXCIgaXMgXCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsdWUpKSArIFwiLlwiO1xuICByZXR1cm4gYnVmXG59XG5cbnZhciBWdWU7IC8vIGJpbmQgb24gaW5zdGFsbFxuXG52YXIgU3RvcmUgPSBmdW5jdGlvbiBTdG9yZSAob3B0aW9ucykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcbiAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgLy8gQXV0byBpbnN0YWxsIGlmIGl0IGlzIG5vdCBkb25lIHlldCBhbmQgYHdpbmRvd2AgaGFzIGBWdWVgLlxuICAvLyBUbyBhbGxvdyB1c2VycyB0byBhdm9pZCBhdXRvLWluc3RhbGxhdGlvbiBpbiBzb21lIGNhc2VzLFxuICAvLyB0aGlzIGNvZGUgc2hvdWxkIGJlIHBsYWNlZCBoZXJlLiBTZWUgIzczMVxuICBpZiAoIVZ1ZSAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuVnVlKSB7XG4gICAgaW5zdGFsbCh3aW5kb3cuVnVlKTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KFZ1ZSwgXCJtdXN0IGNhbGwgVnVlLnVzZShWdWV4KSBiZWZvcmUgY3JlYXRpbmcgYSBzdG9yZSBpbnN0YW5jZS5cIik7XG4gICAgYXNzZXJ0KHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJywgXCJ2dWV4IHJlcXVpcmVzIGEgUHJvbWlzZSBwb2x5ZmlsbCBpbiB0aGlzIGJyb3dzZXIuXCIpO1xuICAgIGFzc2VydCh0aGlzIGluc3RhbmNlb2YgU3RvcmUsIFwic3RvcmUgbXVzdCBiZSBjYWxsZWQgd2l0aCB0aGUgbmV3IG9wZXJhdG9yLlwiKTtcbiAgfVxuXG4gIHZhciBwbHVnaW5zID0gb3B0aW9ucy5wbHVnaW5zOyBpZiAoIHBsdWdpbnMgPT09IHZvaWQgMCApIHBsdWdpbnMgPSBbXTtcbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0OyBpZiAoIHN0cmljdCA9PT0gdm9pZCAwICkgc3RyaWN0ID0gZmFsc2U7XG5cbiAgLy8gc3RvcmUgaW50ZXJuYWwgc3RhdGVcbiAgdGhpcy5fY29tbWl0dGluZyA9IGZhbHNlO1xuICB0aGlzLl9hY3Rpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnMgPSBbXTtcbiAgdGhpcy5fbXV0YXRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fd3JhcHBlZEdldHRlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9tb2R1bGVzID0gbmV3IE1vZHVsZUNvbGxlY3Rpb24ob3B0aW9ucyk7XG4gIHRoaXMuX21vZHVsZXNOYW1lc3BhY2VNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9zdWJzY3JpYmVycyA9IFtdO1xuICB0aGlzLl93YXRjaGVyVk0gPSBuZXcgVnVlKCk7XG5cbiAgLy8gYmluZCBjb21taXQgYW5kIGRpc3BhdGNoIHRvIHNlbGZcbiAgdmFyIHN0b3JlID0gdGhpcztcbiAgdmFyIHJlZiA9IHRoaXM7XG4gIHZhciBkaXNwYXRjaCA9IHJlZi5kaXNwYXRjaDtcbiAgdmFyIGNvbW1pdCA9IHJlZi5jb21taXQ7XG4gIHRoaXMuZGlzcGF0Y2ggPSBmdW5jdGlvbiBib3VuZERpc3BhdGNoICh0eXBlLCBwYXlsb2FkKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoLmNhbGwoc3RvcmUsIHR5cGUsIHBheWxvYWQpXG4gIH07XG4gIHRoaXMuY29tbWl0ID0gZnVuY3Rpb24gYm91bmRDb21taXQgKHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gY29tbWl0LmNhbGwoc3RvcmUsIHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpXG4gIH07XG5cbiAgLy8gc3RyaWN0IG1vZGVcbiAgdGhpcy5zdHJpY3QgPSBzdHJpY3Q7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fbW9kdWxlcy5yb290LnN0YXRlO1xuXG4gIC8vIGluaXQgcm9vdCBtb2R1bGUuXG4gIC8vIHRoaXMgYWxzbyByZWN1cnNpdmVseSByZWdpc3RlcnMgYWxsIHN1Yi1tb2R1bGVzXG4gIC8vIGFuZCBjb2xsZWN0cyBhbGwgbW9kdWxlIGdldHRlcnMgaW5zaWRlIHRoaXMuX3dyYXBwZWRHZXR0ZXJzXG4gIGluc3RhbGxNb2R1bGUodGhpcywgc3RhdGUsIFtdLCB0aGlzLl9tb2R1bGVzLnJvb3QpO1xuXG4gIC8vIGluaXRpYWxpemUgdGhlIHN0b3JlIHZtLCB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgdGhlIHJlYWN0aXZpdHlcbiAgLy8gKGFsc28gcmVnaXN0ZXJzIF93cmFwcGVkR2V0dGVycyBhcyBjb21wdXRlZCBwcm9wZXJ0aWVzKVxuICByZXNldFN0b3JlVk0odGhpcywgc3RhdGUpO1xuXG4gIC8vIGFwcGx5IHBsdWdpbnNcbiAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHsgcmV0dXJuIHBsdWdpbih0aGlzJDEpOyB9KTtcblxuICB2YXIgdXNlRGV2dG9vbHMgPSBvcHRpb25zLmRldnRvb2xzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmRldnRvb2xzIDogVnVlLmNvbmZpZy5kZXZ0b29scztcbiAgaWYgKHVzZURldnRvb2xzKSB7XG4gICAgZGV2dG9vbFBsdWdpbih0aGlzKTtcbiAgfVxufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQxID0geyBzdGF0ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5zdGF0ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl92bS5fZGF0YS4kJHN0YXRlXG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5zdGF0ZS5zZXQgPSBmdW5jdGlvbiAodikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChmYWxzZSwgXCJ1c2Ugc3RvcmUucmVwbGFjZVN0YXRlKCkgdG8gZXhwbGljaXQgcmVwbGFjZSBzdG9yZSBzdGF0ZS5cIik7XG4gIH1cbn07XG5cblN0b3JlLnByb3RvdHlwZS5jb21taXQgPSBmdW5jdGlvbiBjb21taXQgKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAvLyBjaGVjayBvYmplY3Qtc3R5bGUgY29tbWl0XG4gIHZhciByZWYgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpO1xuICAgIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gICAgdmFyIHBheWxvYWQgPSByZWYucGF5bG9hZDtcbiAgICB2YXIgb3B0aW9ucyA9IHJlZi5vcHRpb25zO1xuXG4gIHZhciBtdXRhdGlvbiA9IHsgdHlwZTogdHlwZSwgcGF5bG9hZDogcGF5bG9hZCB9O1xuICB2YXIgZW50cnkgPSB0aGlzLl9tdXRhdGlvbnNbdHlwZV07XG4gIGlmICghZW50cnkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBtdXRhdGlvbiB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cbiAgdGhpcy5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgZW50cnkuZm9yRWFjaChmdW5jdGlvbiBjb21taXRJdGVyYXRvciAoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcihwYXlsb2FkKTtcbiAgICB9KTtcbiAgfSk7XG4gIHRoaXMuX3N1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViKG11dGF0aW9uLCB0aGlzJDEuc3RhdGUpOyB9KTtcblxuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5zaWxlbnRcbiAgKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgXCJbdnVleF0gbXV0YXRpb24gdHlwZTogXCIgKyB0eXBlICsgXCIuIFNpbGVudCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZC4gXCIgK1xuICAgICAgJ1VzZSB0aGUgZmlsdGVyIGZ1bmN0aW9uYWxpdHkgaW4gdGhlIHZ1ZS1kZXZ0b29scydcbiAgICApO1xuICB9XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCAoX3R5cGUsIF9wYXlsb2FkKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgLy8gY2hlY2sgb2JqZWN0LXN0eWxlIGRpc3BhdGNoXG4gIHZhciByZWYgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCk7XG4gICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICB2YXIgcGF5bG9hZCA9IHJlZi5wYXlsb2FkO1xuXG4gIHZhciBhY3Rpb24gPSB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IHBheWxvYWQgfTtcbiAgdmFyIGVudHJ5ID0gdGhpcy5fYWN0aW9uc1t0eXBlXTtcbiAgaWYgKCFlbnRyeSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGFjdGlvbiB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICB0cnkge1xuICAgIHRoaXMuX2FjdGlvblN1YnNjcmliZXJzXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5iZWZvcmU7IH0pXG4gICAgICAuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIuYmVmb3JlKGFjdGlvbiwgdGhpcyQxLnN0YXRlKTsgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKFwiW3Z1ZXhdIGVycm9yIGluIGJlZm9yZSBhY3Rpb24gc3Vic2NyaWJlcnM6IFwiKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHJlc3VsdCA9IGVudHJ5Lmxlbmd0aCA+IDFcbiAgICA/IFByb21pc2UuYWxsKGVudHJ5Lm1hcChmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gaGFuZGxlcihwYXlsb2FkKTsgfSkpXG4gICAgOiBlbnRyeVswXShwYXlsb2FkKTtcblxuICByZXR1cm4gcmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgIHRyeSB7XG4gICAgICB0aGlzJDEuX2FjdGlvblN1YnNjcmliZXJzXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmFmdGVyOyB9KVxuICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIuYWZ0ZXIoYWN0aW9uLCB0aGlzJDEuc3RhdGUpOyB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJbdnVleF0gZXJyb3IgaW4gYWZ0ZXIgYWN0aW9uIHN1YnNjcmliZXJzOiBcIik7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfSlcbn07XG5cblN0b3JlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUgKGZuKSB7XG4gIHJldHVybiBnZW5lcmljU3Vic2NyaWJlKGZuLCB0aGlzLl9zdWJzY3JpYmVycylcbn07XG5cblN0b3JlLnByb3RvdHlwZS5zdWJzY3JpYmVBY3Rpb24gPSBmdW5jdGlvbiBzdWJzY3JpYmVBY3Rpb24gKGZuKSB7XG4gIHZhciBzdWJzID0gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nID8geyBiZWZvcmU6IGZuIH0gOiBmbjtcbiAgcmV0dXJuIGdlbmVyaWNTdWJzY3JpYmUoc3VicywgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnMpXG59O1xuXG5TdG9yZS5wcm90b3R5cGUud2F0Y2ggPSBmdW5jdGlvbiB3YXRjaCAoZ2V0dGVyLCBjYiwgb3B0aW9ucykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBnZXR0ZXIgPT09ICdmdW5jdGlvbicsIFwic3RvcmUud2F0Y2ggb25seSBhY2NlcHRzIGEgZnVuY3Rpb24uXCIpO1xuICB9XG4gIHJldHVybiB0aGlzLl93YXRjaGVyVk0uJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldHRlcih0aGlzJDEuc3RhdGUsIHRoaXMkMS5nZXR0ZXJzKTsgfSwgY2IsIG9wdGlvbnMpXG59O1xuXG5TdG9yZS5wcm90b3R5cGUucmVwbGFjZVN0YXRlID0gZnVuY3Rpb24gcmVwbGFjZVN0YXRlIChzdGF0ZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIHRoaXMkMS5fdm0uX2RhdGEuJCRzdGF0ZSA9IHN0YXRlO1xuICB9KTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5yZWdpc3Rlck1vZHVsZSA9IGZ1bmN0aW9uIHJlZ2lzdGVyTW9kdWxlIChwYXRoLCByYXdNb2R1bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7IHBhdGggPSBbcGF0aF07IH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChBcnJheS5pc0FycmF5KHBhdGgpLCBcIm1vZHVsZSBwYXRoIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gQXJyYXkuXCIpO1xuICAgIGFzc2VydChwYXRoLmxlbmd0aCA+IDAsICdjYW5ub3QgcmVnaXN0ZXIgdGhlIHJvb3QgbW9kdWxlIGJ5IHVzaW5nIHJlZ2lzdGVyTW9kdWxlLicpO1xuICB9XG5cbiAgdGhpcy5fbW9kdWxlcy5yZWdpc3RlcihwYXRoLCByYXdNb2R1bGUpO1xuICBpbnN0YWxsTW9kdWxlKHRoaXMsIHRoaXMuc3RhdGUsIHBhdGgsIHRoaXMuX21vZHVsZXMuZ2V0KHBhdGgpLCBvcHRpb25zLnByZXNlcnZlU3RhdGUpO1xuICAvLyByZXNldCBzdG9yZSB0byB1cGRhdGUgZ2V0dGVycy4uLlxuICByZXNldFN0b3JlVk0odGhpcywgdGhpcy5zdGF0ZSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUudW5yZWdpc3Rlck1vZHVsZSA9IGZ1bmN0aW9uIHVucmVnaXN0ZXJNb2R1bGUgKHBhdGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7IHBhdGggPSBbcGF0aF07IH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChBcnJheS5pc0FycmF5KHBhdGgpLCBcIm1vZHVsZSBwYXRoIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gQXJyYXkuXCIpO1xuICB9XG5cbiAgdGhpcy5fbW9kdWxlcy51bnJlZ2lzdGVyKHBhdGgpO1xuICB0aGlzLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50U3RhdGUgPSBnZXROZXN0ZWRTdGF0ZSh0aGlzJDEuc3RhdGUsIHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICBWdWUuZGVsZXRlKHBhcmVudFN0YXRlLCBwYXRoW3BhdGgubGVuZ3RoIC0gMV0pO1xuICB9KTtcbiAgcmVzZXRTdG9yZSh0aGlzKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5ob3RVcGRhdGUgPSBmdW5jdGlvbiBob3RVcGRhdGUgKG5ld09wdGlvbnMpIHtcbiAgdGhpcy5fbW9kdWxlcy51cGRhdGUobmV3T3B0aW9ucyk7XG4gIHJlc2V0U3RvcmUodGhpcywgdHJ1ZSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuX3dpdGhDb21taXQgPSBmdW5jdGlvbiBfd2l0aENvbW1pdCAoZm4pIHtcbiAgdmFyIGNvbW1pdHRpbmcgPSB0aGlzLl9jb21taXR0aW5nO1xuICB0aGlzLl9jb21taXR0aW5nID0gdHJ1ZTtcbiAgZm4oKTtcbiAgdGhpcy5fY29tbWl0dGluZyA9IGNvbW1pdHRpbmc7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggU3RvcmUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkMSApO1xuXG5mdW5jdGlvbiBnZW5lcmljU3Vic2NyaWJlIChmbiwgc3Vicykge1xuICBpZiAoc3Vicy5pbmRleE9mKGZuKSA8IDApIHtcbiAgICBzdWJzLnB1c2goZm4pO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGkgPSBzdWJzLmluZGV4T2YoZm4pO1xuICAgIGlmIChpID4gLTEpIHtcbiAgICAgIHN1YnMuc3BsaWNlKGksIDEpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXNldFN0b3JlIChzdG9yZSwgaG90KSB7XG4gIHN0b3JlLl9hY3Rpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgc3RvcmUuX211dGF0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHN0b3JlLl93cmFwcGVkR2V0dGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHN0b3JlLl9tb2R1bGVzTmFtZXNwYWNlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHN0YXRlID0gc3RvcmUuc3RhdGU7XG4gIC8vIGluaXQgYWxsIG1vZHVsZXNcbiAgaW5zdGFsbE1vZHVsZShzdG9yZSwgc3RhdGUsIFtdLCBzdG9yZS5fbW9kdWxlcy5yb290LCB0cnVlKTtcbiAgLy8gcmVzZXQgdm1cbiAgcmVzZXRTdG9yZVZNKHN0b3JlLCBzdGF0ZSwgaG90KTtcbn1cblxuZnVuY3Rpb24gcmVzZXRTdG9yZVZNIChzdG9yZSwgc3RhdGUsIGhvdCkge1xuICB2YXIgb2xkVm0gPSBzdG9yZS5fdm07XG5cbiAgLy8gYmluZCBzdG9yZSBwdWJsaWMgZ2V0dGVyc1xuICBzdG9yZS5nZXR0ZXJzID0ge307XG4gIHZhciB3cmFwcGVkR2V0dGVycyA9IHN0b3JlLl93cmFwcGVkR2V0dGVycztcbiAgdmFyIGNvbXB1dGVkID0ge307XG4gIGZvckVhY2hWYWx1ZSh3cmFwcGVkR2V0dGVycywgZnVuY3Rpb24gKGZuLCBrZXkpIHtcbiAgICAvLyB1c2UgY29tcHV0ZWQgdG8gbGV2ZXJhZ2UgaXRzIGxhenktY2FjaGluZyBtZWNoYW5pc21cbiAgICAvLyBkaXJlY3QgaW5saW5lIGZ1bmN0aW9uIHVzZSB3aWxsIGxlYWQgdG8gY2xvc3VyZSBwcmVzZXJ2aW5nIG9sZFZtLlxuICAgIC8vIHVzaW5nIHBhcnRpYWwgdG8gcmV0dXJuIGZ1bmN0aW9uIHdpdGggb25seSBhcmd1bWVudHMgcHJlc2VydmVkIGluIGNsb3N1cmUgZW52aXJvbWVudC5cbiAgICBjb21wdXRlZFtrZXldID0gcGFydGlhbChmbiwgc3RvcmUpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdG9yZS5nZXR0ZXJzLCBrZXksIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RvcmUuX3ZtW2tleV07IH0sXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlIC8vIGZvciBsb2NhbCBnZXR0ZXJzXG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIHVzZSBhIFZ1ZSBpbnN0YW5jZSB0byBzdG9yZSB0aGUgc3RhdGUgdHJlZVxuICAvLyBzdXBwcmVzcyB3YXJuaW5ncyBqdXN0IGluIGNhc2UgdGhlIHVzZXIgaGFzIGFkZGVkXG4gIC8vIHNvbWUgZnVua3kgZ2xvYmFsIG1peGluc1xuICB2YXIgc2lsZW50ID0gVnVlLmNvbmZpZy5zaWxlbnQ7XG4gIFZ1ZS5jb25maWcuc2lsZW50ID0gdHJ1ZTtcbiAgc3RvcmUuX3ZtID0gbmV3IFZ1ZSh7XG4gICAgZGF0YToge1xuICAgICAgJCRzdGF0ZTogc3RhdGVcbiAgICB9LFxuICAgIGNvbXB1dGVkOiBjb21wdXRlZFxuICB9KTtcbiAgVnVlLmNvbmZpZy5zaWxlbnQgPSBzaWxlbnQ7XG5cbiAgLy8gZW5hYmxlIHN0cmljdCBtb2RlIGZvciBuZXcgdm1cbiAgaWYgKHN0b3JlLnN0cmljdCkge1xuICAgIGVuYWJsZVN0cmljdE1vZGUoc3RvcmUpO1xuICB9XG5cbiAgaWYgKG9sZFZtKSB7XG4gICAgaWYgKGhvdCkge1xuICAgICAgLy8gZGlzcGF0Y2ggY2hhbmdlcyBpbiBhbGwgc3Vic2NyaWJlZCB3YXRjaGVyc1xuICAgICAgLy8gdG8gZm9yY2UgZ2V0dGVyIHJlLWV2YWx1YXRpb24gZm9yIGhvdCByZWxvYWRpbmcuXG4gICAgICBzdG9yZS5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9sZFZtLl9kYXRhLiQkc3RhdGUgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuICAgIFZ1ZS5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJldHVybiBvbGRWbS4kZGVzdHJveSgpOyB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsTW9kdWxlIChzdG9yZSwgcm9vdFN0YXRlLCBwYXRoLCBtb2R1bGUsIGhvdCkge1xuICB2YXIgaXNSb290ID0gIXBhdGgubGVuZ3RoO1xuICB2YXIgbmFtZXNwYWNlID0gc3RvcmUuX21vZHVsZXMuZ2V0TmFtZXNwYWNlKHBhdGgpO1xuXG4gIC8vIHJlZ2lzdGVyIGluIG5hbWVzcGFjZSBtYXBcbiAgaWYgKG1vZHVsZS5uYW1lc3BhY2VkKSB7XG4gICAgc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSA9IG1vZHVsZTtcbiAgfVxuXG4gIC8vIHNldCBzdGF0ZVxuICBpZiAoIWlzUm9vdCAmJiAhaG90KSB7XG4gICAgdmFyIHBhcmVudFN0YXRlID0gZ2V0TmVzdGVkU3RhdGUocm9vdFN0YXRlLCBwYXRoLnNsaWNlKDAsIC0xKSk7XG4gICAgdmFyIG1vZHVsZU5hbWUgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gICAgc3RvcmUuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgICAgVnVlLnNldChwYXJlbnRTdGF0ZSwgbW9kdWxlTmFtZSwgbW9kdWxlLnN0YXRlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBsb2NhbCA9IG1vZHVsZS5jb250ZXh0ID0gbWFrZUxvY2FsQ29udGV4dChzdG9yZSwgbmFtZXNwYWNlLCBwYXRoKTtcblxuICBtb2R1bGUuZm9yRWFjaE11dGF0aW9uKGZ1bmN0aW9uIChtdXRhdGlvbiwga2V5KSB7XG4gICAgdmFyIG5hbWVzcGFjZWRUeXBlID0gbmFtZXNwYWNlICsga2V5O1xuICAgIHJlZ2lzdGVyTXV0YXRpb24oc3RvcmUsIG5hbWVzcGFjZWRUeXBlLCBtdXRhdGlvbiwgbG9jYWwpO1xuICB9KTtcblxuICBtb2R1bGUuZm9yRWFjaEFjdGlvbihmdW5jdGlvbiAoYWN0aW9uLCBrZXkpIHtcbiAgICB2YXIgdHlwZSA9IGFjdGlvbi5yb290ID8ga2V5IDogbmFtZXNwYWNlICsga2V5O1xuICAgIHZhciBoYW5kbGVyID0gYWN0aW9uLmhhbmRsZXIgfHwgYWN0aW9uO1xuICAgIHJlZ2lzdGVyQWN0aW9uKHN0b3JlLCB0eXBlLCBoYW5kbGVyLCBsb2NhbCk7XG4gIH0pO1xuXG4gIG1vZHVsZS5mb3JFYWNoR2V0dGVyKGZ1bmN0aW9uIChnZXR0ZXIsIGtleSkge1xuICAgIHZhciBuYW1lc3BhY2VkVHlwZSA9IG5hbWVzcGFjZSArIGtleTtcbiAgICByZWdpc3RlckdldHRlcihzdG9yZSwgbmFtZXNwYWNlZFR5cGUsIGdldHRlciwgbG9jYWwpO1xuICB9KTtcblxuICBtb2R1bGUuZm9yRWFjaENoaWxkKGZ1bmN0aW9uIChjaGlsZCwga2V5KSB7XG4gICAgaW5zdGFsbE1vZHVsZShzdG9yZSwgcm9vdFN0YXRlLCBwYXRoLmNvbmNhdChrZXkpLCBjaGlsZCwgaG90KTtcbiAgfSk7XG59XG5cbi8qKlxuICogbWFrZSBsb2NhbGl6ZWQgZGlzcGF0Y2gsIGNvbW1pdCwgZ2V0dGVycyBhbmQgc3RhdGVcbiAqIGlmIHRoZXJlIGlzIG5vIG5hbWVzcGFjZSwganVzdCB1c2Ugcm9vdCBvbmVzXG4gKi9cbmZ1bmN0aW9uIG1ha2VMb2NhbENvbnRleHQgKHN0b3JlLCBuYW1lc3BhY2UsIHBhdGgpIHtcbiAgdmFyIG5vTmFtZXNwYWNlID0gbmFtZXNwYWNlID09PSAnJztcblxuICB2YXIgbG9jYWwgPSB7XG4gICAgZGlzcGF0Y2g6IG5vTmFtZXNwYWNlID8gc3RvcmUuZGlzcGF0Y2ggOiBmdW5jdGlvbiAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgICAgdmFyIGFyZ3MgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpO1xuICAgICAgdmFyIHBheWxvYWQgPSBhcmdzLnBheWxvYWQ7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3Mub3B0aW9ucztcbiAgICAgIHZhciB0eXBlID0gYXJncy50eXBlO1xuXG4gICAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMucm9vdCkge1xuICAgICAgICB0eXBlID0gbmFtZXNwYWNlICsgdHlwZTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXN0b3JlLl9hY3Rpb25zW3R5cGVdKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBsb2NhbCBhY3Rpb24gdHlwZTogXCIgKyAoYXJncy50eXBlKSArIFwiLCBnbG9iYWwgdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoKHR5cGUsIHBheWxvYWQpXG4gICAgfSxcblxuICAgIGNvbW1pdDogbm9OYW1lc3BhY2UgPyBzdG9yZS5jb21taXQgOiBmdW5jdGlvbiAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgICAgdmFyIGFyZ3MgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpO1xuICAgICAgdmFyIHBheWxvYWQgPSBhcmdzLnBheWxvYWQ7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3Mub3B0aW9ucztcbiAgICAgIHZhciB0eXBlID0gYXJncy50eXBlO1xuXG4gICAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMucm9vdCkge1xuICAgICAgICB0eXBlID0gbmFtZXNwYWNlICsgdHlwZTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXN0b3JlLl9tdXRhdGlvbnNbdHlwZV0pIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGxvY2FsIG11dGF0aW9uIHR5cGU6IFwiICsgKGFyZ3MudHlwZSkgKyBcIiwgZ2xvYmFsIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0b3JlLmNvbW1pdCh0eXBlLCBwYXlsb2FkLCBvcHRpb25zKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gZ2V0dGVycyBhbmQgc3RhdGUgb2JqZWN0IG11c3QgYmUgZ290dGVuIGxhemlseVxuICAvLyBiZWNhdXNlIHRoZXkgd2lsbCBiZSBjaGFuZ2VkIGJ5IHZtIHVwZGF0ZVxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhsb2NhbCwge1xuICAgIGdldHRlcnM6IHtcbiAgICAgIGdldDogbm9OYW1lc3BhY2VcbiAgICAgICAgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5nZXR0ZXJzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWFrZUxvY2FsR2V0dGVycyhzdG9yZSwgbmFtZXNwYWNlKTsgfVxuICAgIH0sXG4gICAgc3RhdGU6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0TmVzdGVkU3RhdGUoc3RvcmUuc3RhdGUsIHBhdGgpOyB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbG9jYWxcbn1cblxuZnVuY3Rpb24gbWFrZUxvY2FsR2V0dGVycyAoc3RvcmUsIG5hbWVzcGFjZSkge1xuICB2YXIgZ2V0dGVyc1Byb3h5ID0ge307XG5cbiAgdmFyIHNwbGl0UG9zID0gbmFtZXNwYWNlLmxlbmd0aDtcbiAgT2JqZWN0LmtleXMoc3RvcmUuZ2V0dGVycykuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIC8vIHNraXAgaWYgdGhlIHRhcmdldCBnZXR0ZXIgaXMgbm90IG1hdGNoIHRoaXMgbmFtZXNwYWNlXG4gICAgaWYgKHR5cGUuc2xpY2UoMCwgc3BsaXRQb3MpICE9PSBuYW1lc3BhY2UpIHsgcmV0dXJuIH1cblxuICAgIC8vIGV4dHJhY3QgbG9jYWwgZ2V0dGVyIHR5cGVcbiAgICB2YXIgbG9jYWxUeXBlID0gdHlwZS5zbGljZShzcGxpdFBvcyk7XG5cbiAgICAvLyBBZGQgYSBwb3J0IHRvIHRoZSBnZXR0ZXJzIHByb3h5LlxuICAgIC8vIERlZmluZSBhcyBnZXR0ZXIgcHJvcGVydHkgYmVjYXVzZVxuICAgIC8vIHdlIGRvIG5vdCB3YW50IHRvIGV2YWx1YXRlIHRoZSBnZXR0ZXJzIGluIHRoaXMgdGltZS5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2V0dGVyc1Byb3h5LCBsb2NhbFR5cGUsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RvcmUuZ2V0dGVyc1t0eXBlXTsgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGdldHRlcnNQcm94eVxufVxuXG5mdW5jdGlvbiByZWdpc3Rlck11dGF0aW9uIChzdG9yZSwgdHlwZSwgaGFuZGxlciwgbG9jYWwpIHtcbiAgdmFyIGVudHJ5ID0gc3RvcmUuX211dGF0aW9uc1t0eXBlXSB8fCAoc3RvcmUuX211dGF0aW9uc1t0eXBlXSA9IFtdKTtcbiAgZW50cnkucHVzaChmdW5jdGlvbiB3cmFwcGVkTXV0YXRpb25IYW5kbGVyIChwYXlsb2FkKSB7XG4gICAgaGFuZGxlci5jYWxsKHN0b3JlLCBsb2NhbC5zdGF0ZSwgcGF5bG9hZCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZWdpc3RlckFjdGlvbiAoc3RvcmUsIHR5cGUsIGhhbmRsZXIsIGxvY2FsKSB7XG4gIHZhciBlbnRyeSA9IHN0b3JlLl9hY3Rpb25zW3R5cGVdIHx8IChzdG9yZS5fYWN0aW9uc1t0eXBlXSA9IFtdKTtcbiAgZW50cnkucHVzaChmdW5jdGlvbiB3cmFwcGVkQWN0aW9uSGFuZGxlciAocGF5bG9hZCwgY2IpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5jYWxsKHN0b3JlLCB7XG4gICAgICBkaXNwYXRjaDogbG9jYWwuZGlzcGF0Y2gsXG4gICAgICBjb21taXQ6IGxvY2FsLmNvbW1pdCxcbiAgICAgIGdldHRlcnM6IGxvY2FsLmdldHRlcnMsXG4gICAgICBzdGF0ZTogbG9jYWwuc3RhdGUsXG4gICAgICByb290R2V0dGVyczogc3RvcmUuZ2V0dGVycyxcbiAgICAgIHJvb3RTdGF0ZTogc3RvcmUuc3RhdGVcbiAgICB9LCBwYXlsb2FkLCBjYik7XG4gICAgaWYgKCFpc1Byb21pc2UocmVzKSkge1xuICAgICAgcmVzID0gUHJvbWlzZS5yZXNvbHZlKHJlcyk7XG4gICAgfVxuICAgIGlmIChzdG9yZS5fZGV2dG9vbEhvb2spIHtcbiAgICAgIHJldHVybiByZXMuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICBzdG9yZS5fZGV2dG9vbEhvb2suZW1pdCgndnVleDplcnJvcicsIGVycik7XG4gICAgICAgIHRocm93IGVyclxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyR2V0dGVyIChzdG9yZSwgdHlwZSwgcmF3R2V0dGVyLCBsb2NhbCkge1xuICBpZiAoc3RvcmUuX3dyYXBwZWRHZXR0ZXJzW3R5cGVdKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIGR1cGxpY2F0ZSBnZXR0ZXIga2V5OiBcIiArIHR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cbiAgc3RvcmUuX3dyYXBwZWRHZXR0ZXJzW3R5cGVdID0gZnVuY3Rpb24gd3JhcHBlZEdldHRlciAoc3RvcmUpIHtcbiAgICByZXR1cm4gcmF3R2V0dGVyKFxuICAgICAgbG9jYWwuc3RhdGUsIC8vIGxvY2FsIHN0YXRlXG4gICAgICBsb2NhbC5nZXR0ZXJzLCAvLyBsb2NhbCBnZXR0ZXJzXG4gICAgICBzdG9yZS5zdGF0ZSwgLy8gcm9vdCBzdGF0ZVxuICAgICAgc3RvcmUuZ2V0dGVycyAvLyByb290IGdldHRlcnNcbiAgICApXG4gIH07XG59XG5cbmZ1bmN0aW9uIGVuYWJsZVN0cmljdE1vZGUgKHN0b3JlKSB7XG4gIHN0b3JlLl92bS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGF0YS4kJHN0YXRlIH0sIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgYXNzZXJ0KHN0b3JlLl9jb21taXR0aW5nLCBcImRvIG5vdCBtdXRhdGUgdnVleCBzdG9yZSBzdGF0ZSBvdXRzaWRlIG11dGF0aW9uIGhhbmRsZXJzLlwiKTtcbiAgICB9XG4gIH0sIHsgZGVlcDogdHJ1ZSwgc3luYzogdHJ1ZSB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0TmVzdGVkU3RhdGUgKHN0YXRlLCBwYXRoKSB7XG4gIHJldHVybiBwYXRoLmxlbmd0aFxuICAgID8gcGF0aC5yZWR1Y2UoZnVuY3Rpb24gKHN0YXRlLCBrZXkpIHsgcmV0dXJuIHN0YXRlW2tleV07IH0sIHN0YXRlKVxuICAgIDogc3RhdGVcbn1cblxuZnVuY3Rpb24gdW5pZnlPYmplY3RTdHlsZSAodHlwZSwgcGF5bG9hZCwgb3B0aW9ucykge1xuICBpZiAoaXNPYmplY3QodHlwZSkgJiYgdHlwZS50eXBlKSB7XG4gICAgb3B0aW9ucyA9IHBheWxvYWQ7XG4gICAgcGF5bG9hZCA9IHR5cGU7XG4gICAgdHlwZSA9IHR5cGUudHlwZTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJywgKFwiZXhwZWN0cyBzdHJpbmcgYXMgdGhlIHR5cGUsIGJ1dCBmb3VuZCBcIiArICh0eXBlb2YgdHlwZSkgKyBcIi5cIikpO1xuICB9XG5cbiAgcmV0dXJuIHsgdHlwZTogdHlwZSwgcGF5bG9hZDogcGF5bG9hZCwgb3B0aW9uczogb3B0aW9ucyB9XG59XG5cbmZ1bmN0aW9uIGluc3RhbGwgKF9WdWUpIHtcbiAgaWYgKFZ1ZSAmJiBfVnVlID09PSBWdWUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgJ1t2dWV4XSBhbHJlYWR5IGluc3RhbGxlZC4gVnVlLnVzZShWdWV4KSBzaG91bGQgYmUgY2FsbGVkIG9ubHkgb25jZS4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuICBWdWUgPSBfVnVlO1xuICBhcHBseU1peGluKFZ1ZSk7XG59XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBnZXR0aW5nIHRoZSBzdGF0ZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSAtIE1vZHVsZSdzIG5hbWVzcGFjZVxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IHN0YXRlcyAjIE9iamVjdCdzIGl0ZW0gY2FuIGJlIGEgZnVuY3Rpb24gd2hpY2ggYWNjZXB0IHN0YXRlIGFuZCBnZXR0ZXJzIGZvciBwYXJhbSwgeW91IGNhbiBkbyBzb21ldGhpbmcgZm9yIHN0YXRlIGFuZCBnZXR0ZXJzIGluIGl0LlxuICogQHBhcmFtIHtPYmplY3R9XG4gKi9cbnZhciBtYXBTdGF0ZSA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBzdGF0ZXMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBub3JtYWxpemVNYXAoc3RhdGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkU3RhdGUgKCkge1xuICAgICAgdmFyIHN0YXRlID0gdGhpcy4kc3RvcmUuc3RhdGU7XG4gICAgICB2YXIgZ2V0dGVycyA9IHRoaXMuJHN0b3JlLmdldHRlcnM7XG4gICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgIHZhciBtb2R1bGUgPSBnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcFN0YXRlJywgbmFtZXNwYWNlKTtcbiAgICAgICAgaWYgKCFtb2R1bGUpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBzdGF0ZSA9IG1vZHVsZS5jb250ZXh0LnN0YXRlO1xuICAgICAgICBnZXR0ZXJzID0gbW9kdWxlLmNvbnRleHQuZ2V0dGVycztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdmFsLmNhbGwodGhpcywgc3RhdGUsIGdldHRlcnMpXG4gICAgICAgIDogc3RhdGVbdmFsXVxuICAgIH07XG4gICAgLy8gbWFyayB2dWV4IGdldHRlciBmb3IgZGV2dG9vbHNcbiAgICByZXNba2V5XS52dWV4ID0gdHJ1ZTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vKipcbiAqIFJlZHVjZSB0aGUgY29kZSB3aGljaCB3cml0dGVuIGluIFZ1ZS5qcyBmb3IgY29tbWl0dGluZyB0aGUgbXV0YXRpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSAtIE1vZHVsZSdzIG5hbWVzcGFjZVxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG11dGF0aW9ucyAjIE9iamVjdCdzIGl0ZW0gY2FuIGJlIGEgZnVuY3Rpb24gd2hpY2ggYWNjZXB0IGBjb21taXRgIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBwYXJhbSwgaXQgY2FuIGFjY2VwdCBhbnRob3IgcGFyYW1zLiBZb3UgY2FuIGNvbW1pdCBtdXRhdGlvbiBhbmQgZG8gYW55IG90aGVyIHRoaW5ncyBpbiB0aGlzIGZ1bmN0aW9uLiBzcGVjaWFsbHksIFlvdSBuZWVkIHRvIHBhc3MgYW50aG9yIHBhcmFtcyBmcm9tIHRoZSBtYXBwZWQgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbnZhciBtYXBNdXRhdGlvbnMgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgbXV0YXRpb25zKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgbm9ybWFsaXplTWFwKG11dGF0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICByZXNba2V5XSA9IGZ1bmN0aW9uIG1hcHBlZE11dGF0aW9uICgpIHtcbiAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAvLyBHZXQgdGhlIGNvbW1pdCBtZXRob2QgZnJvbSBzdG9yZVxuICAgICAgdmFyIGNvbW1pdCA9IHRoaXMuJHN0b3JlLmNvbW1pdDtcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwTXV0YXRpb25zJywgbmFtZXNwYWNlKTtcbiAgICAgICAgaWYgKCFtb2R1bGUpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjb21taXQgPSBtb2R1bGUuY29udGV4dC5jb21taXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHZhbC5hcHBseSh0aGlzLCBbY29tbWl0XS5jb25jYXQoYXJncykpXG4gICAgICAgIDogY29tbWl0LmFwcGx5KHRoaXMuJHN0b3JlLCBbdmFsXS5jb25jYXQoYXJncykpXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vKipcbiAqIFJlZHVjZSB0aGUgY29kZSB3aGljaCB3cml0dGVuIGluIFZ1ZS5qcyBmb3IgZ2V0dGluZyB0aGUgZ2V0dGVyc1xuICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2VdIC0gTW9kdWxlJ3MgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gZ2V0dGVyc1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG52YXIgbWFwR2V0dGVycyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBnZXR0ZXJzKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgbm9ybWFsaXplTWFwKGdldHRlcnMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgLy8gVGhlIG5hbWVzcGFjZSBoYXMgYmVlbiBtdXRhdGVkIGJ5IG5vcm1hbGl6ZU5hbWVzcGFjZVxuICAgIHZhbCA9IG5hbWVzcGFjZSArIHZhbDtcbiAgICByZXNba2V5XSA9IGZ1bmN0aW9uIG1hcHBlZEdldHRlciAoKSB7XG4gICAgICBpZiAobmFtZXNwYWNlICYmICFnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcEdldHRlcnMnLCBuYW1lc3BhY2UpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgISh2YWwgaW4gdGhpcy4kc3RvcmUuZ2V0dGVycykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBnZXR0ZXI6IFwiICsgdmFsKSk7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnNbdmFsXVxuICAgIH07XG4gICAgLy8gbWFyayB2dWV4IGdldHRlciBmb3IgZGV2dG9vbHNcbiAgICByZXNba2V5XS52dWV4ID0gdHJ1ZTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vKipcbiAqIFJlZHVjZSB0aGUgY29kZSB3aGljaCB3cml0dGVuIGluIFZ1ZS5qcyBmb3IgZGlzcGF0Y2ggdGhlIGFjdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2VdIC0gTW9kdWxlJ3MgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gYWN0aW9ucyAjIE9iamVjdCdzIGl0ZW0gY2FuIGJlIGEgZnVuY3Rpb24gd2hpY2ggYWNjZXB0IGBkaXNwYXRjaGAgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IHBhcmFtLCBpdCBjYW4gYWNjZXB0IGFudGhvciBwYXJhbXMuIFlvdSBjYW4gZGlzcGF0Y2ggYWN0aW9uIGFuZCBkbyBhbnkgb3RoZXIgdGhpbmdzIGluIHRoaXMgZnVuY3Rpb24uIHNwZWNpYWxseSwgWW91IG5lZWQgdG8gcGFzcyBhbnRob3IgcGFyYW1zIGZyb20gdGhlIG1hcHBlZCBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIG1hcEFjdGlvbnMgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgYWN0aW9ucykge1xuICB2YXIgcmVzID0ge307XG4gIG5vcm1hbGl6ZU1hcChhY3Rpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkQWN0aW9uICgpIHtcbiAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAvLyBnZXQgZGlzcGF0Y2ggZnVuY3Rpb24gZnJvbSBzdG9yZVxuICAgICAgdmFyIGRpc3BhdGNoID0gdGhpcy4kc3RvcmUuZGlzcGF0Y2g7XG4gICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgIHZhciBtb2R1bGUgPSBnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcEFjdGlvbnMnLCBuYW1lc3BhY2UpO1xuICAgICAgICBpZiAoIW1vZHVsZSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoID0gbW9kdWxlLmNvbnRleHQuZGlzcGF0Y2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHZhbC5hcHBseSh0aGlzLCBbZGlzcGF0Y2hdLmNvbmNhdChhcmdzKSlcbiAgICAgICAgOiBkaXNwYXRjaC5hcHBseSh0aGlzLiRzdG9yZSwgW3ZhbF0uY29uY2F0KGFyZ3MpKVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLyoqXG4gKiBSZWJpbmRpbmcgbmFtZXNwYWNlIHBhcmFtIGZvciBtYXBYWFggZnVuY3Rpb24gaW4gc3BlY2lhbCBzY29wZWQsIGFuZCByZXR1cm4gdGhlbSBieSBzaW1wbGUgb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbnZhciBjcmVhdGVOYW1lc3BhY2VkSGVscGVycyA9IGZ1bmN0aW9uIChuYW1lc3BhY2UpIHsgcmV0dXJuICh7XG4gIG1hcFN0YXRlOiBtYXBTdGF0ZS5iaW5kKG51bGwsIG5hbWVzcGFjZSksXG4gIG1hcEdldHRlcnM6IG1hcEdldHRlcnMuYmluZChudWxsLCBuYW1lc3BhY2UpLFxuICBtYXBNdXRhdGlvbnM6IG1hcE11dGF0aW9ucy5iaW5kKG51bGwsIG5hbWVzcGFjZSksXG4gIG1hcEFjdGlvbnM6IG1hcEFjdGlvbnMuYmluZChudWxsLCBuYW1lc3BhY2UpXG59KTsgfTtcblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIG1hcFxuICogbm9ybWFsaXplTWFwKFsxLCAyLCAzXSkgPT4gWyB7IGtleTogMSwgdmFsOiAxIH0sIHsga2V5OiAyLCB2YWw6IDIgfSwgeyBrZXk6IDMsIHZhbDogMyB9IF1cbiAqIG5vcm1hbGl6ZU1hcCh7YTogMSwgYjogMiwgYzogM30pID0+IFsgeyBrZXk6ICdhJywgdmFsOiAxIH0sIHsga2V5OiAnYicsIHZhbDogMiB9LCB7IGtleTogJ2MnLCB2YWw6IDMgfSBdXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gbWFwXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZU1hcCAobWFwKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KG1hcClcbiAgICA/IG1hcC5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gKHsga2V5OiBrZXksIHZhbDoga2V5IH0pOyB9KVxuICAgIDogT2JqZWN0LmtleXMobWFwKS5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gKHsga2V5OiBrZXksIHZhbDogbWFwW2tleV0gfSk7IH0pXG59XG5cbi8qKlxuICogUmV0dXJuIGEgZnVuY3Rpb24gZXhwZWN0IHR3byBwYXJhbSBjb250YWlucyBuYW1lc3BhY2UgYW5kIG1hcC4gaXQgd2lsbCBub3JtYWxpemUgdGhlIG5hbWVzcGFjZSBhbmQgdGhlbiB0aGUgcGFyYW0ncyBmdW5jdGlvbiB3aWxsIGhhbmRsZSB0aGUgbmV3IG5hbWVzcGFjZSBhbmQgdGhlIG1hcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplTmFtZXNwYWNlIChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWFwKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgIT09ICdzdHJpbmcnKSB7XG4gICAgICBtYXAgPSBuYW1lc3BhY2U7XG4gICAgICBuYW1lc3BhY2UgPSAnJztcbiAgICB9IGVsc2UgaWYgKG5hbWVzcGFjZS5jaGFyQXQobmFtZXNwYWNlLmxlbmd0aCAtIDEpICE9PSAnLycpIHtcbiAgICAgIG5hbWVzcGFjZSArPSAnLyc7XG4gICAgfVxuICAgIHJldHVybiBmbihuYW1lc3BhY2UsIG1hcClcbiAgfVxufVxuXG4vKipcbiAqIFNlYXJjaCBhIHNwZWNpYWwgbW9kdWxlIGZyb20gc3RvcmUgYnkgbmFtZXNwYWNlLiBpZiBtb2R1bGUgbm90IGV4aXN0LCBwcmludCBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IHN0b3JlXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVscGVyXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldE1vZHVsZUJ5TmFtZXNwYWNlIChzdG9yZSwgaGVscGVyLCBuYW1lc3BhY2UpIHtcbiAgdmFyIG1vZHVsZSA9IHN0b3JlLl9tb2R1bGVzTmFtZXNwYWNlTWFwW25hbWVzcGFjZV07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFtb2R1bGUpIHtcbiAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSBtb2R1bGUgbmFtZXNwYWNlIG5vdCBmb3VuZCBpbiBcIiArIGhlbHBlciArIFwiKCk6IFwiICsgbmFtZXNwYWNlKSk7XG4gIH1cbiAgcmV0dXJuIG1vZHVsZVxufVxuXG52YXIgaW5kZXhfZXNtID0ge1xuICBTdG9yZTogU3RvcmUsXG4gIGluc3RhbGw6IGluc3RhbGwsXG4gIHZlcnNpb246ICczLjEuMScsXG4gIG1hcFN0YXRlOiBtYXBTdGF0ZSxcbiAgbWFwTXV0YXRpb25zOiBtYXBNdXRhdGlvbnMsXG4gIG1hcEdldHRlcnM6IG1hcEdldHRlcnMsXG4gIG1hcEFjdGlvbnM6IG1hcEFjdGlvbnMsXG4gIGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzOiBjcmVhdGVOYW1lc3BhY2VkSGVscGVyc1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXhfZXNtO1xuZXhwb3J0IHsgU3RvcmUsIGluc3RhbGwsIG1hcFN0YXRlLCBtYXBNdXRhdGlvbnMsIG1hcEdldHRlcnMsIG1hcEFjdGlvbnMsIGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzIH07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgLy8gT25seSBOb2RlLkpTIGhhcyBhIHByb2Nlc3MgdmFyaWFibGUgdGhhdCBpcyBvZiBbW0NsYXNzXV0gcHJvY2Vzc1xuICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCB8fCAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgdmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xuXG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIHV0aWxzLmZvckVhY2goWyd1cmwnLCAnbWV0aG9kJywgJ3BhcmFtcycsICdkYXRhJ10sIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKFsnaGVhZGVycycsICdhdXRoJywgJ3Byb3h5J10sIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICh1dGlscy5pc09iamVjdChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IHV0aWxzLmRlZXBNZXJnZShjb25maWcxW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goW1xuICAgICdiYXNlVVJMJywgJ3RyYW5zZm9ybVJlcXVlc3QnLCAndHJhbnNmb3JtUmVzcG9uc2UnLCAncGFyYW1zU2VyaWFsaXplcicsXG4gICAgJ3RpbWVvdXQnLCAnd2l0aENyZWRlbnRpYWxzJywgJ2FkYXB0ZXInLCAncmVzcG9uc2VUeXBlJywgJ3hzcmZDb29raWVOYW1lJyxcbiAgICAneHNyZkhlYWRlck5hbWUnLCAnb25VcGxvYWRQcm9ncmVzcycsICdvbkRvd25sb2FkUHJvZ3Jlc3MnLCAnbWF4Q29udGVudExlbmd0aCcsXG4gICAgJ3ZhbGlkYXRlU3RhdHVzJywgJ21heFJlZGlyZWN0cycsICdodHRwQWdlbnQnLCAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsXG4gICAgJ3NvY2tldFBhdGgnXG4gIF0sIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZWYzZGY5ODQxOWQxNDNkOTYxN2ZlMTYzYmY0ZWRjMGIuZW90XCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZmM5YzYzYzgyMjRmYjM0MWZjOTMzNjQxY2JkZDEyZWYuZW90XCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMDM3ODNjNTE3MmVlMWFkMTI4YzU3NmJmODhmYWMxNjguZW90XCI7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhheGlvcy5kZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAhPSBudWxsICYmXG4gICAgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBhcmd1bWVudHNbMF07XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QgPyBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCkgOiAnZ2V0JztcblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBTdXBwb3J0IGJhc2VVUkwgY29uZmlnXG4gIGlmIChjb25maWcuYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChjb25maWcudXJsKSkge1xuICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIH1cblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZVxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0luZGV4UGFnZS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vSW5kZXhQYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnRyYW5zbGF0aW9uc19faGVhZGVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG4udHJhbnNsYXRpb25zX19oZWFkZXIgLnRyYW5zbGF0aW9uc19fYWN0aW9ucyB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxufVxcbi50cmFuc2xhdGlvbnNfX2hlYWRlciAudHJhbnNsYXRpb25zX19hY3Rpb25zIC5idXR0b24ge1xcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgIGhlaWdodDogMzhweDtcXG4gICAgICBwYWRkaW5nOiAxMnB4IDE4cHg7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzRhOTBlMjtcXG4gICAgICBjb2xvcjogd2hpdGU7XFxuICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gICAgICBib3JkZXI6IG5vbmU7XFxuICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgICBtYXJnaW4tcmlnaHQ6IDE1cHg7XFxufVxcbi50cmFuc2xhdGlvbnNfX2hlYWRlciAudHJhbnNsYXRpb25zX19hY3Rpb25zIC5idXR0b24gaSB7XFxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxufVxcbi50cmFuc2xhdGlvbnNfX2hlYWRlciAudHJhbnNsYXRpb25zX19hY3Rpb25zIC5idXR0b246aG92ZXIge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzIyNzVkNztcXG59XFxuLnRyYW5zbGF0aW9uc19faGVhZGVyIC50cmFuc2xhdGlvbnNfX2FjdGlvbnMgLmJ1dHRvbjphY3RpdmUge1xcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDFweCk7XFxufVxcbnRhYmxlIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44Nyk7XFxuICBtYXJnaW4tYm90dG9tOiAycmVtO1xcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG4gIGJvcmRlci1zcGFjaW5nOiAwO1xcbn1cXG50YWJsZSB0aGVhZCB0ciB7XFxuICAgIGhlaWdodDogNTZweDtcXG59XFxudGFibGUgdGhlYWQgdHIgdGgge1xcbiAgICAgIHBhZGRpbmc6IDA7XFxuICAgICAgYm9yZGVyLWJvdHRvbS13aWR0aDogMXB4O1xcbiAgICAgIGJvcmRlci1ib3R0b20tc3R5bGU6IHNvbGlkO1xcbiAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xMik7XFxuICAgICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41NCk7XFxuICAgICAgZm9udC1zaXplOiAxMnB4O1xcbiAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICAgICAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxudGFibGUgdGhlYWQgdHIgdGg6Zmlyc3QtY2hpbGQge1xcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAyNHB4O1xcbn1cXG50YWJsZSB0Ym9keSB0ciB7XFxuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4zcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpIDBzLCBmb250LXdlaWdodDtcXG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMik7XFxuICAgIHBhZGRpbmc6IDAgMTVweDtcXG4gICAgaGVpZ2h0OiA0OHB4O1xcbn1cXG50YWJsZSB0Ym9keSB0cjpob3ZlciB7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjA4KTtcXG59XFxudGFibGUgdGJvZHkgdHIgdGQge1xcbiAgICAgIHBhZGRpbmc6IDA7XFxuICAgICAgYm9yZGVyLWJvdHRvbS13aWR0aDogMXB4O1xcbiAgICAgIGJvcmRlci1ib3R0b20tc3R5bGU6IHNvbGlkO1xcbiAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xMik7XFxuICAgICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44Nyk7XFxuICAgICAgZm9udC1zaXplOiAxNHB4O1xcbiAgICAgIHRleHQtYWxpZ246IGxlZnQ7XFxufVxcbnRhYmxlIHRib2R5IHRyIHRkOmZpcnN0LWNoaWxkIHtcXG4gICAgICAgIHBhZGRpbmctbGVmdDogMjRweDtcXG59XFxuLnRyYW5zbGF0aW9uX19hY3Rpb24gaSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjM4KTtcXG59XFxuLnRyYW5zbGF0aW9uX19hY3Rpb24gaSBpICsgaSB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xcbn1cXG4udHJhbnNsYXRpb25fX2FjdGlvbiBpOmhvdmVyIHtcXG4gICAgY29sb3I6ICM0YTkwZTI7XFxufVxcblwiLCBcIlwiXSk7XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0xvZ2luUGFnZS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTG9naW5QYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmFjY291bnQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcbi5hY2NvdW50IC5hY2NvdW50X190aXRsZSB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgbWFyZ2luLWJvdHRvbTogNjBweDtcXG59XFxuLmFjY291bnQgLmFjY291bnRfX3RpdGxlIC50aXRsZV9faGVhZGxpbmUge1xcbiAgICAgIGZvbnQtc2l6ZTogM3JlbTtcXG4gICAgICBsaW5lLWhlaWdodDogM3JlbTtcXG4gICAgICBmb250LXdlaWdodDogNDAwO1xcbiAgICAgIGxldHRlci1zcGFjaW5nOiBub3JtYWw7XFxuICAgICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44Nyk7XFxuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuLmFjY291bnQgLmFjY291bnRfX3RpdGxlIC50aXRsZV9fc3ViaGVhZGxpbmUge1xcbiAgICAgIGZvbnQtc2l6ZTogMXJlbTtcXG4gICAgICBsaW5lLWhlaWdodDogMS43NXJlbTtcXG4gICAgICBmb250LXdlaWdodDogNDAwO1xcbiAgICAgIGxldHRlci1zcGFjaW5nOiB0eXBvZ3JhcGh5LWdldC1sZXR0ZXItc3BhY2luZygwLjE1LCAxKTtcXG4gICAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjU0KTtcXG59XFxuLmFjY291bnQgLmFjY291bnRfX2JveCB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIHdpZHRoOiA1MCU7XFxuICAgIHBhZGRpbmc6IDAgMTVweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gICAgYm94LXNoYWRvdzogMCAxcHggMnB4IDAgcmdiYSgwLCAwLCAwLCAwLjA4KSwgaW5zZXQgMCAwIDAgMXB4ICNkYmUzZTc7XFxuICAgIHRyYW5zaXRpb246IDAuNHM7XFxufVxcbi5hY2NvdW50IC5hY2NvdW50X19ib3ggLmFjY291bnRfX2Zvcm0ge1xcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgICBwYWRkaW5nOiA0MHB4IDQwcHggMzBweDtcXG59XFxuLmFjY291bnQgLmFjY291bnRfX2JveCAuYWNjb3VudF9fZm9ybSAjZmxhc2gge1xcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XFxuICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmNmOGUzO1xcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2ZhZWJjYztcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gICAgICAgIGNvbG9yOiAjNzY2NzRlO1xcbiAgICAgICAgZm9udC1zaXplOiAxcmVtO1xcbiAgICAgICAgbGluZS1oZWlnaHQ6IDEuMnJlbTtcXG4gICAgICAgIHBhZGRpbmc6IDhweCAxMHB4O1xcbn1cXG4uYWNjb3VudCAuYWNjb3VudF9fYm94IC5hY2NvdW50X19mb3JtIC5mb3JtX19pdGVtIHtcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbi5hY2NvdW50IC5hY2NvdW50X19ib3ggLmFjY291bnRfX2Zvcm0gLmZvcm1fX2l0ZW0gLmZvcm1fX2xhYmVsIHtcXG4gICAgICAgICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44Nyk7XFxuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgICAgIGhlaWdodDogMjBweDtcXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuLmFjY291bnQgLmFjY291bnRfX2JveCAuYWNjb3VudF9fZm9ybSAuZm9ybV9faXRlbSAuZm9ybV9faW5wdXQge1xcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgICAgICAgaGVpZ2h0OiAzOHB4O1xcbiAgICAgICAgICBwYWRkaW5nOiAwIDEwcHg7XFxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmN2Y5ZmE7XFxuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNkYmUzZTc7XFxuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gICAgICAgICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44Nyk7XFxuICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTtcXG4gICAgICAgICAgdHJhbnNpdGlvbjogYWxsIGVhc2UtaW4tb3V0IDAuMXM7XFxuICAgICAgICAgIG91dGxpbmU6IG5vbmU7XFxufVxcbi5hY2NvdW50IC5hY2NvdW50X19ib3ggLmFjY291bnRfX2Zvcm0gLmZvcm1fX2l0ZW0gLmZvcm1fX2lucHV0OmFjdGl2ZSwgLmFjY291bnQgLmFjY291bnRfX2JveCAuYWNjb3VudF9fZm9ybSAuZm9ybV9faXRlbSAuZm9ybV9faW5wdXQ6Zm9jdXMge1xcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlZWYyZjQ7XFxuICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAjNGE5MGUyO1xcbn1cXG4uYWNjb3VudCAuYWNjb3VudF9fYm94IC5hY2NvdW50X19mb3JtIC5mb3JtX19zdWJtaXQge1xcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XFxuICAgICAgICBoZWlnaHQ6IDM4cHg7XFxuICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgICAgIHBhZGRpbmc6IDEycHggMThweDtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM0YTkwZTI7XFxuICAgICAgICBjb2xvcjogd2hpdGU7XFxuICAgICAgICBmb250LXdlaWdodDogNTAwO1xcbiAgICAgICAgYm9yZGVyOiBub25lO1xcbiAgICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4uYWNjb3VudCAuYWNjb3VudF9fYm94IC5hY2NvdW50X19mb3JtIC5mb3JtX19zdWJtaXQ6aG92ZXIge1xcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjI3NWQ3O1xcbn1cXG4uYWNjb3VudCAuYWNjb3VudF9fYm94IC5hY2NvdW50X19mb3JtIC5mb3JtX19zdWJtaXQ6YWN0aXZlIHtcXG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDFweCk7XFxufVxcblwiLCBcIlwiXSk7XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NyZWF0ZVRyYW5zbGF0aW9uUGFnZS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ3JlYXRlVHJhbnNsYXRpb25QYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnRyYW5zbGF0aW9uLWNyZWF0ZSAudHJhbnNsYXRpb25fX2JveCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiA1MCU7XFxuICBwYWRkaW5nOiAxNXB4IDA7XFxufVxcbi50cmFuc2xhdGlvbi1jcmVhdGUgLnRyYW5zbGF0aW9uX19ib3ggI2ZsYXNoIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmNmOGUzO1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZmFlYmNjO1xcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XFxuICAgIGNvbG9yOiAjNzY2NzRlO1xcbiAgICBmb250LXNpemU6IDFyZW07XFxuICAgIGxpbmUtaGVpZ2h0OiAxLjJyZW07XFxuICAgIHBhZGRpbmc6IDhweCAxMHB4O1xcbn1cXG4udHJhbnNsYXRpb24tY3JlYXRlIC50cmFuc2xhdGlvbl9fYm94IC50cmFuc2xhdGlvbl9fZm9ybSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG4gICAgcGFkZGluZzogNDBweCAwIDMwcHg7XFxufVxcbi50cmFuc2xhdGlvbi1jcmVhdGUgLnRyYW5zbGF0aW9uX19ib3ggLnRyYW5zbGF0aW9uX19mb3JtIC5mb3JtX19pdGVtIHtcXG4gICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLnRyYW5zbGF0aW9uLWNyZWF0ZSAudHJhbnNsYXRpb25fX2JveCAudHJhbnNsYXRpb25fX2Zvcm0gLmZvcm1fX2l0ZW0gLmZvcm1fX2xhYmVsIHtcXG4gICAgICAgIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuODcpO1xcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XFxuICAgICAgICBmb250LXdlaWdodDogNDAwO1xcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgaGVpZ2h0OiAyMHB4O1xcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuLnRyYW5zbGF0aW9uLWNyZWF0ZSAudHJhbnNsYXRpb25fX2JveCAudHJhbnNsYXRpb25fX2Zvcm0gLmZvcm1fX2l0ZW0gLmZvcm1fX2lucHV0IHtcXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICBoZWlnaHQ6IDM4cHg7XFxuICAgICAgICBwYWRkaW5nOiAwIDEwcHg7XFxuICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Y3ZjlmYTtcXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNkYmUzZTc7XFxuICAgICAgICBib3JkZXItcmFkaXVzOiAzcHg7XFxuICAgICAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjg3KTtcXG4gICAgICAgIGZvbnQtc2l6ZTogMXJlbTtcXG4gICAgICAgIHRyYW5zaXRpb246IGFsbCBlYXNlLWluLW91dCAwLjFzO1xcbiAgICAgICAgb3V0bGluZTogbm9uZTtcXG59XFxuLnRyYW5zbGF0aW9uLWNyZWF0ZSAudHJhbnNsYXRpb25fX2JveCAudHJhbnNsYXRpb25fX2Zvcm0gLmZvcm1fX2l0ZW0gLmZvcm1fX2lucHV0OmFjdGl2ZSwgLnRyYW5zbGF0aW9uLWNyZWF0ZSAudHJhbnNsYXRpb25fX2JveCAudHJhbnNsYXRpb25fX2Zvcm0gLmZvcm1fX2l0ZW0gLmZvcm1fX2lucHV0OmZvY3VzIHtcXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2VlZjJmNDtcXG4gICAgICAgICAgYm9yZGVyLWNvbG9yOiAjNGE5MGUyO1xcbn1cXG4udHJhbnNsYXRpb24tY3JlYXRlIC50cmFuc2xhdGlvbl9fYm94IC50cmFuc2xhdGlvbl9fZm9ybSAuZm9ybV9fc3VibWl0IHtcXG4gICAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgICBoZWlnaHQ6IDM4cHg7XFxuICAgICAgcGFkZGluZzogMTJweCAxOHB4O1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICM0YTkwZTI7XFxuICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICAgICAgYm9yZGVyOiBub25lO1xcbiAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi50cmFuc2xhdGlvbi1jcmVhdGUgLnRyYW5zbGF0aW9uX19ib3ggLnRyYW5zbGF0aW9uX19mb3JtIC5mb3JtX19zdWJtaXQ6aG92ZXIge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzIyNzVkNztcXG59XFxuLnRyYW5zbGF0aW9uLWNyZWF0ZSAudHJhbnNsYXRpb25fX2JveCAudHJhbnNsYXRpb25fX2Zvcm0gLmZvcm1fX3N1Ym1pdDphY3RpdmUge1xcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDFweCk7XFxufVxcblwiLCBcIlwiXSk7XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1JlYWRUcmFuc2xhdGlvblBhZ2UudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1JlYWRUcmFuc2xhdGlvblBhZ2UudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuYWN0aW9ucyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG4uYWN0aW9ucyAuYnV0dG9uIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIGhlaWdodDogMzhweDtcXG4gICAgcGFkZGluZzogMTJweCAxOHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGE5MGUyO1xcbiAgICBjb2xvcjogd2hpdGU7XFxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIG1hcmdpbi1yaWdodDogMTVweDtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG4uYWN0aW9ucyAuYnV0dG9uIGkge1xcbiAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcXG59XFxuLmFjdGlvbnMgLmJ1dHRvbjpob3ZlciB7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzIyNzVkNztcXG59XFxuLmFjdGlvbnMgLmJ1dHRvbjphY3RpdmUge1xcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxcHgpO1xcbn1cXG4jZmxhc2gge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1hcmdpbi1ib3R0b206IDMwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmNmOGUzO1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2ZhZWJjYztcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gIGNvbG9yOiAjNzY2NzRlO1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuMnJlbTtcXG4gIHBhZGRpbmc6IDhweCAxMHB4O1xcbn1cXG5cIiwgXCJcIl0pO1xuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9VcGRhdGVUcmFuc2xhdGlvblBhZ2UudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1VwZGF0ZVRyYW5zbGF0aW9uUGFnZS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCIiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi50cmFuc2xhdGlvbi11cGRhdGUgLnRyYW5zbGF0aW9uX19ib3gge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogNTAlO1xcbiAgcGFkZGluZzogMTVweCAwO1xcbn1cXG4udHJhbnNsYXRpb24tdXBkYXRlIC50cmFuc2xhdGlvbl9fYm94ICNmbGFzaCB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZjZjhlMztcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2ZhZWJjYztcXG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiAgICBjb2xvcjogIzc2Njc0ZTtcXG4gICAgZm9udC1zaXplOiAxcmVtO1xcbiAgICBsaW5lLWhlaWdodDogMS4ycmVtO1xcbiAgICBwYWRkaW5nOiA4cHggMTBweDtcXG59XFxuLnRyYW5zbGF0aW9uLXVwZGF0ZSAudHJhbnNsYXRpb25fX2JveCAudHJhbnNsYXRpb25fX2Zvcm0ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxuICAgIHBhZGRpbmc6IDQwcHggMCAzMHB4O1xcbn1cXG4udHJhbnNsYXRpb24tdXBkYXRlIC50cmFuc2xhdGlvbl9fYm94IC50cmFuc2xhdGlvbl9fZm9ybSAuZm9ybV9faXRlbSB7XFxuICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbi50cmFuc2xhdGlvbi11cGRhdGUgLnRyYW5zbGF0aW9uX19ib3ggLnRyYW5zbGF0aW9uX19mb3JtIC5mb3JtX19pdGVtIC5mb3JtX19sYWJlbCB7XFxuICAgICAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjg3KTtcXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICAgIGhlaWdodDogMjBweDtcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxufVxcbi50cmFuc2xhdGlvbi11cGRhdGUgLnRyYW5zbGF0aW9uX19ib3ggLnRyYW5zbGF0aW9uX19mb3JtIC5mb3JtX19pdGVtIC5mb3JtX19pbnB1dCB7XFxuICAgICAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAgaGVpZ2h0OiAzOHB4O1xcbiAgICAgICAgcGFkZGluZzogMCAxMHB4O1xcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmN2Y5ZmE7XFxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZGJlM2U3O1xcbiAgICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiAgICAgICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44Nyk7XFxuICAgICAgICBmb250LXNpemU6IDFyZW07XFxuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgZWFzZS1pbi1vdXQgMC4xcztcXG4gICAgICAgIG91dGxpbmU6IG5vbmU7XFxufVxcbi50cmFuc2xhdGlvbi11cGRhdGUgLnRyYW5zbGF0aW9uX19ib3ggLnRyYW5zbGF0aW9uX19mb3JtIC5mb3JtX19pdGVtIC5mb3JtX19pbnB1dDphY3RpdmUsIC50cmFuc2xhdGlvbi11cGRhdGUgLnRyYW5zbGF0aW9uX19ib3ggLnRyYW5zbGF0aW9uX19mb3JtIC5mb3JtX19pdGVtIC5mb3JtX19pbnB1dDpmb2N1cyB7XFxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlZWYyZjQ7XFxuICAgICAgICAgIGJvcmRlci1jb2xvcjogIzRhOTBlMjtcXG59XFxuLnRyYW5zbGF0aW9uLXVwZGF0ZSAudHJhbnNsYXRpb25fX2JveCAuYWN0aW9ucyB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxufVxcbi50cmFuc2xhdGlvbi11cGRhdGUgLnRyYW5zbGF0aW9uX19ib3ggLmFjdGlvbnMgLmJ1dHRvbiB7XFxuICAgICAgZGlzcGxheTogYmxvY2s7XFxuICAgICAgaGVpZ2h0OiAzOHB4O1xcbiAgICAgIHBhZGRpbmc6IDEycHggMThweDtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGE5MGUyO1xcbiAgICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgICBmb250LXdlaWdodDogNTAwO1xcbiAgICAgIGJvcmRlcjogbm9uZTtcXG4gICAgICBib3JkZXItcmFkaXVzOiAzcHg7XFxuICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgIG1hcmdpbi1yaWdodDogMTVweDtcXG4gICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcbi50cmFuc2xhdGlvbi11cGRhdGUgLnRyYW5zbGF0aW9uX19ib3ggLmFjdGlvbnMgLmJ1dHRvbiBpIHtcXG4gICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcXG59XFxuLnRyYW5zbGF0aW9uLXVwZGF0ZSAudHJhbnNsYXRpb25fX2JveCAuYWN0aW9ucyAuYnV0dG9uOmhvdmVyIHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMyMjc1ZDc7XFxufVxcbi50cmFuc2xhdGlvbi11cGRhdGUgLnRyYW5zbGF0aW9uX19ib3ggLmFjdGlvbnMgLmJ1dHRvbjphY3RpdmUge1xcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDFweCk7XFxufVxcblwiLCBcIlwiXSk7XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1VwZGF0ZU5hdGl2ZVBhZ2UudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1VwZGF0ZU5hdGl2ZVBhZ2UudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIudHJhbnNsYXRpb24tdXBkYXRlIC50cmFuc2xhdGlvbl9fYm94IHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IDUwJTtcXG4gIHBhZGRpbmc6IDE1cHggMDtcXG59XFxuLnRyYW5zbGF0aW9uLXVwZGF0ZSAudHJhbnNsYXRpb25fX2JveCAuZmxhc2gge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmY2Y4ZTM7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNmYWViY2M7XFxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gICAgY29sb3I6ICM3NjY3NGU7XFxuICAgIGZvbnQtc2l6ZTogMXJlbTtcXG4gICAgbGluZS1oZWlnaHQ6IDEuMnJlbTtcXG4gICAgcGFkZGluZzogOHB4IDEwcHg7XFxufVxcbi50cmFuc2xhdGlvbi11cGRhdGUgLnRyYW5zbGF0aW9uX19ib3ggLnRyYW5zbGF0aW9uX19mb3JtIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgICBwYWRkaW5nOiA0MHB4IDAgMzBweDtcXG59XFxuLnRyYW5zbGF0aW9uLXVwZGF0ZSAudHJhbnNsYXRpb25fX2JveCAudHJhbnNsYXRpb25fX2Zvcm0gLmZvcm1fX2l0ZW0ge1xcbiAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XFxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4udHJhbnNsYXRpb24tdXBkYXRlIC50cmFuc2xhdGlvbl9fYm94IC50cmFuc2xhdGlvbl9fZm9ybSAuZm9ybV9faXRlbSAuZm9ybV9fbGFiZWwge1xcbiAgICAgICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44Nyk7XFxuICAgICAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgICBoZWlnaHQ6IDIwcHg7XFxuICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbn1cXG4udHJhbnNsYXRpb24tdXBkYXRlIC50cmFuc2xhdGlvbl9fYm94IC50cmFuc2xhdGlvbl9fZm9ybSAuZm9ybV9faXRlbSAuZm9ybV9faW5wdXQge1xcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgICAgIGhlaWdodDogMzhweDtcXG4gICAgICAgIHBhZGRpbmc6IDAgMTBweDtcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjdmOWZhO1xcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2RiZTNlNztcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gICAgICAgIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuODcpO1xcbiAgICAgICAgZm9udC1zaXplOiAxcmVtO1xcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIGVhc2UtaW4tb3V0IDAuMXM7XFxuICAgICAgICBvdXRsaW5lOiBub25lO1xcbn1cXG4udHJhbnNsYXRpb24tdXBkYXRlIC50cmFuc2xhdGlvbl9fYm94IC50cmFuc2xhdGlvbl9fZm9ybSAuZm9ybV9faXRlbSAuZm9ybV9faW5wdXQ6YWN0aXZlLCAudHJhbnNsYXRpb24tdXBkYXRlIC50cmFuc2xhdGlvbl9fYm94IC50cmFuc2xhdGlvbl9fZm9ybSAuZm9ybV9faXRlbSAuZm9ybV9faW5wdXQ6Zm9jdXMge1xcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVmMmY0O1xcbiAgICAgICAgICBib3JkZXItY29sb3I6ICM0YTkwZTI7XFxufVxcbi50cmFuc2xhdGlvbi11cGRhdGUgLnRyYW5zbGF0aW9uX19ib3ggLmFjdGlvbnMge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbn1cXG4udHJhbnNsYXRpb24tdXBkYXRlIC50cmFuc2xhdGlvbl9fYm94IC5hY3Rpb25zIC5idXR0b24ge1xcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgIGhlaWdodDogMzhweDtcXG4gICAgICBwYWRkaW5nOiAxMnB4IDE4cHg7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzRhOTBlMjtcXG4gICAgICBjb2xvcjogd2hpdGU7XFxuICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gICAgICBib3JkZXI6IG5vbmU7XFxuICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgICBtYXJnaW4tcmlnaHQ6IDE1cHg7XFxuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG4udHJhbnNsYXRpb24tdXBkYXRlIC50cmFuc2xhdGlvbl9fYm94IC5hY3Rpb25zIC5idXR0b24gaSB7XFxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxufVxcbi50cmFuc2xhdGlvbi11cGRhdGUgLnRyYW5zbGF0aW9uX19ib3ggLmFjdGlvbnMgLmJ1dHRvbjpob3ZlciB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjI3NWQ3O1xcbn1cXG4udHJhbnNsYXRpb24tdXBkYXRlIC50cmFuc2xhdGlvbl9fYm94IC5hY3Rpb25zIC5idXR0b246YWN0aXZlIHtcXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxcHgpO1xcbn1cXG5cIiwgXCJcIl0pO1xuIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vdGhlbWUuc2Nzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCI1ZDE2MzljNFwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi90aGVtZS5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vdGhlbWUuc2Nzc1wiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gSW1wb3J0c1xudmFyIGdldFVybCA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fMF9fXyA9IGdldFVybChyZXF1aXJlKFwicm9ib3RvLWZvbnRmYWNlL2ZvbnRzLy9yb2JvdG8vUm9ib3RvLVJlZ3VsYXIud29mZjJcIikpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fMV9fXyA9IGdldFVybChyZXF1aXJlKFwicm9ib3RvLWZvbnRmYWNlL2ZvbnRzLy9yb2JvdG8vUm9ib3RvLVJlZ3VsYXIud29mZlwiKSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX18yX19fID0gZ2V0VXJsKHJlcXVpcmUoXCJyb2JvdG8tZm9udGZhY2UvZm9udHMvL3JvYm90by9Sb2JvdG8tUmVndWxhckl0YWxpYy53b2ZmMlwiKSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX18zX19fID0gZ2V0VXJsKHJlcXVpcmUoXCJyb2JvdG8tZm9udGZhY2UvZm9udHMvL3JvYm90by9Sb2JvdG8tUmVndWxhckl0YWxpYy53b2ZmXCIpKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzRfX18gPSBnZXRVcmwocmVxdWlyZShcInJvYm90by1mb250ZmFjZS9mb250cy8vcm9ib3RvL1JvYm90by1MaWdodC53b2ZmMlwiKSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX181X19fID0gZ2V0VXJsKHJlcXVpcmUoXCJyb2JvdG8tZm9udGZhY2UvZm9udHMvL3JvYm90by9Sb2JvdG8tTGlnaHQud29mZlwiKSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX182X19fID0gZ2V0VXJsKHJlcXVpcmUoXCJyb2JvdG8tZm9udGZhY2UvZm9udHMvL3JvYm90by9Sb2JvdG8tTGlnaHRJdGFsaWMud29mZjJcIikpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fN19fXyA9IGdldFVybChyZXF1aXJlKFwicm9ib3RvLWZvbnRmYWNlL2ZvbnRzLy9yb2JvdG8vUm9ib3RvLUxpZ2h0SXRhbGljLndvZmZcIikpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fOF9fXyA9IGdldFVybChyZXF1aXJlKFwicm9ib3RvLWZvbnRmYWNlL2ZvbnRzLy9yb2JvdG8vUm9ib3RvLVRoaW4ud29mZjJcIikpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fOV9fXyA9IGdldFVybChyZXF1aXJlKFwicm9ib3RvLWZvbnRmYWNlL2ZvbnRzLy9yb2JvdG8vUm9ib3RvLVRoaW4ud29mZlwiKSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX18xMF9fXyA9IGdldFVybChyZXF1aXJlKFwicm9ib3RvLWZvbnRmYWNlL2ZvbnRzLy9yb2JvdG8vUm9ib3RvLVRoaW5JdGFsaWMud29mZjJcIikpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fMTFfX18gPSBnZXRVcmwocmVxdWlyZShcInJvYm90by1mb250ZmFjZS9mb250cy8vcm9ib3RvL1JvYm90by1UaGluSXRhbGljLndvZmZcIikpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fMTJfX18gPSBnZXRVcmwocmVxdWlyZShcInJvYm90by1mb250ZmFjZS9mb250cy8vcm9ib3RvL1JvYm90by1NZWRpdW0ud29mZjJcIikpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fMTNfX18gPSBnZXRVcmwocmVxdWlyZShcInJvYm90by1mb250ZmFjZS9mb250cy8vcm9ib3RvL1JvYm90by1NZWRpdW0ud29mZlwiKSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX18xNF9fXyA9IGdldFVybChyZXF1aXJlKFwicm9ib3RvLWZvbnRmYWNlL2ZvbnRzLy9yb2JvdG8vUm9ib3RvLU1lZGl1bUl0YWxpYy53b2ZmMlwiKSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX18xNV9fXyA9IGdldFVybChyZXF1aXJlKFwicm9ib3RvLWZvbnRmYWNlL2ZvbnRzLy9yb2JvdG8vUm9ib3RvLU1lZGl1bUl0YWxpYy53b2ZmXCIpKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzE2X19fID0gZ2V0VXJsKHJlcXVpcmUoXCJyb2JvdG8tZm9udGZhY2UvZm9udHMvL3JvYm90by9Sb2JvdG8tQm9sZC53b2ZmMlwiKSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX18xN19fXyA9IGdldFVybChyZXF1aXJlKFwicm9ib3RvLWZvbnRmYWNlL2ZvbnRzLy9yb2JvdG8vUm9ib3RvLUJvbGQud29mZlwiKSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX18xOF9fXyA9IGdldFVybChyZXF1aXJlKFwicm9ib3RvLWZvbnRmYWNlL2ZvbnRzLy9yb2JvdG8vUm9ib3RvLUJvbGRJdGFsaWMud29mZjJcIikpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fMTlfX18gPSBnZXRVcmwocmVxdWlyZShcInJvYm90by1mb250ZmFjZS9mb250cy8vcm9ib3RvL1JvYm90by1Cb2xkSXRhbGljLndvZmZcIikpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fMjBfX18gPSBnZXRVcmwocmVxdWlyZShcInJvYm90by1mb250ZmFjZS9mb250cy8vcm9ib3RvL1JvYm90by1CbGFjay53b2ZmMlwiKSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX18yMV9fXyA9IGdldFVybChyZXF1aXJlKFwicm9ib3RvLWZvbnRmYWNlL2ZvbnRzLy9yb2JvdG8vUm9ib3RvLUJsYWNrLndvZmZcIikpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fMjJfX18gPSBnZXRVcmwocmVxdWlyZShcInJvYm90by1mb250ZmFjZS9mb250cy8vcm9ib3RvL1JvYm90by1CbGFja0l0YWxpYy53b2ZmMlwiKSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX18yM19fXyA9IGdldFVybChyZXF1aXJlKFwicm9ib3RvLWZvbnRmYWNlL2ZvbnRzLy9yb2JvdG8vUm9ib3RvLUJsYWNrSXRhbGljLndvZmZcIikpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fMjRfX18gPSBnZXRVcmwocmVxdWlyZShcIkBmb3J0YXdlc29tZS9mb250YXdlc29tZS1mcmVlL3dlYmZvbnRzL2ZhLXNvbGlkLTkwMC5lb3RcIikpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fMjVfX18gPSBnZXRVcmwocmVxdWlyZShcIkBmb3J0YXdlc29tZS9mb250YXdlc29tZS1mcmVlL3dlYmZvbnRzL2ZhLXNvbGlkLTkwMC5lb3RcIikgKyBcIj8jaWVmaXhcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX18yNl9fXyA9IGdldFVybChyZXF1aXJlKFwiQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLWZyZWUvd2ViZm9udHMvZmEtc29saWQtOTAwLndvZmYyXCIpKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzI3X19fID0gZ2V0VXJsKHJlcXVpcmUoXCJAZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtZnJlZS93ZWJmb250cy9mYS1zb2xpZC05MDAud29mZlwiKSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX18yOF9fXyA9IGdldFVybChyZXF1aXJlKFwiQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLWZyZWUvd2ViZm9udHMvZmEtc29saWQtOTAwLnR0ZlwiKSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX18yOV9fXyA9IGdldFVybChyZXF1aXJlKFwiQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLWZyZWUvd2ViZm9udHMvZmEtc29saWQtOTAwLnN2Z1wiKSArIFwiI2ZvbnRhd2Vzb21lXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fMzBfX18gPSBnZXRVcmwocmVxdWlyZShcIkBmb3J0YXdlc29tZS9mb250YXdlc29tZS1mcmVlL3dlYmZvbnRzL2ZhLXJlZ3VsYXItNDAwLmVvdFwiKSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfX18zMV9fXyA9IGdldFVybChyZXF1aXJlKFwiQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLWZyZWUvd2ViZm9udHMvZmEtcmVndWxhci00MDAuZW90XCIpICsgXCI/I2llZml4XCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fMzJfX18gPSBnZXRVcmwocmVxdWlyZShcIkBmb3J0YXdlc29tZS9mb250YXdlc29tZS1mcmVlL3dlYmZvbnRzL2ZhLXJlZ3VsYXItNDAwLndvZmYyXCIpKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzMzX19fID0gZ2V0VXJsKHJlcXVpcmUoXCJAZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtZnJlZS93ZWJmb250cy9mYS1yZWd1bGFyLTQwMC53b2ZmXCIpKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzM0X19fID0gZ2V0VXJsKHJlcXVpcmUoXCJAZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtZnJlZS93ZWJmb250cy9mYS1yZWd1bGFyLTQwMC50dGZcIikpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fMzVfX18gPSBnZXRVcmwocmVxdWlyZShcIkBmb3J0YXdlc29tZS9mb250YXdlc29tZS1mcmVlL3dlYmZvbnRzL2ZhLXJlZ3VsYXItNDAwLnN2Z1wiKSArIFwiI2ZvbnRhd2Vzb21lXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fMzZfX18gPSBnZXRVcmwocmVxdWlyZShcIkBmb3J0YXdlc29tZS9mb250YXdlc29tZS1mcmVlL3dlYmZvbnRzL2ZhLWJyYW5kcy00MDAuZW90XCIpKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzM3X19fID0gZ2V0VXJsKHJlcXVpcmUoXCJAZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtZnJlZS93ZWJmb250cy9mYS1icmFuZHMtNDAwLmVvdFwiKSArIFwiPyNpZWZpeFwiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzM4X19fID0gZ2V0VXJsKHJlcXVpcmUoXCJAZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtZnJlZS93ZWJmb250cy9mYS1icmFuZHMtNDAwLndvZmYyXCIpKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzM5X19fID0gZ2V0VXJsKHJlcXVpcmUoXCJAZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtZnJlZS93ZWJmb250cy9mYS1icmFuZHMtNDAwLndvZmZcIikpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX19fNDBfX18gPSBnZXRVcmwocmVxdWlyZShcIkBmb3J0YXdlc29tZS9mb250YXdlc29tZS1mcmVlL3dlYmZvbnRzL2ZhLWJyYW5kcy00MDAudHRmXCIpKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9fXzQxX19fID0gZ2V0VXJsKHJlcXVpcmUoXCJAZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtZnJlZS93ZWJmb250cy9mYS1icmFuZHMtNDAwLnN2Z1wiKSArIFwiI2ZvbnRhd2Vzb21lXCIpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIvKiEgbm9ybWFsaXplLmNzcyB2OC4wLjEgfCBNSVQgTGljZW5zZSB8IGdpdGh1Yi5jb20vbmVjb2xhcy9ub3JtYWxpemUuY3NzICovXFxuLyogRG9jdW1lbnRcXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcbi8qKlxcbiAqIDEuIENvcnJlY3QgdGhlIGxpbmUgaGVpZ2h0IGluIGFsbCBicm93c2Vycy5cXG4gKiAyLiBQcmV2ZW50IGFkanVzdG1lbnRzIG9mIGZvbnQgc2l6ZSBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2VzIGluIGlPUy5cXG4gKi9cXG5odG1sIHtcXG4gIGxpbmUtaGVpZ2h0OiAxLjE1O1xcbiAgLyogMSAqL1xcbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xcbiAgLyogMiAqLyB9XFxuXFxuLyogU2VjdGlvbnNcXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcbi8qKlxcbiAqIFJlbW92ZSB0aGUgbWFyZ2luIGluIGFsbCBicm93c2Vycy5cXG4gKi9cXG5ib2R5IHtcXG4gIG1hcmdpbjogMDsgfVxcblxcbi8qKlxcbiAqIFJlbmRlciB0aGUgYG1haW5gIGVsZW1lbnQgY29uc2lzdGVudGx5IGluIElFLlxcbiAqL1xcbm1haW4ge1xcbiAgZGlzcGxheTogYmxvY2s7IH1cXG5cXG4vKipcXG4gKiBDb3JyZWN0IHRoZSBmb250IHNpemUgYW5kIG1hcmdpbiBvbiBgaDFgIGVsZW1lbnRzIHdpdGhpbiBgc2VjdGlvbmAgYW5kXFxuICogYGFydGljbGVgIGNvbnRleHRzIGluIENocm9tZSwgRmlyZWZveCwgYW5kIFNhZmFyaS5cXG4gKi9cXG5oMSB7XFxuICBmb250LXNpemU6IDJlbTtcXG4gIG1hcmdpbjogMC42N2VtIDA7IH1cXG5cXG4vKiBHcm91cGluZyBjb250ZW50XFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG4vKipcXG4gKiAxLiBBZGQgdGhlIGNvcnJlY3QgYm94IHNpemluZyBpbiBGaXJlZm94LlxcbiAqIDIuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UgYW5kIElFLlxcbiAqL1xcbmhyIHtcXG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xcbiAgLyogMSAqL1xcbiAgaGVpZ2h0OiAwO1xcbiAgLyogMSAqL1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICAvKiAyICovIH1cXG5cXG4vKipcXG4gKiAxLiBDb3JyZWN0IHRoZSBpbmhlcml0YW5jZSBhbmQgc2NhbGluZyBvZiBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxcbiAqIDIuIENvcnJlY3QgdGhlIG9kZCBgZW1gIGZvbnQgc2l6aW5nIGluIGFsbCBicm93c2Vycy5cXG4gKi9cXG5wcmUge1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlO1xcbiAgLyogMSAqL1xcbiAgZm9udC1zaXplOiAxZW07XFxuICAvKiAyICovIH1cXG5cXG4vKiBUZXh0LWxldmVsIHNlbWFudGljc1xcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuLyoqXFxuICogUmVtb3ZlIHRoZSBncmF5IGJhY2tncm91bmQgb24gYWN0aXZlIGxpbmtzIGluIElFIDEwLlxcbiAqL1xcbmEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cXG5cXG4vKipcXG4gKiAxLiBSZW1vdmUgdGhlIGJvdHRvbSBib3JkZXIgaW4gQ2hyb21lIDU3LVxcbiAqIDIuIEFkZCB0aGUgY29ycmVjdCB0ZXh0IGRlY29yYXRpb24gaW4gQ2hyb21lLCBFZGdlLCBJRSwgT3BlcmEsIGFuZCBTYWZhcmkuXFxuICovXFxuYWJiclt0aXRsZV0ge1xcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTtcXG4gIC8qIDEgKi9cXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcbiAgLyogMiAqL1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgZG90dGVkO1xcbiAgLyogMiAqLyB9XFxuXFxuLyoqXFxuICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgd2VpZ2h0IGluIENocm9tZSwgRWRnZSwgYW5kIFNhZmFyaS5cXG4gKi9cXG5iLFxcbnN0cm9uZyB7XFxuICBmb250LXdlaWdodDogYm9sZGVyOyB9XFxuXFxuLyoqXFxuICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXFxuICovXFxuY29kZSxcXG5rYmQsXFxuc2FtcCB7XFxuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XFxuICAvKiAxICovXFxuICBmb250LXNpemU6IDFlbTtcXG4gIC8qIDIgKi8gfVxcblxcbi8qKlxcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxcbiAqL1xcbnNtYWxsIHtcXG4gIGZvbnQtc2l6ZTogODAlOyB9XFxuXFxuLyoqXFxuICogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgZWxlbWVudHMgZnJvbSBhZmZlY3RpbmcgdGhlIGxpbmUgaGVpZ2h0IGluXFxuICogYWxsIGJyb3dzZXJzLlxcbiAqL1xcbnN1YixcXG5zdXAge1xcbiAgZm9udC1zaXplOiA3NSU7XFxuICBsaW5lLWhlaWdodDogMDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgfVxcblxcbnN1YiB7XFxuICBib3R0b206IC0wLjI1ZW07IH1cXG5cXG5zdXAge1xcbiAgdG9wOiAtMC41ZW07IH1cXG5cXG4vKiBFbWJlZGRlZCBjb250ZW50XFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG4vKipcXG4gKiBSZW1vdmUgdGhlIGJvcmRlciBvbiBpbWFnZXMgaW5zaWRlIGxpbmtzIGluIElFIDEwLlxcbiAqL1xcbmltZyB7XFxuICBib3JkZXItc3R5bGU6IG5vbmU7IH1cXG5cXG4vKiBGb3Jtc1xcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuLyoqXFxuICogMS4gQ2hhbmdlIHRoZSBmb250IHN0eWxlcyBpbiBhbGwgYnJvd3NlcnMuXFxuICogMi4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gRmlyZWZveCBhbmQgU2FmYXJpLlxcbiAqL1xcbmJ1dHRvbixcXG5pbnB1dCxcXG5vcHRncm91cCxcXG5zZWxlY3QsXFxudGV4dGFyZWEge1xcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XFxuICAvKiAxICovXFxuICBmb250LXNpemU6IDEwMCU7XFxuICAvKiAxICovXFxuICBsaW5lLWhlaWdodDogMS4xNTtcXG4gIC8qIDEgKi9cXG4gIG1hcmdpbjogMDtcXG4gIC8qIDIgKi8gfVxcblxcbi8qKlxcbiAqIFNob3cgdGhlIG92ZXJmbG93IGluIElFLlxcbiAqIDEuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UuXFxuICovXFxuYnV0dG9uLFxcbmlucHV0IHtcXG4gIC8qIDEgKi9cXG4gIG92ZXJmbG93OiB2aXNpYmxlOyB9XFxuXFxuLyoqXFxuICogUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBFZGdlLCBGaXJlZm94LCBhbmQgSUUuXFxuICogMS4gUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBGaXJlZm94LlxcbiAqL1xcbmJ1dHRvbixcXG5zZWxlY3Qge1xcbiAgLyogMSAqL1xcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7IH1cXG5cXG4vKipcXG4gKiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxcbiAqL1xcbmJ1dHRvbixcXG5bdHlwZT1cXFwiYnV0dG9uXFxcIl0sXFxuW3R5cGU9XFxcInJlc2V0XFxcIl0sXFxuW3R5cGU9XFxcInN1Ym1pdFxcXCJdIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyB9XFxuXFxuLyoqXFxuICogUmVtb3ZlIHRoZSBpbm5lciBib3JkZXIgYW5kIHBhZGRpbmcgaW4gRmlyZWZveC5cXG4gKi9cXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXFxuW3R5cGU9XFxcImJ1dHRvblxcXCJdOjotbW96LWZvY3VzLWlubmVyLFxcblt0eXBlPVxcXCJyZXNldFxcXCJdOjotbW96LWZvY3VzLWlubmVyLFxcblt0eXBlPVxcXCJzdWJtaXRcXFwiXTo6LW1vei1mb2N1cy1pbm5lciB7XFxuICBib3JkZXItc3R5bGU6IG5vbmU7XFxuICBwYWRkaW5nOiAwOyB9XFxuXFxuLyoqXFxuICogUmVzdG9yZSB0aGUgZm9jdXMgc3R5bGVzIHVuc2V0IGJ5IHRoZSBwcmV2aW91cyBydWxlLlxcbiAqL1xcbmJ1dHRvbjotbW96LWZvY3VzcmluZyxcXG5bdHlwZT1cXFwiYnV0dG9uXFxcIl06LW1vei1mb2N1c3JpbmcsXFxuW3R5cGU9XFxcInJlc2V0XFxcIl06LW1vei1mb2N1c3JpbmcsXFxuW3R5cGU9XFxcInN1Ym1pdFxcXCJdOi1tb3otZm9jdXNyaW5nIHtcXG4gIG91dGxpbmU6IDFweCBkb3R0ZWQgQnV0dG9uVGV4dDsgfVxcblxcbi8qKlxcbiAqIENvcnJlY3QgdGhlIHBhZGRpbmcgaW4gRmlyZWZveC5cXG4gKi9cXG5maWVsZHNldCB7XFxuICBwYWRkaW5nOiAwLjM1ZW0gMC43NWVtIDAuNjI1ZW07IH1cXG5cXG4vKipcXG4gKiAxLiBDb3JyZWN0IHRoZSB0ZXh0IHdyYXBwaW5nIGluIEVkZ2UgYW5kIElFLlxcbiAqIDIuIENvcnJlY3QgdGhlIGNvbG9yIGluaGVyaXRhbmNlIGZyb20gYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBJRS5cXG4gKiAzLiBSZW1vdmUgdGhlIHBhZGRpbmcgc28gZGV2ZWxvcGVycyBhcmUgbm90IGNhdWdodCBvdXQgd2hlbiB0aGV5IHplcm8gb3V0XFxuICogICAgYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBhbGwgYnJvd3NlcnMuXFxuICovXFxubGVnZW5kIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAvKiAxICovXFxuICBjb2xvcjogaW5oZXJpdDtcXG4gIC8qIDIgKi9cXG4gIGRpc3BsYXk6IHRhYmxlO1xcbiAgLyogMSAqL1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgLyogMSAqL1xcbiAgcGFkZGluZzogMDtcXG4gIC8qIDMgKi9cXG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XFxuICAvKiAxICovIH1cXG5cXG4vKipcXG4gKiBBZGQgdGhlIGNvcnJlY3QgdmVydGljYWwgYWxpZ25tZW50IGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLlxcbiAqL1xcbnByb2dyZXNzIHtcXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgfVxcblxcbi8qKlxcbiAqIFJlbW92ZSB0aGUgZGVmYXVsdCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gSUUgMTArLlxcbiAqL1xcbnRleHRhcmVhIHtcXG4gIG92ZXJmbG93OiBhdXRvOyB9XFxuXFxuLyoqXFxuICogMS4gQWRkIHRoZSBjb3JyZWN0IGJveCBzaXppbmcgaW4gSUUgMTAuXFxuICogMi4gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIElFIDEwLlxcbiAqL1xcblt0eXBlPVxcXCJjaGVja2JveFxcXCJdLFxcblt0eXBlPVxcXCJyYWRpb1xcXCJdIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAvKiAxICovXFxuICBwYWRkaW5nOiAwO1xcbiAgLyogMiAqLyB9XFxuXFxuLyoqXFxuICogQ29ycmVjdCB0aGUgY3Vyc29yIHN0eWxlIG9mIGluY3JlbWVudCBhbmQgZGVjcmVtZW50IGJ1dHRvbnMgaW4gQ2hyb21lLlxcbiAqL1xcblt0eXBlPVxcXCJudW1iZXJcXFwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcXG5bdHlwZT1cXFwibnVtYmVyXFxcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xcbiAgaGVpZ2h0OiBhdXRvOyB9XFxuXFxuLyoqXFxuICogMS4gQ29ycmVjdCB0aGUgb2RkIGFwcGVhcmFuY2UgaW4gQ2hyb21lIGFuZCBTYWZhcmkuXFxuICogMi4gQ29ycmVjdCB0aGUgb3V0bGluZSBzdHlsZSBpbiBTYWZhcmkuXFxuICovXFxuW3R5cGU9XFxcInNlYXJjaFxcXCJdIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xcbiAgLyogMSAqL1xcbiAgb3V0bGluZS1vZmZzZXQ6IC0ycHg7XFxuICAvKiAyICovIH1cXG5cXG4vKipcXG4gKiBSZW1vdmUgdGhlIGlubmVyIHBhZGRpbmcgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gbWFjT1MuXFxuICovXFxuW3R5cGU9XFxcInNlYXJjaFxcXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsgfVxcblxcbi8qKlxcbiAqIDEuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXFxuICogMi4gQ2hhbmdlIGZvbnQgcHJvcGVydGllcyB0byBgaW5oZXJpdGAgaW4gU2FmYXJpLlxcbiAqL1xcbjo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b24ge1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247XFxuICAvKiAxICovXFxuICBmb250OiBpbmhlcml0O1xcbiAgLyogMiAqLyB9XFxuXFxuLyogSW50ZXJhY3RpdmVcXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcbi8qXFxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gRWRnZSwgSUUgMTArLCBhbmQgRmlyZWZveC5cXG4gKi9cXG5kZXRhaWxzIHtcXG4gIGRpc3BsYXk6IGJsb2NrOyB9XFxuXFxuLypcXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBhbGwgYnJvd3NlcnMuXFxuICovXFxuc3VtbWFyeSB7XFxuICBkaXNwbGF5OiBsaXN0LWl0ZW07IH1cXG5cXG4vKiBNaXNjXFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG4vKipcXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSAxMCsuXFxuICovXFxudGVtcGxhdGUge1xcbiAgZGlzcGxheTogbm9uZTsgfVxcblxcbi8qKlxcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDEwLlxcbiAqL1xcbltoaWRkZW5dIHtcXG4gIGRpc3BsYXk6IG5vbmU7IH1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUm9ib3RvXFxcIjtcXG4gIHNyYzogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18wX19fICsgXCIpIGZvcm1hdChcXFwid29mZjJcXFwiKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18xX19fICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDsgfVxcblxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJSb2JvdG8tUmVndWxhclxcXCI7XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMF9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmYyXFxcIiksIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMV9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKTsgfVxcblxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJSb2JvdG9cXFwiO1xcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzJfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpLCB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzNfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIik7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgZm9udC1zdHlsZTogaXRhbGljOyB9XFxuXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIlJvYm90by1SZWd1bGFySXRhbGljXFxcIjtcXG4gIHNyYzogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18yX19fICsgXCIpIGZvcm1hdChcXFwid29mZjJcXFwiKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18zX19fICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpOyB9XFxuXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIlJvYm90b1xcXCI7XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fNF9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmYyXFxcIiksIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fNV9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKTtcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxuICBmb250LXN0eWxlOiBub3JtYWw7IH1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUm9ib3RvLUxpZ2h0XFxcIjtcXG4gIHNyYzogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX180X19fICsgXCIpIGZvcm1hdChcXFwid29mZjJcXFwiKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX181X19fICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpOyB9XFxuXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIlJvYm90b1xcXCI7XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fNl9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmYyXFxcIiksIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fN19fXyArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKTtcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7IH1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUm9ib3RvLUxpZ2h0SXRhbGljXFxcIjtcXG4gIHNyYzogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX182X19fICsgXCIpIGZvcm1hdChcXFwid29mZjJcXFwiKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX183X19fICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpOyB9XFxuXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIlJvYm90b1xcXCI7XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fOF9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmYyXFxcIiksIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fOV9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKTtcXG4gIGZvbnQtd2VpZ2h0OiAxMDA7XFxuICBmb250LXN0eWxlOiBub3JtYWw7IH1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUm9ib3RvLVRoaW5cXFwiO1xcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzhfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpLCB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzlfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIik7IH1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUm9ib3RvXFxcIjtcXG4gIHNyYzogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18xMF9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmYyXFxcIiksIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMTFfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIik7XFxuICBmb250LXdlaWdodDogMTAwO1xcbiAgZm9udC1zdHlsZTogaXRhbGljOyB9XFxuXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIlJvYm90by1UaGluSXRhbGljXFxcIjtcXG4gIHNyYzogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18xMF9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmYyXFxcIiksIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMTFfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIik7IH1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUm9ib3RvXFxcIjtcXG4gIHNyYzogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18xMl9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmYyXFxcIiksIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMTNfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIik7XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsOyB9XFxuXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIlJvYm90by1NZWRpdW1cXFwiO1xcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzEyX19fICsgXCIpIGZvcm1hdChcXFwid29mZjJcXFwiKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18xM19fXyArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKTsgfVxcblxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJSb2JvdG9cXFwiO1xcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzE0X19fICsgXCIpIGZvcm1hdChcXFwid29mZjJcXFwiKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18xNV9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKTtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7IH1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUm9ib3RvLU1lZGl1bUl0YWxpY1xcXCI7XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMTRfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpLCB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzE1X19fICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpOyB9XFxuXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIlJvYm90b1xcXCI7XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMTZfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpLCB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzE3X19fICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpO1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDsgfVxcblxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJSb2JvdG8tQm9sZFxcXCI7XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMTZfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpLCB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzE3X19fICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpOyB9XFxuXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIlJvYm90b1xcXCI7XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMThfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpLCB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzE5X19fICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpO1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYzsgfVxcblxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJSb2JvdG8tQm9sZEl0YWxpY1xcXCI7XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMThfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpLCB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzE5X19fICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpOyB9XFxuXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIlJvYm90b1xcXCI7XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMjBfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpLCB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzIxX19fICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpO1xcbiAgZm9udC13ZWlnaHQ6IDkwMDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDsgfVxcblxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJSb2JvdG8tQmxhY2tcXFwiO1xcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzIwX19fICsgXCIpIGZvcm1hdChcXFwid29mZjJcXFwiKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18yMV9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKTsgfVxcblxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJSb2JvdG9cXFwiO1xcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzIyX19fICsgXCIpIGZvcm1hdChcXFwid29mZjJcXFwiKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18yM19fXyArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKTtcXG4gIGZvbnQtd2VpZ2h0OiA5MDA7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7IH1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUm9ib3RvLUJsYWNrSXRhbGljXFxcIjtcXG4gIHNyYzogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18yMl9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmYyXFxcIiksIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMjNfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIik7IH1cXG5cXG4vKiFcXG4gKiBGb250IEF3ZXNvbWUgRnJlZSA1LjkuMCBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbVxcbiAqIExpY2Vuc2UgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbS9saWNlbnNlL2ZyZWUgKEljb25zOiBDQyBCWSA0LjAsIEZvbnRzOiBTSUwgT0ZMIDEuMSwgQ29kZTogTUlUIExpY2Vuc2UpXFxuICovXFxuLmZhLFxcbi5mYXMsXFxuLmZhcixcXG4uZmFsLFxcbi5mYWIge1xcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC12YXJpYW50OiBub3JtYWw7XFxuICB0ZXh0LXJlbmRlcmluZzogYXV0bztcXG4gIGxpbmUtaGVpZ2h0OiAxOyB9XFxuXFxuLmZhLWxnIHtcXG4gIGZvbnQtc2l6ZTogMS4zMzMzM2VtO1xcbiAgbGluZS1oZWlnaHQ6IDAuNzVlbTtcXG4gIHZlcnRpY2FsLWFsaWduOiAtLjA2NjdlbTsgfVxcblxcbi5mYS14cyB7XFxuICBmb250LXNpemU6IC43NWVtOyB9XFxuXFxuLmZhLXNtIHtcXG4gIGZvbnQtc2l6ZTogLjg3NWVtOyB9XFxuXFxuLmZhLTF4IHtcXG4gIGZvbnQtc2l6ZTogMWVtOyB9XFxuXFxuLmZhLTJ4IHtcXG4gIGZvbnQtc2l6ZTogMmVtOyB9XFxuXFxuLmZhLTN4IHtcXG4gIGZvbnQtc2l6ZTogM2VtOyB9XFxuXFxuLmZhLTR4IHtcXG4gIGZvbnQtc2l6ZTogNGVtOyB9XFxuXFxuLmZhLTV4IHtcXG4gIGZvbnQtc2l6ZTogNWVtOyB9XFxuXFxuLmZhLTZ4IHtcXG4gIGZvbnQtc2l6ZTogNmVtOyB9XFxuXFxuLmZhLTd4IHtcXG4gIGZvbnQtc2l6ZTogN2VtOyB9XFxuXFxuLmZhLTh4IHtcXG4gIGZvbnQtc2l6ZTogOGVtOyB9XFxuXFxuLmZhLTl4IHtcXG4gIGZvbnQtc2l6ZTogOWVtOyB9XFxuXFxuLmZhLTEweCB7XFxuICBmb250LXNpemU6IDEwZW07IH1cXG5cXG4uZmEtZncge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgd2lkdGg6IDEuMjVlbTsgfVxcblxcbi5mYS11bCB7XFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxuICBtYXJnaW4tbGVmdDogMi41ZW07XFxuICBwYWRkaW5nLWxlZnQ6IDA7IH1cXG4gIC5mYS11bCA+IGxpIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlOyB9XFxuXFxuLmZhLWxpIHtcXG4gIGxlZnQ6IC0yZW07XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB3aWR0aDogMmVtO1xcbiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7IH1cXG5cXG4uZmEtYm9yZGVyIHtcXG4gIGJvcmRlcjogc29saWQgMC4wOGVtICNlZWU7XFxuICBib3JkZXItcmFkaXVzOiAuMWVtO1xcbiAgcGFkZGluZzogLjJlbSAuMjVlbSAuMTVlbTsgfVxcblxcbi5mYS1wdWxsLWxlZnQge1xcbiAgZmxvYXQ6IGxlZnQ7IH1cXG5cXG4uZmEtcHVsbC1yaWdodCB7XFxuICBmbG9hdDogcmlnaHQ7IH1cXG5cXG4uZmEuZmEtcHVsbC1sZWZ0LFxcbi5mYXMuZmEtcHVsbC1sZWZ0LFxcbi5mYXIuZmEtcHVsbC1sZWZ0LFxcbi5mYWwuZmEtcHVsbC1sZWZ0LFxcbi5mYWIuZmEtcHVsbC1sZWZ0IHtcXG4gIG1hcmdpbi1yaWdodDogLjNlbTsgfVxcblxcbi5mYS5mYS1wdWxsLXJpZ2h0LFxcbi5mYXMuZmEtcHVsbC1yaWdodCxcXG4uZmFyLmZhLXB1bGwtcmlnaHQsXFxuLmZhbC5mYS1wdWxsLXJpZ2h0LFxcbi5mYWIuZmEtcHVsbC1yaWdodCB7XFxuICBtYXJnaW4tbGVmdDogLjNlbTsgfVxcblxcbi5mYS1zcGluIHtcXG4gIGFuaW1hdGlvbjogZmEtc3BpbiAycyBpbmZpbml0ZSBsaW5lYXI7IH1cXG5cXG4uZmEtcHVsc2Uge1xcbiAgYW5pbWF0aW9uOiBmYS1zcGluIDFzIGluZmluaXRlIHN0ZXBzKDgpOyB9XFxuXFxuQGtleWZyYW1lcyBmYS1zcGluIHtcXG4gIDAlIHtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH1cXG4gIDEwMCUge1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB9IH1cXG5cXG4uZmEtcm90YXRlLTkwIHtcXG4gIC1tcy1maWx0ZXI6IFxcXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQmFzaWNJbWFnZShyb3RhdGlvbj0xKVxcXCI7XFxuICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7IH1cXG5cXG4uZmEtcm90YXRlLTE4MCB7XFxuICAtbXMtZmlsdGVyOiBcXFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkJhc2ljSW1hZ2Uocm90YXRpb249MilcXFwiO1xcbiAgdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTsgfVxcblxcbi5mYS1yb3RhdGUtMjcwIHtcXG4gIC1tcy1maWx0ZXI6IFxcXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQmFzaWNJbWFnZShyb3RhdGlvbj0zKVxcXCI7XFxuICB0cmFuc2Zvcm06IHJvdGF0ZSgyNzBkZWcpOyB9XFxuXFxuLmZhLWZsaXAtaG9yaXpvbnRhbCB7XFxuICAtbXMtZmlsdGVyOiBcXFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkJhc2ljSW1hZ2Uocm90YXRpb249MCwgbWlycm9yPTEpXFxcIjtcXG4gIHRyYW5zZm9ybTogc2NhbGUoLTEsIDEpOyB9XFxuXFxuLmZhLWZsaXAtdmVydGljYWwge1xcbiAgLW1zLWZpbHRlcjogXFxcInByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5CYXNpY0ltYWdlKHJvdGF0aW9uPTIsIG1pcnJvcj0xKVxcXCI7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDEsIC0xKTsgfVxcblxcbi5mYS1mbGlwLWJvdGgsIC5mYS1mbGlwLWhvcml6b250YWwuZmEtZmxpcC12ZXJ0aWNhbCB7XFxuICAtbXMtZmlsdGVyOiBcXFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkJhc2ljSW1hZ2Uocm90YXRpb249MiwgbWlycm9yPTEpXFxcIjtcXG4gIHRyYW5zZm9ybTogc2NhbGUoLTEsIC0xKTsgfVxcblxcbjpyb290IC5mYS1yb3RhdGUtOTAsXFxuOnJvb3QgLmZhLXJvdGF0ZS0xODAsXFxuOnJvb3QgLmZhLXJvdGF0ZS0yNzAsXFxuOnJvb3QgLmZhLWZsaXAtaG9yaXpvbnRhbCxcXG46cm9vdCAuZmEtZmxpcC12ZXJ0aWNhbCxcXG46cm9vdCAuZmEtZmxpcC1ib3RoIHtcXG4gIGZpbHRlcjogbm9uZTsgfVxcblxcbi5mYS1zdGFjayB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBoZWlnaHQ6IDJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAyZW07XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgd2lkdGg6IDIuNWVtOyB9XFxuXFxuLmZhLXN0YWNrLTF4LFxcbi5mYS1zdGFjay0yeCB7XFxuICBsZWZ0OiAwO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgd2lkdGg6IDEwMCU7IH1cXG5cXG4uZmEtc3RhY2stMXgge1xcbiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7IH1cXG5cXG4uZmEtc3RhY2stMngge1xcbiAgZm9udC1zaXplOiAyZW07IH1cXG5cXG4uZmEtaW52ZXJzZSB7XFxuICBjb2xvcjogI2ZmZjsgfVxcblxcbi8qIEZvbnQgQXdlc29tZSB1c2VzIHRoZSBVbmljb2RlIFByaXZhdGUgVXNlIEFyZWEgKFBVQSkgdG8gZW5zdXJlIHNjcmVlblxcbnJlYWRlcnMgZG8gbm90IHJlYWQgb2ZmIHJhbmRvbSBjaGFyYWN0ZXJzIHRoYXQgcmVwcmVzZW50IGljb25zICovXFxuLmZhLTUwMHB4OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyNmVcXFwiOyB9XFxuXFxuLmZhLWFjY2Vzc2libGUtaWNvbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzY4XFxcIjsgfVxcblxcbi5mYS1hY2N1c29mdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzY5XFxcIjsgfVxcblxcbi5mYS1hY3F1aXNpdGlvbnMtaW5jb3Jwb3JhdGVkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2YWZcXFwiOyB9XFxuXFxuLmZhLWFkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2NDFcXFwiOyB9XFxuXFxuLmZhLWFkZHJlc3MtYm9vazpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmI5XFxcIjsgfVxcblxcbi5mYS1hZGRyZXNzLWNhcmQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJiYlxcXCI7IH1cXG5cXG4uZmEtYWRqdXN0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwNDJcXFwiOyB9XFxuXFxuLmZhLWFkbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTcwXFxcIjsgfVxcblxcbi5mYS1hZG9iZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzc4XFxcIjsgfVxcblxcbi5mYS1hZHZlcnNhbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzZhXFxcIjsgfVxcblxcbi5mYS1hZmZpbGlhdGV0aGVtZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzZiXFxcIjsgfVxcblxcbi5mYS1haXItZnJlc2hlbmVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1ZDBcXFwiOyB9XFxuXFxuLmZhLWFpcmJuYjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmODM0XFxcIjsgfVxcblxcbi5mYS1hbGdvbGlhOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzNmNcXFwiOyB9XFxuXFxuLmZhLWFsaWduLWNlbnRlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDM3XFxcIjsgfVxcblxcbi5mYS1hbGlnbi1qdXN0aWZ5OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwMzlcXFwiOyB9XFxuXFxuLmZhLWFsaWduLWxlZnQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjAzNlxcXCI7IH1cXG5cXG4uZmEtYWxpZ24tcmlnaHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjAzOFxcXCI7IH1cXG5cXG4uZmEtYWxpcGF5OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2NDJcXFwiOyB9XFxuXFxuLmZhLWFsbGVyZ2llczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDYxXFxcIjsgfVxcblxcbi5mYS1hbWF6b246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI3MFxcXCI7IH1cXG5cXG4uZmEtYW1hem9uLXBheTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDJjXFxcIjsgfVxcblxcbi5mYS1hbWJ1bGFuY2U6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBmOVxcXCI7IH1cXG5cXG4uZmEtYW1lcmljYW4tc2lnbi1sYW5ndWFnZS1pbnRlcnByZXRpbmc6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJhM1xcXCI7IH1cXG5cXG4uZmEtYW1pbGlhOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzNmRcXFwiOyB9XFxuXFxuLmZhLWFuY2hvcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTNkXFxcIjsgfVxcblxcbi5mYS1hbmRyb2lkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxN2JcXFwiOyB9XFxuXFxuLmZhLWFuZ2VsbGlzdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjA5XFxcIjsgfVxcblxcbi5mYS1hbmdsZS1kb3VibGUtZG93bjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTAzXFxcIjsgfVxcblxcbi5mYS1hbmdsZS1kb3VibGUtbGVmdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTAwXFxcIjsgfVxcblxcbi5mYS1hbmdsZS1kb3VibGUtcmlnaHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjEwMVxcXCI7IH1cXG5cXG4uZmEtYW5nbGUtZG91YmxlLXVwOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxMDJcXFwiOyB9XFxuXFxuLmZhLWFuZ2xlLWRvd246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjEwN1xcXCI7IH1cXG5cXG4uZmEtYW5nbGUtbGVmdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTA0XFxcIjsgfVxcblxcbi5mYS1hbmdsZS1yaWdodDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTA1XFxcIjsgfVxcblxcbi5mYS1hbmdsZS11cDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTA2XFxcIjsgfVxcblxcbi5mYS1hbmdyeTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTU2XFxcIjsgfVxcblxcbi5mYS1hbmdyeWNyZWF0aXZlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzNmVcXFwiOyB9XFxuXFxuLmZhLWFuZ3VsYXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQyMFxcXCI7IH1cXG5cXG4uZmEtYW5raDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNjQ0XFxcIjsgfVxcblxcbi5mYS1hcHAtc3RvcmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjM2ZlxcXCI7IH1cXG5cXG4uZmEtYXBwLXN0b3JlLWlvczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzcwXFxcIjsgfVxcblxcbi5mYS1hcHBlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzcxXFxcIjsgfVxcblxcbi5mYS1hcHBsZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTc5XFxcIjsgfVxcblxcbi5mYS1hcHBsZS1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjVkMVxcXCI7IH1cXG5cXG4uZmEtYXBwbGUtcGF5OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0MTVcXFwiOyB9XFxuXFxuLmZhLWFyY2hpdmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE4N1xcXCI7IH1cXG5cXG4uZmEtYXJjaHdheTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTU3XFxcIjsgfVxcblxcbi5mYS1hcnJvdy1hbHQtY2lyY2xlLWRvd246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjM1OFxcXCI7IH1cXG5cXG4uZmEtYXJyb3ctYWx0LWNpcmNsZS1sZWZ0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzNTlcXFwiOyB9XFxuXFxuLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjM1YVxcXCI7IH1cXG5cXG4uZmEtYXJyb3ctYWx0LWNpcmNsZS11cDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzViXFxcIjsgfVxcblxcbi5mYS1hcnJvdy1jaXJjbGUtZG93bjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGFiXFxcIjsgfVxcblxcbi5mYS1hcnJvdy1jaXJjbGUtbGVmdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGE4XFxcIjsgfVxcblxcbi5mYS1hcnJvdy1jaXJjbGUtcmlnaHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBhOVxcXCI7IH1cXG5cXG4uZmEtYXJyb3ctY2lyY2xlLXVwOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwYWFcXFwiOyB9XFxuXFxuLmZhLWFycm93LWRvd246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA2M1xcXCI7IH1cXG5cXG4uZmEtYXJyb3ctbGVmdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDYwXFxcIjsgfVxcblxcbi5mYS1hcnJvdy1yaWdodDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDYxXFxcIjsgfVxcblxcbi5mYS1hcnJvdy11cDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDYyXFxcIjsgfVxcblxcbi5mYS1hcnJvd3MtYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwYjJcXFwiOyB9XFxuXFxuLmZhLWFycm93cy1hbHQtaDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzM3XFxcIjsgfVxcblxcbi5mYS1hcnJvd3MtYWx0LXY6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjMzOFxcXCI7IH1cXG5cXG4uZmEtYXJ0c3RhdGlvbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzdhXFxcIjsgfVxcblxcbi5mYS1hc3Npc3RpdmUtbGlzdGVuaW5nLXN5c3RlbXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJhMlxcXCI7IH1cXG5cXG4uZmEtYXN0ZXJpc2s6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA2OVxcXCI7IH1cXG5cXG4uZmEtYXN5bW1ldHJpazpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzcyXFxcIjsgfVxcblxcbi5mYS1hdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWZhXFxcIjsgfVxcblxcbi5mYS1hdGxhczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTU4XFxcIjsgfVxcblxcbi5mYS1hdGxhc3NpYW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjc3YlxcXCI7IH1cXG5cXG4uZmEtYXRvbTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNWQyXFxcIjsgfVxcblxcbi5mYS1hdWRpYmxlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzNzNcXFwiOyB9XFxuXFxuLmZhLWF1ZGlvLWRlc2NyaXB0aW9uOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyOWVcXFwiOyB9XFxuXFxuLmZhLWF1dG9wcmVmaXhlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDFjXFxcIjsgfVxcblxcbi5mYS1hdmlhbmV4OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzNzRcXFwiOyB9XFxuXFxuLmZhLWF2aWF0bzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDIxXFxcIjsgfVxcblxcbi5mYS1hd2FyZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTU5XFxcIjsgfVxcblxcbi5mYS1hd3M6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjM3NVxcXCI7IH1cXG5cXG4uZmEtYmFieTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzdjXFxcIjsgfVxcblxcbi5mYS1iYWJ5LWNhcnJpYWdlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3N2RcXFwiOyB9XFxuXFxuLmZhLWJhY2tzcGFjZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTVhXFxcIjsgfVxcblxcbi5mYS1iYWNrd2FyZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDRhXFxcIjsgfVxcblxcbi5mYS1iYWNvbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2U1XFxcIjsgfVxcblxcbi5mYS1iYWxhbmNlLXNjYWxlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyNGVcXFwiOyB9XFxuXFxuLmZhLWJhbGFuY2Utc2NhbGUtbGVmdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTE1XFxcIjsgfVxcblxcbi5mYS1iYWxhbmNlLXNjYWxlLXJpZ2h0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1MTZcXFwiOyB9XFxuXFxuLmZhLWJhbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDVlXFxcIjsgfVxcblxcbi5mYS1iYW5kLWFpZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDYyXFxcIjsgfVxcblxcbi5mYS1iYW5kY2FtcDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmQ1XFxcIjsgfVxcblxcbi5mYS1iYXJjb2RlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwMmFcXFwiOyB9XFxuXFxuLmZhLWJhcnM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBjOVxcXCI7IH1cXG5cXG4uZmEtYmFzZWJhbGwtYmFsbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDMzXFxcIjsgfVxcblxcbi5mYS1iYXNrZXRiYWxsLWJhbGw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQzNFxcXCI7IH1cXG5cXG4uZmEtYmF0aDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmNkXFxcIjsgfVxcblxcbi5mYS1iYXR0ZXJ5LWVtcHR5OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyNDRcXFwiOyB9XFxuXFxuLmZhLWJhdHRlcnktZnVsbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjQwXFxcIjsgfVxcblxcbi5mYS1iYXR0ZXJ5LWhhbGY6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI0MlxcXCI7IH1cXG5cXG4uZmEtYmF0dGVyeS1xdWFydGVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyNDNcXFwiOyB9XFxuXFxuLmZhLWJhdHRlcnktdGhyZWUtcXVhcnRlcnM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI0MVxcXCI7IH1cXG5cXG4uZmEtYmF0dGxlLW5ldDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmODM1XFxcIjsgfVxcblxcbi5mYS1iZWQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjIzNlxcXCI7IH1cXG5cXG4uZmEtYmVlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGZjXFxcIjsgfVxcblxcbi5mYS1iZWhhbmNlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxYjRcXFwiOyB9XFxuXFxuLmZhLWJlaGFuY2Utc3F1YXJlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxYjVcXFwiOyB9XFxuXFxuLmZhLWJlbGw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBmM1xcXCI7IH1cXG5cXG4uZmEtYmVsbC1zbGFzaDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWY2XFxcIjsgfVxcblxcbi5mYS1iZXppZXItY3VydmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU1YlxcXCI7IH1cXG5cXG4uZmEtYmlibGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjY0N1xcXCI7IH1cXG5cXG4uZmEtYmljeWNsZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjA2XFxcIjsgfVxcblxcbi5mYS1iaWtpbmc6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjg0YVxcXCI7IH1cXG5cXG4uZmEtYmltb2JqZWN0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzNzhcXFwiOyB9XFxuXFxuLmZhLWJpbm9jdWxhcnM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFlNVxcXCI7IH1cXG5cXG4uZmEtYmlvaGF6YXJkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3ODBcXFwiOyB9XFxuXFxuLmZhLWJpcnRoZGF5LWNha2U6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFmZFxcXCI7IH1cXG5cXG4uZmEtYml0YnVja2V0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxNzFcXFwiOyB9XFxuXFxuLmZhLWJpdGNvaW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjM3OVxcXCI7IH1cXG5cXG4uZmEtYml0eTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzdhXFxcIjsgfVxcblxcbi5mYS1ibGFjay10aWU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI3ZVxcXCI7IH1cXG5cXG4uZmEtYmxhY2tiZXJyeTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzdiXFxcIjsgfVxcblxcbi5mYS1ibGVuZGVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1MTdcXFwiOyB9XFxuXFxuLmZhLWJsZW5kZXItcGhvbmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjZiNlxcXCI7IH1cXG5cXG4uZmEtYmxpbmQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI5ZFxcXCI7IH1cXG5cXG4uZmEtYmxvZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzgxXFxcIjsgfVxcblxcbi5mYS1ibG9nZ2VyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzN2NcXFwiOyB9XFxuXFxuLmZhLWJsb2dnZXItYjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzdkXFxcIjsgfVxcblxcbi5mYS1ibHVldG9vdGg6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI5M1xcXCI7IH1cXG5cXG4uZmEtYmx1ZXRvb3RoLWI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI5NFxcXCI7IH1cXG5cXG4uZmEtYm9sZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDMyXFxcIjsgfVxcblxcbi5mYS1ib2x0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwZTdcXFwiOyB9XFxuXFxuLmZhLWJvbWI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFlMlxcXCI7IH1cXG5cXG4uZmEtYm9uZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNWQ3XFxcIjsgfVxcblxcbi5mYS1ib25nOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1NWNcXFwiOyB9XFxuXFxuLmZhLWJvb2s6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjAyZFxcXCI7IH1cXG5cXG4uZmEtYm9vay1kZWFkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2YjdcXFwiOyB9XFxuXFxuLmZhLWJvb2stbWVkaWNhbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2U2XFxcIjsgfVxcblxcbi5mYS1ib29rLW9wZW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUxOFxcXCI7IH1cXG5cXG4uZmEtYm9vay1yZWFkZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjVkYVxcXCI7IH1cXG5cXG4uZmEtYm9va21hcms6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjAyZVxcXCI7IH1cXG5cXG4uZmEtYm9vdHN0cmFwOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY4MzZcXFwiOyB9XFxuXFxuLmZhLWJvcmRlci1hbGw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjg0Y1xcXCI7IH1cXG5cXG4uZmEtYm9yZGVyLW5vbmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjg1MFxcXCI7IH1cXG5cXG4uZmEtYm9yZGVyLXN0eWxlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY4NTNcXFwiOyB9XFxuXFxuLmZhLWJvd2xpbmctYmFsbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDM2XFxcIjsgfVxcblxcbi5mYS1ib3g6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQ2NlxcXCI7IH1cXG5cXG4uZmEtYm94LW9wZW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQ5ZVxcXCI7IH1cXG5cXG4uZmEtYm94ZXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQ2OFxcXCI7IH1cXG5cXG4uZmEtYnJhaWxsZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmExXFxcIjsgfVxcblxcbi5mYS1icmFpbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNWRjXFxcIjsgfVxcblxcbi5mYS1icmVhZC1zbGljZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2VjXFxcIjsgfVxcblxcbi5mYS1icmllZmNhc2U6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBiMVxcXCI7IH1cXG5cXG4uZmEtYnJpZWZjYXNlLW1lZGljYWw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQ2OVxcXCI7IH1cXG5cXG4uZmEtYnJvYWRjYXN0LXRvd2VyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1MTlcXFwiOyB9XFxuXFxuLmZhLWJyb29tOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1MWFcXFwiOyB9XFxuXFxuLmZhLWJydXNoOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1NWRcXFwiOyB9XFxuXFxuLmZhLWJ0YzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTVhXFxcIjsgfVxcblxcbi5mYS1idWZmZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjgzN1xcXCI7IH1cXG5cXG4uZmEtYnVnOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxODhcXFwiOyB9XFxuXFxuLmZhLWJ1aWxkaW5nOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxYWRcXFwiOyB9XFxuXFxuLmZhLWJ1bGxob3JuOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwYTFcXFwiOyB9XFxuXFxuLmZhLWJ1bGxzZXllOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxNDBcXFwiOyB9XFxuXFxuLmZhLWJ1cm46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQ2YVxcXCI7IH1cXG5cXG4uZmEtYnVyb21vYmVsZXhwZXJ0ZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzdmXFxcIjsgfVxcblxcbi5mYS1idXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjIwN1xcXCI7IH1cXG5cXG4uZmEtYnVzLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTVlXFxcIjsgfVxcblxcbi5mYS1idXNpbmVzcy10aW1lOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2NGFcXFwiOyB9XFxuXFxuLmZhLWJ1eXNlbGxhZHM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjIwZFxcXCI7IH1cXG5cXG4uZmEtY2FsY3VsYXRvcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWVjXFxcIjsgfVxcblxcbi5mYS1jYWxlbmRhcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTMzXFxcIjsgfVxcblxcbi5mYS1jYWxlbmRhci1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA3M1xcXCI7IH1cXG5cXG4uZmEtY2FsZW5kYXItY2hlY2s6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI3NFxcXCI7IH1cXG5cXG4uZmEtY2FsZW5kYXItZGF5OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3ODNcXFwiOyB9XFxuXFxuLmZhLWNhbGVuZGFyLW1pbnVzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyNzJcXFwiOyB9XFxuXFxuLmZhLWNhbGVuZGFyLXBsdXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI3MVxcXCI7IH1cXG5cXG4uZmEtY2FsZW5kYXItdGltZXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI3M1xcXCI7IH1cXG5cXG4uZmEtY2FsZW5kYXItd2VlazpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzg0XFxcIjsgfVxcblxcbi5mYS1jYW1lcmE6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjAzMFxcXCI7IH1cXG5cXG4uZmEtY2FtZXJhLXJldHJvOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwODNcXFwiOyB9XFxuXFxuLmZhLWNhbXBncm91bmQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjZiYlxcXCI7IH1cXG5cXG4uZmEtY2FuYWRpYW4tbWFwbGUtbGVhZjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzg1XFxcIjsgfVxcblxcbi5mYS1jYW5keS1jYW5lOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3ODZcXFwiOyB9XFxuXFxuLmZhLWNhbm5hYmlzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1NWZcXFwiOyB9XFxuXFxuLmZhLWNhcHN1bGVzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0NmJcXFwiOyB9XFxuXFxuLmZhLWNhcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWI5XFxcIjsgfVxcblxcbi5mYS1jYXItYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1ZGVcXFwiOyB9XFxuXFxuLmZhLWNhci1iYXR0ZXJ5OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1ZGZcXFwiOyB9XFxuXFxuLmZhLWNhci1jcmFzaDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNWUxXFxcIjsgfVxcblxcbi5mYS1jYXItc2lkZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNWU0XFxcIjsgfVxcblxcbi5mYS1jYXJldC1kb3duOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwZDdcXFwiOyB9XFxuXFxuLmZhLWNhcmV0LWxlZnQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBkOVxcXCI7IH1cXG5cXG4uZmEtY2FyZXQtcmlnaHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBkYVxcXCI7IH1cXG5cXG4uZmEtY2FyZXQtc3F1YXJlLWRvd246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE1MFxcXCI7IH1cXG5cXG4uZmEtY2FyZXQtc3F1YXJlLWxlZnQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE5MVxcXCI7IH1cXG5cXG4uZmEtY2FyZXQtc3F1YXJlLXJpZ2h0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxNTJcXFwiOyB9XFxuXFxuLmZhLWNhcmV0LXNxdWFyZS11cDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTUxXFxcIjsgfVxcblxcbi5mYS1jYXJldC11cDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGQ4XFxcIjsgfVxcblxcbi5mYS1jYXJyb3Q6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjc4N1xcXCI7IH1cXG5cXG4uZmEtY2FydC1hcnJvdy1kb3duOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyMThcXFwiOyB9XFxuXFxuLmZhLWNhcnQtcGx1czpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjE3XFxcIjsgfVxcblxcbi5mYS1jYXNoLXJlZ2lzdGVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3ODhcXFwiOyB9XFxuXFxuLmZhLWNhdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNmJlXFxcIjsgfVxcblxcbi5mYS1jYy1hbWF6b24tcGF5OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0MmRcXFwiOyB9XFxuXFxuLmZhLWNjLWFtZXg6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFmM1xcXCI7IH1cXG5cXG4uZmEtY2MtYXBwbGUtcGF5OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0MTZcXFwiOyB9XFxuXFxuLmZhLWNjLWRpbmVycy1jbHViOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyNGNcXFwiOyB9XFxuXFxuLmZhLWNjLWRpc2NvdmVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxZjJcXFwiOyB9XFxuXFxuLmZhLWNjLWpjYjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjRiXFxcIjsgfVxcblxcbi5mYS1jYy1tYXN0ZXJjYXJkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxZjFcXFwiOyB9XFxuXFxuLmZhLWNjLXBheXBhbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWY0XFxcIjsgfVxcblxcbi5mYS1jYy1zdHJpcGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFmNVxcXCI7IH1cXG5cXG4uZmEtY2MtdmlzYTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWYwXFxcIjsgfVxcblxcbi5mYS1jZW50ZXJjb2RlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzODBcXFwiOyB9XFxuXFxuLmZhLWNlbnRvczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzg5XFxcIjsgfVxcblxcbi5mYS1jZXJ0aWZpY2F0ZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGEzXFxcIjsgfVxcblxcbi5mYS1jaGFpcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNmMwXFxcIjsgfVxcblxcbi5mYS1jaGFsa2JvYXJkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1MWJcXFwiOyB9XFxuXFxuLmZhLWNoYWxrYm9hcmQtdGVhY2hlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTFjXFxcIjsgfVxcblxcbi5mYS1jaGFyZ2luZy1zdGF0aW9uOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1ZTdcXFwiOyB9XFxuXFxuLmZhLWNoYXJ0LWFyZWE6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFmZVxcXCI7IH1cXG5cXG4uZmEtY2hhcnQtYmFyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwODBcXFwiOyB9XFxuXFxuLmZhLWNoYXJ0LWxpbmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjIwMVxcXCI7IH1cXG5cXG4uZmEtY2hhcnQtcGllOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyMDBcXFwiOyB9XFxuXFxuLmZhLWNoZWNrOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwMGNcXFwiOyB9XFxuXFxuLmZhLWNoZWNrLWNpcmNsZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDU4XFxcIjsgfVxcblxcbi5mYS1jaGVjay1kb3VibGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU2MFxcXCI7IH1cXG5cXG4uZmEtY2hlY2stc3F1YXJlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxNGFcXFwiOyB9XFxuXFxuLmZhLWNoZWVzZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2VmXFxcIjsgfVxcblxcbi5mYS1jaGVzczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDM5XFxcIjsgfVxcblxcbi5mYS1jaGVzcy1iaXNob3A6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQzYVxcXCI7IH1cXG5cXG4uZmEtY2hlc3MtYm9hcmQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQzY1xcXCI7IH1cXG5cXG4uZmEtY2hlc3Mta2luZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDNmXFxcIjsgfVxcblxcbi5mYS1jaGVzcy1rbmlnaHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQ0MVxcXCI7IH1cXG5cXG4uZmEtY2hlc3MtcGF3bjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDQzXFxcIjsgfVxcblxcbi5mYS1jaGVzcy1xdWVlbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDQ1XFxcIjsgfVxcblxcbi5mYS1jaGVzcy1yb29rOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0NDdcXFwiOyB9XFxuXFxuLmZhLWNoZXZyb24tY2lyY2xlLWRvd246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjEzYVxcXCI7IH1cXG5cXG4uZmEtY2hldnJvbi1jaXJjbGUtbGVmdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTM3XFxcIjsgfVxcblxcbi5mYS1jaGV2cm9uLWNpcmNsZS1yaWdodDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTM4XFxcIjsgfVxcblxcbi5mYS1jaGV2cm9uLWNpcmNsZS11cDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTM5XFxcIjsgfVxcblxcbi5mYS1jaGV2cm9uLWRvd246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA3OFxcXCI7IH1cXG5cXG4uZmEtY2hldnJvbi1sZWZ0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwNTNcXFwiOyB9XFxuXFxuLmZhLWNoZXZyb24tcmlnaHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA1NFxcXCI7IH1cXG5cXG4uZmEtY2hldnJvbi11cDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDc3XFxcIjsgfVxcblxcbi5mYS1jaGlsZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWFlXFxcIjsgfVxcblxcbi5mYS1jaHJvbWU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI2OFxcXCI7IH1cXG5cXG4uZmEtY2hyb21lY2FzdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmODM4XFxcIjsgfVxcblxcbi5mYS1jaHVyY2g6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUxZFxcXCI7IH1cXG5cXG4uZmEtY2lyY2xlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxMTFcXFwiOyB9XFxuXFxuLmZhLWNpcmNsZS1ub3RjaDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWNlXFxcIjsgfVxcblxcbi5mYS1jaXR5OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2NGZcXFwiOyB9XFxuXFxuLmZhLWNsaW5pYy1tZWRpY2FsOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3ZjJcXFwiOyB9XFxuXFxuLmZhLWNsaXBib2FyZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzI4XFxcIjsgfVxcblxcbi5mYS1jbGlwYm9hcmQtY2hlY2s6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQ2Y1xcXCI7IH1cXG5cXG4uZmEtY2xpcGJvYXJkLWxpc3Q6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQ2ZFxcXCI7IH1cXG5cXG4uZmEtY2xvY2s6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjAxN1xcXCI7IH1cXG5cXG4uZmEtY2xvbmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI0ZFxcXCI7IH1cXG5cXG4uZmEtY2xvc2VkLWNhcHRpb25pbmc6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjIwYVxcXCI7IH1cXG5cXG4uZmEtY2xvdWQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBjMlxcXCI7IH1cXG5cXG4uZmEtY2xvdWQtZG93bmxvYWQtYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzODFcXFwiOyB9XFxuXFxuLmZhLWNsb3VkLW1lYXRiYWxsOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3M2JcXFwiOyB9XFxuXFxuLmZhLWNsb3VkLW1vb246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjZjM1xcXCI7IH1cXG5cXG4uZmEtY2xvdWQtbW9vbi1yYWluOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3M2NcXFwiOyB9XFxuXFxuLmZhLWNsb3VkLXJhaW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjczZFxcXCI7IH1cXG5cXG4uZmEtY2xvdWQtc2hvd2Vycy1oZWF2eTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzQwXFxcIjsgfVxcblxcbi5mYS1jbG91ZC1zdW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjZjNFxcXCI7IH1cXG5cXG4uZmEtY2xvdWQtc3VuLXJhaW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjc0M1xcXCI7IH1cXG5cXG4uZmEtY2xvdWQtdXBsb2FkLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzgyXFxcIjsgfVxcblxcbi5mYS1jbG91ZHNjYWxlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzODNcXFwiOyB9XFxuXFxuLmZhLWNsb3Vkc21pdGg6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjM4NFxcXCI7IH1cXG5cXG4uZmEtY2xvdWR2ZXJzaWZ5OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzODVcXFwiOyB9XFxuXFxuLmZhLWNvY2t0YWlsOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1NjFcXFwiOyB9XFxuXFxuLmZhLWNvZGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjEyMVxcXCI7IH1cXG5cXG4uZmEtY29kZS1icmFuY2g6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjEyNlxcXCI7IH1cXG5cXG4uZmEtY29kZXBlbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWNiXFxcIjsgfVxcblxcbi5mYS1jb2RpZXBpZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjg0XFxcIjsgfVxcblxcbi5mYS1jb2ZmZWU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBmNFxcXCI7IH1cXG5cXG4uZmEtY29nOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwMTNcXFwiOyB9XFxuXFxuLmZhLWNvZ3M6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA4NVxcXCI7IH1cXG5cXG4uZmEtY29pbnM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUxZVxcXCI7IH1cXG5cXG4uZmEtY29sdW1uczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGRiXFxcIjsgfVxcblxcbi5mYS1jb21tZW50OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwNzVcXFwiOyB9XFxuXFxuLmZhLWNvbW1lbnQtYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyN2FcXFwiOyB9XFxuXFxuLmZhLWNvbW1lbnQtZG9sbGFyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2NTFcXFwiOyB9XFxuXFxuLmZhLWNvbW1lbnQtZG90czpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNGFkXFxcIjsgfVxcblxcbi5mYS1jb21tZW50LW1lZGljYWw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjdmNVxcXCI7IH1cXG5cXG4uZmEtY29tbWVudC1zbGFzaDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNGIzXFxcIjsgfVxcblxcbi5mYS1jb21tZW50czpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDg2XFxcIjsgfVxcblxcbi5mYS1jb21tZW50cy1kb2xsYXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjY1M1xcXCI7IH1cXG5cXG4uZmEtY29tcGFjdC1kaXNjOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1MWZcXFwiOyB9XFxuXFxuLmZhLWNvbXBhc3M6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE0ZVxcXCI7IH1cXG5cXG4uZmEtY29tcHJlc3M6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA2NlxcXCI7IH1cXG5cXG4uZmEtY29tcHJlc3MtYXJyb3dzLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzhjXFxcIjsgfVxcblxcbi5mYS1jb25jaWVyZ2UtYmVsbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTYyXFxcIjsgfVxcblxcbi5mYS1jb25mbHVlbmNlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3OGRcXFwiOyB9XFxuXFxuLmZhLWNvbm5lY3RkZXZlbG9wOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyMGVcXFwiOyB9XFxuXFxuLmZhLWNvbnRhbzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjZkXFxcIjsgfVxcblxcbi5mYS1jb29raWU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU2M1xcXCI7IH1cXG5cXG4uZmEtY29va2llLWJpdGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU2NFxcXCI7IH1cXG5cXG4uZmEtY29weTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGM1XFxcIjsgfVxcblxcbi5mYS1jb3B5cmlnaHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFmOVxcXCI7IH1cXG5cXG4uZmEtY291Y2g6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjRiOFxcXCI7IH1cXG5cXG4uZmEtY3BhbmVsOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzODhcXFwiOyB9XFxuXFxuLmZhLWNyZWF0aXZlLWNvbW1vbnM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI1ZVxcXCI7IH1cXG5cXG4uZmEtY3JlYXRpdmUtY29tbW9ucy1ieTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNGU3XFxcIjsgfVxcblxcbi5mYS1jcmVhdGl2ZS1jb21tb25zLW5jOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0ZThcXFwiOyB9XFxuXFxuLmZhLWNyZWF0aXZlLWNvbW1vbnMtbmMtZXU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjRlOVxcXCI7IH1cXG5cXG4uZmEtY3JlYXRpdmUtY29tbW9ucy1uYy1qcDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNGVhXFxcIjsgfVxcblxcbi5mYS1jcmVhdGl2ZS1jb21tb25zLW5kOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0ZWJcXFwiOyB9XFxuXFxuLmZhLWNyZWF0aXZlLWNvbW1vbnMtcGQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjRlY1xcXCI7IH1cXG5cXG4uZmEtY3JlYXRpdmUtY29tbW9ucy1wZC1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjRlZFxcXCI7IH1cXG5cXG4uZmEtY3JlYXRpdmUtY29tbW9ucy1yZW1peDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNGVlXFxcIjsgfVxcblxcbi5mYS1jcmVhdGl2ZS1jb21tb25zLXNhOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0ZWZcXFwiOyB9XFxuXFxuLmZhLWNyZWF0aXZlLWNvbW1vbnMtc2FtcGxpbmc6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjRmMFxcXCI7IH1cXG5cXG4uZmEtY3JlYXRpdmUtY29tbW9ucy1zYW1wbGluZy1wbHVzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0ZjFcXFwiOyB9XFxuXFxuLmZhLWNyZWF0aXZlLWNvbW1vbnMtc2hhcmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjRmMlxcXCI7IH1cXG5cXG4uZmEtY3JlYXRpdmUtY29tbW9ucy16ZXJvOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0ZjNcXFwiOyB9XFxuXFxuLmZhLWNyZWRpdC1jYXJkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwOWRcXFwiOyB9XFxuXFxuLmZhLWNyaXRpY2FsLXJvbGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjZjOVxcXCI7IH1cXG5cXG4uZmEtY3JvcDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTI1XFxcIjsgfVxcblxcbi5mYS1jcm9wLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTY1XFxcIjsgfVxcblxcbi5mYS1jcm9zczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNjU0XFxcIjsgfVxcblxcbi5mYS1jcm9zc2hhaXJzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwNWJcXFwiOyB9XFxuXFxuLmZhLWNyb3c6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUyMFxcXCI7IH1cXG5cXG4uZmEtY3Jvd246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUyMVxcXCI7IH1cXG5cXG4uZmEtY3J1dGNoOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3ZjdcXFwiOyB9XFxuXFxuLmZhLWNzczM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjEzY1xcXCI7IH1cXG5cXG4uZmEtY3NzMy1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjM4YlxcXCI7IH1cXG5cXG4uZmEtY3ViZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWIyXFxcIjsgfVxcblxcbi5mYS1jdWJlczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWIzXFxcIjsgfVxcblxcbi5mYS1jdXQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBjNFxcXCI7IH1cXG5cXG4uZmEtY3V0dGxlZmlzaDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzhjXFxcIjsgfVxcblxcbi5mYS1kLWFuZC1kOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzOGRcXFwiOyB9XFxuXFxuLmZhLWQtYW5kLWQtYmV5b25kOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2Y2FcXFwiOyB9XFxuXFxuLmZhLWRhc2hjdWJlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyMTBcXFwiOyB9XFxuXFxuLmZhLWRhdGFiYXNlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxYzBcXFwiOyB9XFxuXFxuLmZhLWRlYWY6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJhNFxcXCI7IH1cXG5cXG4uZmEtZGVsaWNpb3VzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxYTVcXFwiOyB9XFxuXFxuLmZhLWRlbW9jcmF0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3NDdcXFwiOyB9XFxuXFxuLmZhLWRlcGxveWRvZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzhlXFxcIjsgfVxcblxcbi5mYS1kZXNrcHJvOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzOGZcXFwiOyB9XFxuXFxuLmZhLWRlc2t0b3A6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjEwOFxcXCI7IH1cXG5cXG4uZmEtZGV2OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2Y2NcXFwiOyB9XFxuXFxuLmZhLWRldmlhbnRhcnQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFiZFxcXCI7IH1cXG5cXG4uZmEtZGhhcm1hY2hha3JhOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2NTVcXFwiOyB9XFxuXFxuLmZhLWRobDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzkwXFxcIjsgfVxcblxcbi5mYS1kaWFnbm9zZXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQ3MFxcXCI7IH1cXG5cXG4uZmEtZGlhc3BvcmE6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjc5MVxcXCI7IH1cXG5cXG4uZmEtZGljZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTIyXFxcIjsgfVxcblxcbi5mYS1kaWNlLWQyMDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNmNmXFxcIjsgfVxcblxcbi5mYS1kaWNlLWQ2OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2ZDFcXFwiOyB9XFxuXFxuLmZhLWRpY2UtZml2ZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTIzXFxcIjsgfVxcblxcbi5mYS1kaWNlLWZvdXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUyNFxcXCI7IH1cXG5cXG4uZmEtZGljZS1vbmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUyNVxcXCI7IH1cXG5cXG4uZmEtZGljZS1zaXg6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUyNlxcXCI7IH1cXG5cXG4uZmEtZGljZS10aHJlZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTI3XFxcIjsgfVxcblxcbi5mYS1kaWNlLXR3bzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTI4XFxcIjsgfVxcblxcbi5mYS1kaWdnOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxYTZcXFwiOyB9XFxuXFxuLmZhLWRpZ2l0YWwtb2NlYW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjM5MVxcXCI7IH1cXG5cXG4uZmEtZGlnaXRhbC10YWNob2dyYXBoOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1NjZcXFwiOyB9XFxuXFxuLmZhLWRpcmVjdGlvbnM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjVlYlxcXCI7IH1cXG5cXG4uZmEtZGlzY29yZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzkyXFxcIjsgfVxcblxcbi5mYS1kaXNjb3Vyc2U6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjM5M1xcXCI7IH1cXG5cXG4uZmEtZGl2aWRlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1MjlcXFwiOyB9XFxuXFxuLmZhLWRpenp5OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1NjdcXFwiOyB9XFxuXFxuLmZhLWRuYTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDcxXFxcIjsgfVxcblxcbi5mYS1kb2NodWI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjM5NFxcXCI7IH1cXG5cXG4uZmEtZG9ja2VyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzOTVcXFwiOyB9XFxuXFxuLmZhLWRvZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNmQzXFxcIjsgfVxcblxcbi5mYS1kb2xsYXItc2lnbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTU1XFxcIjsgfVxcblxcbi5mYS1kb2xseTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDcyXFxcIjsgfVxcblxcbi5mYS1kb2xseS1mbGF0YmVkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0NzRcXFwiOyB9XFxuXFxuLmZhLWRvbmF0ZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNGI5XFxcIjsgfVxcblxcbi5mYS1kb29yLWNsb3NlZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTJhXFxcIjsgfVxcblxcbi5mYS1kb29yLW9wZW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUyYlxcXCI7IH1cXG5cXG4uZmEtZG90LWNpcmNsZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTkyXFxcIjsgfVxcblxcbi5mYS1kb3ZlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0YmFcXFwiOyB9XFxuXFxuLmZhLWRvd25sb2FkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwMTlcXFwiOyB9XFxuXFxuLmZhLWRyYWZ0MmRpZ2l0YWw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjM5NlxcXCI7IH1cXG5cXG4uZmEtZHJhZnRpbmctY29tcGFzczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTY4XFxcIjsgfVxcblxcbi5mYS1kcmFnb246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjZkNVxcXCI7IH1cXG5cXG4uZmEtZHJhdy1wb2x5Z29uOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1ZWVcXFwiOyB9XFxuXFxuLmZhLWRyaWJiYmxlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxN2RcXFwiOyB9XFxuXFxuLmZhLWRyaWJiYmxlLXNxdWFyZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzk3XFxcIjsgfVxcblxcbi5mYS1kcm9wYm94OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxNmJcXFwiOyB9XFxuXFxuLmZhLWRydW06YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU2OVxcXCI7IH1cXG5cXG4uZmEtZHJ1bS1zdGVlbHBhbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTZhXFxcIjsgfVxcblxcbi5mYS1kcnVtc3RpY2stYml0ZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNmQ3XFxcIjsgfVxcblxcbi5mYS1kcnVwYWw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFhOVxcXCI7IH1cXG5cXG4uZmEtZHVtYmJlbGw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQ0YlxcXCI7IH1cXG5cXG4uZmEtZHVtcHN0ZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjc5M1xcXCI7IH1cXG5cXG4uZmEtZHVtcHN0ZXItZmlyZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzk0XFxcIjsgfVxcblxcbi5mYS1kdW5nZW9uOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2ZDlcXFwiOyB9XFxuXFxuLmZhLWR5YWxvZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzk5XFxcIjsgfVxcblxcbi5mYS1lYXJseWJpcmRzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzOWFcXFwiOyB9XFxuXFxuLmZhLWViYXk6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjRmNFxcXCI7IH1cXG5cXG4uZmEtZWRnZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjgyXFxcIjsgfVxcblxcbi5mYS1lZGl0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwNDRcXFwiOyB9XFxuXFxuLmZhLWVnZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2ZiXFxcIjsgfVxcblxcbi5mYS1lamVjdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDUyXFxcIjsgfVxcblxcbi5mYS1lbGVtZW50b3I6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQzMFxcXCI7IH1cXG5cXG4uZmEtZWxsaXBzaXMtaDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTQxXFxcIjsgfVxcblxcbi5mYS1lbGxpcHNpcy12OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxNDJcXFwiOyB9XFxuXFxuLmZhLWVsbG86YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjVmMVxcXCI7IH1cXG5cXG4uZmEtZW1iZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQyM1xcXCI7IH1cXG5cXG4uZmEtZW1waXJlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxZDFcXFwiOyB9XFxuXFxuLmZhLWVudmVsb3BlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwZTBcXFwiOyB9XFxuXFxuLmZhLWVudmVsb3BlLW9wZW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJiNlxcXCI7IH1cXG5cXG4uZmEtZW52ZWxvcGUtb3Blbi10ZXh0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2NThcXFwiOyB9XFxuXFxuLmZhLWVudmVsb3BlLXNxdWFyZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTk5XFxcIjsgfVxcblxcbi5mYS1lbnZpcmE6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI5OVxcXCI7IH1cXG5cXG4uZmEtZXF1YWxzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1MmNcXFwiOyB9XFxuXFxuLmZhLWVyYXNlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTJkXFxcIjsgfVxcblxcbi5mYS1lcmxhbmc6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjM5ZFxcXCI7IH1cXG5cXG4uZmEtZXRoZXJldW06YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQyZVxcXCI7IH1cXG5cXG4uZmEtZXRoZXJuZXQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjc5NlxcXCI7IH1cXG5cXG4uZmEtZXRzeTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmQ3XFxcIjsgfVxcblxcbi5mYS1ldXJvLXNpZ246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE1M1xcXCI7IH1cXG5cXG4uZmEtZXZlcm5vdGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjgzOVxcXCI7IH1cXG5cXG4uZmEtZXhjaGFuZ2UtYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzNjJcXFwiOyB9XFxuXFxuLmZhLWV4Y2xhbWF0aW9uOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxMmFcXFwiOyB9XFxuXFxuLmZhLWV4Y2xhbWF0aW9uLWNpcmNsZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDZhXFxcIjsgfVxcblxcbi5mYS1leGNsYW1hdGlvbi10cmlhbmdsZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDcxXFxcIjsgfVxcblxcbi5mYS1leHBhbmQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA2NVxcXCI7IH1cXG5cXG4uZmEtZXhwYW5kLWFycm93cy1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjMxZVxcXCI7IH1cXG5cXG4uZmEtZXhwZWRpdGVkc3NsOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyM2VcXFwiOyB9XFxuXFxuLmZhLWV4dGVybmFsLWxpbmstYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzNWRcXFwiOyB9XFxuXFxuLmZhLWV4dGVybmFsLWxpbmstc3F1YXJlLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzYwXFxcIjsgfVxcblxcbi5mYS1leWU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA2ZVxcXCI7IH1cXG5cXG4uZmEtZXllLWRyb3BwZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFmYlxcXCI7IH1cXG5cXG4uZmEtZXllLXNsYXNoOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwNzBcXFwiOyB9XFxuXFxuLmZhLWZhY2Vib29rOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwOWFcXFwiOyB9XFxuXFxuLmZhLWZhY2Vib29rLWY6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjM5ZVxcXCI7IH1cXG5cXG4uZmEtZmFjZWJvb2stbWVzc2VuZ2VyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzOWZcXFwiOyB9XFxuXFxuLmZhLWZhY2Vib29rLXNxdWFyZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDgyXFxcIjsgfVxcblxcbi5mYS1mYW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjg2M1xcXCI7IH1cXG5cXG4uZmEtZmFudGFzeS1mbGlnaHQtZ2FtZXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjZkY1xcXCI7IH1cXG5cXG4uZmEtZmFzdC1iYWNrd2FyZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDQ5XFxcIjsgfVxcblxcbi5mYS1mYXN0LWZvcndhcmQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA1MFxcXCI7IH1cXG5cXG4uZmEtZmF4OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxYWNcXFwiOyB9XFxuXFxuLmZhLWZlYXRoZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUyZFxcXCI7IH1cXG5cXG4uZmEtZmVhdGhlci1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU2YlxcXCI7IH1cXG5cXG4uZmEtZmVkZXg6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjc5N1xcXCI7IH1cXG5cXG4uZmEtZmVkb3JhOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3OThcXFwiOyB9XFxuXFxuLmZhLWZlbWFsZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTgyXFxcIjsgfVxcblxcbi5mYS1maWdodGVyLWpldDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGZiXFxcIjsgfVxcblxcbi5mYS1maWdtYTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzk5XFxcIjsgfVxcblxcbi5mYS1maWxlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxNWJcXFwiOyB9XFxuXFxuLmZhLWZpbGUtYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxNWNcXFwiOyB9XFxuXFxuLmZhLWZpbGUtYXJjaGl2ZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWM2XFxcIjsgfVxcblxcbi5mYS1maWxlLWF1ZGlvOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxYzdcXFwiOyB9XFxuXFxuLmZhLWZpbGUtY29kZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWM5XFxcIjsgfVxcblxcbi5mYS1maWxlLWNvbnRyYWN0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1NmNcXFwiOyB9XFxuXFxuLmZhLWZpbGUtY3N2OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2ZGRcXFwiOyB9XFxuXFxuLmZhLWZpbGUtZG93bmxvYWQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU2ZFxcXCI7IH1cXG5cXG4uZmEtZmlsZS1leGNlbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWMzXFxcIjsgfVxcblxcbi5mYS1maWxlLWV4cG9ydDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTZlXFxcIjsgfVxcblxcbi5mYS1maWxlLWltYWdlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxYzVcXFwiOyB9XFxuXFxuLmZhLWZpbGUtaW1wb3J0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1NmZcXFwiOyB9XFxuXFxuLmZhLWZpbGUtaW52b2ljZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTcwXFxcIjsgfVxcblxcbi5mYS1maWxlLWludm9pY2UtZG9sbGFyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1NzFcXFwiOyB9XFxuXFxuLmZhLWZpbGUtbWVkaWNhbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDc3XFxcIjsgfVxcblxcbi5mYS1maWxlLW1lZGljYWwtYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0NzhcXFwiOyB9XFxuXFxuLmZhLWZpbGUtcGRmOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxYzFcXFwiOyB9XFxuXFxuLmZhLWZpbGUtcG93ZXJwb2ludDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWM0XFxcIjsgfVxcblxcbi5mYS1maWxlLXByZXNjcmlwdGlvbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTcyXFxcIjsgfVxcblxcbi5mYS1maWxlLXNpZ25hdHVyZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTczXFxcIjsgfVxcblxcbi5mYS1maWxlLXVwbG9hZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTc0XFxcIjsgfVxcblxcbi5mYS1maWxlLXZpZGVvOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxYzhcXFwiOyB9XFxuXFxuLmZhLWZpbGUtd29yZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWMyXFxcIjsgfVxcblxcbi5mYS1maWxsOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1NzVcXFwiOyB9XFxuXFxuLmZhLWZpbGwtZHJpcDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTc2XFxcIjsgfVxcblxcbi5mYS1maWxtOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwMDhcXFwiOyB9XFxuXFxuLmZhLWZpbHRlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGIwXFxcIjsgfVxcblxcbi5mYS1maW5nZXJwcmludDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTc3XFxcIjsgfVxcblxcbi5mYS1maXJlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwNmRcXFwiOyB9XFxuXFxuLmZhLWZpcmUtYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3ZTRcXFwiOyB9XFxuXFxuLmZhLWZpcmUtZXh0aW5ndWlzaGVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxMzRcXFwiOyB9XFxuXFxuLmZhLWZpcmVmb3g6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI2OVxcXCI7IH1cXG5cXG4uZmEtZmlyc3QtYWlkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0NzlcXFwiOyB9XFxuXFxuLmZhLWZpcnN0LW9yZGVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyYjBcXFwiOyB9XFxuXFxuLmZhLWZpcnN0LW9yZGVyLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTBhXFxcIjsgfVxcblxcbi5mYS1maXJzdGRyYWZ0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzYTFcXFwiOyB9XFxuXFxuLmZhLWZpc2g6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU3OFxcXCI7IH1cXG5cXG4uZmEtZmlzdC1yYWlzZWQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjZkZVxcXCI7IH1cXG5cXG4uZmEtZmxhZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDI0XFxcIjsgfVxcblxcbi5mYS1mbGFnLWNoZWNrZXJlZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTFlXFxcIjsgfVxcblxcbi5mYS1mbGFnLXVzYTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzRkXFxcIjsgfVxcblxcbi5mYS1mbGFzazpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGMzXFxcIjsgfVxcblxcbi5mYS1mbGlja3I6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE2ZVxcXCI7IH1cXG5cXG4uZmEtZmxpcGJvYXJkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0NGRcXFwiOyB9XFxuXFxuLmZhLWZsdXNoZWQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU3OVxcXCI7IH1cXG5cXG4uZmEtZmx5OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0MTdcXFwiOyB9XFxuXFxuLmZhLWZvbGRlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDdiXFxcIjsgfVxcblxcbi5mYS1mb2xkZXItbWludXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjY1ZFxcXCI7IH1cXG5cXG4uZmEtZm9sZGVyLW9wZW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA3Y1xcXCI7IH1cXG5cXG4uZmEtZm9sZGVyLXBsdXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjY1ZVxcXCI7IH1cXG5cXG4uZmEtZm9udDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDMxXFxcIjsgfVxcblxcbi5mYS1mb250LWF3ZXNvbWU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJiNFxcXCI7IH1cXG5cXG4uZmEtZm9udC1hd2Vzb21lLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzVjXFxcIjsgfVxcblxcbi5mYS1mb250LWF3ZXNvbWUtZmxhZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDI1XFxcIjsgfVxcblxcbi5mYS1mb250LWF3ZXNvbWUtbG9nby1mdWxsOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0ZTZcXFwiOyB9XFxuXFxuLmZhLWZvbnRpY29uczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjgwXFxcIjsgfVxcblxcbi5mYS1mb250aWNvbnMtZmk6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNhMlxcXCI7IH1cXG5cXG4uZmEtZm9vdGJhbGwtYmFsbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDRlXFxcIjsgfVxcblxcbi5mYS1mb3J0LWF3ZXNvbWU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI4NlxcXCI7IH1cXG5cXG4uZmEtZm9ydC1hd2Vzb21lLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2EzXFxcIjsgfVxcblxcbi5mYS1mb3J1bWJlZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjExXFxcIjsgfVxcblxcbi5mYS1mb3J3YXJkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwNGVcXFwiOyB9XFxuXFxuLmZhLWZvdXJzcXVhcmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE4MFxcXCI7IH1cXG5cXG4uZmEtZnJlZS1jb2RlLWNhbXA6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJjNVxcXCI7IH1cXG5cXG4uZmEtZnJlZWJzZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2E0XFxcIjsgfVxcblxcbi5mYS1mcm9nOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1MmVcXFwiOyB9XFxuXFxuLmZhLWZyb3duOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxMTlcXFwiOyB9XFxuXFxuLmZhLWZyb3duLW9wZW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU3YVxcXCI7IH1cXG5cXG4uZmEtZnVsY3J1bTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTBiXFxcIjsgfVxcblxcbi5mYS1mdW5uZWwtZG9sbGFyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2NjJcXFwiOyB9XFxuXFxuLmZhLWZ1dGJvbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWUzXFxcIjsgfVxcblxcbi5mYS1nYWxhY3RpYy1yZXB1YmxpYzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTBjXFxcIjsgfVxcblxcbi5mYS1nYWxhY3RpYy1zZW5hdGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUwZFxcXCI7IH1cXG5cXG4uZmEtZ2FtZXBhZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTFiXFxcIjsgfVxcblxcbi5mYS1nYXMtcHVtcDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTJmXFxcIjsgfVxcblxcbi5mYS1nYXZlbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGUzXFxcIjsgfVxcblxcbi5mYS1nZW06YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNhNVxcXCI7IH1cXG5cXG4uZmEtZ2VuZGVybGVzczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjJkXFxcIjsgfVxcblxcbi5mYS1nZXQtcG9ja2V0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyNjVcXFwiOyB9XFxuXFxuLmZhLWdnOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyNjBcXFwiOyB9XFxuXFxuLmZhLWdnLWNpcmNsZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjYxXFxcIjsgfVxcblxcbi5mYS1naG9zdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNmUyXFxcIjsgfVxcblxcbi5mYS1naWZ0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwNmJcXFwiOyB9XFxuXFxuLmZhLWdpZnRzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3OWNcXFwiOyB9XFxuXFxuLmZhLWdpdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWQzXFxcIjsgfVxcblxcbi5mYS1naXQtYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY4NDFcXFwiOyB9XFxuXFxuLmZhLWdpdC1zcXVhcmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFkMlxcXCI7IH1cXG5cXG4uZmEtZ2l0aHViOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwOWJcXFwiOyB9XFxuXFxuLmZhLWdpdGh1Yi1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjExM1xcXCI7IH1cXG5cXG4uZmEtZ2l0aHViLXNxdWFyZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDkyXFxcIjsgfVxcblxcbi5mYS1naXRrcmFrZW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNhNlxcXCI7IH1cXG5cXG4uZmEtZ2l0bGFiOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyOTZcXFwiOyB9XFxuXFxuLmZhLWdpdHRlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDI2XFxcIjsgfVxcblxcbi5mYS1nbGFzcy1jaGVlcnM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjc5ZlxcXCI7IH1cXG5cXG4uZmEtZ2xhc3MtbWFydGluaTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDAwXFxcIjsgfVxcblxcbi5mYS1nbGFzcy1tYXJ0aW5pLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTdiXFxcIjsgfVxcblxcbi5mYS1nbGFzcy13aGlza2V5OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3YTBcXFwiOyB9XFxuXFxuLmZhLWdsYXNzZXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUzMFxcXCI7IH1cXG5cXG4uZmEtZ2xpZGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJhNVxcXCI7IH1cXG5cXG4uZmEtZ2xpZGUtZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmE2XFxcIjsgfVxcblxcbi5mYS1nbG9iZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGFjXFxcIjsgfVxcblxcbi5mYS1nbG9iZS1hZnJpY2E6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU3Y1xcXCI7IH1cXG5cXG4uZmEtZ2xvYmUtYW1lcmljYXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU3ZFxcXCI7IH1cXG5cXG4uZmEtZ2xvYmUtYXNpYTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTdlXFxcIjsgfVxcblxcbi5mYS1nbG9iZS1ldXJvcGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjdhMlxcXCI7IH1cXG5cXG4uZmEtZ29mb3JlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzYTdcXFwiOyB9XFxuXFxuLmZhLWdvbGYtYmFsbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDUwXFxcIjsgfVxcblxcbi5mYS1nb29kcmVhZHM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNhOFxcXCI7IH1cXG5cXG4uZmEtZ29vZHJlYWRzLWc6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNhOVxcXCI7IH1cXG5cXG4uZmEtZ29vZ2xlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxYTBcXFwiOyB9XFxuXFxuLmZhLWdvb2dsZS1kcml2ZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2FhXFxcIjsgfVxcblxcbi5mYS1nb29nbGUtcGxheTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2FiXFxcIjsgfVxcblxcbi5mYS1nb29nbGUtcGx1czpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmIzXFxcIjsgfVxcblxcbi5mYS1nb29nbGUtcGx1cy1nOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwZDVcXFwiOyB9XFxuXFxuLmZhLWdvb2dsZS1wbHVzLXNxdWFyZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGQ0XFxcIjsgfVxcblxcbi5mYS1nb29nbGUtd2FsbGV0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxZWVcXFwiOyB9XFxuXFxuLmZhLWdvcHVyYW06YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjY2NFxcXCI7IH1cXG5cXG4uZmEtZ3JhZHVhdGlvbi1jYXA6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE5ZFxcXCI7IH1cXG5cXG4uZmEtZ3JhdGlwYXk6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE4NFxcXCI7IH1cXG5cXG4uZmEtZ3JhdjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmQ2XFxcIjsgfVxcblxcbi5mYS1ncmVhdGVyLXRoYW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUzMVxcXCI7IH1cXG5cXG4uZmEtZ3JlYXRlci10aGFuLWVxdWFsOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1MzJcXFwiOyB9XFxuXFxuLmZhLWdyaW1hY2U6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU3ZlxcXCI7IH1cXG5cXG4uZmEtZ3JpbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTgwXFxcIjsgfVxcblxcbi5mYS1ncmluLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTgxXFxcIjsgfVxcblxcbi5mYS1ncmluLWJlYW06YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU4MlxcXCI7IH1cXG5cXG4uZmEtZ3Jpbi1iZWFtLXN3ZWF0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1ODNcXFwiOyB9XFxuXFxuLmZhLWdyaW4taGVhcnRzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1ODRcXFwiOyB9XFxuXFxuLmZhLWdyaW4tc3F1aW50OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1ODVcXFwiOyB9XFxuXFxuLmZhLWdyaW4tc3F1aW50LXRlYXJzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1ODZcXFwiOyB9XFxuXFxuLmZhLWdyaW4tc3RhcnM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU4N1xcXCI7IH1cXG5cXG4uZmEtZ3Jpbi10ZWFyczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTg4XFxcIjsgfVxcblxcbi5mYS1ncmluLXRvbmd1ZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTg5XFxcIjsgfVxcblxcbi5mYS1ncmluLXRvbmd1ZS1zcXVpbnQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU4YVxcXCI7IH1cXG5cXG4uZmEtZ3Jpbi10b25ndWUtd2luazpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNThiXFxcIjsgfVxcblxcbi5mYS1ncmluLXdpbms6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU4Y1xcXCI7IH1cXG5cXG4uZmEtZ3JpcC1ob3Jpem9udGFsOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1OGRcXFwiOyB9XFxuXFxuLmZhLWdyaXAtbGluZXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjdhNFxcXCI7IH1cXG5cXG4uZmEtZ3JpcC1saW5lcy12ZXJ0aWNhbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2E1XFxcIjsgfVxcblxcbi5mYS1ncmlwLXZlcnRpY2FsOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1OGVcXFwiOyB9XFxuXFxuLmZhLWdyaXBmaXJlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzYWNcXFwiOyB9XFxuXFxuLmZhLWdydW50OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzYWRcXFwiOyB9XFxuXFxuLmZhLWd1aXRhcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2E2XFxcIjsgfVxcblxcbi5mYS1ndWxwOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzYWVcXFwiOyB9XFxuXFxuLmZhLWgtc3F1YXJlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwZmRcXFwiOyB9XFxuXFxuLmZhLWhhY2tlci1uZXdzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxZDRcXFwiOyB9XFxuXFxuLmZhLWhhY2tlci1uZXdzLXNxdWFyZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2FmXFxcIjsgfVxcblxcbi5mYS1oYWNrZXJyYW5rOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1ZjdcXFwiOyB9XFxuXFxuLmZhLWhhbWJ1cmdlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmODA1XFxcIjsgfVxcblxcbi5mYS1oYW1tZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjZlM1xcXCI7IH1cXG5cXG4uZmEtaGFtc2E6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjY2NVxcXCI7IH1cXG5cXG4uZmEtaGFuZC1ob2xkaW5nOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0YmRcXFwiOyB9XFxuXFxuLmZhLWhhbmQtaG9sZGluZy1oZWFydDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNGJlXFxcIjsgfVxcblxcbi5mYS1oYW5kLWhvbGRpbmctdXNkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0YzBcXFwiOyB9XFxuXFxuLmZhLWhhbmQtbGl6YXJkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyNThcXFwiOyB9XFxuXFxuLmZhLWhhbmQtbWlkZGxlLWZpbmdlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmODA2XFxcIjsgfVxcblxcbi5mYS1oYW5kLXBhcGVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyNTZcXFwiOyB9XFxuXFxuLmZhLWhhbmQtcGVhY2U6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI1YlxcXCI7IH1cXG5cXG4uZmEtaGFuZC1wb2ludC1kb3duOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwYTdcXFwiOyB9XFxuXFxuLmZhLWhhbmQtcG9pbnQtbGVmdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGE1XFxcIjsgfVxcblxcbi5mYS1oYW5kLXBvaW50LXJpZ2h0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwYTRcXFwiOyB9XFxuXFxuLmZhLWhhbmQtcG9pbnQtdXA6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBhNlxcXCI7IH1cXG5cXG4uZmEtaGFuZC1wb2ludGVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyNWFcXFwiOyB9XFxuXFxuLmZhLWhhbmQtcm9jazpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjU1XFxcIjsgfVxcblxcbi5mYS1oYW5kLXNjaXNzb3JzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyNTdcXFwiOyB9XFxuXFxuLmZhLWhhbmQtc3BvY2s6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI1OVxcXCI7IH1cXG5cXG4uZmEtaGFuZHM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjRjMlxcXCI7IH1cXG5cXG4uZmEtaGFuZHMtaGVscGluZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNGM0XFxcIjsgfVxcblxcbi5mYS1oYW5kc2hha2U6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJiNVxcXCI7IH1cXG5cXG4uZmEtaGFudWtpYWg6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjZlNlxcXCI7IH1cXG5cXG4uZmEtaGFyZC1oYXQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjgwN1xcXCI7IH1cXG5cXG4uZmEtaGFzaHRhZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjkyXFxcIjsgfVxcblxcbi5mYS1oYXQtd2l6YXJkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2ZThcXFwiOyB9XFxuXFxuLmZhLWhheWthbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNjY2XFxcIjsgfVxcblxcbi5mYS1oZGQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBhMFxcXCI7IH1cXG5cXG4uZmEtaGVhZGluZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWRjXFxcIjsgfVxcblxcbi5mYS1oZWFkcGhvbmVzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwMjVcXFwiOyB9XFxuXFxuLmZhLWhlYWRwaG9uZXMtYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1OGZcXFwiOyB9XFxuXFxuLmZhLWhlYWRzZXQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU5MFxcXCI7IH1cXG5cXG4uZmEtaGVhcnQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjAwNFxcXCI7IH1cXG5cXG4uZmEtaGVhcnQtYnJva2VuOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3YTlcXFwiOyB9XFxuXFxuLmZhLWhlYXJ0YmVhdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjFlXFxcIjsgfVxcblxcbi5mYS1oZWxpY29wdGVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1MzNcXFwiOyB9XFxuXFxuLmZhLWhpZ2hsaWdodGVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1OTFcXFwiOyB9XFxuXFxuLmZhLWhpa2luZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNmVjXFxcIjsgfVxcblxcbi5mYS1oaXBwbzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNmVkXFxcIjsgfVxcblxcbi5mYS1oaXBzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0NTJcXFwiOyB9XFxuXFxuLmZhLWhpcmUtYS1oZWxwZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNiMFxcXCI7IH1cXG5cXG4uZmEtaGlzdG9yeTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWRhXFxcIjsgfVxcblxcbi5mYS1ob2NrZXktcHVjazpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDUzXFxcIjsgfVxcblxcbi5mYS1ob2xseS1iZXJyeTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2FhXFxcIjsgfVxcblxcbi5mYS1ob21lOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwMTVcXFwiOyB9XFxuXFxuLmZhLWhvb2xpOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0MjdcXFwiOyB9XFxuXFxuLmZhLWhvcm5iaWxsOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1OTJcXFwiOyB9XFxuXFxuLmZhLWhvcnNlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2ZjBcXFwiOyB9XFxuXFxuLmZhLWhvcnNlLWhlYWQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjdhYlxcXCI7IH1cXG5cXG4uZmEtaG9zcGl0YWw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBmOFxcXCI7IH1cXG5cXG4uZmEtaG9zcGl0YWwtYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0N2RcXFwiOyB9XFxuXFxuLmZhLWhvc3BpdGFsLXN5bWJvbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDdlXFxcIjsgfVxcblxcbi5mYS1ob3QtdHViOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1OTNcXFwiOyB9XFxuXFxuLmZhLWhvdGRvZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmODBmXFxcIjsgfVxcblxcbi5mYS1ob3RlbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTk0XFxcIjsgfVxcblxcbi5mYS1ob3RqYXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNiMVxcXCI7IH1cXG5cXG4uZmEtaG91cmdsYXNzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyNTRcXFwiOyB9XFxuXFxuLmZhLWhvdXJnbGFzcy1lbmQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI1M1xcXCI7IH1cXG5cXG4uZmEtaG91cmdsYXNzLWhhbGY6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI1MlxcXCI7IH1cXG5cXG4uZmEtaG91cmdsYXNzLXN0YXJ0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyNTFcXFwiOyB9XFxuXFxuLmZhLWhvdXNlLWRhbWFnZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNmYxXFxcIjsgfVxcblxcbi5mYS1ob3V6ejpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjdjXFxcIjsgfVxcblxcbi5mYS1ocnl2bmlhOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2ZjJcXFwiOyB9XFxuXFxuLmZhLWh0bWw1OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxM2JcXFwiOyB9XFxuXFxuLmZhLWh1YnNwb3Q6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNiMlxcXCI7IH1cXG5cXG4uZmEtaS1jdXJzb3I6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI0NlxcXCI7IH1cXG5cXG4uZmEtaWNlLWNyZWFtOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY4MTBcXFwiOyB9XFxuXFxuLmZhLWljaWNsZXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjdhZFxcXCI7IH1cXG5cXG4uZmEtaWNvbnM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjg2ZFxcXCI7IH1cXG5cXG4uZmEtaWQtYmFkZ2U6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJjMVxcXCI7IH1cXG5cXG4uZmEtaWQtY2FyZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmMyXFxcIjsgfVxcblxcbi5mYS1pZC1jYXJkLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDdmXFxcIjsgfVxcblxcbi5mYS1pZ2xvbzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2FlXFxcIjsgfVxcblxcbi5mYS1pbWFnZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDNlXFxcIjsgfVxcblxcbi5mYS1pbWFnZXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjMwMlxcXCI7IH1cXG5cXG4uZmEtaW1kYjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmQ4XFxcIjsgfVxcblxcbi5mYS1pbmJveDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDFjXFxcIjsgfVxcblxcbi5mYS1pbmRlbnQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjAzY1xcXCI7IH1cXG5cXG4uZmEtaW5kdXN0cnk6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI3NVxcXCI7IH1cXG5cXG4uZmEtaW5maW5pdHk6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUzNFxcXCI7IH1cXG5cXG4uZmEtaW5mbzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTI5XFxcIjsgfVxcblxcbi5mYS1pbmZvLWNpcmNsZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDVhXFxcIjsgfVxcblxcbi5mYS1pbnN0YWdyYW06YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE2ZFxcXCI7IH1cXG5cXG4uZmEtaW50ZXJjb206YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjdhZlxcXCI7IH1cXG5cXG4uZmEtaW50ZXJuZXQtZXhwbG9yZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI2YlxcXCI7IH1cXG5cXG4uZmEtaW52aXNpb246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjdiMFxcXCI7IH1cXG5cXG4uZmEtaW94aG9zdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjA4XFxcIjsgfVxcblxcbi5mYS1pdGFsaWM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjAzM1xcXCI7IH1cXG5cXG4uZmEtaXRjaC1pbzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmODNhXFxcIjsgfVxcblxcbi5mYS1pdHVuZXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNiNFxcXCI7IH1cXG5cXG4uZmEtaXR1bmVzLW5vdGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNiNVxcXCI7IH1cXG5cXG4uZmEtamF2YTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNGU0XFxcIjsgfVxcblxcbi5mYS1qZWRpOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2NjlcXFwiOyB9XFxuXFxuLmZhLWplZGktb3JkZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUwZVxcXCI7IH1cXG5cXG4uZmEtamVua2luczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2I2XFxcIjsgfVxcblxcbi5mYS1qaXJhOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3YjFcXFwiOyB9XFxuXFxuLmZhLWpvZ2V0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzYjdcXFwiOyB9XFxuXFxuLmZhLWpvaW50OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1OTVcXFwiOyB9XFxuXFxuLmZhLWpvb21sYTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWFhXFxcIjsgfVxcblxcbi5mYS1qb3VybmFsLXdoaWxsczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNjZhXFxcIjsgfVxcblxcbi5mYS1qczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2I4XFxcIjsgfVxcblxcbi5mYS1qcy1zcXVhcmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNiOVxcXCI7IH1cXG5cXG4uZmEtanNmaWRkbGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFjY1xcXCI7IH1cXG5cXG4uZmEta2FhYmE6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjY2YlxcXCI7IH1cXG5cXG4uZmEta2FnZ2xlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1ZmFcXFwiOyB9XFxuXFxuLmZhLWtleTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDg0XFxcIjsgfVxcblxcbi5mYS1rZXliYXNlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0ZjVcXFwiOyB9XFxuXFxuLmZhLWtleWJvYXJkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxMWNcXFwiOyB9XFxuXFxuLmZhLWtleWNkbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2JhXFxcIjsgfVxcblxcbi5mYS1raGFuZGE6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjY2ZFxcXCI7IH1cXG5cXG4uZmEta2lja3N0YXJ0ZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNiYlxcXCI7IH1cXG5cXG4uZmEta2lja3N0YXJ0ZXItazpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2JjXFxcIjsgfVxcblxcbi5mYS1raXNzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1OTZcXFwiOyB9XFxuXFxuLmZhLWtpc3MtYmVhbTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTk3XFxcIjsgfVxcblxcbi5mYS1raXNzLXdpbmstaGVhcnQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU5OFxcXCI7IH1cXG5cXG4uZmEta2l3aS1iaXJkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1MzVcXFwiOyB9XFxuXFxuLmZhLWtvcnZ1ZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDJmXFxcIjsgfVxcblxcbi5mYS1sYW5kbWFyazpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNjZmXFxcIjsgfVxcblxcbi5mYS1sYW5ndWFnZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWFiXFxcIjsgfVxcblxcbi5mYS1sYXB0b3A6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjEwOVxcXCI7IH1cXG5cXG4uZmEtbGFwdG9wLWNvZGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjVmY1xcXCI7IH1cXG5cXG4uZmEtbGFwdG9wLW1lZGljYWw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjgxMlxcXCI7IH1cXG5cXG4uZmEtbGFyYXZlbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2JkXFxcIjsgfVxcblxcbi5mYS1sYXN0Zm06YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjIwMlxcXCI7IH1cXG5cXG4uZmEtbGFzdGZtLXNxdWFyZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjAzXFxcIjsgfVxcblxcbi5mYS1sYXVnaDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTk5XFxcIjsgfVxcblxcbi5mYS1sYXVnaC1iZWFtOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1OWFcXFwiOyB9XFxuXFxuLmZhLWxhdWdoLXNxdWludDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTliXFxcIjsgfVxcblxcbi5mYS1sYXVnaC13aW5rOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1OWNcXFwiOyB9XFxuXFxuLmZhLWxheWVyLWdyb3VwOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1ZmRcXFwiOyB9XFxuXFxuLmZhLWxlYWY6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA2Y1xcXCI7IH1cXG5cXG4uZmEtbGVhbnB1YjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjEyXFxcIjsgfVxcblxcbi5mYS1sZW1vbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDk0XFxcIjsgfVxcblxcbi5mYS1sZXNzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0MWRcXFwiOyB9XFxuXFxuLmZhLWxlc3MtdGhhbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTM2XFxcIjsgfVxcblxcbi5mYS1sZXNzLXRoYW4tZXF1YWw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUzN1xcXCI7IH1cXG5cXG4uZmEtbGV2ZWwtZG93bi1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNiZVxcXCI7IH1cXG5cXG4uZmEtbGV2ZWwtdXAtYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzYmZcXFwiOyB9XFxuXFxuLmZhLWxpZmUtcmluZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWNkXFxcIjsgfVxcblxcbi5mYS1saWdodGJ1bGI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBlYlxcXCI7IH1cXG5cXG4uZmEtbGluZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2MwXFxcIjsgfVxcblxcbi5mYS1saW5rOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwYzFcXFwiOyB9XFxuXFxuLmZhLWxpbmtlZGluOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwOGNcXFwiOyB9XFxuXFxuLmZhLWxpbmtlZGluLWluOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwZTFcXFwiOyB9XFxuXFxuLmZhLWxpbm9kZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmI4XFxcIjsgfVxcblxcbi5mYS1saW51eDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTdjXFxcIjsgfVxcblxcbi5mYS1saXJhLXNpZ246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE5NVxcXCI7IH1cXG5cXG4uZmEtbGlzdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDNhXFxcIjsgfVxcblxcbi5mYS1saXN0LWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDIyXFxcIjsgfVxcblxcbi5mYS1saXN0LW9sOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwY2JcXFwiOyB9XFxuXFxuLmZhLWxpc3QtdWw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBjYVxcXCI7IH1cXG5cXG4uZmEtbG9jYXRpb24tYXJyb3c6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjEyNFxcXCI7IH1cXG5cXG4uZmEtbG9jazpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDIzXFxcIjsgfVxcblxcbi5mYS1sb2NrLW9wZW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNjMVxcXCI7IH1cXG5cXG4uZmEtbG9uZy1hcnJvdy1hbHQtZG93bjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMzA5XFxcIjsgfVxcblxcbi5mYS1sb25nLWFycm93LWFsdC1sZWZ0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzMGFcXFwiOyB9XFxuXFxuLmZhLWxvbmctYXJyb3ctYWx0LXJpZ2h0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzMGJcXFwiOyB9XFxuXFxuLmZhLWxvbmctYXJyb3ctYWx0LXVwOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzMGNcXFwiOyB9XFxuXFxuLmZhLWxvdy12aXNpb246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJhOFxcXCI7IH1cXG5cXG4uZmEtbHVnZ2FnZS1jYXJ0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1OWRcXFwiOyB9XFxuXFxuLmZhLWx5ZnQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNjM1xcXCI7IH1cXG5cXG4uZmEtbWFnZW50bzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2M0XFxcIjsgfVxcblxcbi5mYS1tYWdpYzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGQwXFxcIjsgfVxcblxcbi5mYS1tYWduZXQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA3NlxcXCI7IH1cXG5cXG4uZmEtbWFpbC1idWxrOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2NzRcXFwiOyB9XFxuXFxuLmZhLW1haWxjaGltcDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTllXFxcIjsgfVxcblxcbi5mYS1tYWxlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxODNcXFwiOyB9XFxuXFxuLmZhLW1hbmRhbG9yaWFuOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1MGZcXFwiOyB9XFxuXFxuLmZhLW1hcDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjc5XFxcIjsgfVxcblxcbi5mYS1tYXAtbWFya2VkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1OWZcXFwiOyB9XFxuXFxuLmZhLW1hcC1tYXJrZWQtYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1YTBcXFwiOyB9XFxuXFxuLmZhLW1hcC1tYXJrZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA0MVxcXCI7IH1cXG5cXG4uZmEtbWFwLW1hcmtlci1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNjNVxcXCI7IH1cXG5cXG4uZmEtbWFwLXBpbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjc2XFxcIjsgfVxcblxcbi5mYS1tYXAtc2lnbnM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI3N1xcXCI7IH1cXG5cXG4uZmEtbWFya2Rvd246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjYwZlxcXCI7IH1cXG5cXG4uZmEtbWFya2VyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1YTFcXFwiOyB9XFxuXFxuLmZhLW1hcnM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjIyMlxcXCI7IH1cXG5cXG4uZmEtbWFycy1kb3VibGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjIyN1xcXCI7IH1cXG5cXG4uZmEtbWFycy1zdHJva2U6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjIyOVxcXCI7IH1cXG5cXG4uZmEtbWFycy1zdHJva2UtaDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjJiXFxcIjsgfVxcblxcbi5mYS1tYXJzLXN0cm9rZS12OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyMmFcXFwiOyB9XFxuXFxuLmZhLW1hc2s6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjZmYVxcXCI7IH1cXG5cXG4uZmEtbWFzdG9kb246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjRmNlxcXCI7IH1cXG5cXG4uZmEtbWF4Y2RuOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxMzZcXFwiOyB9XFxuXFxuLmZhLW1lZGFsOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1YTJcXFwiOyB9XFxuXFxuLmZhLW1lZGFwcHM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNjNlxcXCI7IH1cXG5cXG4uZmEtbWVkaXVtOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyM2FcXFwiOyB9XFxuXFxuLmZhLW1lZGl1bS1tOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzYzdcXFwiOyB9XFxuXFxuLmZhLW1lZGtpdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGZhXFxcIjsgfVxcblxcbi5mYS1tZWRydDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2M4XFxcIjsgfVxcblxcbi5mYS1tZWV0dXA6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJlMFxcXCI7IH1cXG5cXG4uZmEtbWVnYXBvcnQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjVhM1xcXCI7IH1cXG5cXG4uZmEtbWVoOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxMWFcXFwiOyB9XFxuXFxuLmZhLW1laC1ibGFuazpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNWE0XFxcIjsgfVxcblxcbi5mYS1tZWgtcm9sbGluZy1leWVzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1YTVcXFwiOyB9XFxuXFxuLmZhLW1lbW9yeTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTM4XFxcIjsgfVxcblxcbi5mYS1tZW5kZWxleTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2IzXFxcIjsgfVxcblxcbi5mYS1tZW5vcmFoOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2NzZcXFwiOyB9XFxuXFxuLmZhLW1lcmN1cnk6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjIyM1xcXCI7IH1cXG5cXG4uZmEtbWV0ZW9yOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3NTNcXFwiOyB9XFxuXFxuLmZhLW1pY3JvY2hpcDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmRiXFxcIjsgfVxcblxcbi5mYS1taWNyb3Bob25lOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxMzBcXFwiOyB9XFxuXFxuLmZhLW1pY3JvcGhvbmUtYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzYzlcXFwiOyB9XFxuXFxuLmZhLW1pY3JvcGhvbmUtYWx0LXNsYXNoOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1MzlcXFwiOyB9XFxuXFxuLmZhLW1pY3JvcGhvbmUtc2xhc2g6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjEzMVxcXCI7IH1cXG5cXG4uZmEtbWljcm9zY29wZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNjEwXFxcIjsgfVxcblxcbi5mYS1taWNyb3NvZnQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNjYVxcXCI7IH1cXG5cXG4uZmEtbWludXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA2OFxcXCI7IH1cXG5cXG4uZmEtbWludXMtY2lyY2xlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwNTZcXFwiOyB9XFxuXFxuLmZhLW1pbnVzLXNxdWFyZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTQ2XFxcIjsgfVxcblxcbi5mYS1taXR0ZW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjdiNVxcXCI7IH1cXG5cXG4uZmEtbWl4OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzY2JcXFwiOyB9XFxuXFxuLmZhLW1peGNsb3VkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyODlcXFwiOyB9XFxuXFxuLmZhLW1penVuaTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2NjXFxcIjsgfVxcblxcbi5mYS1tb2JpbGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjEwYlxcXCI7IH1cXG5cXG4uZmEtbW9iaWxlLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2NkXFxcIjsgfVxcblxcbi5mYS1tb2R4OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyODVcXFwiOyB9XFxuXFxuLmZhLW1vbmVybzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2QwXFxcIjsgfVxcblxcbi5mYS1tb25leS1iaWxsOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwZDZcXFwiOyB9XFxuXFxuLmZhLW1vbmV5LWJpbGwtYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzZDFcXFwiOyB9XFxuXFxuLmZhLW1vbmV5LWJpbGwtd2F2ZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTNhXFxcIjsgfVxcblxcbi5mYS1tb25leS1iaWxsLXdhdmUtYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1M2JcXFwiOyB9XFxuXFxuLmZhLW1vbmV5LWNoZWNrOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1M2NcXFwiOyB9XFxuXFxuLmZhLW1vbmV5LWNoZWNrLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTNkXFxcIjsgfVxcblxcbi5mYS1tb251bWVudDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNWE2XFxcIjsgfVxcblxcbi5mYS1tb29uOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxODZcXFwiOyB9XFxuXFxuLmZhLW1vcnRhci1wZXN0bGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjVhN1xcXCI7IH1cXG5cXG4uZmEtbW9zcXVlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2NzhcXFwiOyB9XFxuXFxuLmZhLW1vdG9yY3ljbGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjIxY1xcXCI7IH1cXG5cXG4uZmEtbW91bnRhaW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjZmY1xcXCI7IH1cXG5cXG4uZmEtbW91c2UtcG9pbnRlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjQ1XFxcIjsgfVxcblxcbi5mYS1tdWctaG90OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3YjZcXFwiOyB9XFxuXFxuLmZhLW11c2ljOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwMDFcXFwiOyB9XFxuXFxuLmZhLW5hcHN0ZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNkMlxcXCI7IH1cXG5cXG4uZmEtbmVvczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNjEyXFxcIjsgfVxcblxcbi5mYS1uZXR3b3JrLXdpcmVkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2ZmZcXFwiOyB9XFxuXFxuLmZhLW5ldXRlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjJjXFxcIjsgfVxcblxcbi5mYS1uZXdzcGFwZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFlYVxcXCI7IH1cXG5cXG4uZmEtbmltYmxyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1YThcXFwiOyB9XFxuXFxuLmZhLW5vZGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQxOVxcXCI7IH1cXG5cXG4uZmEtbm9kZS1qczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2QzXFxcIjsgfVxcblxcbi5mYS1ub3QtZXF1YWw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUzZVxcXCI7IH1cXG5cXG4uZmEtbm90ZXMtbWVkaWNhbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDgxXFxcIjsgfVxcblxcbi5mYS1ucG06YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNkNFxcXCI7IH1cXG5cXG4uZmEtbnM4OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzZDVcXFwiOyB9XFxuXFxuLmZhLW51dHJpdGlvbml4OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzZDZcXFwiOyB9XFxuXFxuLmZhLW9iamVjdC1ncm91cDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjQ3XFxcIjsgfVxcblxcbi5mYS1vYmplY3QtdW5ncm91cDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjQ4XFxcIjsgfVxcblxcbi5mYS1vZG5va2xhc3NuaWtpOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyNjNcXFwiOyB9XFxuXFxuLmZhLW9kbm9rbGFzc25pa2ktc3F1YXJlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyNjRcXFwiOyB9XFxuXFxuLmZhLW9pbC1jYW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjYxM1xcXCI7IH1cXG5cXG4uZmEtb2xkLXJlcHVibGljOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1MTBcXFwiOyB9XFxuXFxuLmZhLW9tOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2NzlcXFwiOyB9XFxuXFxuLmZhLW9wZW5jYXJ0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyM2RcXFwiOyB9XFxuXFxuLmZhLW9wZW5pZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTliXFxcIjsgfVxcblxcbi5mYS1vcGVyYTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjZhXFxcIjsgfVxcblxcbi5mYS1vcHRpbi1tb25zdGVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyM2NcXFwiOyB9XFxuXFxuLmZhLW9zaTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDFhXFxcIjsgfVxcblxcbi5mYS1vdHRlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzAwXFxcIjsgfVxcblxcbi5mYS1vdXRkZW50OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwM2JcXFwiOyB9XFxuXFxuLmZhLXBhZ2U0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzZDdcXFwiOyB9XFxuXFxuLmZhLXBhZ2VsaW5lczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMThjXFxcIjsgfVxcblxcbi5mYS1wYWdlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmODE1XFxcIjsgfVxcblxcbi5mYS1wYWludC1icnVzaDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWZjXFxcIjsgfVxcblxcbi5mYS1wYWludC1yb2xsZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjVhYVxcXCI7IH1cXG5cXG4uZmEtcGFsZXR0ZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTNmXFxcIjsgfVxcblxcbi5mYS1wYWxmZWQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNkOFxcXCI7IH1cXG5cXG4uZmEtcGFsbGV0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0ODJcXFwiOyB9XFxuXFxuLmZhLXBhcGVyLXBsYW5lOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxZDhcXFwiOyB9XFxuXFxuLmZhLXBhcGVyY2xpcDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGM2XFxcIjsgfVxcblxcbi5mYS1wYXJhY2h1dGUtYm94OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0Y2RcXFwiOyB9XFxuXFxuLmZhLXBhcmFncmFwaDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWRkXFxcIjsgfVxcblxcbi5mYS1wYXJraW5nOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1NDBcXFwiOyB9XFxuXFxuLmZhLXBhc3Nwb3J0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1YWJcXFwiOyB9XFxuXFxuLmZhLXBhc3RhZmFyaWFuaXNtOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2N2JcXFwiOyB9XFxuXFxuLmZhLXBhc3RlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwZWFcXFwiOyB9XFxuXFxuLmZhLXBhdHJlb246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNkOVxcXCI7IH1cXG5cXG4uZmEtcGF1c2U6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA0Y1xcXCI7IH1cXG5cXG4uZmEtcGF1c2UtY2lyY2xlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyOGJcXFwiOyB9XFxuXFxuLmZhLXBhdzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWIwXFxcIjsgfVxcblxcbi5mYS1wYXlwYWw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFlZFxcXCI7IH1cXG5cXG4uZmEtcGVhY2U6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjY3Y1xcXCI7IH1cXG5cXG4uZmEtcGVuOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzMDRcXFwiOyB9XFxuXFxuLmZhLXBlbi1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjMwNVxcXCI7IH1cXG5cXG4uZmEtcGVuLWZhbmN5OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1YWNcXFwiOyB9XFxuXFxuLmZhLXBlbi1uaWI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjVhZFxcXCI7IH1cXG5cXG4uZmEtcGVuLXNxdWFyZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTRiXFxcIjsgfVxcblxcbi5mYS1wZW5jaWwtYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzMDNcXFwiOyB9XFxuXFxuLmZhLXBlbmNpbC1ydWxlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNWFlXFxcIjsgfVxcblxcbi5mYS1wZW5ueS1hcmNhZGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjcwNFxcXCI7IH1cXG5cXG4uZmEtcGVvcGxlLWNhcnJ5OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0Y2VcXFwiOyB9XFxuXFxuLmZhLXBlcHBlci1ob3Q6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjgxNlxcXCI7IH1cXG5cXG4uZmEtcGVyY2VudDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjk1XFxcIjsgfVxcblxcbi5mYS1wZXJjZW50YWdlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1NDFcXFwiOyB9XFxuXFxuLmZhLXBlcmlzY29wZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2RhXFxcIjsgfVxcblxcbi5mYS1wZXJzb24tYm9vdGg6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjc1NlxcXCI7IH1cXG5cXG4uZmEtcGhhYnJpY2F0b3I6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNkYlxcXCI7IH1cXG5cXG4uZmEtcGhvZW5peC1mcmFtZXdvcms6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNkY1xcXCI7IH1cXG5cXG4uZmEtcGhvZW5peC1zcXVhZHJvbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTExXFxcIjsgfVxcblxcbi5mYS1waG9uZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDk1XFxcIjsgfVxcblxcbi5mYS1waG9uZS1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjg3OVxcXCI7IH1cXG5cXG4uZmEtcGhvbmUtc2xhc2g6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNkZFxcXCI7IH1cXG5cXG4uZmEtcGhvbmUtc3F1YXJlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwOThcXFwiOyB9XFxuXFxuLmZhLXBob25lLXNxdWFyZS1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjg3YlxcXCI7IH1cXG5cXG4uZmEtcGhvbmUtdm9sdW1lOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyYTBcXFwiOyB9XFxuXFxuLmZhLXBob3RvLXZpZGVvOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY4N2NcXFwiOyB9XFxuXFxuLmZhLXBocDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDU3XFxcIjsgfVxcblxcbi5mYS1waWVkLXBpcGVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyYWVcXFwiOyB9XFxuXFxuLmZhLXBpZWQtcGlwZXItYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxYThcXFwiOyB9XFxuXFxuLmZhLXBpZWQtcGlwZXItaGF0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0ZTVcXFwiOyB9XFxuXFxuLmZhLXBpZWQtcGlwZXItcHA6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFhN1xcXCI7IH1cXG5cXG4uZmEtcGlnZ3ktYmFuazpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNGQzXFxcIjsgfVxcblxcbi5mYS1waWxsczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDg0XFxcIjsgfVxcblxcbi5mYS1waW50ZXJlc3Q6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBkMlxcXCI7IH1cXG5cXG4uZmEtcGludGVyZXN0LXA6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjIzMVxcXCI7IH1cXG5cXG4uZmEtcGludGVyZXN0LXNxdWFyZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGQzXFxcIjsgfVxcblxcbi5mYS1waXp6YS1zbGljZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmODE4XFxcIjsgfVxcblxcbi5mYS1wbGFjZS1vZi13b3JzaGlwOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2N2ZcXFwiOyB9XFxuXFxuLmZhLXBsYW5lOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwNzJcXFwiOyB9XFxuXFxuLmZhLXBsYW5lLWFycml2YWw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjVhZlxcXCI7IH1cXG5cXG4uZmEtcGxhbmUtZGVwYXJ0dXJlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1YjBcXFwiOyB9XFxuXFxuLmZhLXBsYXk6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA0YlxcXCI7IH1cXG5cXG4uZmEtcGxheS1jaXJjbGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE0NFxcXCI7IH1cXG5cXG4uZmEtcGxheXN0YXRpb246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNkZlxcXCI7IH1cXG5cXG4uZmEtcGx1ZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWU2XFxcIjsgfVxcblxcbi5mYS1wbHVzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwNjdcXFwiOyB9XFxuXFxuLmZhLXBsdXMtY2lyY2xlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwNTVcXFwiOyB9XFxuXFxuLmZhLXBsdXMtc3F1YXJlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwZmVcXFwiOyB9XFxuXFxuLmZhLXBvZGNhc3Q6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJjZVxcXCI7IH1cXG5cXG4uZmEtcG9sbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNjgxXFxcIjsgfVxcblxcbi5mYS1wb2xsLWg6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjY4MlxcXCI7IH1cXG5cXG4uZmEtcG9vOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyZmVcXFwiOyB9XFxuXFxuLmZhLXBvby1zdG9ybTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzVhXFxcIjsgfVxcblxcbi5mYS1wb29wOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2MTlcXFwiOyB9XFxuXFxuLmZhLXBvcnRyYWl0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzZTBcXFwiOyB9XFxuXFxuLmZhLXBvdW5kLXNpZ246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE1NFxcXCI7IH1cXG5cXG4uZmEtcG93ZXItb2ZmOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwMTFcXFwiOyB9XFxuXFxuLmZhLXByYXk6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjY4M1xcXCI7IH1cXG5cXG4uZmEtcHJheWluZy1oYW5kczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNjg0XFxcIjsgfVxcblxcbi5mYS1wcmVzY3JpcHRpb246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjViMVxcXCI7IH1cXG5cXG4uZmEtcHJlc2NyaXB0aW9uLWJvdHRsZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDg1XFxcIjsgfVxcblxcbi5mYS1wcmVzY3JpcHRpb24tYm90dGxlLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDg2XFxcIjsgfVxcblxcbi5mYS1wcmludDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDJmXFxcIjsgfVxcblxcbi5mYS1wcm9jZWR1cmVzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0ODdcXFwiOyB9XFxuXFxuLmZhLXByb2R1Y3QtaHVudDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjg4XFxcIjsgfVxcblxcbi5mYS1wcm9qZWN0LWRpYWdyYW06YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU0MlxcXCI7IH1cXG5cXG4uZmEtcHVzaGVkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzZTFcXFwiOyB9XFxuXFxuLmZhLXB1enpsZS1waWVjZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTJlXFxcIjsgfVxcblxcbi5mYS1weXRob246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNlMlxcXCI7IH1cXG5cXG4uZmEtcXE6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFkNlxcXCI7IH1cXG5cXG4uZmEtcXJjb2RlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwMjlcXFwiOyB9XFxuXFxuLmZhLXF1ZXN0aW9uOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxMjhcXFwiOyB9XFxuXFxuLmZhLXF1ZXN0aW9uLWNpcmNsZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDU5XFxcIjsgfVxcblxcbi5mYS1xdWlkZGl0Y2g6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQ1OFxcXCI7IH1cXG5cXG4uZmEtcXVpbnNjYXBlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0NTlcXFwiOyB9XFxuXFxuLmZhLXF1b3JhOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyYzRcXFwiOyB9XFxuXFxuLmZhLXF1b3RlLWxlZnQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjEwZFxcXCI7IH1cXG5cXG4uZmEtcXVvdGUtcmlnaHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjEwZVxcXCI7IH1cXG5cXG4uZmEtcXVyYW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjY4N1xcXCI7IH1cXG5cXG4uZmEtci1wcm9qZWN0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0ZjdcXFwiOyB9XFxuXFxuLmZhLXJhZGlhdGlvbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2I5XFxcIjsgfVxcblxcbi5mYS1yYWRpYXRpb24tYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3YmFcXFwiOyB9XFxuXFxuLmZhLXJhaW5ib3c6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjc1YlxcXCI7IH1cXG5cXG4uZmEtcmFuZG9tOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwNzRcXFwiOyB9XFxuXFxuLmZhLXJhc3BiZXJyeS1waTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2JiXFxcIjsgfVxcblxcbi5mYS1yYXZlbHJ5OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyZDlcXFwiOyB9XFxuXFxuLmZhLXJlYWN0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0MWJcXFwiOyB9XFxuXFxuLmZhLXJlYWN0ZXVyb3BlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3NWRcXFwiOyB9XFxuXFxuLmZhLXJlYWRtZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNGQ1XFxcIjsgfVxcblxcbi5mYS1yZWJlbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWQwXFxcIjsgfVxcblxcbi5mYS1yZWNlaXB0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1NDNcXFwiOyB9XFxuXFxuLmZhLXJlY3ljbGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFiOFxcXCI7IH1cXG5cXG4uZmEtcmVkLXJpdmVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzZTNcXFwiOyB9XFxuXFxuLmZhLXJlZGRpdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWExXFxcIjsgfVxcblxcbi5mYS1yZWRkaXQtYWxpZW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI4MVxcXCI7IH1cXG5cXG4uZmEtcmVkZGl0LXNxdWFyZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWEyXFxcIjsgfVxcblxcbi5mYS1yZWRoYXQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjdiY1xcXCI7IH1cXG5cXG4uZmEtcmVkbzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDFlXFxcIjsgfVxcblxcbi5mYS1yZWRvLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmY5XFxcIjsgfVxcblxcbi5mYS1yZWdpc3RlcmVkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyNWRcXFwiOyB9XFxuXFxuLmZhLXJlbW92ZS1mb3JtYXQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjg3ZFxcXCI7IH1cXG5cXG4uZmEtcmVucmVuOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxOGJcXFwiOyB9XFxuXFxuLmZhLXJlcGx5OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzZTVcXFwiOyB9XFxuXFxuLmZhLXJlcGx5LWFsbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTIyXFxcIjsgfVxcblxcbi5mYS1yZXBseWQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNlNlxcXCI7IH1cXG5cXG4uZmEtcmVwdWJsaWNhbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzVlXFxcIjsgfVxcblxcbi5mYS1yZXNlYXJjaGdhdGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjRmOFxcXCI7IH1cXG5cXG4uZmEtcmVzb2x2aW5nOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzZTdcXFwiOyB9XFxuXFxuLmZhLXJlc3Ryb29tOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3YmRcXFwiOyB9XFxuXFxuLmZhLXJldHdlZXQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA3OVxcXCI7IH1cXG5cXG4uZmEtcmV2OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1YjJcXFwiOyB9XFxuXFxuLmZhLXJpYmJvbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNGQ2XFxcIjsgfVxcblxcbi5mYS1yaW5nOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3MGJcXFwiOyB9XFxuXFxuLmZhLXJvYWQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjAxOFxcXCI7IH1cXG5cXG4uZmEtcm9ib3Q6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU0NFxcXCI7IH1cXG5cXG4uZmEtcm9ja2V0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxMzVcXFwiOyB9XFxuXFxuLmZhLXJvY2tldGNoYXQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNlOFxcXCI7IH1cXG5cXG4uZmEtcm9ja3JtczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2U5XFxcIjsgfVxcblxcbi5mYS1yb3V0ZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNGQ3XFxcIjsgfVxcblxcbi5mYS1yc3M6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA5ZVxcXCI7IH1cXG5cXG4uZmEtcnNzLXNxdWFyZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTQzXFxcIjsgfVxcblxcbi5mYS1ydWJsZS1zaWduOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxNThcXFwiOyB9XFxuXFxuLmZhLXJ1bGVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1NDVcXFwiOyB9XFxuXFxuLmZhLXJ1bGVyLWNvbWJpbmVkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1NDZcXFwiOyB9XFxuXFxuLmZhLXJ1bGVyLWhvcml6b250YWw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU0N1xcXCI7IH1cXG5cXG4uZmEtcnVsZXItdmVydGljYWw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU0OFxcXCI7IH1cXG5cXG4uZmEtcnVubmluZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzBjXFxcIjsgfVxcblxcbi5mYS1ydXBlZS1zaWduOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxNTZcXFwiOyB9XFxuXFxuLmZhLXNhZC1jcnk6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjViM1xcXCI7IH1cXG5cXG4uZmEtc2FkLXRlYXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjViNFxcXCI7IH1cXG5cXG4uZmEtc2FmYXJpOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyNjdcXFwiOyB9XFxuXFxuLmZhLXNhbGVzZm9yY2U6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjgzYlxcXCI7IH1cXG5cXG4uZmEtc2FzczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDFlXFxcIjsgfVxcblxcbi5mYS1zYXRlbGxpdGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjdiZlxcXCI7IH1cXG5cXG4uZmEtc2F0ZWxsaXRlLWRpc2g6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjdjMFxcXCI7IH1cXG5cXG4uZmEtc2F2ZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGM3XFxcIjsgfVxcblxcbi5mYS1zY2hsaXg6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNlYVxcXCI7IH1cXG5cXG4uZmEtc2Nob29sOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1NDlcXFwiOyB9XFxuXFxuLmZhLXNjcmV3ZHJpdmVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1NGFcXFwiOyB9XFxuXFxuLmZhLXNjcmliZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjhhXFxcIjsgfVxcblxcbi5mYS1zY3JvbGw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjcwZVxcXCI7IH1cXG5cXG4uZmEtc2QtY2FyZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2MyXFxcIjsgfVxcblxcbi5mYS1zZWFyY2g6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjAwMlxcXCI7IH1cXG5cXG4uZmEtc2VhcmNoLWRvbGxhcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNjg4XFxcIjsgfVxcblxcbi5mYS1zZWFyY2gtbG9jYXRpb246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjY4OVxcXCI7IH1cXG5cXG4uZmEtc2VhcmNoLW1pbnVzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwMTBcXFwiOyB9XFxuXFxuLmZhLXNlYXJjaC1wbHVzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwMGVcXFwiOyB9XFxuXFxuLmZhLXNlYXJjaGVuZ2luOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzZWJcXFwiOyB9XFxuXFxuLmZhLXNlZWRsaW5nOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0ZDhcXFwiOyB9XFxuXFxuLmZhLXNlbGxjYXN0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyZGFcXFwiOyB9XFxuXFxuLmZhLXNlbGxzeTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjEzXFxcIjsgfVxcblxcbi5mYS1zZXJ2ZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjIzM1xcXCI7IH1cXG5cXG4uZmEtc2VydmljZXN0YWNrOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzZWNcXFwiOyB9XFxuXFxuLmZhLXNoYXBlczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNjFmXFxcIjsgfVxcblxcbi5mYS1zaGFyZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDY0XFxcIjsgfVxcblxcbi5mYS1zaGFyZS1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFlMFxcXCI7IH1cXG5cXG4uZmEtc2hhcmUtYWx0LXNxdWFyZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWUxXFxcIjsgfVxcblxcbi5mYS1zaGFyZS1zcXVhcmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE0ZFxcXCI7IH1cXG5cXG4uZmEtc2hla2VsLXNpZ246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjIwYlxcXCI7IH1cXG5cXG4uZmEtc2hpZWxkLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2VkXFxcIjsgfVxcblxcbi5mYS1zaGlwOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyMWFcXFwiOyB9XFxuXFxuLmZhLXNoaXBwaW5nLWZhc3Q6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQ4YlxcXCI7IH1cXG5cXG4uZmEtc2hpcnRzaW5idWxrOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyMTRcXFwiOyB9XFxuXFxuLmZhLXNob2UtcHJpbnRzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1NGJcXFwiOyB9XFxuXFxuLmZhLXNob3BwaW5nLWJhZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjkwXFxcIjsgfVxcblxcbi5mYS1zaG9wcGluZy1iYXNrZXQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI5MVxcXCI7IH1cXG5cXG4uZmEtc2hvcHBpbmctY2FydDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDdhXFxcIjsgfVxcblxcbi5mYS1zaG9wd2FyZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNWI1XFxcIjsgfVxcblxcbi5mYS1zaG93ZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJjY1xcXCI7IH1cXG5cXG4uZmEtc2h1dHRsZS12YW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjViNlxcXCI7IH1cXG5cXG4uZmEtc2lnbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNGQ5XFxcIjsgfVxcblxcbi5mYS1zaWduLWluLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmY2XFxcIjsgfVxcblxcbi5mYS1zaWduLWxhbmd1YWdlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyYTdcXFwiOyB9XFxuXFxuLmZhLXNpZ24tb3V0LWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmY1XFxcIjsgfVxcblxcbi5mYS1zaWduYWw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjAxMlxcXCI7IH1cXG5cXG4uZmEtc2lnbmF0dXJlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1YjdcXFwiOyB9XFxuXFxuLmZhLXNpbS1jYXJkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3YzRcXFwiOyB9XFxuXFxuLmZhLXNpbXBseWJ1aWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyMTVcXFwiOyB9XFxuXFxuLmZhLXNpc3RyaXg6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNlZVxcXCI7IH1cXG5cXG4uZmEtc2l0ZW1hcDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGU4XFxcIjsgfVxcblxcbi5mYS1zaXRoOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1MTJcXFwiOyB9XFxuXFxuLmZhLXNrYXRpbmc6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjdjNVxcXCI7IH1cXG5cXG4uZmEtc2tldGNoOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3YzZcXFwiOyB9XFxuXFxuLmZhLXNraWluZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2M5XFxcIjsgfVxcblxcbi5mYS1za2lpbmctbm9yZGljOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3Y2FcXFwiOyB9XFxuXFxuLmZhLXNrdWxsOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1NGNcXFwiOyB9XFxuXFxuLmZhLXNrdWxsLWNyb3NzYm9uZXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjcxNFxcXCI7IH1cXG5cXG4uZmEtc2t5YXRsYXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjIxNlxcXCI7IH1cXG5cXG4uZmEtc2t5cGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE3ZVxcXCI7IH1cXG5cXG4uZmEtc2xhY2s6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE5OFxcXCI7IH1cXG5cXG4uZmEtc2xhY2staGFzaDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2VmXFxcIjsgfVxcblxcbi5mYS1zbGFzaDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzE1XFxcIjsgfVxcblxcbi5mYS1zbGVpZ2g6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjdjY1xcXCI7IH1cXG5cXG4uZmEtc2xpZGVycy1oOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxZGVcXFwiOyB9XFxuXFxuLmZhLXNsaWRlc2hhcmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFlN1xcXCI7IH1cXG5cXG4uZmEtc21pbGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjExOFxcXCI7IH1cXG5cXG4uZmEtc21pbGUtYmVhbTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNWI4XFxcIjsgfVxcblxcbi5mYS1zbWlsZS13aW5rOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0ZGFcXFwiOyB9XFxuXFxuLmZhLXNtb2c6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjc1ZlxcXCI7IH1cXG5cXG4uZmEtc21va2luZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDhkXFxcIjsgfVxcblxcbi5mYS1zbW9raW5nLWJhbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTRkXFxcIjsgfVxcblxcbi5mYS1zbXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjdjZFxcXCI7IH1cXG5cXG4uZmEtc25hcGNoYXQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJhYlxcXCI7IH1cXG5cXG4uZmEtc25hcGNoYXQtZ2hvc3Q6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJhY1xcXCI7IH1cXG5cXG4uZmEtc25hcGNoYXQtc3F1YXJlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyYWRcXFwiOyB9XFxuXFxuLmZhLXNub3dib2FyZGluZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2NlXFxcIjsgfVxcblxcbi5mYS1zbm93Zmxha2U6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJkY1xcXCI7IH1cXG5cXG4uZmEtc25vd21hbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2QwXFxcIjsgfVxcblxcbi5mYS1zbm93cGxvdzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2QyXFxcIjsgfVxcblxcbi5mYS1zb2NrczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNjk2XFxcIjsgfVxcblxcbi5mYS1zb2xhci1wYW5lbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNWJhXFxcIjsgfVxcblxcbi5mYS1zb3J0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwZGNcXFwiOyB9XFxuXFxuLmZhLXNvcnQtYWxwaGEtZG93bjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTVkXFxcIjsgfVxcblxcbi5mYS1zb3J0LWFscGhhLWRvd24tYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY4ODFcXFwiOyB9XFxuXFxuLmZhLXNvcnQtYWxwaGEtdXA6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE1ZVxcXCI7IH1cXG5cXG4uZmEtc29ydC1hbHBoYS11cC1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjg4MlxcXCI7IH1cXG5cXG4uZmEtc29ydC1hbW91bnQtZG93bjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTYwXFxcIjsgfVxcblxcbi5mYS1zb3J0LWFtb3VudC1kb3duLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmODg0XFxcIjsgfVxcblxcbi5mYS1zb3J0LWFtb3VudC11cDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTYxXFxcIjsgfVxcblxcbi5mYS1zb3J0LWFtb3VudC11cC1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjg4NVxcXCI7IH1cXG5cXG4uZmEtc29ydC1kb3duOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwZGRcXFwiOyB9XFxuXFxuLmZhLXNvcnQtbnVtZXJpYy1kb3duOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxNjJcXFwiOyB9XFxuXFxuLmZhLXNvcnQtbnVtZXJpYy1kb3duLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmODg2XFxcIjsgfVxcblxcbi5mYS1zb3J0LW51bWVyaWMtdXA6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE2M1xcXCI7IH1cXG5cXG4uZmEtc29ydC1udW1lcmljLXVwLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmODg3XFxcIjsgfVxcblxcbi5mYS1zb3J0LXVwOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwZGVcXFwiOyB9XFxuXFxuLmZhLXNvdW5kY2xvdWQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFiZVxcXCI7IH1cXG5cXG4uZmEtc291cmNldHJlZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2QzXFxcIjsgfVxcblxcbi5mYS1zcGE6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjViYlxcXCI7IH1cXG5cXG4uZmEtc3BhY2Utc2h1dHRsZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTk3XFxcIjsgfVxcblxcbi5mYS1zcGVha2FwOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzZjNcXFwiOyB9XFxuXFxuLmZhLXNwZWFrZXItZGVjazpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmODNjXFxcIjsgfVxcblxcbi5mYS1zcGVsbC1jaGVjazpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmODkxXFxcIjsgfVxcblxcbi5mYS1zcGlkZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjcxN1xcXCI7IH1cXG5cXG4uZmEtc3Bpbm5lcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTEwXFxcIjsgfVxcblxcbi5mYS1zcGxvdGNoOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1YmNcXFwiOyB9XFxuXFxuLmZhLXNwb3RpZnk6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFiY1xcXCI7IH1cXG5cXG4uZmEtc3ByYXktY2FuOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1YmRcXFwiOyB9XFxuXFxuLmZhLXNxdWFyZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGM4XFxcIjsgfVxcblxcbi5mYS1zcXVhcmUtZnVsbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDVjXFxcIjsgfVxcblxcbi5mYS1zcXVhcmUtcm9vdC1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjY5OFxcXCI7IH1cXG5cXG4uZmEtc3F1YXJlc3BhY2U6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjViZVxcXCI7IH1cXG5cXG4uZmEtc3RhY2stZXhjaGFuZ2U6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE4ZFxcXCI7IH1cXG5cXG4uZmEtc3RhY2stb3ZlcmZsb3c6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE2Y1xcXCI7IH1cXG5cXG4uZmEtc3RhY2twYXRoOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY4NDJcXFwiOyB9XFxuXFxuLmZhLXN0YW1wOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1YmZcXFwiOyB9XFxuXFxuLmZhLXN0YXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjAwNVxcXCI7IH1cXG5cXG4uZmEtc3Rhci1hbmQtY3Jlc2NlbnQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjY5OVxcXCI7IH1cXG5cXG4uZmEtc3Rhci1oYWxmOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwODlcXFwiOyB9XFxuXFxuLmZhLXN0YXItaGFsZi1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjVjMFxcXCI7IH1cXG5cXG4uZmEtc3Rhci1vZi1kYXZpZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNjlhXFxcIjsgfVxcblxcbi5mYS1zdGFyLW9mLWxpZmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjYyMVxcXCI7IH1cXG5cXG4uZmEtc3RheWxpbmtlZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2Y1XFxcIjsgfVxcblxcbi5mYS1zdGVhbTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWI2XFxcIjsgfVxcblxcbi5mYS1zdGVhbS1zcXVhcmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFiN1xcXCI7IH1cXG5cXG4uZmEtc3RlYW0tc3ltYm9sOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzZjZcXFwiOyB9XFxuXFxuLmZhLXN0ZXAtYmFja3dhcmQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA0OFxcXCI7IH1cXG5cXG4uZmEtc3RlcC1mb3J3YXJkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwNTFcXFwiOyB9XFxuXFxuLmZhLXN0ZXRob3Njb3BlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwZjFcXFwiOyB9XFxuXFxuLmZhLXN0aWNrZXItbXVsZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2Y3XFxcIjsgfVxcblxcbi5mYS1zdGlja3ktbm90ZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjQ5XFxcIjsgfVxcblxcbi5mYS1zdG9wOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwNGRcXFwiOyB9XFxuXFxuLmZhLXN0b3AtY2lyY2xlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyOGRcXFwiOyB9XFxuXFxuLmZhLXN0b3B3YXRjaDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmYyXFxcIjsgfVxcblxcbi5mYS1zdG9yZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTRlXFxcIjsgfVxcblxcbi5mYS1zdG9yZS1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU0ZlxcXCI7IH1cXG5cXG4uZmEtc3RyYXZhOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0MjhcXFwiOyB9XFxuXFxuLmZhLXN0cmVhbTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTUwXFxcIjsgfVxcblxcbi5mYS1zdHJlZXQtdmlldzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjFkXFxcIjsgfVxcblxcbi5mYS1zdHJpa2V0aHJvdWdoOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwY2NcXFwiOyB9XFxuXFxuLmZhLXN0cmlwZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDI5XFxcIjsgfVxcblxcbi5mYS1zdHJpcGUtczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDJhXFxcIjsgfVxcblxcbi5mYS1zdHJvb3B3YWZlbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTUxXFxcIjsgfVxcblxcbi5mYS1zdHVkaW92aW5hcmk6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNmOFxcXCI7IH1cXG5cXG4uZmEtc3R1bWJsZXVwb246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFhNFxcXCI7IH1cXG5cXG4uZmEtc3R1bWJsZXVwb24tY2lyY2xlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxYTNcXFwiOyB9XFxuXFxuLmZhLXN1YnNjcmlwdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTJjXFxcIjsgfVxcblxcbi5mYS1zdWJ3YXk6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjIzOVxcXCI7IH1cXG5cXG4uZmEtc3VpdGNhc2U6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBmMlxcXCI7IH1cXG5cXG4uZmEtc3VpdGNhc2Utcm9sbGluZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNWMxXFxcIjsgfVxcblxcbi5mYS1zdW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE4NVxcXCI7IH1cXG5cXG4uZmEtc3VwZXJwb3dlcnM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJkZFxcXCI7IH1cXG5cXG4uZmEtc3VwZXJzY3JpcHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjEyYlxcXCI7IH1cXG5cXG4uZmEtc3VwcGxlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzZjlcXFwiOyB9XFxuXFxuLmZhLXN1cnByaXNlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1YzJcXFwiOyB9XFxuXFxuLmZhLXN1c2U6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjdkNlxcXCI7IH1cXG5cXG4uZmEtc3dhdGNoYm9vazpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNWMzXFxcIjsgfVxcblxcbi5mYS1zd2ltbWVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1YzRcXFwiOyB9XFxuXFxuLmZhLXN3aW1taW5nLXBvb2w6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjVjNVxcXCI7IH1cXG5cXG4uZmEtc3ltZm9ueTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmODNkXFxcIjsgfVxcblxcbi5mYS1zeW5hZ29ndWU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjY5YlxcXCI7IH1cXG5cXG4uZmEtc3luYzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDIxXFxcIjsgfVxcblxcbi5mYS1zeW5jLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmYxXFxcIjsgfVxcblxcbi5mYS1zeXJpbmdlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0OGVcXFwiOyB9XFxuXFxuLmZhLXRhYmxlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwY2VcXFwiOyB9XFxuXFxuLmZhLXRhYmxlLXRlbm5pczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDVkXFxcIjsgfVxcblxcbi5mYS10YWJsZXQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjEwYVxcXCI7IH1cXG5cXG4uZmEtdGFibGV0LWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2ZhXFxcIjsgfVxcblxcbi5mYS10YWJsZXRzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0OTBcXFwiOyB9XFxuXFxuLmZhLXRhY2hvbWV0ZXItYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzZmRcXFwiOyB9XFxuXFxuLmZhLXRhZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDJiXFxcIjsgfVxcblxcbi5mYS10YWdzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwMmNcXFwiOyB9XFxuXFxuLmZhLXRhcGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjRkYlxcXCI7IH1cXG5cXG4uZmEtdGFza3M6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBhZVxcXCI7IH1cXG5cXG4uZmEtdGF4aTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWJhXFxcIjsgfVxcblxcbi5mYS10ZWFtc3BlYWs6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjRmOVxcXCI7IH1cXG5cXG4uZmEtdGVldGg6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjYyZVxcXCI7IH1cXG5cXG4uZmEtdGVldGgtb3BlbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNjJmXFxcIjsgfVxcblxcbi5mYS10ZWxlZ3JhbTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmM2XFxcIjsgfVxcblxcbi5mYS10ZWxlZ3JhbS1wbGFuZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmM2ZlXFxcIjsgfVxcblxcbi5mYS10ZW1wZXJhdHVyZS1oaWdoOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3NjlcXFwiOyB9XFxuXFxuLmZhLXRlbXBlcmF0dXJlLWxvdzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzZiXFxcIjsgfVxcblxcbi5mYS10ZW5jZW50LXdlaWJvOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxZDVcXFwiOyB9XFxuXFxuLmZhLXRlbmdlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3ZDdcXFwiOyB9XFxuXFxuLmZhLXRlcm1pbmFsOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxMjBcXFwiOyB9XFxuXFxuLmZhLXRleHQtaGVpZ2h0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwMzRcXFwiOyB9XFxuXFxuLmZhLXRleHQtd2lkdGg6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjAzNVxcXCI7IH1cXG5cXG4uZmEtdGg6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjAwYVxcXCI7IH1cXG5cXG4uZmEtdGgtbGFyZ2U6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjAwOVxcXCI7IH1cXG5cXG4uZmEtdGgtbGlzdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDBiXFxcIjsgfVxcblxcbi5mYS10aGUtcmVkLXlldGk6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjY5ZFxcXCI7IH1cXG5cXG4uZmEtdGhlYXRlci1tYXNrczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNjMwXFxcIjsgfVxcblxcbi5mYS10aGVtZWNvOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1YzZcXFwiOyB9XFxuXFxuLmZhLXRoZW1laXNsZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmIyXFxcIjsgfVxcblxcbi5mYS10aGVybW9tZXRlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDkxXFxcIjsgfVxcblxcbi5mYS10aGVybW9tZXRlci1lbXB0eTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmNiXFxcIjsgfVxcblxcbi5mYS10aGVybW9tZXRlci1mdWxsOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyYzdcXFwiOyB9XFxuXFxuLmZhLXRoZXJtb21ldGVyLWhhbGY6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJjOVxcXCI7IH1cXG5cXG4uZmEtdGhlcm1vbWV0ZXItcXVhcnRlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmNhXFxcIjsgfVxcblxcbi5mYS10aGVybW9tZXRlci10aHJlZS1xdWFydGVyczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmM4XFxcIjsgfVxcblxcbi5mYS10aGluay1wZWFrczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzMxXFxcIjsgfVxcblxcbi5mYS10aHVtYnMtZG93bjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTY1XFxcIjsgfVxcblxcbi5mYS10aHVtYnMtdXA6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE2NFxcXCI7IH1cXG5cXG4uZmEtdGh1bWJ0YWNrOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwOGRcXFwiOyB9XFxuXFxuLmZhLXRpY2tldC1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjNmZlxcXCI7IH1cXG5cXG4uZmEtdGltZXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjAwZFxcXCI7IH1cXG5cXG4uZmEtdGltZXMtY2lyY2xlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwNTdcXFwiOyB9XFxuXFxuLmZhLXRpbnQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA0M1xcXCI7IH1cXG5cXG4uZmEtdGludC1zbGFzaDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNWM3XFxcIjsgfVxcblxcbi5mYS10aXJlZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNWM4XFxcIjsgfVxcblxcbi5mYS10b2dnbGUtb2ZmOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyMDRcXFwiOyB9XFxuXFxuLmZhLXRvZ2dsZS1vbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjA1XFxcIjsgfVxcblxcbi5mYS10b2lsZXQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjdkOFxcXCI7IH1cXG5cXG4uZmEtdG9pbGV0LXBhcGVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3MWVcXFwiOyB9XFxuXFxuLmZhLXRvb2xib3g6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU1MlxcXCI7IH1cXG5cXG4uZmEtdG9vbHM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjdkOVxcXCI7IH1cXG5cXG4uZmEtdG9vdGg6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjVjOVxcXCI7IH1cXG5cXG4uZmEtdG9yYWg6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjZhMFxcXCI7IH1cXG5cXG4uZmEtdG9yaWktZ2F0ZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNmExXFxcIjsgfVxcblxcbi5mYS10cmFjdG9yOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3MjJcXFwiOyB9XFxuXFxuLmZhLXRyYWRlLWZlZGVyYXRpb246YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUxM1xcXCI7IH1cXG5cXG4uZmEtdHJhZGVtYXJrOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyNWNcXFwiOyB9XFxuXFxuLmZhLXRyYWZmaWMtbGlnaHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjYzN1xcXCI7IH1cXG5cXG4uZmEtdHJhaW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjIzOFxcXCI7IH1cXG5cXG4uZmEtdHJhbTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2RhXFxcIjsgfVxcblxcbi5mYS10cmFuc2dlbmRlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjI0XFxcIjsgfVxcblxcbi5mYS10cmFuc2dlbmRlci1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjIyNVxcXCI7IH1cXG5cXG4uZmEtdHJhc2g6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFmOFxcXCI7IH1cXG5cXG4uZmEtdHJhc2gtYWx0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyZWRcXFwiOyB9XFxuXFxuLmZhLXRyYXNoLXJlc3RvcmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjgyOVxcXCI7IH1cXG5cXG4uZmEtdHJhc2gtcmVzdG9yZS1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjgyYVxcXCI7IH1cXG5cXG4uZmEtdHJlZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWJiXFxcIjsgfVxcblxcbi5mYS10cmVsbG86YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE4MVxcXCI7IH1cXG5cXG4uZmEtdHJpcGFkdmlzb3I6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI2MlxcXCI7IH1cXG5cXG4uZmEtdHJvcGh5OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwOTFcXFwiOyB9XFxuXFxuLmZhLXRydWNrOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwZDFcXFwiOyB9XFxuXFxuLmZhLXRydWNrLWxvYWRpbmc6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjRkZVxcXCI7IH1cXG5cXG4uZmEtdHJ1Y2stbW9uc3RlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNjNiXFxcIjsgfVxcblxcbi5mYS10cnVjay1tb3Zpbmc6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjRkZlxcXCI7IH1cXG5cXG4uZmEtdHJ1Y2stcGlja3VwOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2M2NcXFwiOyB9XFxuXFxuLmZhLXRzaGlydDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTUzXFxcIjsgfVxcblxcbi5mYS10dHk6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFlNFxcXCI7IH1cXG5cXG4uZmEtdHVtYmxyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxNzNcXFwiOyB9XFxuXFxuLmZhLXR1bWJsci1zcXVhcmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE3NFxcXCI7IH1cXG5cXG4uZmEtdHY6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI2Y1xcXCI7IH1cXG5cXG4uZmEtdHdpdGNoOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxZThcXFwiOyB9XFxuXFxuLmZhLXR3aXR0ZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA5OVxcXCI7IH1cXG5cXG4uZmEtdHdpdHRlci1zcXVhcmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA4MVxcXCI7IH1cXG5cXG4uZmEtdHlwbzM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQyYlxcXCI7IH1cXG5cXG4uZmEtdWJlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDAyXFxcIjsgfVxcblxcbi5mYS11YnVudHU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjdkZlxcXCI7IH1cXG5cXG4uZmEtdWlraXQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQwM1xcXCI7IH1cXG5cXG4uZmEtdW1icmVsbGE6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBlOVxcXCI7IH1cXG5cXG4uZmEtdW1icmVsbGEtYmVhY2g6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjVjYVxcXCI7IH1cXG5cXG4uZmEtdW5kZXJsaW5lOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwY2RcXFwiOyB9XFxuXFxuLmZhLXVuZG86YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBlMlxcXCI7IH1cXG5cXG4uZmEtdW5kby1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJlYVxcXCI7IH1cXG5cXG4uZmEtdW5pcmVnaXN0cnk6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQwNFxcXCI7IH1cXG5cXG4uZmEtdW5pdmVyc2FsLWFjY2VzczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjlhXFxcIjsgfVxcblxcbi5mYS11bml2ZXJzaXR5OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxOWNcXFwiOyB9XFxuXFxuLmZhLXVubGluazpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTI3XFxcIjsgfVxcblxcbi5mYS11bmxvY2s6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjA5Y1xcXCI7IH1cXG5cXG4uZmEtdW5sb2NrLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTNlXFxcIjsgfVxcblxcbi5mYS11bnRhcHBkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0MDVcXFwiOyB9XFxuXFxuLmZhLXVwbG9hZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDkzXFxcIjsgfVxcblxcbi5mYS11cHM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjdlMFxcXCI7IH1cXG5cXG4uZmEtdXNiOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyODdcXFwiOyB9XFxuXFxuLmZhLXVzZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjAwN1xcXCI7IH1cXG5cXG4uZmEtdXNlci1hbHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQwNlxcXCI7IH1cXG5cXG4uZmEtdXNlci1hbHQtc2xhc2g6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjRmYVxcXCI7IH1cXG5cXG4uZmEtdXNlci1hc3Ryb25hdXQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjRmYlxcXCI7IH1cXG5cXG4uZmEtdXNlci1jaGVjazpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNGZjXFxcIjsgfVxcblxcbi5mYS11c2VyLWNpcmNsZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMmJkXFxcIjsgfVxcblxcbi5mYS11c2VyLWNsb2NrOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0ZmRcXFwiOyB9XFxuXFxuLmZhLXVzZXItY29nOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0ZmVcXFwiOyB9XFxuXFxuLmZhLXVzZXItZWRpdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNGZmXFxcIjsgfVxcblxcbi5mYS11c2VyLWZyaWVuZHM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUwMFxcXCI7IH1cXG5cXG4uZmEtdXNlci1ncmFkdWF0ZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTAxXFxcIjsgfVxcblxcbi5mYS11c2VyLWluanVyZWQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjcyOFxcXCI7IH1cXG5cXG4uZmEtdXNlci1sb2NrOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1MDJcXFwiOyB9XFxuXFxuLmZhLXVzZXItbWQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjBmMFxcXCI7IH1cXG5cXG4uZmEtdXNlci1taW51czpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTAzXFxcIjsgfVxcblxcbi5mYS11c2VyLW5pbmphOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1MDRcXFwiOyB9XFxuXFxuLmZhLXVzZXItbnVyc2U6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjgyZlxcXCI7IH1cXG5cXG4uZmEtdXNlci1wbHVzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyMzRcXFwiOyB9XFxuXFxuLmZhLXVzZXItc2VjcmV0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyMWJcXFwiOyB9XFxuXFxuLmZhLXVzZXItc2hpZWxkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1MDVcXFwiOyB9XFxuXFxuLmZhLXVzZXItc2xhc2g6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUwNlxcXCI7IH1cXG5cXG4uZmEtdXNlci10YWc6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUwN1xcXCI7IH1cXG5cXG4uZmEtdXNlci10aWU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUwOFxcXCI7IH1cXG5cXG4uZmEtdXNlci10aW1lczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjM1XFxcIjsgfVxcblxcbi5mYS11c2VyczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGMwXFxcIjsgfVxcblxcbi5mYS11c2Vycy1jb2c6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjUwOVxcXCI7IH1cXG5cXG4uZmEtdXNwczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2UxXFxcIjsgfVxcblxcbi5mYS11c3N1bm5haDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDA3XFxcIjsgfVxcblxcbi5mYS11dGVuc2lsLXNwb29uOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyZTVcXFwiOyB9XFxuXFxuLmZhLXV0ZW5zaWxzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyZTdcXFwiOyB9XFxuXFxuLmZhLXZhYWRpbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDA4XFxcIjsgfVxcblxcbi5mYS12ZWN0b3Itc3F1YXJlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1Y2JcXFwiOyB9XFxuXFxuLmZhLXZlbnVzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyMjFcXFwiOyB9XFxuXFxuLmZhLXZlbnVzLWRvdWJsZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjI2XFxcIjsgfVxcblxcbi5mYS12ZW51cy1tYXJzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyMjhcXFwiOyB9XFxuXFxuLmZhLXZpYWNvaW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjIzN1xcXCI7IH1cXG5cXG4uZmEtdmlhZGVvOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyYTlcXFwiOyB9XFxuXFxuLmZhLXZpYWRlby1zcXVhcmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJhYVxcXCI7IH1cXG5cXG4uZmEtdmlhbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDkyXFxcIjsgfVxcblxcbi5mYS12aWFsczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDkzXFxcIjsgfVxcblxcbi5mYS12aWJlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDA5XFxcIjsgfVxcblxcbi5mYS12aWRlbzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDNkXFxcIjsgfVxcblxcbi5mYS12aWRlby1zbGFzaDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNGUyXFxcIjsgfVxcblxcbi5mYS12aWhhcmE6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjZhN1xcXCI7IH1cXG5cXG4uZmEtdmltZW86YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQwYVxcXCI7IH1cXG5cXG4uZmEtdmltZW8tc3F1YXJlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxOTRcXFwiOyB9XFxuXFxuLmZhLXZpbWVvLXY6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjI3ZFxcXCI7IH1cXG5cXG4uZmEtdmluZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWNhXFxcIjsgfVxcblxcbi5mYS12azpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTg5XFxcIjsgfVxcblxcbi5mYS12bnY6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQwYlxcXCI7IH1cXG5cXG4uZmEtdm9pY2VtYWlsOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY4OTdcXFwiOyB9XFxuXFxuLmZhLXZvbGxleWJhbGwtYmFsbDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDVmXFxcIjsgfVxcblxcbi5mYS12b2x1bWUtZG93bjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDI3XFxcIjsgfVxcblxcbi5mYS12b2x1bWUtbXV0ZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNmE5XFxcIjsgfVxcblxcbi5mYS12b2x1bWUtb2ZmOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYwMjZcXFwiOyB9XFxuXFxuLmZhLXZvbHVtZS11cDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMDI4XFxcIjsgfVxcblxcbi5mYS12b3RlLXllYTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNzcyXFxcIjsgfVxcblxcbi5mYS12ci1jYXJkYm9hcmQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjcyOVxcXCI7IH1cXG5cXG4uZmEtdnVlanM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQxZlxcXCI7IH1cXG5cXG4uZmEtd2Fsa2luZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTU0XFxcIjsgfVxcblxcbi5mYS13YWxsZXQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjU1NVxcXCI7IH1cXG5cXG4uZmEtd2FyZWhvdXNlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0OTRcXFwiOyB9XFxuXFxuLmZhLXdhdGVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3NzNcXFwiOyB9XFxuXFxuLmZhLXdhdmUtc3F1YXJlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY4M2VcXFwiOyB9XFxuXFxuLmZhLXdhemU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjgzZlxcXCI7IH1cXG5cXG4uZmEtd2VlYmx5OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY1Y2NcXFwiOyB9XFxuXFxuLmZhLXdlaWJvOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxOGFcXFwiOyB9XFxuXFxuLmZhLXdlaWdodDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDk2XFxcIjsgfVxcblxcbi5mYS13ZWlnaHQtaGFuZ2luZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNWNkXFxcIjsgfVxcblxcbi5mYS13ZWl4aW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjFkN1xcXCI7IH1cXG5cXG4uZmEtd2hhdHNhcHA6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjIzMlxcXCI7IH1cXG5cXG4uZmEtd2hhdHNhcHAtc3F1YXJlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0MGNcXFwiOyB9XFxuXFxuLmZhLXdoZWVsY2hhaXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE5M1xcXCI7IH1cXG5cXG4uZmEtd2htY3M6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQwZFxcXCI7IH1cXG5cXG4uZmEtd2lmaTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMWViXFxcIjsgfVxcblxcbi5mYS13aWtpcGVkaWEtdzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjY2XFxcIjsgfVxcblxcbi5mYS13aW5kOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY3MmVcXFwiOyB9XFxuXFxuLmZhLXdpbmRvdy1jbG9zZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDEwXFxcIjsgfVxcblxcbi5mYS13aW5kb3ctbWF4aW1pemU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJkMFxcXCI7IH1cXG5cXG4uZmEtd2luZG93LW1pbmltaXplOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyZDFcXFwiOyB9XFxuXFxuLmZhLXdpbmRvdy1yZXN0b3JlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyZDJcXFwiOyB9XFxuXFxuLmZhLXdpbmRvd3M6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE3YVxcXCI7IH1cXG5cXG4uZmEtd2luZS1ib3R0bGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjcyZlxcXCI7IH1cXG5cXG4uZmEtd2luZS1nbGFzczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNGUzXFxcIjsgfVxcblxcbi5mYS13aW5lLWdsYXNzLWFsdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNWNlXFxcIjsgfVxcblxcbi5mYS13aXg6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjVjZlxcXCI7IH1cXG5cXG4uZmEtd2l6YXJkcy1vZi10aGUtY29hc3Q6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjczMFxcXCI7IH1cXG5cXG4uZmEtd29sZi1wYWNrLWJhdHRhbGlvbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNTE0XFxcIjsgfVxcblxcbi5mYS13b24tc2lnbjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMTU5XFxcIjsgfVxcblxcbi5mYS13b3JkcHJlc3M6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE5YVxcXCI7IH1cXG5cXG4uZmEtd29yZHByZXNzLXNpbXBsZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDExXFxcIjsgfVxcblxcbi5mYS13cGJlZ2lubmVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyOTdcXFwiOyB9XFxuXFxuLmZhLXdwZXhwbG9yZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjJkZVxcXCI7IH1cXG5cXG4uZmEtd3Bmb3JtczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMjk4XFxcIjsgfVxcblxcbi5mYS13cHJlc3NyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYzZTRcXFwiOyB9XFxuXFxuLmZhLXdyZW5jaDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmMGFkXFxcIjsgfVxcblxcbi5mYS14LXJheTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmNDk3XFxcIjsgfVxcblxcbi5mYS14Ym94OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY0MTJcXFwiOyB9XFxuXFxuLmZhLXhpbmc6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE2OFxcXCI7IH1cXG5cXG4uZmEteGluZy1zcXVhcmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE2OVxcXCI7IH1cXG5cXG4uZmEteS1jb21iaW5hdG9yOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyM2JcXFwiOyB9XFxuXFxuLmZhLXlhaG9vOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxOWVcXFwiOyB9XFxuXFxuLmZhLXlhbW1lcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmODQwXFxcIjsgfVxcblxcbi5mYS15YW5kZXg6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQxM1xcXCI7IH1cXG5cXG4uZmEteWFuZGV4LWludGVybmF0aW9uYWw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQxNFxcXCI7IH1cXG5cXG4uZmEteWFybjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxmN2UzXFxcIjsgfVxcblxcbi5mYS15ZWxwOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxZTlcXFwiOyB9XFxuXFxuLmZhLXllbi1zaWduOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYxNTdcXFwiOyB9XFxuXFxuLmZhLXlpbi15YW5nOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGY2YWRcXFwiOyB9XFxuXFxuLmZhLXlvYXN0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXGYyYjFcXFwiOyB9XFxuXFxuLmZhLXlvdXR1YmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjE2N1xcXCI7IH1cXG5cXG4uZmEteW91dHViZS1zcXVhcmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjQzMVxcXCI7IH1cXG5cXG4uZmEtemhpaHU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcZjYzZlxcXCI7IH1cXG5cXG4uc3Itb25seSB7XFxuICBib3JkZXI6IDA7XFxuICBjbGlwOiByZWN0KDAsIDAsIDAsIDApO1xcbiAgaGVpZ2h0OiAxcHg7XFxuICBtYXJnaW46IC0xcHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgcGFkZGluZzogMDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAxcHg7IH1cXG5cXG4uc3Itb25seS1mb2N1c2FibGU6YWN0aXZlLCAuc3Itb25seS1mb2N1c2FibGU6Zm9jdXMge1xcbiAgY2xpcDogYXV0bztcXG4gIGhlaWdodDogYXV0bztcXG4gIG1hcmdpbjogMDtcXG4gIG92ZXJmbG93OiB2aXNpYmxlO1xcbiAgcG9zaXRpb246IHN0YXRpYztcXG4gIHdpZHRoOiBhdXRvOyB9XFxuXFxuLyohXFxuICogRm9udCBBd2Vzb21lIEZyZWUgNS45LjAgYnkgQGZvbnRhd2Vzb21lIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb21cXG4gKiBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZS9mcmVlIChJY29uczogQ0MgQlkgNC4wLCBGb250czogU0lMIE9GTCAxLjEsIENvZGU6IE1JVCBMaWNlbnNlKVxcbiAqL1xcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6ICdGb250IEF3ZXNvbWUgNSBGcmVlJztcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiA5MDA7XFxuICBmb250LWRpc3BsYXk6IGF1dG87XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMjRfX18gKyBcIik7XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMjVfX18gKyBcIikgZm9ybWF0KFxcXCJlbWJlZGRlZC1vcGVudHlwZVxcXCIpLCB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzI2X19fICsgXCIpIGZvcm1hdChcXFwid29mZjJcXFwiKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18yN19fXyArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18yOF9fXyArIFwiKSBmb3JtYXQoXFxcInRydWV0eXBlXFxcIiksIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMjlfX18gKyBcIikgZm9ybWF0KFxcXCJzdmdcXFwiKTsgfVxcblxcbi5mYSxcXG4uZmFzIHtcXG4gIGZvbnQtZmFtaWx5OiAnRm9udCBBd2Vzb21lIDUgRnJlZSc7XFxuICBmb250LXdlaWdodDogOTAwOyB9XFxuXFxuLyohXFxuICogRm9udCBBd2Vzb21lIEZyZWUgNS45LjAgYnkgQGZvbnRhd2Vzb21lIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb21cXG4gKiBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZS9mcmVlIChJY29uczogQ0MgQlkgNC4wLCBGb250czogU0lMIE9GTCAxLjEsIENvZGU6IE1JVCBMaWNlbnNlKVxcbiAqL1xcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6ICdGb250IEF3ZXNvbWUgNSBGcmVlJztcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBmb250LWRpc3BsYXk6IGF1dG87XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMzBfX18gKyBcIik7XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMzFfX18gKyBcIikgZm9ybWF0KFxcXCJlbWJlZGRlZC1vcGVudHlwZVxcXCIpLCB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzMyX19fICsgXCIpIGZvcm1hdChcXFwid29mZjJcXFwiKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18zM19fXyArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18zNF9fXyArIFwiKSBmb3JtYXQoXFxcInRydWV0eXBlXFxcIiksIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMzVfX18gKyBcIikgZm9ybWF0KFxcXCJzdmdcXFwiKTsgfVxcblxcbi5mYXIge1xcbiAgZm9udC1mYW1pbHk6ICdGb250IEF3ZXNvbWUgNSBGcmVlJztcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7IH1cXG5cXG4vKiFcXG4gKiBGb250IEF3ZXNvbWUgRnJlZSA1LjkuMCBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbVxcbiAqIExpY2Vuc2UgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbS9saWNlbnNlL2ZyZWUgKEljb25zOiBDQyBCWSA0LjAsIEZvbnRzOiBTSUwgT0ZMIDEuMSwgQ29kZTogTUlUIExpY2Vuc2UpXFxuICovXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogJ0ZvbnQgQXdlc29tZSA1IEJyYW5kcyc7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgZm9udC1kaXNwbGF5OiBhdXRvO1xcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzM2X19fICsgXCIpO1xcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzM3X19fICsgXCIpIGZvcm1hdChcXFwiZW1iZWRkZWQtb3BlbnR5cGVcXFwiKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfX18zOF9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmYyXFxcIiksIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fMzlfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIiksIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX19fNDBfX18gKyBcIikgZm9ybWF0KFxcXCJ0cnVldHlwZVxcXCIpLCB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9fXzQxX19fICsgXCIpIGZvcm1hdChcXFwic3ZnXFxcIik7IH1cXG5cXG4uZmFiIHtcXG4gIGZvbnQtZmFtaWx5OiAnRm9udCBBd2Vzb21lIDUgQnJhbmRzJzsgfVxcblxcbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXFxcXHJcXG4gICAgTUFJTlxcclxcblxcXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cXG4vKiBnbG9iYWwgYm94LXNpemluZyAqL1xcbiosXFxuKjphZnRlcixcXG4qOmJlZm9yZSB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxuICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5OyB9XFxuXFxuLyogVHlwb2dyYXBoeSAqL1xcbmh0bWwge1xcbiAgZm9udC1zaXplOiAxNnB4OyB9XFxuXFxuYm9keSB7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjg3KTtcXG4gIGZvbnQtZmFtaWx5OiBSb2JvdG8sIHNhbnMtc2VyaWY7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgZm9udC1zaXplOiAxcmVtOyB9XFxuXFxuLyogQ2xlYXIgKi9cXG4uY2xlYXIge1xcbiAgKnpvb206IDE7IH1cXG4gIC5jbGVhcjpiZWZvcmUsIC5jbGVhcjphZnRlciB7XFxuICAgIGNvbnRlbnQ6IFxcXCIgXFxcIjtcXG4gICAgZGlzcGxheTogdGFibGU7IH1cXG4gIC5jbGVhcjphZnRlciB7XFxuICAgIGNsZWFyOiBib3RoOyB9XFxuXFxuLyogSW5wdXQgKi9cXG5pbnB1dDpmb2N1cyxcXG50ZXh0YXJlYTpmb2N1cyB7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgYm9yZGVyOiAxcHggc29saWQgIzRhOTBlMjsgfVxcblwiLCBcIlwiXSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBuZWVkUXVvdGVzKSB7XG4gIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB1cmw7XG4gIH0gLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG5cblxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9IC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcblxuXG4gIGlmICgvW1wiJygpIFxcdFxcbl0vLnRlc3QodXJsKSB8fCBuZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKSwgXCJcXFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNzNmMGE4OGJiY2ExYmVjMTlmYjEzMDNjNjg5ZDA0YzYud29mZjJcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIzNWIwN2ViMmY4NzExYWUwOGQxZjU4YzA0Mzg4MDkzMC53b2ZmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNDM1N2JlYjgyM2E1ZjhkNjVjMjYwZjA0NWQ5ZTAxOWEud29mZjJcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmNTkwMmQ1ZWY5NjE3MTdlZDI2MzkwMmZjNDI5ZTZhZS53b2ZmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZDI2ODcxZTgxNDliNTc1OWY4MTRmZDNjN2E0Zjc4NGIud29mZjJcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjNzNlYjFjZWJhMzMyMWE4MGEwYWZmMTNhZDM3M2NiNC53b2ZmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZThlYWFlOTAyYzNhNGRhY2I5YTUwNjI2NjdlMTA1NzYud29mZjJcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIxM2VmZTZjYmMxMGI5NzE0NGEyODMxMGViZGVkYTU5NC53b2ZmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYWQ1MzhhNjliMGU4NjE1ZWQwNDE5YzQ1MjkzNDRmZmMud29mZjJcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJkM2I0NzM3NWFmZDkwNDk4M2Q5YmU4ZDZlMjM5YTk0OS53b2ZmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNWI0YTMzZTE3NmZmNzM2YTc0ZjBjYTJkZDllNmIzOTYud29mZjJcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI4YTk2ZWRiYmNkOWE2OTkxZDc5MzcxYWVkMGIwMjg4ZS53b2ZmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiOTBkMTY3NjAwM2Q5YzI4YzA0OTk0YzE4YmZkOGI1NTgud29mZjJcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIxZDY1OTQ4MjY2MTU2MDdmNmRjODYwYmI0OTI1OGFjYi53b2ZmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMTNlYzBlYjViZGI4MjFmZjQ5MzAyMzdkN2M5Zjk0M2Yud29mZjJcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI4M2UxMTRjMzE2ZmNjM2YyM2Y1MjRlYzNlMWM2NTk4NC53b2ZmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYjUyZmFjMmJiOTNjNTg1OGYzZjI2NzVlNGI1MmUxZGUud29mZjJcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI1MGQ3NWU0OGUwYTNkZGFiMWRkMTVkNmJmYjlkMzcwMC53b2ZmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiOTQwMDhlNjlhYWYwNWRhNzVjMGJiZjhmOGJiMGRiNDEud29mZjJcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI0ZmUwZjczY2M5MTliYTJiN2EzYzM2ZTQ1NDBkNzI1Yy53b2ZmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNTllYjM2MDEzOTRkZDg3ZjMwZjgyNDMzZmIzOWRkOTQud29mZjJcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIzMTNhNjU2MzBkMzQxNjQ1YzEzZTRmMmEwMzY0MzgxZC53b2ZmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZjc1NTY5ZjhhNWZhYjA4OTNmYTcxMmQ4YzBkOWMzZmUud29mZjJcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYzJmYWRjMzkyOGYyZjIyMzQxODg4NzExMTk0N2I0MC53b2ZmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYjVjZjhhZTI2NzQ4NTcwZDhmYjk1YTQ3ZjQ2YjY5ZTEud29mZjJcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI0YmNlZDdjNGMwZDYxZDRmOTg4NjI5YmI4YWU4MGI4Yi53b2ZmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYWNmNTBmNTk4MDJmMjBkOGI0NTIyMGVhYWU1MzJhMWMudHRmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYjU1N2Y1NmUzNjdlNTkzNDRjYTk1ZjlkMWZiNDQzNTIuc3ZnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZTA3ZDllNDBiMjYwNDhkOWFiZTJlZjk2NmNkNmUyNjMud29mZjJcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJlNTc3MGY5ODYzOTYzZmI1NzY5NDJlMjUyMTRhMjI2ZC53b2ZmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNTkyMTUwMzJhNDM5NzUwN2I4MGU1NjI1ZGMzMjNkZTMudHRmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiOGZkZWE0ZTg5YWM0MDVkOWY4ZGIzMjdhZGIzMzFkOGQuc3ZnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNzU1OWIzNzc0YTA2MjVlOGNhNmMwMTYwZjhmNmNmZDgud29mZjJcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmZTlkNjJlMGQxNmEzMzNhMjBlNjNjM2U3NTk1ZjgyZS53b2ZmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZWQyYjhiZjExNzE2MDQ2NmJhNjIyMGE4ZjFkYTU0YTQudHRmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMDczYzJmM2NlNjBlYWY2OWNjMjc2N2VmM2Q5ODkwNzguc3ZnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMzY2OTM0MTZhY2NjZTA2MzU2ZjQ2YjBkNTcyNDJiNTMucG5nXCI7IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHBIZWFkZXIudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcEhlYWRlci52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCIiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5oZWFkZXIge1xcbiAgbWF4LXdpZHRoOiAxMDgwcHg7XFxuICBtYXJnaW46IDAgYXV0byA4MHB4O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcbi5oZWFkZXIgLmhlYWRlcl9fbG9nbyB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44Nyk7XFxufVxcbi5oZWFkZXIgLmhlYWRlcl9fbG9nbyAubG9nb19faW1nIHtcXG4gICAgICBtYXgtaGVpZ2h0OiAzMnB4O1xcbiAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcXG59XFxuLmhlYWRlciAuaGVhZGVyX19sb2dvIC5sb2dvX190aXRsZSB7XFxuICAgICAgZm9udC1zaXplOiAxLjVyZW07XFxuICAgICAgbGluZS1oZWlnaHQ6IDJyZW07XFxuICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gICAgICBsZXR0ZXItc3BhY2luZzogbm9ybWFsO1xcbn1cXG4uaGVhZGVyIC5oZWFkZXJfX25hdiB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxufVxcbi5oZWFkZXIgLmhlYWRlcl9fbmF2IC5oZWFkZXJfX2xvZ291dCB7XFxuICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgIGhlaWdodDogMzJweDtcXG4gICAgICB3aWR0aDogMzJweDtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgICBvdXRsaW5lOiBub25lO1xcbiAgICAgIGJvcmRlcjogbm9uZTtcXG4gICAgICBtYXJnaW4tbGVmdDogMTVweDtcXG4gICAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjM4KTtcXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi5oZWFkZXIgLmhlYWRlcl9fbmF2IC5oZWFkZXJfX2xvZ291dDpob3ZlciwgLmhlYWRlciAuaGVhZGVyX19uYXYgLmhlYWRlcl9fbG9nb3V0OmFjdGl2ZSB7XFxuICAgICAgICBjb2xvcjogIzRhOTBlMjtcXG59XFxuXCIsIFwiXCJdKTtcbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTWFpbkxheW91dC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTWFpbkxheW91dC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCIiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5tYWluLWxheW91dCB7XFxuICBwYWRkaW5nOiA0MHB4IDA7XFxufVxcbi5tYWluLWxheW91dCAuY29udGVudCB7XFxuICAgIG1heC13aWR0aDogMTA4MHB4O1xcbiAgICBtYXJnaW46IDAgYXV0bztcXG59XFxuXCIsIFwiXCJdKTtcbiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoX3ZtLmxheW91dCwgeyB0YWc6IFwiY29tcG9uZW50XCIgfSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTdiYTViZDkwJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkQ6XFxcXFByb2plY3RzXFxcXFdob2VyX3Rlc3RcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzdiYTViZDkwJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzdiYTViZDkwJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTdiYTViZDkwJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzdiYTViZDkwJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvQXBwLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsIjx0ZW1wbGF0ZT5cbiAgPGNvbXBvbmVudCA6aXM9XCJsYXlvdXRcIiAvPlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5jb25zdCBkZWZhdWx0X2xheW91dCA9IFwibWFpblwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6IFwiQXBwXCIsXG4gIGNvbXB1dGVkOiB7XG4gICAgbGF5b3V0KCkge1xuICAgICAgcmV0dXJuICh0aGlzLiRyb3V0ZS5tZXRhLmxheW91dCB8fCBkZWZhdWx0X2xheW91dCkgKyBcIi1sYXlvdXRcIjtcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZWQoKSB7XG4gICAgYXhpb3MuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShcbiAgICAgIHJlc3BvbnNlID0+IHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgfSxcbiAgICAgIGVycm9yID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJyZWZyZXNoIHRva2VuXCIpO1xuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yLnJlc3BvbnNlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2UgJiYgZXJyb3IucmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcbiAgICAgICAgICAgIHRoaXMuJHN0b3JlXG4gICAgICAgICAgICAgIC5kaXNwYXRjaChcImF1dGgvcmVmcmVzaFRva2VuXCIpXG4gICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInRva2VuIHJlZnJlc2hlZFwiLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJ0b2tlbiBub3QgcmVmcmVzaGVkLiBMb2dvdXRcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKFwiL2xvZ2luXCIpO1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICApO1xuICB9XG59O1xuPC9zY3JpcHQ+XG4iLCIvKiFcbiAgKiB2dWUtcm91dGVyIHYzLjAuN1xuICAqIChjKSAyMDE5IEV2YW4gWW91XG4gICogQGxpY2Vuc2UgTUlUXG4gICovXG4vKiAgKi9cblxuZnVuY3Rpb24gYXNzZXJ0IChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoKFwiW3Z1ZS1yb3V0ZXJdIFwiICsgbWVzc2FnZSkpXG4gIH1cbn1cblxuZnVuY3Rpb24gd2FybiAoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25kaXRpb24pIHtcbiAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS53YXJuKChcIlt2dWUtcm91dGVyXSBcIiArIG1lc3NhZ2UpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0Vycm9yIChlcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlcnIpLmluZGV4T2YoJ0Vycm9yJykgPiAtMVxufVxuXG5mdW5jdGlvbiBleHRlbmQgKGEsIGIpIHtcbiAgZm9yICh2YXIga2V5IGluIGIpIHtcbiAgICBhW2tleV0gPSBiW2tleV07XG4gIH1cbiAgcmV0dXJuIGFcbn1cblxudmFyIFZpZXcgPSB7XG4gIG5hbWU6ICdSb3V0ZXJWaWV3JyxcbiAgZnVuY3Rpb25hbDogdHJ1ZSxcbiAgcHJvcHM6IHtcbiAgICBuYW1lOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnZGVmYXVsdCdcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChfLCByZWYpIHtcbiAgICB2YXIgcHJvcHMgPSByZWYucHJvcHM7XG4gICAgdmFyIGNoaWxkcmVuID0gcmVmLmNoaWxkcmVuO1xuICAgIHZhciBwYXJlbnQgPSByZWYucGFyZW50O1xuICAgIHZhciBkYXRhID0gcmVmLmRhdGE7XG5cbiAgICAvLyB1c2VkIGJ5IGRldnRvb2xzIHRvIGRpc3BsYXkgYSByb3V0ZXItdmlldyBiYWRnZVxuICAgIGRhdGEucm91dGVyVmlldyA9IHRydWU7XG5cbiAgICAvLyBkaXJlY3RseSB1c2UgcGFyZW50IGNvbnRleHQncyBjcmVhdGVFbGVtZW50KCkgZnVuY3Rpb25cbiAgICAvLyBzbyB0aGF0IGNvbXBvbmVudHMgcmVuZGVyZWQgYnkgcm91dGVyLXZpZXcgY2FuIHJlc29sdmUgbmFtZWQgc2xvdHNcbiAgICB2YXIgaCA9IHBhcmVudC4kY3JlYXRlRWxlbWVudDtcbiAgICB2YXIgbmFtZSA9IHByb3BzLm5hbWU7XG4gICAgdmFyIHJvdXRlID0gcGFyZW50LiRyb3V0ZTtcbiAgICB2YXIgY2FjaGUgPSBwYXJlbnQuX3JvdXRlclZpZXdDYWNoZSB8fCAocGFyZW50Ll9yb3V0ZXJWaWV3Q2FjaGUgPSB7fSk7XG5cbiAgICAvLyBkZXRlcm1pbmUgY3VycmVudCB2aWV3IGRlcHRoLCBhbHNvIGNoZWNrIHRvIHNlZSBpZiB0aGUgdHJlZVxuICAgIC8vIGhhcyBiZWVuIHRvZ2dsZWQgaW5hY3RpdmUgYnV0IGtlcHQtYWxpdmUuXG4gICAgdmFyIGRlcHRoID0gMDtcbiAgICB2YXIgaW5hY3RpdmUgPSBmYWxzZTtcbiAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5fcm91dGVyUm9vdCAhPT0gcGFyZW50KSB7XG4gICAgICB2YXIgdm5vZGVEYXRhID0gcGFyZW50LiR2bm9kZSAmJiBwYXJlbnQuJHZub2RlLmRhdGE7XG4gICAgICBpZiAodm5vZGVEYXRhKSB7XG4gICAgICAgIGlmICh2bm9kZURhdGEucm91dGVyVmlldykge1xuICAgICAgICAgIGRlcHRoKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZub2RlRGF0YS5rZWVwQWxpdmUgJiYgcGFyZW50Ll9pbmFjdGl2ZSkge1xuICAgICAgICAgIGluYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgfVxuICAgIGRhdGEucm91dGVyVmlld0RlcHRoID0gZGVwdGg7XG5cbiAgICAvLyByZW5kZXIgcHJldmlvdXMgdmlldyBpZiB0aGUgdHJlZSBpcyBpbmFjdGl2ZSBhbmQga2VwdC1hbGl2ZVxuICAgIGlmIChpbmFjdGl2ZSkge1xuICAgICAgcmV0dXJuIGgoY2FjaGVbbmFtZV0sIGRhdGEsIGNoaWxkcmVuKVxuICAgIH1cblxuICAgIHZhciBtYXRjaGVkID0gcm91dGUubWF0Y2hlZFtkZXB0aF07XG4gICAgLy8gcmVuZGVyIGVtcHR5IG5vZGUgaWYgbm8gbWF0Y2hlZCByb3V0ZVxuICAgIGlmICghbWF0Y2hlZCkge1xuICAgICAgY2FjaGVbbmFtZV0gPSBudWxsO1xuICAgICAgcmV0dXJuIGgoKVxuICAgIH1cblxuICAgIHZhciBjb21wb25lbnQgPSBjYWNoZVtuYW1lXSA9IG1hdGNoZWQuY29tcG9uZW50c1tuYW1lXTtcblxuICAgIC8vIGF0dGFjaCBpbnN0YW5jZSByZWdpc3RyYXRpb24gaG9va1xuICAgIC8vIHRoaXMgd2lsbCBiZSBjYWxsZWQgaW4gdGhlIGluc3RhbmNlJ3MgaW5qZWN0ZWQgbGlmZWN5Y2xlIGhvb2tzXG4gICAgZGF0YS5yZWdpc3RlclJvdXRlSW5zdGFuY2UgPSBmdW5jdGlvbiAodm0sIHZhbCkge1xuICAgICAgLy8gdmFsIGNvdWxkIGJlIHVuZGVmaW5lZCBmb3IgdW5yZWdpc3RyYXRpb25cbiAgICAgIHZhciBjdXJyZW50ID0gbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV07XG4gICAgICBpZiAoXG4gICAgICAgICh2YWwgJiYgY3VycmVudCAhPT0gdm0pIHx8XG4gICAgICAgICghdmFsICYmIGN1cnJlbnQgPT09IHZtKVxuICAgICAgKSB7XG4gICAgICAgIG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdID0gdmFsO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFsc28gcmVnaXN0ZXIgaW5zdGFuY2UgaW4gcHJlcGF0Y2ggaG9va1xuICAgIC8vIGluIGNhc2UgdGhlIHNhbWUgY29tcG9uZW50IGluc3RhbmNlIGlzIHJldXNlZCBhY3Jvc3MgZGlmZmVyZW50IHJvdXRlc1xuICAgIDsoZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSkpLnByZXBhdGNoID0gZnVuY3Rpb24gKF8sIHZub2RlKSB7XG4gICAgICBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIH07XG5cbiAgICAvLyByZWdpc3RlciBpbnN0YW5jZSBpbiBpbml0IGhvb2tcbiAgICAvLyBpbiBjYXNlIGtlcHQtYWxpdmUgY29tcG9uZW50IGJlIGFjdGl2ZWQgd2hlbiByb3V0ZXMgY2hhbmdlZFxuICAgIGRhdGEuaG9vay5pbml0ID0gZnVuY3Rpb24gKHZub2RlKSB7XG4gICAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUgJiZcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiZcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgIT09IG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdXG4gICAgICApIHtcbiAgICAgICAgbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gcmVzb2x2ZSBwcm9wc1xuICAgIHZhciBwcm9wc1RvUGFzcyA9IGRhdGEucHJvcHMgPSByZXNvbHZlUHJvcHMocm91dGUsIG1hdGNoZWQucHJvcHMgJiYgbWF0Y2hlZC5wcm9wc1tuYW1lXSk7XG4gICAgaWYgKHByb3BzVG9QYXNzKSB7XG4gICAgICAvLyBjbG9uZSB0byBwcmV2ZW50IG11dGF0aW9uXG4gICAgICBwcm9wc1RvUGFzcyA9IGRhdGEucHJvcHMgPSBleHRlbmQoe30sIHByb3BzVG9QYXNzKTtcbiAgICAgIC8vIHBhc3Mgbm9uLWRlY2xhcmVkIHByb3BzIGFzIGF0dHJzXG4gICAgICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzID0gZGF0YS5hdHRycyB8fCB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wc1RvUGFzcykge1xuICAgICAgICBpZiAoIWNvbXBvbmVudC5wcm9wcyB8fCAhKGtleSBpbiBjb21wb25lbnQucHJvcHMpKSB7XG4gICAgICAgICAgYXR0cnNba2V5XSA9IHByb3BzVG9QYXNzW2tleV07XG4gICAgICAgICAgZGVsZXRlIHByb3BzVG9QYXNzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaChjb21wb25lbnQsIGRhdGEsIGNoaWxkcmVuKVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVQcm9wcyAocm91dGUsIGNvbmZpZykge1xuICBzd2l0Y2ggKHR5cGVvZiBjb25maWcpIHtcbiAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgcmV0dXJuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHJldHVybiBjb25maWdcbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICByZXR1cm4gY29uZmlnKHJvdXRlKVxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIGNvbmZpZyA/IHJvdXRlLnBhcmFtcyA6IHVuZGVmaW5lZFxuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIFwicHJvcHMgaW4gXFxcIlwiICsgKHJvdXRlLnBhdGgpICsgXCJcXFwiIGlzIGEgXCIgKyAodHlwZW9mIGNvbmZpZykgKyBcIiwgXCIgK1xuICAgICAgICAgIFwiZXhwZWN0aW5nIGFuIG9iamVjdCwgZnVuY3Rpb24gb3IgYm9vbGVhbi5cIlxuICAgICAgICApO1xuICAgICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgZW5jb2RlUmVzZXJ2ZVJFID0gL1shJygpKl0vZztcbnZhciBlbmNvZGVSZXNlcnZlUmVwbGFjZXIgPSBmdW5jdGlvbiAoYykgeyByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KTsgfTtcbnZhciBjb21tYVJFID0gLyUyQy9nO1xuXG4vLyBmaXhlZCBlbmNvZGVVUklDb21wb25lbnQgd2hpY2ggaXMgbW9yZSBjb25mb3JtYW50IHRvIFJGQzM5ODY6XG4vLyAtIGVzY2FwZXMgWyEnKCkqXVxuLy8gLSBwcmVzZXJ2ZSBjb21tYXNcbnZhciBlbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyKVxuICAucmVwbGFjZShlbmNvZGVSZXNlcnZlUkUsIGVuY29kZVJlc2VydmVSZXBsYWNlcilcbiAgLnJlcGxhY2UoY29tbWFSRSwgJywnKTsgfTtcblxudmFyIGRlY29kZSA9IGRlY29kZVVSSUNvbXBvbmVudDtcblxuZnVuY3Rpb24gcmVzb2x2ZVF1ZXJ5IChcbiAgcXVlcnksXG4gIGV4dHJhUXVlcnksXG4gIF9wYXJzZVF1ZXJ5XG4pIHtcbiAgaWYgKCBleHRyYVF1ZXJ5ID09PSB2b2lkIDAgKSBleHRyYVF1ZXJ5ID0ge307XG5cbiAgdmFyIHBhcnNlID0gX3BhcnNlUXVlcnkgfHwgcGFyc2VRdWVyeTtcbiAgdmFyIHBhcnNlZFF1ZXJ5O1xuICB0cnkge1xuICAgIHBhcnNlZFF1ZXJ5ID0gcGFyc2UocXVlcnkgfHwgJycpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKGZhbHNlLCBlLm1lc3NhZ2UpO1xuICAgIHBhcnNlZFF1ZXJ5ID0ge307XG4gIH1cbiAgZm9yICh2YXIga2V5IGluIGV4dHJhUXVlcnkpIHtcbiAgICBwYXJzZWRRdWVyeVtrZXldID0gZXh0cmFRdWVyeVtrZXldO1xuICB9XG4gIHJldHVybiBwYXJzZWRRdWVyeVxufVxuXG5mdW5jdGlvbiBwYXJzZVF1ZXJ5IChxdWVyeSkge1xuICB2YXIgcmVzID0ge307XG5cbiAgcXVlcnkgPSBxdWVyeS50cmltKCkucmVwbGFjZSgvXihcXD98I3wmKS8sICcnKTtcblxuICBpZiAoIXF1ZXJ5KSB7XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgcXVlcnkuc3BsaXQoJyYnKS5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHZhciBwYXJ0cyA9IHBhcmFtLnJlcGxhY2UoL1xcKy9nLCAnICcpLnNwbGl0KCc9Jyk7XG4gICAgdmFyIGtleSA9IGRlY29kZShwYXJ0cy5zaGlmdCgpKTtcbiAgICB2YXIgdmFsID0gcGFydHMubGVuZ3RoID4gMFxuICAgICAgPyBkZWNvZGUocGFydHMuam9pbignPScpKVxuICAgICAgOiBudWxsO1xuXG4gICAgaWYgKHJlc1trZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlc1trZXldID0gdmFsO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXNba2V5XSkpIHtcbiAgICAgIHJlc1trZXldLnB1c2godmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzW2tleV0gPSBbcmVzW2tleV0sIHZhbF07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVF1ZXJ5IChvYmopIHtcbiAgdmFyIHJlcyA9IG9iaiA/IE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgdmFsID0gb2JqW2tleV07XG5cbiAgICBpZiAodmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAnJ1xuICAgIH1cblxuICAgIGlmICh2YWwgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBlbmNvZGUoa2V5KVxuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHZhbC5mb3JFYWNoKGZ1bmN0aW9uICh2YWwyKSB7XG4gICAgICAgIGlmICh2YWwyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsMiA9PT0gbnVsbCkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGVuY29kZShrZXkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2YWwyKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKCcmJylcbiAgICB9XG5cbiAgICByZXR1cm4gZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodmFsKVxuICB9KS5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgubGVuZ3RoID4gMDsgfSkuam9pbignJicpIDogbnVsbDtcbiAgcmV0dXJuIHJlcyA/IChcIj9cIiArIHJlcykgOiAnJ1xufVxuXG4vKiAgKi9cblxudmFyIHRyYWlsaW5nU2xhc2hSRSA9IC9cXC8/JC87XG5cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlIChcbiAgcmVjb3JkLFxuICBsb2NhdGlvbixcbiAgcmVkaXJlY3RlZEZyb20sXG4gIHJvdXRlclxuKSB7XG4gIHZhciBzdHJpbmdpZnlRdWVyeSQkMSA9IHJvdXRlciAmJiByb3V0ZXIub3B0aW9ucy5zdHJpbmdpZnlRdWVyeTtcblxuICB2YXIgcXVlcnkgPSBsb2NhdGlvbi5xdWVyeSB8fCB7fTtcbiAgdHJ5IHtcbiAgICBxdWVyeSA9IGNsb25lKHF1ZXJ5KTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcm91dGUgPSB7XG4gICAgbmFtZTogbG9jYXRpb24ubmFtZSB8fCAocmVjb3JkICYmIHJlY29yZC5uYW1lKSxcbiAgICBtZXRhOiAocmVjb3JkICYmIHJlY29yZC5tZXRhKSB8fCB7fSxcbiAgICBwYXRoOiBsb2NhdGlvbi5wYXRoIHx8ICcvJyxcbiAgICBoYXNoOiBsb2NhdGlvbi5oYXNoIHx8ICcnLFxuICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICBwYXJhbXM6IGxvY2F0aW9uLnBhcmFtcyB8fCB7fSxcbiAgICBmdWxsUGF0aDogZ2V0RnVsbFBhdGgobG9jYXRpb24sIHN0cmluZ2lmeVF1ZXJ5JCQxKSxcbiAgICBtYXRjaGVkOiByZWNvcmQgPyBmb3JtYXRNYXRjaChyZWNvcmQpIDogW11cbiAgfTtcbiAgaWYgKHJlZGlyZWN0ZWRGcm9tKSB7XG4gICAgcm91dGUucmVkaXJlY3RlZEZyb20gPSBnZXRGdWxsUGF0aChyZWRpcmVjdGVkRnJvbSwgc3RyaW5naWZ5UXVlcnkkJDEpO1xuICB9XG4gIHJldHVybiBPYmplY3QuZnJlZXplKHJvdXRlKVxufVxuXG5mdW5jdGlvbiBjbG9uZSAodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlLm1hcChjbG9uZSlcbiAgfSBlbHNlIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgcmVzW2tleV0gPSBjbG9uZSh2YWx1ZVtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG59XG5cbi8vIHRoZSBzdGFydGluZyByb3V0ZSB0aGF0IHJlcHJlc2VudHMgdGhlIGluaXRpYWwgc3RhdGVcbnZhciBTVEFSVCA9IGNyZWF0ZVJvdXRlKG51bGwsIHtcbiAgcGF0aDogJy8nXG59KTtcblxuZnVuY3Rpb24gZm9ybWF0TWF0Y2ggKHJlY29yZCkge1xuICB2YXIgcmVzID0gW107XG4gIHdoaWxlIChyZWNvcmQpIHtcbiAgICByZXMudW5zaGlmdChyZWNvcmQpO1xuICAgIHJlY29yZCA9IHJlY29yZC5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnZXRGdWxsUGF0aCAoXG4gIHJlZixcbiAgX3N0cmluZ2lmeVF1ZXJ5XG4pIHtcbiAgdmFyIHBhdGggPSByZWYucGF0aDtcbiAgdmFyIHF1ZXJ5ID0gcmVmLnF1ZXJ5OyBpZiAoIHF1ZXJ5ID09PSB2b2lkIDAgKSBxdWVyeSA9IHt9O1xuICB2YXIgaGFzaCA9IHJlZi5oYXNoOyBpZiAoIGhhc2ggPT09IHZvaWQgMCApIGhhc2ggPSAnJztcblxuICB2YXIgc3RyaW5naWZ5ID0gX3N0cmluZ2lmeVF1ZXJ5IHx8IHN0cmluZ2lmeVF1ZXJ5O1xuICByZXR1cm4gKHBhdGggfHwgJy8nKSArIHN0cmluZ2lmeShxdWVyeSkgKyBoYXNoXG59XG5cbmZ1bmN0aW9uIGlzU2FtZVJvdXRlIChhLCBiKSB7XG4gIGlmIChiID09PSBTVEFSVCkge1xuICAgIHJldHVybiBhID09PSBiXG4gIH0gZWxzZSBpZiAoIWIpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfSBlbHNlIGlmIChhLnBhdGggJiYgYi5wYXRoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGEucGF0aC5yZXBsYWNlKHRyYWlsaW5nU2xhc2hSRSwgJycpID09PSBiLnBhdGgucmVwbGFjZSh0cmFpbGluZ1NsYXNoUkUsICcnKSAmJlxuICAgICAgYS5oYXNoID09PSBiLmhhc2ggJiZcbiAgICAgIGlzT2JqZWN0RXF1YWwoYS5xdWVyeSwgYi5xdWVyeSlcbiAgICApXG4gIH0gZWxzZSBpZiAoYS5uYW1lICYmIGIubmFtZSkge1xuICAgIHJldHVybiAoXG4gICAgICBhLm5hbWUgPT09IGIubmFtZSAmJlxuICAgICAgYS5oYXNoID09PSBiLmhhc2ggJiZcbiAgICAgIGlzT2JqZWN0RXF1YWwoYS5xdWVyeSwgYi5xdWVyeSkgJiZcbiAgICAgIGlzT2JqZWN0RXF1YWwoYS5wYXJhbXMsIGIucGFyYW1zKVxuICAgIClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBpc09iamVjdEVxdWFsIChhLCBiKSB7XG4gIGlmICggYSA9PT0gdm9pZCAwICkgYSA9IHt9O1xuICBpZiAoIGIgPT09IHZvaWQgMCApIGIgPSB7fTtcblxuICAvLyBoYW5kbGUgbnVsbCB2YWx1ZSAjMTU2NlxuICBpZiAoIWEgfHwgIWIpIHsgcmV0dXJuIGEgPT09IGIgfVxuICB2YXIgYUtleXMgPSBPYmplY3Qua2V5cyhhKTtcbiAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYik7XG4gIGlmIChhS2V5cy5sZW5ndGggIT09IGJLZXlzLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiBhS2V5cy5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGFWYWwgPSBhW2tleV07XG4gICAgdmFyIGJWYWwgPSBiW2tleV07XG4gICAgLy8gY2hlY2sgbmVzdGVkIGVxdWFsaXR5XG4gICAgaWYgKHR5cGVvZiBhVmFsID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgYlZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBpc09iamVjdEVxdWFsKGFWYWwsIGJWYWwpXG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcoYVZhbCkgPT09IFN0cmluZyhiVmFsKVxuICB9KVxufVxuXG5mdW5jdGlvbiBpc0luY2x1ZGVkUm91dGUgKGN1cnJlbnQsIHRhcmdldCkge1xuICByZXR1cm4gKFxuICAgIGN1cnJlbnQucGF0aC5yZXBsYWNlKHRyYWlsaW5nU2xhc2hSRSwgJy8nKS5pbmRleE9mKFxuICAgICAgdGFyZ2V0LnBhdGgucmVwbGFjZSh0cmFpbGluZ1NsYXNoUkUsICcvJylcbiAgICApID09PSAwICYmXG4gICAgKCF0YXJnZXQuaGFzaCB8fCBjdXJyZW50Lmhhc2ggPT09IHRhcmdldC5oYXNoKSAmJlxuICAgIHF1ZXJ5SW5jbHVkZXMoY3VycmVudC5xdWVyeSwgdGFyZ2V0LnF1ZXJ5KVxuICApXG59XG5cbmZ1bmN0aW9uIHF1ZXJ5SW5jbHVkZXMgKGN1cnJlbnQsIHRhcmdldCkge1xuICBmb3IgKHZhciBrZXkgaW4gdGFyZ2V0KSB7XG4gICAgaWYgKCEoa2V5IGluIGN1cnJlbnQpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuLyogICovXG5cbi8vIHdvcmsgYXJvdW5kIHdlaXJkIGZsb3cgYnVnXG52YXIgdG9UeXBlcyA9IFtTdHJpbmcsIE9iamVjdF07XG52YXIgZXZlbnRUeXBlcyA9IFtTdHJpbmcsIEFycmF5XTtcblxudmFyIExpbmsgPSB7XG4gIG5hbWU6ICdSb3V0ZXJMaW5rJyxcbiAgcHJvcHM6IHtcbiAgICB0bzoge1xuICAgICAgdHlwZTogdG9UeXBlcyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfSxcbiAgICB0YWc6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdhJ1xuICAgIH0sXG4gICAgZXhhY3Q6IEJvb2xlYW4sXG4gICAgYXBwZW5kOiBCb29sZWFuLFxuICAgIHJlcGxhY2U6IEJvb2xlYW4sXG4gICAgYWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgICBleGFjdEFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gICAgZXZlbnQ6IHtcbiAgICAgIHR5cGU6IGV2ZW50VHlwZXMsXG4gICAgICBkZWZhdWx0OiAnY2xpY2snXG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJvdXRlciA9IHRoaXMuJHJvdXRlcjtcbiAgICB2YXIgY3VycmVudCA9IHRoaXMuJHJvdXRlO1xuICAgIHZhciByZWYgPSByb3V0ZXIucmVzb2x2ZSh0aGlzLnRvLCBjdXJyZW50LCB0aGlzLmFwcGVuZCk7XG4gICAgdmFyIGxvY2F0aW9uID0gcmVmLmxvY2F0aW9uO1xuICAgIHZhciByb3V0ZSA9IHJlZi5yb3V0ZTtcbiAgICB2YXIgaHJlZiA9IHJlZi5ocmVmO1xuXG4gICAgdmFyIGNsYXNzZXMgPSB7fTtcbiAgICB2YXIgZ2xvYmFsQWN0aXZlQ2xhc3MgPSByb3V0ZXIub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3M7XG4gICAgdmFyIGdsb2JhbEV4YWN0QWN0aXZlQ2xhc3MgPSByb3V0ZXIub3B0aW9ucy5saW5rRXhhY3RBY3RpdmVDbGFzcztcbiAgICAvLyBTdXBwb3J0IGdsb2JhbCBlbXB0eSBhY3RpdmUgY2xhc3NcbiAgICB2YXIgYWN0aXZlQ2xhc3NGYWxsYmFjayA9IGdsb2JhbEFjdGl2ZUNsYXNzID09IG51bGxcbiAgICAgID8gJ3JvdXRlci1saW5rLWFjdGl2ZSdcbiAgICAgIDogZ2xvYmFsQWN0aXZlQ2xhc3M7XG4gICAgdmFyIGV4YWN0QWN0aXZlQ2xhc3NGYWxsYmFjayA9IGdsb2JhbEV4YWN0QWN0aXZlQ2xhc3MgPT0gbnVsbFxuICAgICAgPyAncm91dGVyLWxpbmstZXhhY3QtYWN0aXZlJ1xuICAgICAgOiBnbG9iYWxFeGFjdEFjdGl2ZUNsYXNzO1xuICAgIHZhciBhY3RpdmVDbGFzcyA9IHRoaXMuYWN0aXZlQ2xhc3MgPT0gbnVsbFxuICAgICAgPyBhY3RpdmVDbGFzc0ZhbGxiYWNrXG4gICAgICA6IHRoaXMuYWN0aXZlQ2xhc3M7XG4gICAgdmFyIGV4YWN0QWN0aXZlQ2xhc3MgPSB0aGlzLmV4YWN0QWN0aXZlQ2xhc3MgPT0gbnVsbFxuICAgICAgPyBleGFjdEFjdGl2ZUNsYXNzRmFsbGJhY2tcbiAgICAgIDogdGhpcy5leGFjdEFjdGl2ZUNsYXNzO1xuICAgIHZhciBjb21wYXJlVGFyZ2V0ID0gbG9jYXRpb24ucGF0aFxuICAgICAgPyBjcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbiwgbnVsbCwgcm91dGVyKVxuICAgICAgOiByb3V0ZTtcblxuICAgIGNsYXNzZXNbZXhhY3RBY3RpdmVDbGFzc10gPSBpc1NhbWVSb3V0ZShjdXJyZW50LCBjb21wYXJlVGFyZ2V0KTtcbiAgICBjbGFzc2VzW2FjdGl2ZUNsYXNzXSA9IHRoaXMuZXhhY3RcbiAgICAgID8gY2xhc3Nlc1tleGFjdEFjdGl2ZUNsYXNzXVxuICAgICAgOiBpc0luY2x1ZGVkUm91dGUoY3VycmVudCwgY29tcGFyZVRhcmdldCk7XG5cbiAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZ3VhcmRFdmVudChlKSkge1xuICAgICAgICBpZiAodGhpcyQxLnJlcGxhY2UpIHtcbiAgICAgICAgICByb3V0ZXIucmVwbGFjZShsb2NhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm91dGVyLnB1c2gobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBvbiA9IHsgY2xpY2s6IGd1YXJkRXZlbnQgfTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmV2ZW50KSkge1xuICAgICAgdGhpcy5ldmVudC5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7IG9uW2VdID0gaGFuZGxlcjsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uW3RoaXMuZXZlbnRdID0gaGFuZGxlcjtcbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHtcbiAgICAgIGNsYXNzOiBjbGFzc2VzXG4gICAgfTtcblxuICAgIGlmICh0aGlzLnRhZyA9PT0gJ2EnKSB7XG4gICAgICBkYXRhLm9uID0gb247XG4gICAgICBkYXRhLmF0dHJzID0geyBocmVmOiBocmVmIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZpbmQgdGhlIGZpcnN0IDxhPiBjaGlsZCBhbmQgYXBwbHkgbGlzdGVuZXIgYW5kIGhyZWZcbiAgICAgIHZhciBhID0gZmluZEFuY2hvcih0aGlzLiRzbG90cy5kZWZhdWx0KTtcbiAgICAgIGlmIChhKSB7XG4gICAgICAgIC8vIGluIGNhc2UgdGhlIDxhPiBpcyBhIHN0YXRpYyBub2RlXG4gICAgICAgIGEuaXNTdGF0aWMgPSBmYWxzZTtcbiAgICAgICAgdmFyIGFEYXRhID0gYS5kYXRhID0gZXh0ZW5kKHt9LCBhLmRhdGEpO1xuICAgICAgICBhRGF0YS5vbiA9IG9uO1xuICAgICAgICB2YXIgYUF0dHJzID0gYS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhLmRhdGEuYXR0cnMpO1xuICAgICAgICBhQXR0cnMuaHJlZiA9IGhyZWY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkb2Vzbid0IGhhdmUgPGE+IGNoaWxkLCBhcHBseSBsaXN0ZW5lciB0byBzZWxmXG4gICAgICAgIGRhdGEub24gPSBvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaCh0aGlzLnRhZywgZGF0YSwgdGhpcy4kc2xvdHMuZGVmYXVsdClcbiAgfVxufVxuXG5mdW5jdGlvbiBndWFyZEV2ZW50IChlKSB7XG4gIC8vIGRvbid0IHJlZGlyZWN0IHdpdGggY29udHJvbCBrZXlzXG4gIGlmIChlLm1ldGFLZXkgfHwgZS5hbHRLZXkgfHwgZS5jdHJsS2V5IHx8IGUuc2hpZnRLZXkpIHsgcmV0dXJuIH1cbiAgLy8gZG9uJ3QgcmVkaXJlY3Qgd2hlbiBwcmV2ZW50RGVmYXVsdCBjYWxsZWRcbiAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCkgeyByZXR1cm4gfVxuICAvLyBkb24ndCByZWRpcmVjdCBvbiByaWdodCBjbGlja1xuICBpZiAoZS5idXR0b24gIT09IHVuZGVmaW5lZCAmJiBlLmJ1dHRvbiAhPT0gMCkgeyByZXR1cm4gfVxuICAvLyBkb24ndCByZWRpcmVjdCBpZiBgdGFyZ2V0PVwiX2JsYW5rXCJgXG4gIGlmIChlLmN1cnJlbnRUYXJnZXQgJiYgZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSkge1xuICAgIHZhciB0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCd0YXJnZXQnKTtcbiAgICBpZiAoL1xcYl9ibGFua1xcYi9pLnRlc3QodGFyZ2V0KSkgeyByZXR1cm4gfVxuICB9XG4gIC8vIHRoaXMgbWF5IGJlIGEgV2VleCBldmVudCB3aGljaCBkb2Vzbid0IGhhdmUgdGhpcyBtZXRob2RcbiAgaWYgKGUucHJldmVudERlZmF1bHQpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gZmluZEFuY2hvciAoY2hpbGRyZW4pIHtcbiAgaWYgKGNoaWxkcmVuKSB7XG4gICAgdmFyIGNoaWxkO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoY2hpbGQudGFnID09PSAnYScpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkXG4gICAgICB9XG4gICAgICBpZiAoY2hpbGQuY2hpbGRyZW4gJiYgKGNoaWxkID0gZmluZEFuY2hvcihjaGlsZC5jaGlsZHJlbikpKSB7XG4gICAgICAgIHJldHVybiBjaGlsZFxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgX1Z1ZTtcblxuZnVuY3Rpb24gaW5zdGFsbCAoVnVlKSB7XG4gIGlmIChpbnN0YWxsLmluc3RhbGxlZCAmJiBfVnVlID09PSBWdWUpIHsgcmV0dXJuIH1cbiAgaW5zdGFsbC5pbnN0YWxsZWQgPSB0cnVlO1xuXG4gIF9WdWUgPSBWdWU7XG5cbiAgdmFyIGlzRGVmID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHYgIT09IHVuZGVmaW5lZDsgfTtcblxuICB2YXIgcmVnaXN0ZXJJbnN0YW5jZSA9IGZ1bmN0aW9uICh2bSwgY2FsbFZhbCkge1xuICAgIHZhciBpID0gdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICAgIGlmIChpc0RlZihpKSAmJiBpc0RlZihpID0gaS5kYXRhKSAmJiBpc0RlZihpID0gaS5yZWdpc3RlclJvdXRlSW5zdGFuY2UpKSB7XG4gICAgICBpKHZtLCBjYWxsVmFsKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLm1peGluKHtcbiAgICBiZWZvcmVDcmVhdGU6IGZ1bmN0aW9uIGJlZm9yZUNyZWF0ZSAoKSB7XG4gICAgICBpZiAoaXNEZWYodGhpcy4kb3B0aW9ucy5yb3V0ZXIpKSB7XG4gICAgICAgIHRoaXMuX3JvdXRlclJvb3QgPSB0aGlzO1xuICAgICAgICB0aGlzLl9yb3V0ZXIgPSB0aGlzLiRvcHRpb25zLnJvdXRlcjtcbiAgICAgICAgdGhpcy5fcm91dGVyLmluaXQodGhpcyk7XG4gICAgICAgIFZ1ZS51dGlsLmRlZmluZVJlYWN0aXZlKHRoaXMsICdfcm91dGUnLCB0aGlzLl9yb3V0ZXIuaGlzdG9yeS5jdXJyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3JvdXRlclJvb3QgPSAodGhpcy4kcGFyZW50ICYmIHRoaXMuJHBhcmVudC5fcm91dGVyUm9vdCkgfHwgdGhpcztcbiAgICAgIH1cbiAgICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgdGhpcyk7XG4gICAgfSxcbiAgICBkZXN0cm95ZWQ6IGZ1bmN0aW9uIGRlc3Ryb3llZCAoKSB7XG4gICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcm91dGVyJywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHsgcmV0dXJuIHRoaXMuX3JvdXRlclJvb3QuX3JvdXRlciB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHJvdXRlJywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHsgcmV0dXJuIHRoaXMuX3JvdXRlclJvb3QuX3JvdXRlIH1cbiAgfSk7XG5cbiAgVnVlLmNvbXBvbmVudCgnUm91dGVyVmlldycsIFZpZXcpO1xuICBWdWUuY29tcG9uZW50KCdSb3V0ZXJMaW5rJywgTGluayk7XG5cbiAgdmFyIHN0cmF0cyA9IFZ1ZS5jb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuICAvLyB1c2UgdGhlIHNhbWUgaG9vayBtZXJnaW5nIHN0cmF0ZWd5IGZvciByb3V0ZSBob29rc1xuICBzdHJhdHMuYmVmb3JlUm91dGVFbnRlciA9IHN0cmF0cy5iZWZvcmVSb3V0ZUxlYXZlID0gc3RyYXRzLmJlZm9yZVJvdXRlVXBkYXRlID0gc3RyYXRzLmNyZWF0ZWQ7XG59XG5cbi8qICAqL1xuXG52YXIgaW5Ccm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlUGF0aCAoXG4gIHJlbGF0aXZlLFxuICBiYXNlLFxuICBhcHBlbmRcbikge1xuICB2YXIgZmlyc3RDaGFyID0gcmVsYXRpdmUuY2hhckF0KDApO1xuICBpZiAoZmlyc3RDaGFyID09PSAnLycpIHtcbiAgICByZXR1cm4gcmVsYXRpdmVcbiAgfVxuXG4gIGlmIChmaXJzdENoYXIgPT09ICc/JyB8fCBmaXJzdENoYXIgPT09ICcjJykge1xuICAgIHJldHVybiBiYXNlICsgcmVsYXRpdmVcbiAgfVxuXG4gIHZhciBzdGFjayA9IGJhc2Uuc3BsaXQoJy8nKTtcblxuICAvLyByZW1vdmUgdHJhaWxpbmcgc2VnbWVudCBpZjpcbiAgLy8gLSBub3QgYXBwZW5kaW5nXG4gIC8vIC0gYXBwZW5kaW5nIHRvIHRyYWlsaW5nIHNsYXNoIChsYXN0IHNlZ21lbnQgaXMgZW1wdHkpXG4gIGlmICghYXBwZW5kIHx8ICFzdGFja1tzdGFjay5sZW5ndGggLSAxXSkge1xuICAgIHN0YWNrLnBvcCgpO1xuICB9XG5cbiAgLy8gcmVzb2x2ZSByZWxhdGl2ZSBwYXRoXG4gIHZhciBzZWdtZW50cyA9IHJlbGF0aXZlLnJlcGxhY2UoL15cXC8vLCAnJykuc3BsaXQoJy8nKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzZWdtZW50ID0gc2VnbWVudHNbaV07XG4gICAgaWYgKHNlZ21lbnQgPT09ICcuLicpIHtcbiAgICAgIHN0YWNrLnBvcCgpO1xuICAgIH0gZWxzZSBpZiAoc2VnbWVudCAhPT0gJy4nKSB7XG4gICAgICBzdGFjay5wdXNoKHNlZ21lbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVuc3VyZSBsZWFkaW5nIHNsYXNoXG4gIGlmIChzdGFja1swXSAhPT0gJycpIHtcbiAgICBzdGFjay51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIHJldHVybiBzdGFjay5qb2luKCcvJylcbn1cblxuZnVuY3Rpb24gcGFyc2VQYXRoIChwYXRoKSB7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBxdWVyeSA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRoLmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2hJbmRleCA+PSAwKSB7XG4gICAgaGFzaCA9IHBhdGguc2xpY2UoaGFzaEluZGV4KTtcbiAgICBwYXRoID0gcGF0aC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHF1ZXJ5SW5kZXggPSBwYXRoLmluZGV4T2YoJz8nKTtcbiAgaWYgKHF1ZXJ5SW5kZXggPj0gMCkge1xuICAgIHF1ZXJ5ID0gcGF0aC5zbGljZShxdWVyeUluZGV4ICsgMSk7XG4gICAgcGF0aCA9IHBhdGguc2xpY2UoMCwgcXVlcnlJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGg6IHBhdGgsXG4gICAgcXVlcnk6IHF1ZXJ5LFxuICAgIGhhc2g6IGhhc2hcbiAgfVxufVxuXG5mdW5jdGlvbiBjbGVhblBhdGggKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgucmVwbGFjZSgvXFwvXFwvL2csICcvJylcbn1cblxudmFyIGlzYXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xudmFyIHBhdGhUb1JlZ2V4cF8xID0gcGF0aFRvUmVnZXhwO1xudmFyIHBhcnNlXzEgPSBwYXJzZTtcbnZhciBjb21waWxlXzEgPSBjb21waWxlO1xudmFyIHRva2Vuc1RvRnVuY3Rpb25fMSA9IHRva2Vuc1RvRnVuY3Rpb247XG52YXIgdG9rZW5zVG9SZWdFeHBfMSA9IHRva2Vuc1RvUmVnRXhwO1xuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpO1xuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW107XG4gIHZhciBrZXkgPSAwO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcGF0aCA9ICcnO1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nO1xuICB2YXIgcmVzO1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF07XG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV07XG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleDtcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KTtcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoO1xuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXTtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdO1xuICAgIHZhciBwcmVmaXggPSByZXNbMl07XG4gICAgdmFyIG5hbWUgPSByZXNbM107XG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF07XG4gICAgdmFyIGdyb3VwID0gcmVzWzVdO1xuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XTtcbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN107XG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKTtcbiAgICAgIHBhdGggPSAnJztcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXg7XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJztcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKic7XG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyO1xuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cDtcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSk7XG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpO1xuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKTtcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucykpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKTtcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJyc7XG4gICAgdmFyIGRhdGEgPSBvYmogfHwge307XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9O1xuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW47XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXTtcbiAgICAgIHZhciBzZWdtZW50O1xuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKTtcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpO1xuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50O1xuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzO1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZyk7XG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKTtcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSk7XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKTtcbiAgICBrZXlzID0gW107XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3Q7XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2U7XG4gIHZhciByb3V0ZSA9ICcnO1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldO1xuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KTtcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknO1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pO1xuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJztcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPyc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknO1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKTtcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXI7XG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPyc7XG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnO1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSc7XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucyk7XG4gICAga2V5cyA9IFtdO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxucGF0aFRvUmVnZXhwXzEucGFyc2UgPSBwYXJzZV8xO1xucGF0aFRvUmVnZXhwXzEuY29tcGlsZSA9IGNvbXBpbGVfMTtcbnBhdGhUb1JlZ2V4cF8xLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXzE7XG5wYXRoVG9SZWdleHBfMS50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXzE7XG5cbi8qICAqL1xuXG4vLyAkZmxvdy1kaXNhYmxlLWxpbmVcbnZhciByZWdleHBDb21waWxlQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBmaWxsUGFyYW1zIChcbiAgcGF0aCxcbiAgcGFyYW1zLFxuICByb3V0ZU1zZ1xuKSB7XG4gIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcbiAgdHJ5IHtcbiAgICB2YXIgZmlsbGVyID1cbiAgICAgIHJlZ2V4cENvbXBpbGVDYWNoZVtwYXRoXSB8fFxuICAgICAgKHJlZ2V4cENvbXBpbGVDYWNoZVtwYXRoXSA9IHBhdGhUb1JlZ2V4cF8xLmNvbXBpbGUocGF0aCkpO1xuXG4gICAgLy8gRml4ICMyNTA1IHJlc29sdmluZyBhc3RlcmlzayByb3V0ZXMgeyBuYW1lOiAnbm90LWZvdW5kJywgcGFyYW1zOiB7IHBhdGhNYXRjaDogJy9ub3QtZm91bmQnIH19XG4gICAgaWYgKHBhcmFtcy5wYXRoTWF0Y2gpIHsgcGFyYW1zWzBdID0gcGFyYW1zLnBhdGhNYXRjaDsgfVxuXG4gICAgcmV0dXJuIGZpbGxlcihwYXJhbXMsIHsgcHJldHR5OiB0cnVlIH0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybihmYWxzZSwgKFwibWlzc2luZyBwYXJhbSBmb3IgXCIgKyByb3V0ZU1zZyArIFwiOiBcIiArIChlLm1lc3NhZ2UpKSk7XG4gICAgfVxuICAgIHJldHVybiAnJ1xuICB9IGZpbmFsbHkge1xuICAgIC8vIGRlbGV0ZSB0aGUgMCBpZiBpdCB3YXMgYWRkZWRcbiAgICBkZWxldGUgcGFyYW1zWzBdO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZU1hcCAoXG4gIHJvdXRlcyxcbiAgb2xkUGF0aExpc3QsXG4gIG9sZFBhdGhNYXAsXG4gIG9sZE5hbWVNYXBcbikge1xuICAvLyB0aGUgcGF0aCBsaXN0IGlzIHVzZWQgdG8gY29udHJvbCBwYXRoIG1hdGNoaW5nIHByaW9yaXR5XG4gIHZhciBwYXRoTGlzdCA9IG9sZFBhdGhMaXN0IHx8IFtdO1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIHBhdGhNYXAgPSBvbGRQYXRoTWFwIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICB2YXIgbmFtZU1hcCA9IG9sZE5hbWVNYXAgfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICByb3V0ZXMuZm9yRWFjaChmdW5jdGlvbiAocm91dGUpIHtcbiAgICBhZGRSb3V0ZVJlY29yZChwYXRoTGlzdCwgcGF0aE1hcCwgbmFtZU1hcCwgcm91dGUpO1xuICB9KTtcblxuICAvLyBlbnN1cmUgd2lsZGNhcmQgcm91dGVzIGFyZSBhbHdheXMgYXQgdGhlIGVuZFxuICBmb3IgKHZhciBpID0gMCwgbCA9IHBhdGhMaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChwYXRoTGlzdFtpXSA9PT0gJyonKSB7XG4gICAgICBwYXRoTGlzdC5wdXNoKHBhdGhMaXN0LnNwbGljZShpLCAxKVswXSk7XG4gICAgICBsLS07XG4gICAgICBpLS07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoTGlzdDogcGF0aExpc3QsXG4gICAgcGF0aE1hcDogcGF0aE1hcCxcbiAgICBuYW1lTWFwOiBuYW1lTWFwXG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkUm91dGVSZWNvcmQgKFxuICBwYXRoTGlzdCxcbiAgcGF0aE1hcCxcbiAgbmFtZU1hcCxcbiAgcm91dGUsXG4gIHBhcmVudCxcbiAgbWF0Y2hBc1xuKSB7XG4gIHZhciBwYXRoID0gcm91dGUucGF0aDtcbiAgdmFyIG5hbWUgPSByb3V0ZS5uYW1lO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChwYXRoICE9IG51bGwsIFwiXFxcInBhdGhcXFwiIGlzIHJlcXVpcmVkIGluIGEgcm91dGUgY29uZmlndXJhdGlvbi5cIik7XG4gICAgYXNzZXJ0KFxuICAgICAgdHlwZW9mIHJvdXRlLmNvbXBvbmVudCAhPT0gJ3N0cmluZycsXG4gICAgICBcInJvdXRlIGNvbmZpZyBcXFwiY29tcG9uZW50XFxcIiBmb3IgcGF0aDogXCIgKyAoU3RyaW5nKHBhdGggfHwgbmFtZSkpICsgXCIgY2Fubm90IGJlIGEgXCIgK1xuICAgICAgXCJzdHJpbmcgaWQuIFVzZSBhbiBhY3R1YWwgY29tcG9uZW50IGluc3RlYWQuXCJcbiAgICApO1xuICB9XG5cbiAgdmFyIHBhdGhUb1JlZ2V4cE9wdGlvbnMgPSByb3V0ZS5wYXRoVG9SZWdleHBPcHRpb25zIHx8IHt9O1xuICB2YXIgbm9ybWFsaXplZFBhdGggPSBub3JtYWxpemVQYXRoKFxuICAgIHBhdGgsXG4gICAgcGFyZW50LFxuICAgIHBhdGhUb1JlZ2V4cE9wdGlvbnMuc3RyaWN0XG4gICk7XG5cbiAgaWYgKHR5cGVvZiByb3V0ZS5jYXNlU2Vuc2l0aXZlID09PSAnYm9vbGVhbicpIHtcbiAgICBwYXRoVG9SZWdleHBPcHRpb25zLnNlbnNpdGl2ZSA9IHJvdXRlLmNhc2VTZW5zaXRpdmU7XG4gIH1cblxuICB2YXIgcmVjb3JkID0ge1xuICAgIHBhdGg6IG5vcm1hbGl6ZWRQYXRoLFxuICAgIHJlZ2V4OiBjb21waWxlUm91dGVSZWdleChub3JtYWxpemVkUGF0aCwgcGF0aFRvUmVnZXhwT3B0aW9ucyksXG4gICAgY29tcG9uZW50czogcm91dGUuY29tcG9uZW50cyB8fCB7IGRlZmF1bHQ6IHJvdXRlLmNvbXBvbmVudCB9LFxuICAgIGluc3RhbmNlczoge30sXG4gICAgbmFtZTogbmFtZSxcbiAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICBtYXRjaEFzOiBtYXRjaEFzLFxuICAgIHJlZGlyZWN0OiByb3V0ZS5yZWRpcmVjdCxcbiAgICBiZWZvcmVFbnRlcjogcm91dGUuYmVmb3JlRW50ZXIsXG4gICAgbWV0YTogcm91dGUubWV0YSB8fCB7fSxcbiAgICBwcm9wczogcm91dGUucHJvcHMgPT0gbnVsbFxuICAgICAgPyB7fVxuICAgICAgOiByb3V0ZS5jb21wb25lbnRzXG4gICAgICAgID8gcm91dGUucHJvcHNcbiAgICAgICAgOiB7IGRlZmF1bHQ6IHJvdXRlLnByb3BzIH1cbiAgfTtcblxuICBpZiAocm91dGUuY2hpbGRyZW4pIHtcbiAgICAvLyBXYXJuIGlmIHJvdXRlIGlzIG5hbWVkLCBkb2VzIG5vdCByZWRpcmVjdCBhbmQgaGFzIGEgZGVmYXVsdCBjaGlsZCByb3V0ZS5cbiAgICAvLyBJZiB1c2VycyBuYXZpZ2F0ZSB0byB0aGlzIHJvdXRlIGJ5IG5hbWUsIHRoZSBkZWZhdWx0IGNoaWxkIHdpbGxcbiAgICAvLyBub3QgYmUgcmVuZGVyZWQgKEdIIElzc3VlICM2MjkpXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChyb3V0ZS5uYW1lICYmICFyb3V0ZS5yZWRpcmVjdCAmJiByb3V0ZS5jaGlsZHJlbi5zb21lKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gL15cXC8/JC8udGVzdChjaGlsZC5wYXRoKTsgfSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBcIk5hbWVkIFJvdXRlICdcIiArIChyb3V0ZS5uYW1lKSArIFwiJyBoYXMgYSBkZWZhdWx0IGNoaWxkIHJvdXRlLiBcIiArXG4gICAgICAgICAgXCJXaGVuIG5hdmlnYXRpbmcgdG8gdGhpcyBuYW1lZCByb3V0ZSAoOnRvPVxcXCJ7bmFtZTogJ1wiICsgKHJvdXRlLm5hbWUpICsgXCInXFxcIiksIFwiICtcbiAgICAgICAgICBcInRoZSBkZWZhdWx0IGNoaWxkIHJvdXRlIHdpbGwgbm90IGJlIHJlbmRlcmVkLiBSZW1vdmUgdGhlIG5hbWUgZnJvbSBcIiArXG4gICAgICAgICAgXCJ0aGlzIHJvdXRlIGFuZCB1c2UgdGhlIG5hbWUgb2YgdGhlIGRlZmF1bHQgY2hpbGQgcm91dGUgZm9yIG5hbWVkIFwiICtcbiAgICAgICAgICBcImxpbmtzIGluc3RlYWQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcm91dGUuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHZhciBjaGlsZE1hdGNoQXMgPSBtYXRjaEFzXG4gICAgICAgID8gY2xlYW5QYXRoKChtYXRjaEFzICsgXCIvXCIgKyAoY2hpbGQucGF0aCkpKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIGFkZFJvdXRlUmVjb3JkKHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwLCBjaGlsZCwgcmVjb3JkLCBjaGlsZE1hdGNoQXMpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHJvdXRlLmFsaWFzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgYWxpYXNlcyA9IEFycmF5LmlzQXJyYXkocm91dGUuYWxpYXMpXG4gICAgICA/IHJvdXRlLmFsaWFzXG4gICAgICA6IFtyb3V0ZS5hbGlhc107XG5cbiAgICBhbGlhc2VzLmZvckVhY2goZnVuY3Rpb24gKGFsaWFzKSB7XG4gICAgICB2YXIgYWxpYXNSb3V0ZSA9IHtcbiAgICAgICAgcGF0aDogYWxpYXMsXG4gICAgICAgIGNoaWxkcmVuOiByb3V0ZS5jaGlsZHJlblxuICAgICAgfTtcbiAgICAgIGFkZFJvdXRlUmVjb3JkKFxuICAgICAgICBwYXRoTGlzdCxcbiAgICAgICAgcGF0aE1hcCxcbiAgICAgICAgbmFtZU1hcCxcbiAgICAgICAgYWxpYXNSb3V0ZSxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICByZWNvcmQucGF0aCB8fCAnLycgLy8gbWF0Y2hBc1xuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICghcGF0aE1hcFtyZWNvcmQucGF0aF0pIHtcbiAgICBwYXRoTGlzdC5wdXNoKHJlY29yZC5wYXRoKTtcbiAgICBwYXRoTWFwW3JlY29yZC5wYXRoXSA9IHJlY29yZDtcbiAgfVxuXG4gIGlmIChuYW1lKSB7XG4gICAgaWYgKCFuYW1lTWFwW25hbWVdKSB7XG4gICAgICBuYW1lTWFwW25hbWVdID0gcmVjb3JkO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhbWF0Y2hBcykge1xuICAgICAgd2FybihcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIFwiRHVwbGljYXRlIG5hbWVkIHJvdXRlcyBkZWZpbml0aW9uOiBcIiArXG4gICAgICAgIFwieyBuYW1lOiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLCBwYXRoOiBcXFwiXCIgKyAocmVjb3JkLnBhdGgpICsgXCJcXFwiIH1cIlxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcGlsZVJvdXRlUmVnZXggKHBhdGgsIHBhdGhUb1JlZ2V4cE9wdGlvbnMpIHtcbiAgdmFyIHJlZ2V4ID0gcGF0aFRvUmVnZXhwXzEocGF0aCwgW10sIHBhdGhUb1JlZ2V4cE9wdGlvbnMpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICByZWdleC5rZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgd2Fybigha2V5c1trZXkubmFtZV0sIChcIkR1cGxpY2F0ZSBwYXJhbSBrZXlzIGluIHJvdXRlIHdpdGggcGF0aDogXFxcIlwiICsgcGF0aCArIFwiXFxcIlwiKSk7XG4gICAgICBrZXlzW2tleS5uYW1lXSA9IHRydWU7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHJlZ2V4XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGggKHBhdGgsIHBhcmVudCwgc3RyaWN0KSB7XG4gIGlmICghc3RyaWN0KSB7IHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcLyQvLCAnJyk7IH1cbiAgaWYgKHBhdGhbMF0gPT09ICcvJykgeyByZXR1cm4gcGF0aCB9XG4gIGlmIChwYXJlbnQgPT0gbnVsbCkgeyByZXR1cm4gcGF0aCB9XG4gIHJldHVybiBjbGVhblBhdGgoKChwYXJlbnQucGF0aCkgKyBcIi9cIiArIHBhdGgpKVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplTG9jYXRpb24gKFxuICByYXcsXG4gIGN1cnJlbnQsXG4gIGFwcGVuZCxcbiAgcm91dGVyXG4pIHtcbiAgdmFyIG5leHQgPSB0eXBlb2YgcmF3ID09PSAnc3RyaW5nJyA/IHsgcGF0aDogcmF3IH0gOiByYXc7XG4gIC8vIG5hbWVkIHRhcmdldFxuICBpZiAobmV4dC5fbm9ybWFsaXplZCkge1xuICAgIHJldHVybiBuZXh0XG4gIH0gZWxzZSBpZiAobmV4dC5uYW1lKSB7XG4gICAgcmV0dXJuIGV4dGVuZCh7fSwgcmF3KVxuICB9XG5cbiAgLy8gcmVsYXRpdmUgcGFyYW1zXG4gIGlmICghbmV4dC5wYXRoICYmIG5leHQucGFyYW1zICYmIGN1cnJlbnQpIHtcbiAgICBuZXh0ID0gZXh0ZW5kKHt9LCBuZXh0KTtcbiAgICBuZXh0Ll9ub3JtYWxpemVkID0gdHJ1ZTtcbiAgICB2YXIgcGFyYW1zID0gZXh0ZW5kKGV4dGVuZCh7fSwgY3VycmVudC5wYXJhbXMpLCBuZXh0LnBhcmFtcyk7XG4gICAgaWYgKGN1cnJlbnQubmFtZSkge1xuICAgICAgbmV4dC5uYW1lID0gY3VycmVudC5uYW1lO1xuICAgICAgbmV4dC5wYXJhbXMgPSBwYXJhbXM7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50Lm1hdGNoZWQubGVuZ3RoKSB7XG4gICAgICB2YXIgcmF3UGF0aCA9IGN1cnJlbnQubWF0Y2hlZFtjdXJyZW50Lm1hdGNoZWQubGVuZ3RoIC0gMV0ucGF0aDtcbiAgICAgIG5leHQucGF0aCA9IGZpbGxQYXJhbXMocmF3UGF0aCwgcGFyYW1zLCAoXCJwYXRoIFwiICsgKGN1cnJlbnQucGF0aCkpKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oZmFsc2UsIFwicmVsYXRpdmUgcGFyYW1zIG5hdmlnYXRpb24gcmVxdWlyZXMgYSBjdXJyZW50IHJvdXRlLlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHRcbiAgfVxuXG4gIHZhciBwYXJzZWRQYXRoID0gcGFyc2VQYXRoKG5leHQucGF0aCB8fCAnJyk7XG4gIHZhciBiYXNlUGF0aCA9IChjdXJyZW50ICYmIGN1cnJlbnQucGF0aCkgfHwgJy8nO1xuICB2YXIgcGF0aCA9IHBhcnNlZFBhdGgucGF0aFxuICAgID8gcmVzb2x2ZVBhdGgocGFyc2VkUGF0aC5wYXRoLCBiYXNlUGF0aCwgYXBwZW5kIHx8IG5leHQuYXBwZW5kKVxuICAgIDogYmFzZVBhdGg7XG5cbiAgdmFyIHF1ZXJ5ID0gcmVzb2x2ZVF1ZXJ5KFxuICAgIHBhcnNlZFBhdGgucXVlcnksXG4gICAgbmV4dC5xdWVyeSxcbiAgICByb3V0ZXIgJiYgcm91dGVyLm9wdGlvbnMucGFyc2VRdWVyeVxuICApO1xuXG4gIHZhciBoYXNoID0gbmV4dC5oYXNoIHx8IHBhcnNlZFBhdGguaGFzaDtcbiAgaWYgKGhhc2ggJiYgaGFzaC5jaGFyQXQoMCkgIT09ICcjJykge1xuICAgIGhhc2ggPSBcIiNcIiArIGhhc2g7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIF9ub3JtYWxpemVkOiB0cnVlLFxuICAgIHBhdGg6IHBhdGgsXG4gICAgcXVlcnk6IHF1ZXJ5LFxuICAgIGhhc2g6IGhhc2hcbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIGNyZWF0ZU1hdGNoZXIgKFxuICByb3V0ZXMsXG4gIHJvdXRlclxuKSB7XG4gIHZhciByZWYgPSBjcmVhdGVSb3V0ZU1hcChyb3V0ZXMpO1xuICB2YXIgcGF0aExpc3QgPSByZWYucGF0aExpc3Q7XG4gIHZhciBwYXRoTWFwID0gcmVmLnBhdGhNYXA7XG4gIHZhciBuYW1lTWFwID0gcmVmLm5hbWVNYXA7XG5cbiAgZnVuY3Rpb24gYWRkUm91dGVzIChyb3V0ZXMpIHtcbiAgICBjcmVhdGVSb3V0ZU1hcChyb3V0ZXMsIHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hdGNoIChcbiAgICByYXcsXG4gICAgY3VycmVudFJvdXRlLFxuICAgIHJlZGlyZWN0ZWRGcm9tXG4gICkge1xuICAgIHZhciBsb2NhdGlvbiA9IG5vcm1hbGl6ZUxvY2F0aW9uKHJhdywgY3VycmVudFJvdXRlLCBmYWxzZSwgcm91dGVyKTtcbiAgICB2YXIgbmFtZSA9IGxvY2F0aW9uLm5hbWU7XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgdmFyIHJlY29yZCA9IG5hbWVNYXBbbmFtZV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKHJlY29yZCwgKFwiUm91dGUgd2l0aCBuYW1lICdcIiArIG5hbWUgKyBcIicgZG9lcyBub3QgZXhpc3RcIikpO1xuICAgICAgfVxuICAgICAgaWYgKCFyZWNvcmQpIHsgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbikgfVxuICAgICAgdmFyIHBhcmFtTmFtZXMgPSByZWNvcmQucmVnZXgua2V5c1xuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICFrZXkub3B0aW9uYWw7IH0pXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4ga2V5Lm5hbWU7IH0pO1xuXG4gICAgICBpZiAodHlwZW9mIGxvY2F0aW9uLnBhcmFtcyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgbG9jYXRpb24ucGFyYW1zID0ge307XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50Um91dGUgJiYgdHlwZW9mIGN1cnJlbnRSb3V0ZS5wYXJhbXMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBjdXJyZW50Um91dGUucGFyYW1zKSB7XG4gICAgICAgICAgaWYgKCEoa2V5IGluIGxvY2F0aW9uLnBhcmFtcykgJiYgcGFyYW1OYW1lcy5pbmRleE9mKGtleSkgPiAtMSkge1xuICAgICAgICAgICAgbG9jYXRpb24ucGFyYW1zW2tleV0gPSBjdXJyZW50Um91dGUucGFyYW1zW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxvY2F0aW9uLnBhdGggPSBmaWxsUGFyYW1zKHJlY29yZC5wYXRoLCBsb2NhdGlvbi5wYXJhbXMsIChcIm5hbWVkIHJvdXRlIFxcXCJcIiArIG5hbWUgKyBcIlxcXCJcIikpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShyZWNvcmQsIGxvY2F0aW9uLCByZWRpcmVjdGVkRnJvbSlcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGgpIHtcbiAgICAgIGxvY2F0aW9uLnBhcmFtcyA9IHt9O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGF0aCA9IHBhdGhMaXN0W2ldO1xuICAgICAgICB2YXIgcmVjb3JkJDEgPSBwYXRoTWFwW3BhdGhdO1xuICAgICAgICBpZiAobWF0Y2hSb3V0ZShyZWNvcmQkMS5yZWdleCwgbG9jYXRpb24ucGF0aCwgbG9jYXRpb24ucGFyYW1zKSkge1xuICAgICAgICAgIHJldHVybiBfY3JlYXRlUm91dGUocmVjb3JkJDEsIGxvY2F0aW9uLCByZWRpcmVjdGVkRnJvbSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBubyBtYXRjaFxuICAgIHJldHVybiBfY3JlYXRlUm91dGUobnVsbCwgbG9jYXRpb24pXG4gIH1cblxuICBmdW5jdGlvbiByZWRpcmVjdCAoXG4gICAgcmVjb3JkLFxuICAgIGxvY2F0aW9uXG4gICkge1xuICAgIHZhciBvcmlnaW5hbFJlZGlyZWN0ID0gcmVjb3JkLnJlZGlyZWN0O1xuICAgIHZhciByZWRpcmVjdCA9IHR5cGVvZiBvcmlnaW5hbFJlZGlyZWN0ID09PSAnZnVuY3Rpb24nXG4gICAgICA/IG9yaWdpbmFsUmVkaXJlY3QoY3JlYXRlUm91dGUocmVjb3JkLCBsb2NhdGlvbiwgbnVsbCwgcm91dGVyKSlcbiAgICAgIDogb3JpZ2luYWxSZWRpcmVjdDtcblxuICAgIGlmICh0eXBlb2YgcmVkaXJlY3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZWRpcmVjdCA9IHsgcGF0aDogcmVkaXJlY3QgfTtcbiAgICB9XG5cbiAgICBpZiAoIXJlZGlyZWN0IHx8IHR5cGVvZiByZWRpcmVjdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgZmFsc2UsIChcImludmFsaWQgcmVkaXJlY3Qgb3B0aW9uOiBcIiArIChKU09OLnN0cmluZ2lmeShyZWRpcmVjdCkpKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgICB9XG5cbiAgICB2YXIgcmUgPSByZWRpcmVjdDtcbiAgICB2YXIgbmFtZSA9IHJlLm5hbWU7XG4gICAgdmFyIHBhdGggPSByZS5wYXRoO1xuICAgIHZhciBxdWVyeSA9IGxvY2F0aW9uLnF1ZXJ5O1xuICAgIHZhciBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGFyYW1zID0gbG9jYXRpb24ucGFyYW1zO1xuICAgIHF1ZXJ5ID0gcmUuaGFzT3duUHJvcGVydHkoJ3F1ZXJ5JykgPyByZS5xdWVyeSA6IHF1ZXJ5O1xuICAgIGhhc2ggPSByZS5oYXNPd25Qcm9wZXJ0eSgnaGFzaCcpID8gcmUuaGFzaCA6IGhhc2g7XG4gICAgcGFyYW1zID0gcmUuaGFzT3duUHJvcGVydHkoJ3BhcmFtcycpID8gcmUucGFyYW1zIDogcGFyYW1zO1xuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIC8vIHJlc29sdmVkIG5hbWVkIGRpcmVjdFxuICAgICAgdmFyIHRhcmdldFJlY29yZCA9IG5hbWVNYXBbbmFtZV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBhc3NlcnQodGFyZ2V0UmVjb3JkLCAoXCJyZWRpcmVjdCBmYWlsZWQ6IG5hbWVkIHJvdXRlIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgbm90IGZvdW5kLlwiKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2goe1xuICAgICAgICBfbm9ybWFsaXplZDogdHJ1ZSxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgcXVlcnk6IHF1ZXJ5LFxuICAgICAgICBoYXNoOiBoYXNoLFxuICAgICAgICBwYXJhbXM6IHBhcmFtc1xuICAgICAgfSwgdW5kZWZpbmVkLCBsb2NhdGlvbilcbiAgICB9IGVsc2UgaWYgKHBhdGgpIHtcbiAgICAgIC8vIDEuIHJlc29sdmUgcmVsYXRpdmUgcmVkaXJlY3RcbiAgICAgIHZhciByYXdQYXRoID0gcmVzb2x2ZVJlY29yZFBhdGgocGF0aCwgcmVjb3JkKTtcbiAgICAgIC8vIDIuIHJlc29sdmUgcGFyYW1zXG4gICAgICB2YXIgcmVzb2x2ZWRQYXRoID0gZmlsbFBhcmFtcyhyYXdQYXRoLCBwYXJhbXMsIChcInJlZGlyZWN0IHJvdXRlIHdpdGggcGF0aCBcXFwiXCIgKyByYXdQYXRoICsgXCJcXFwiXCIpKTtcbiAgICAgIC8vIDMuIHJlbWF0Y2ggd2l0aCBleGlzdGluZyBxdWVyeSBhbmQgaGFzaFxuICAgICAgcmV0dXJuIG1hdGNoKHtcbiAgICAgICAgX25vcm1hbGl6ZWQ6IHRydWUsXG4gICAgICAgIHBhdGg6IHJlc29sdmVkUGF0aCxcbiAgICAgICAgcXVlcnk6IHF1ZXJ5LFxuICAgICAgICBoYXNoOiBoYXNoXG4gICAgICB9LCB1bmRlZmluZWQsIGxvY2F0aW9uKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKGZhbHNlLCAoXCJpbnZhbGlkIHJlZGlyZWN0IG9wdGlvbjogXCIgKyAoSlNPTi5zdHJpbmdpZnkocmVkaXJlY3QpKSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhbGlhcyAoXG4gICAgcmVjb3JkLFxuICAgIGxvY2F0aW9uLFxuICAgIG1hdGNoQXNcbiAgKSB7XG4gICAgdmFyIGFsaWFzZWRQYXRoID0gZmlsbFBhcmFtcyhtYXRjaEFzLCBsb2NhdGlvbi5wYXJhbXMsIChcImFsaWFzZWQgcm91dGUgd2l0aCBwYXRoIFxcXCJcIiArIG1hdGNoQXMgKyBcIlxcXCJcIikpO1xuICAgIHZhciBhbGlhc2VkTWF0Y2ggPSBtYXRjaCh7XG4gICAgICBfbm9ybWFsaXplZDogdHJ1ZSxcbiAgICAgIHBhdGg6IGFsaWFzZWRQYXRoXG4gICAgfSk7XG4gICAgaWYgKGFsaWFzZWRNYXRjaCkge1xuICAgICAgdmFyIG1hdGNoZWQgPSBhbGlhc2VkTWF0Y2gubWF0Y2hlZDtcbiAgICAgIHZhciBhbGlhc2VkUmVjb3JkID0gbWF0Y2hlZFttYXRjaGVkLmxlbmd0aCAtIDFdO1xuICAgICAgbG9jYXRpb24ucGFyYW1zID0gYWxpYXNlZE1hdGNoLnBhcmFtcztcbiAgICAgIHJldHVybiBfY3JlYXRlUm91dGUoYWxpYXNlZFJlY29yZCwgbG9jYXRpb24pXG4gICAgfVxuICAgIHJldHVybiBfY3JlYXRlUm91dGUobnVsbCwgbG9jYXRpb24pXG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlUm91dGUgKFxuICAgIHJlY29yZCxcbiAgICBsb2NhdGlvbixcbiAgICByZWRpcmVjdGVkRnJvbVxuICApIHtcbiAgICBpZiAocmVjb3JkICYmIHJlY29yZC5yZWRpcmVjdCkge1xuICAgICAgcmV0dXJuIHJlZGlyZWN0KHJlY29yZCwgcmVkaXJlY3RlZEZyb20gfHwgbG9jYXRpb24pXG4gICAgfVxuICAgIGlmIChyZWNvcmQgJiYgcmVjb3JkLm1hdGNoQXMpIHtcbiAgICAgIHJldHVybiBhbGlhcyhyZWNvcmQsIGxvY2F0aW9uLCByZWNvcmQubWF0Y2hBcylcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZVJvdXRlKHJlY29yZCwgbG9jYXRpb24sIHJlZGlyZWN0ZWRGcm9tLCByb3V0ZXIpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1hdGNoOiBtYXRjaCxcbiAgICBhZGRSb3V0ZXM6IGFkZFJvdXRlc1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hdGNoUm91dGUgKFxuICByZWdleCxcbiAgcGF0aCxcbiAgcGFyYW1zXG4pIHtcbiAgdmFyIG0gPSBwYXRoLm1hdGNoKHJlZ2V4KTtcblxuICBpZiAoIW0pIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfSBlbHNlIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAxLCBsZW4gPSBtLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIGtleSA9IHJlZ2V4LmtleXNbaSAtIDFdO1xuICAgIHZhciB2YWwgPSB0eXBlb2YgbVtpXSA9PT0gJ3N0cmluZycgPyBkZWNvZGVVUklDb21wb25lbnQobVtpXSkgOiBtW2ldO1xuICAgIGlmIChrZXkpIHtcbiAgICAgIC8vIEZpeCAjMTk5NDogdXNpbmcgKiB3aXRoIHByb3BzOiB0cnVlIGdlbmVyYXRlcyBhIHBhcmFtIG5hbWVkIDBcbiAgICAgIHBhcmFtc1trZXkubmFtZSB8fCAncGF0aE1hdGNoJ10gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVJlY29yZFBhdGggKHBhdGgsIHJlY29yZCkge1xuICByZXR1cm4gcmVzb2x2ZVBhdGgocGF0aCwgcmVjb3JkLnBhcmVudCA/IHJlY29yZC5wYXJlbnQucGF0aCA6ICcvJywgdHJ1ZSlcbn1cblxuLyogICovXG5cbnZhciBwb3NpdGlvblN0b3JlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gc2V0dXBTY3JvbGwgKCkge1xuICAvLyBGaXggZm9yICMxNTg1IGZvciBGaXJlZm94XG4gIC8vIEZpeCBmb3IgIzIxOTUgQWRkIG9wdGlvbmFsIHRoaXJkIGF0dHJpYnV0ZSB0byB3b3JrYXJvdW5kIGEgYnVnIGluIHNhZmFyaSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTgyNjc4XG4gIC8vIEZpeCBmb3IgIzI3NzQgU3VwcG9ydCBmb3IgYXBwcyBsb2FkZWQgZnJvbSBXaW5kb3dzIGZpbGUgc2hhcmVzIG5vdCBtYXBwZWQgdG8gbmV0d29yayBkcml2ZXM6IHJlcGxhY2VkIGxvY2F0aW9uLm9yaWdpbiB3aXRoXG4gIC8vIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyB3aW5kb3cubG9jYXRpb24uaG9zdFxuICAvLyBsb2NhdGlvbi5ob3N0IGNvbnRhaW5zIHRoZSBwb3J0IGFuZCBsb2NhdGlvbi5ob3N0bmFtZSBkb2Vzbid0XG4gIHZhciBwcm90b2NvbEFuZFBhdGggPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgd2luZG93LmxvY2F0aW9uLmhvc3Q7XG4gIHZhciBhYnNvbHV0ZVBhdGggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKHByb3RvY29sQW5kUGF0aCwgJycpO1xuICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoeyBrZXk6IGdldFN0YXRlS2V5KCkgfSwgJycsIGFic29sdXRlUGF0aCk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgc2F2ZVNjcm9sbFBvc2l0aW9uKCk7XG4gICAgaWYgKGUuc3RhdGUgJiYgZS5zdGF0ZS5rZXkpIHtcbiAgICAgIHNldFN0YXRlS2V5KGUuc3RhdGUua2V5KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVTY3JvbGwgKFxuICByb3V0ZXIsXG4gIHRvLFxuICBmcm9tLFxuICBpc1BvcFxuKSB7XG4gIGlmICghcm91dGVyLmFwcCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJlaGF2aW9yID0gcm91dGVyLm9wdGlvbnMuc2Nyb2xsQmVoYXZpb3I7XG4gIGlmICghYmVoYXZpb3IpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiZWhhdmlvciA9PT0gJ2Z1bmN0aW9uJywgXCJzY3JvbGxCZWhhdmlvciBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICAvLyB3YWl0IHVudGlsIHJlLXJlbmRlciBmaW5pc2hlcyBiZWZvcmUgc2Nyb2xsaW5nXG4gIHJvdXRlci5hcHAuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcG9zaXRpb24gPSBnZXRTY3JvbGxQb3NpdGlvbigpO1xuICAgIHZhciBzaG91bGRTY3JvbGwgPSBiZWhhdmlvci5jYWxsKHJvdXRlciwgdG8sIGZyb20sIGlzUG9wID8gcG9zaXRpb24gOiBudWxsKTtcblxuICAgIGlmICghc2hvdWxkU2Nyb2xsKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNob3VsZFNjcm9sbC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzaG91bGRTY3JvbGwudGhlbihmdW5jdGlvbiAoc2hvdWxkU2Nyb2xsKSB7XG4gICAgICAgIHNjcm9sbFRvUG9zaXRpb24oKHNob3VsZFNjcm9sbCksIHBvc2l0aW9uKTtcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBhc3NlcnQoZmFsc2UsIGVyci50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjcm9sbFRvUG9zaXRpb24oc2hvdWxkU2Nyb2xsLCBwb3NpdGlvbik7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc2F2ZVNjcm9sbFBvc2l0aW9uICgpIHtcbiAgdmFyIGtleSA9IGdldFN0YXRlS2V5KCk7XG4gIGlmIChrZXkpIHtcbiAgICBwb3NpdGlvblN0b3JlW2tleV0gPSB7XG4gICAgICB4OiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBvc2l0aW9uICgpIHtcbiAgdmFyIGtleSA9IGdldFN0YXRlS2V5KCk7XG4gIGlmIChrZXkpIHtcbiAgICByZXR1cm4gcG9zaXRpb25TdG9yZVtrZXldXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RWxlbWVudFBvc2l0aW9uIChlbCwgb2Zmc2V0KSB7XG4gIHZhciBkb2NFbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIGRvY1JlY3QgPSBkb2NFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIGVsUmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4ge1xuICAgIHg6IGVsUmVjdC5sZWZ0IC0gZG9jUmVjdC5sZWZ0IC0gb2Zmc2V0LngsXG4gICAgeTogZWxSZWN0LnRvcCAtIGRvY1JlY3QudG9wIC0gb2Zmc2V0LnlcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkUG9zaXRpb24gKG9iaikge1xuICByZXR1cm4gaXNOdW1iZXIob2JqLngpIHx8IGlzTnVtYmVyKG9iai55KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVQb3NpdGlvbiAob2JqKSB7XG4gIHJldHVybiB7XG4gICAgeDogaXNOdW1iZXIob2JqLngpID8gb2JqLnggOiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgeTogaXNOdW1iZXIob2JqLnkpID8gb2JqLnkgOiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVPZmZzZXQgKG9iaikge1xuICByZXR1cm4ge1xuICAgIHg6IGlzTnVtYmVyKG9iai54KSA/IG9iai54IDogMCxcbiAgICB5OiBpc051bWJlcihvYmoueSkgPyBvYmoueSA6IDBcbiAgfVxufVxuXG5mdW5jdGlvbiBpc051bWJlciAodikge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdudW1iZXInXG59XG5cbmZ1bmN0aW9uIHNjcm9sbFRvUG9zaXRpb24gKHNob3VsZFNjcm9sbCwgcG9zaXRpb24pIHtcbiAgdmFyIGlzT2JqZWN0ID0gdHlwZW9mIHNob3VsZFNjcm9sbCA9PT0gJ29iamVjdCc7XG4gIGlmIChpc09iamVjdCAmJiB0eXBlb2Ygc2hvdWxkU2Nyb2xsLnNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2hvdWxkU2Nyb2xsLnNlbGVjdG9yKTtcbiAgICBpZiAoZWwpIHtcbiAgICAgIHZhciBvZmZzZXQgPSBzaG91bGRTY3JvbGwub2Zmc2V0ICYmIHR5cGVvZiBzaG91bGRTY3JvbGwub2Zmc2V0ID09PSAnb2JqZWN0JyA/IHNob3VsZFNjcm9sbC5vZmZzZXQgOiB7fTtcbiAgICAgIG9mZnNldCA9IG5vcm1hbGl6ZU9mZnNldChvZmZzZXQpO1xuICAgICAgcG9zaXRpb24gPSBnZXRFbGVtZW50UG9zaXRpb24oZWwsIG9mZnNldCk7XG4gICAgfSBlbHNlIGlmIChpc1ZhbGlkUG9zaXRpb24oc2hvdWxkU2Nyb2xsKSkge1xuICAgICAgcG9zaXRpb24gPSBub3JtYWxpemVQb3NpdGlvbihzaG91bGRTY3JvbGwpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCAmJiBpc1ZhbGlkUG9zaXRpb24oc2hvdWxkU2Nyb2xsKSkge1xuICAgIHBvc2l0aW9uID0gbm9ybWFsaXplUG9zaXRpb24oc2hvdWxkU2Nyb2xsKTtcbiAgfVxuXG4gIGlmIChwb3NpdGlvbikge1xuICAgIHdpbmRvdy5zY3JvbGxUbyhwb3NpdGlvbi54LCBwb3NpdGlvbi55KTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHN1cHBvcnRzUHVzaFN0YXRlID0gaW5Ccm93c2VyICYmIChmdW5jdGlvbiAoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGlmIChcbiAgICAodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiZcbiAgICB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmXG4gICAgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmXG4gICAgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMVxuICApIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeVxufSkoKTtcblxuLy8gdXNlIFVzZXIgVGltaW5nIGFwaSAoaWYgcHJlc2VudCkgZm9yIG1vcmUgYWNjdXJhdGUga2V5IHByZWNpc2lvblxudmFyIFRpbWUgPSBpbkJyb3dzZXIgJiYgd2luZG93LnBlcmZvcm1hbmNlICYmIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3dcbiAgPyB3aW5kb3cucGVyZm9ybWFuY2VcbiAgOiBEYXRlO1xuXG52YXIgX2tleSA9IGdlbktleSgpO1xuXG5mdW5jdGlvbiBnZW5LZXkgKCkge1xuICByZXR1cm4gVGltZS5ub3coKS50b0ZpeGVkKDMpXG59XG5cbmZ1bmN0aW9uIGdldFN0YXRlS2V5ICgpIHtcbiAgcmV0dXJuIF9rZXlcbn1cblxuZnVuY3Rpb24gc2V0U3RhdGVLZXkgKGtleSkge1xuICBfa2V5ID0ga2V5O1xufVxuXG5mdW5jdGlvbiBwdXNoU3RhdGUgKHVybCwgcmVwbGFjZSkge1xuICBzYXZlU2Nyb2xsUG9zaXRpb24oKTtcbiAgLy8gdHJ5Li4uY2F0Y2ggdGhlIHB1c2hTdGF0ZSBjYWxsIHRvIGdldCBhcm91bmQgU2FmYXJpXG4gIC8vIERPTSBFeGNlcHRpb24gMTggd2hlcmUgaXQgbGltaXRzIHRvIDEwMCBwdXNoU3RhdGUgY2FsbHNcbiAgdmFyIGhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdHJ5IHtcbiAgICBpZiAocmVwbGFjZSkge1xuICAgICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUoeyBrZXk6IF9rZXkgfSwgJycsIHVybCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9rZXkgPSBnZW5LZXkoKTtcbiAgICAgIGhpc3RvcnkucHVzaFN0YXRlKHsga2V5OiBfa2V5IH0sICcnLCB1cmwpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHdpbmRvdy5sb2NhdGlvbltyZXBsYWNlID8gJ3JlcGxhY2UnIDogJ2Fzc2lnbiddKHVybCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVwbGFjZVN0YXRlICh1cmwpIHtcbiAgcHVzaFN0YXRlKHVybCwgdHJ1ZSk7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBydW5RdWV1ZSAocXVldWUsIGZuLCBjYikge1xuICB2YXIgc3RlcCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIGlmIChpbmRleCA+PSBxdWV1ZS5sZW5ndGgpIHtcbiAgICAgIGNiKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChxdWV1ZVtpbmRleF0pIHtcbiAgICAgICAgZm4ocXVldWVbaW5kZXhdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RlcChpbmRleCArIDEpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ZXAoaW5kZXggKyAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHN0ZXAoMCk7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnRzIChtYXRjaGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodG8sIGZyb20sIG5leHQpIHtcbiAgICB2YXIgaGFzQXN5bmMgPSBmYWxzZTtcbiAgICB2YXIgcGVuZGluZyA9IDA7XG4gICAgdmFyIGVycm9yID0gbnVsbDtcblxuICAgIGZsYXRNYXBDb21wb25lbnRzKG1hdGNoZWQsIGZ1bmN0aW9uIChkZWYsIF8sIG1hdGNoLCBrZXkpIHtcbiAgICAgIC8vIGlmIGl0J3MgYSBmdW5jdGlvbiBhbmQgZG9lc24ndCBoYXZlIGNpZCBhdHRhY2hlZCxcbiAgICAgIC8vIGFzc3VtZSBpdCdzIGFuIGFzeW5jIGNvbXBvbmVudCByZXNvbHZlIGZ1bmN0aW9uLlxuICAgICAgLy8gd2UgYXJlIG5vdCB1c2luZyBWdWUncyBkZWZhdWx0IGFzeW5jIHJlc29sdmluZyBtZWNoYW5pc20gYmVjYXVzZVxuICAgICAgLy8gd2Ugd2FudCB0byBoYWx0IHRoZSBuYXZpZ2F0aW9uIHVudGlsIHRoZSBpbmNvbWluZyBjb21wb25lbnQgaGFzIGJlZW5cbiAgICAgIC8vIHJlc29sdmVkLlxuICAgICAgaWYgKHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZGVmLmNpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGhhc0FzeW5jID0gdHJ1ZTtcbiAgICAgICAgcGVuZGluZysrO1xuXG4gICAgICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzb2x2ZWREZWYpIHtcbiAgICAgICAgICBpZiAoaXNFU01vZHVsZShyZXNvbHZlZERlZikpIHtcbiAgICAgICAgICAgIHJlc29sdmVkRGVmID0gcmVzb2x2ZWREZWYuZGVmYXVsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gc2F2ZSByZXNvbHZlZCBvbiBhc3luYyBmYWN0b3J5IGluIGNhc2UgaXQncyB1c2VkIGVsc2V3aGVyZVxuICAgICAgICAgIGRlZi5yZXNvbHZlZCA9IHR5cGVvZiByZXNvbHZlZERlZiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyByZXNvbHZlZERlZlxuICAgICAgICAgICAgOiBfVnVlLmV4dGVuZChyZXNvbHZlZERlZik7XG4gICAgICAgICAgbWF0Y2guY29tcG9uZW50c1trZXldID0gcmVzb2x2ZWREZWY7XG4gICAgICAgICAgcGVuZGluZy0tO1xuICAgICAgICAgIGlmIChwZW5kaW5nIDw9IDApIHtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICB2YXIgbXNnID0gXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQgXCIgKyBrZXkgKyBcIjogXCIgKyByZWFzb247XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKGZhbHNlLCBtc2cpO1xuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9yID0gaXNFcnJvcihyZWFzb24pXG4gICAgICAgICAgICAgID8gcmVhc29uXG4gICAgICAgICAgICAgIDogbmV3IEVycm9yKG1zZyk7XG4gICAgICAgICAgICBuZXh0KGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzID0gZGVmKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgIGlmICh0eXBlb2YgcmVzLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5ldyBzeW50YXggaW4gVnVlIDIuM1xuICAgICAgICAgICAgdmFyIGNvbXAgPSByZXMuY29tcG9uZW50O1xuICAgICAgICAgICAgaWYgKGNvbXAgJiYgdHlwZW9mIGNvbXAudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBjb21wLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICghaGFzQXN5bmMpIHsgbmV4dCgpOyB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmxhdE1hcENvbXBvbmVudHMgKFxuICBtYXRjaGVkLFxuICBmblxuKSB7XG4gIHJldHVybiBmbGF0dGVuKG1hdGNoZWQubWFwKGZ1bmN0aW9uIChtKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG0uY29tcG9uZW50cykubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGZuKFxuICAgICAgbS5jb21wb25lbnRzW2tleV0sXG4gICAgICBtLmluc3RhbmNlc1trZXldLFxuICAgICAgbSwga2V5XG4gICAgKTsgfSlcbiAgfSkpXG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4gKGFycikge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgYXJyKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxuZnVuY3Rpb24gaXNFU01vZHVsZSAob2JqKSB7XG4gIHJldHVybiBvYmouX19lc01vZHVsZSB8fCAoaGFzU3ltYm9sICYmIG9ialtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJylcbn1cblxuLy8gaW4gV2VicGFjayAyLCByZXF1aXJlLmVuc3VyZSBub3cgYWxzbyByZXR1cm5zIGEgUHJvbWlzZVxuLy8gc28gdGhlIHJlc29sdmUvcmVqZWN0IGZ1bmN0aW9ucyBtYXkgZ2V0IGNhbGxlZCBhbiBleHRyYSB0aW1lXG4vLyBpZiB0aGUgdXNlciB1c2VzIGFuIGFycm93IGZ1bmN0aW9uIHNob3J0aGFuZCB0aGF0IGhhcHBlbnMgdG9cbi8vIHJldHVybiB0aGF0IFByb21pc2UuXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgaWYgKGNhbGxlZCkgeyByZXR1cm4gfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3MpXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBIaXN0b3J5ID0gZnVuY3Rpb24gSGlzdG9yeSAocm91dGVyLCBiYXNlKSB7XG4gIHRoaXMucm91dGVyID0gcm91dGVyO1xuICB0aGlzLmJhc2UgPSBub3JtYWxpemVCYXNlKGJhc2UpO1xuICAvLyBzdGFydCB3aXRoIGEgcm91dGUgb2JqZWN0IHRoYXQgc3RhbmRzIGZvciBcIm5vd2hlcmVcIlxuICB0aGlzLmN1cnJlbnQgPSBTVEFSVDtcbiAgdGhpcy5wZW5kaW5nID0gbnVsbDtcbiAgdGhpcy5yZWFkeSA9IGZhbHNlO1xuICB0aGlzLnJlYWR5Q2JzID0gW107XG4gIHRoaXMucmVhZHlFcnJvckNicyA9IFtdO1xuICB0aGlzLmVycm9yQ2JzID0gW107XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4gKGNiKSB7XG4gIHRoaXMuY2IgPSBjYjtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLm9uUmVhZHkgPSBmdW5jdGlvbiBvblJlYWR5IChjYiwgZXJyb3JDYikge1xuICBpZiAodGhpcy5yZWFkeSkge1xuICAgIGNiKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yZWFkeUNicy5wdXNoKGNiKTtcbiAgICBpZiAoZXJyb3JDYikge1xuICAgICAgdGhpcy5yZWFkeUVycm9yQ2JzLnB1c2goZXJyb3JDYik7XG4gICAgfVxuICB9XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gb25FcnJvciAoZXJyb3JDYikge1xuICB0aGlzLmVycm9yQ2JzLnB1c2goZXJyb3JDYik7XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS50cmFuc2l0aW9uVG8gPSBmdW5jdGlvbiB0cmFuc2l0aW9uVG8gKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIHJvdXRlID0gdGhpcy5yb3V0ZXIubWF0Y2gobG9jYXRpb24sIHRoaXMuY3VycmVudCk7XG4gIHRoaXMuY29uZmlybVRyYW5zaXRpb24ocm91dGUsIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzJDEudXBkYXRlUm91dGUocm91dGUpO1xuICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgdGhpcyQxLmVuc3VyZVVSTCgpO1xuXG4gICAgLy8gZmlyZSByZWFkeSBjYnMgb25jZVxuICAgIGlmICghdGhpcyQxLnJlYWR5KSB7XG4gICAgICB0aGlzJDEucmVhZHkgPSB0cnVlO1xuICAgICAgdGhpcyQxLnJlYWR5Q2JzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7IGNiKHJvdXRlKTsgfSk7XG4gICAgfVxuICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKG9uQWJvcnQpIHtcbiAgICAgIG9uQWJvcnQoZXJyKTtcbiAgICB9XG4gICAgaWYgKGVyciAmJiAhdGhpcyQxLnJlYWR5KSB7XG4gICAgICB0aGlzJDEucmVhZHkgPSB0cnVlO1xuICAgICAgdGhpcyQxLnJlYWR5RXJyb3JDYnMuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHsgY2IoZXJyKTsgfSk7XG4gICAgfVxuICB9KTtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLmNvbmZpcm1UcmFuc2l0aW9uID0gZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb24gKHJvdXRlLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gIHZhciBhYm9ydCA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoaXNFcnJvcihlcnIpKSB7XG4gICAgICBpZiAodGhpcyQxLmVycm9yQ2JzLmxlbmd0aCkge1xuICAgICAgICB0aGlzJDEuZXJyb3JDYnMuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHsgY2IoZXJyKTsgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuKGZhbHNlLCAndW5jYXVnaHQgZXJyb3IgZHVyaW5nIHJvdXRlIG5hdmlnYXRpb246Jyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgb25BYm9ydCAmJiBvbkFib3J0KGVycik7XG4gIH07XG4gIGlmIChcbiAgICBpc1NhbWVSb3V0ZShyb3V0ZSwgY3VycmVudCkgJiZcbiAgICAvLyBpbiB0aGUgY2FzZSB0aGUgcm91dGUgbWFwIGhhcyBiZWVuIGR5bmFtaWNhbGx5IGFwcGVuZGVkIHRvXG4gICAgcm91dGUubWF0Y2hlZC5sZW5ndGggPT09IGN1cnJlbnQubWF0Y2hlZC5sZW5ndGhcbiAgKSB7XG4gICAgdGhpcy5lbnN1cmVVUkwoKTtcbiAgICByZXR1cm4gYWJvcnQoKVxuICB9XG5cbiAgdmFyIHJlZiA9IHJlc29sdmVRdWV1ZSh0aGlzLmN1cnJlbnQubWF0Y2hlZCwgcm91dGUubWF0Y2hlZCk7XG4gICAgdmFyIHVwZGF0ZWQgPSByZWYudXBkYXRlZDtcbiAgICB2YXIgZGVhY3RpdmF0ZWQgPSByZWYuZGVhY3RpdmF0ZWQ7XG4gICAgdmFyIGFjdGl2YXRlZCA9IHJlZi5hY3RpdmF0ZWQ7XG5cbiAgdmFyIHF1ZXVlID0gW10uY29uY2F0KFxuICAgIC8vIGluLWNvbXBvbmVudCBsZWF2ZSBndWFyZHNcbiAgICBleHRyYWN0TGVhdmVHdWFyZHMoZGVhY3RpdmF0ZWQpLFxuICAgIC8vIGdsb2JhbCBiZWZvcmUgaG9va3NcbiAgICB0aGlzLnJvdXRlci5iZWZvcmVIb29rcyxcbiAgICAvLyBpbi1jb21wb25lbnQgdXBkYXRlIGhvb2tzXG4gICAgZXh0cmFjdFVwZGF0ZUhvb2tzKHVwZGF0ZWQpLFxuICAgIC8vIGluLWNvbmZpZyBlbnRlciBndWFyZHNcbiAgICBhY3RpdmF0ZWQubWFwKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLmJlZm9yZUVudGVyOyB9KSxcbiAgICAvLyBhc3luYyBjb21wb25lbnRzXG4gICAgcmVzb2x2ZUFzeW5jQ29tcG9uZW50cyhhY3RpdmF0ZWQpXG4gICk7XG5cbiAgdGhpcy5wZW5kaW5nID0gcm91dGU7XG4gIHZhciBpdGVyYXRvciA9IGZ1bmN0aW9uIChob29rLCBuZXh0KSB7XG4gICAgaWYgKHRoaXMkMS5wZW5kaW5nICE9PSByb3V0ZSkge1xuICAgICAgcmV0dXJuIGFib3J0KClcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGhvb2socm91dGUsIGN1cnJlbnQsIGZ1bmN0aW9uICh0bykge1xuICAgICAgICBpZiAodG8gPT09IGZhbHNlIHx8IGlzRXJyb3IodG8pKSB7XG4gICAgICAgICAgLy8gbmV4dChmYWxzZSkgLT4gYWJvcnQgbmF2aWdhdGlvbiwgZW5zdXJlIGN1cnJlbnQgVVJMXG4gICAgICAgICAgdGhpcyQxLmVuc3VyZVVSTCh0cnVlKTtcbiAgICAgICAgICBhYm9ydCh0byk7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgdHlwZW9mIHRvID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICh0eXBlb2YgdG8gPT09ICdvYmplY3QnICYmIChcbiAgICAgICAgICAgIHR5cGVvZiB0by5wYXRoID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgdHlwZW9mIHRvLm5hbWUgPT09ICdzdHJpbmcnXG4gICAgICAgICAgKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gbmV4dCgnLycpIG9yIG5leHQoeyBwYXRoOiAnLycgfSkgLT4gcmVkaXJlY3RcbiAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgIGlmICh0eXBlb2YgdG8gPT09ICdvYmplY3QnICYmIHRvLnJlcGxhY2UpIHtcbiAgICAgICAgICAgIHRoaXMkMS5yZXBsYWNlKHRvKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcyQxLnB1c2godG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBjb25maXJtIHRyYW5zaXRpb24gYW5kIHBhc3Mgb24gdGhlIHZhbHVlXG4gICAgICAgICAgbmV4dCh0byk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGFib3J0KGUpO1xuICAgIH1cbiAgfTtcblxuICBydW5RdWV1ZShxdWV1ZSwgaXRlcmF0b3IsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcG9zdEVudGVyQ2JzID0gW107XG4gICAgdmFyIGlzVmFsaWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEuY3VycmVudCA9PT0gcm91dGU7IH07XG4gICAgLy8gd2FpdCB1bnRpbCBhc3luYyBjb21wb25lbnRzIGFyZSByZXNvbHZlZCBiZWZvcmVcbiAgICAvLyBleHRyYWN0aW5nIGluLWNvbXBvbmVudCBlbnRlciBndWFyZHNcbiAgICB2YXIgZW50ZXJHdWFyZHMgPSBleHRyYWN0RW50ZXJHdWFyZHMoYWN0aXZhdGVkLCBwb3N0RW50ZXJDYnMsIGlzVmFsaWQpO1xuICAgIHZhciBxdWV1ZSA9IGVudGVyR3VhcmRzLmNvbmNhdCh0aGlzJDEucm91dGVyLnJlc29sdmVIb29rcyk7XG4gICAgcnVuUXVldWUocXVldWUsIGl0ZXJhdG9yLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcyQxLnBlbmRpbmcgIT09IHJvdXRlKSB7XG4gICAgICAgIHJldHVybiBhYm9ydCgpXG4gICAgICB9XG4gICAgICB0aGlzJDEucGVuZGluZyA9IG51bGw7XG4gICAgICBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICAgIGlmICh0aGlzJDEucm91dGVyLmFwcCkge1xuICAgICAgICB0aGlzJDEucm91dGVyLmFwcC4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHBvc3RFbnRlckNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikgeyBjYigpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxuSGlzdG9yeS5wcm90b3R5cGUudXBkYXRlUm91dGUgPSBmdW5jdGlvbiB1cGRhdGVSb3V0ZSAocm91dGUpIHtcbiAgdmFyIHByZXYgPSB0aGlzLmN1cnJlbnQ7XG4gIHRoaXMuY3VycmVudCA9IHJvdXRlO1xuICB0aGlzLmNiICYmIHRoaXMuY2Iocm91dGUpO1xuICB0aGlzLnJvdXRlci5hZnRlckhvb2tzLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgICBob29rICYmIGhvb2socm91dGUsIHByZXYpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUJhc2UgKGJhc2UpIHtcbiAgaWYgKCFiYXNlKSB7XG4gICAgaWYgKGluQnJvd3Nlcikge1xuICAgICAgLy8gcmVzcGVjdCA8YmFzZT4gdGFnXG4gICAgICB2YXIgYmFzZUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO1xuICAgICAgYmFzZSA9IChiYXNlRWwgJiYgYmFzZUVsLmdldEF0dHJpYnV0ZSgnaHJlZicpKSB8fCAnLyc7XG4gICAgICAvLyBzdHJpcCBmdWxsIFVSTCBvcmlnaW5cbiAgICAgIGJhc2UgPSBiYXNlLnJlcGxhY2UoL15odHRwcz86XFwvXFwvW15cXC9dKy8sICcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZSA9ICcvJztcbiAgICB9XG4gIH1cbiAgLy8gbWFrZSBzdXJlIHRoZXJlJ3MgdGhlIHN0YXJ0aW5nIHNsYXNoXG4gIGlmIChiYXNlLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgYmFzZSA9ICcvJyArIGJhc2U7XG4gIH1cbiAgLy8gcmVtb3ZlIHRyYWlsaW5nIHNsYXNoXG4gIHJldHVybiBiYXNlLnJlcGxhY2UoL1xcLyQvLCAnJylcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVF1ZXVlIChcbiAgY3VycmVudCxcbiAgbmV4dFxuKSB7XG4gIHZhciBpO1xuICB2YXIgbWF4ID0gTWF0aC5tYXgoY3VycmVudC5sZW5ndGgsIG5leHQubGVuZ3RoKTtcbiAgZm9yIChpID0gMDsgaSA8IG1heDsgaSsrKSB7XG4gICAgaWYgKGN1cnJlbnRbaV0gIT09IG5leHRbaV0pIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgdXBkYXRlZDogbmV4dC5zbGljZSgwLCBpKSxcbiAgICBhY3RpdmF0ZWQ6IG5leHQuc2xpY2UoaSksXG4gICAgZGVhY3RpdmF0ZWQ6IGN1cnJlbnQuc2xpY2UoaSlcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0R3VhcmRzIChcbiAgcmVjb3JkcyxcbiAgbmFtZSxcbiAgYmluZCxcbiAgcmV2ZXJzZVxuKSB7XG4gIHZhciBndWFyZHMgPSBmbGF0TWFwQ29tcG9uZW50cyhyZWNvcmRzLCBmdW5jdGlvbiAoZGVmLCBpbnN0YW5jZSwgbWF0Y2gsIGtleSkge1xuICAgIHZhciBndWFyZCA9IGV4dHJhY3RHdWFyZChkZWYsIG5hbWUpO1xuICAgIGlmIChndWFyZCkge1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZ3VhcmQpXG4gICAgICAgID8gZ3VhcmQubWFwKGZ1bmN0aW9uIChndWFyZCkgeyByZXR1cm4gYmluZChndWFyZCwgaW5zdGFuY2UsIG1hdGNoLCBrZXkpOyB9KVxuICAgICAgICA6IGJpbmQoZ3VhcmQsIGluc3RhbmNlLCBtYXRjaCwga2V5KVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBmbGF0dGVuKHJldmVyc2UgPyBndWFyZHMucmV2ZXJzZSgpIDogZ3VhcmRzKVxufVxuXG5mdW5jdGlvbiBleHRyYWN0R3VhcmQgKFxuICBkZWYsXG4gIGtleVxuKSB7XG4gIGlmICh0eXBlb2YgZGVmICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gZXh0ZW5kIG5vdyBzbyB0aGF0IGdsb2JhbCBtaXhpbnMgYXJlIGFwcGxpZWQuXG4gICAgZGVmID0gX1Z1ZS5leHRlbmQoZGVmKTtcbiAgfVxuICByZXR1cm4gZGVmLm9wdGlvbnNba2V5XVxufVxuXG5mdW5jdGlvbiBleHRyYWN0TGVhdmVHdWFyZHMgKGRlYWN0aXZhdGVkKSB7XG4gIHJldHVybiBleHRyYWN0R3VhcmRzKGRlYWN0aXZhdGVkLCAnYmVmb3JlUm91dGVMZWF2ZScsIGJpbmRHdWFyZCwgdHJ1ZSlcbn1cblxuZnVuY3Rpb24gZXh0cmFjdFVwZGF0ZUhvb2tzICh1cGRhdGVkKSB7XG4gIHJldHVybiBleHRyYWN0R3VhcmRzKHVwZGF0ZWQsICdiZWZvcmVSb3V0ZVVwZGF0ZScsIGJpbmRHdWFyZClcbn1cblxuZnVuY3Rpb24gYmluZEd1YXJkIChndWFyZCwgaW5zdGFuY2UpIHtcbiAgaWYgKGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGJvdW5kUm91dGVHdWFyZCAoKSB7XG4gICAgICByZXR1cm4gZ3VhcmQuYXBwbHkoaW5zdGFuY2UsIGFyZ3VtZW50cylcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdEVudGVyR3VhcmRzIChcbiAgYWN0aXZhdGVkLFxuICBjYnMsXG4gIGlzVmFsaWRcbikge1xuICByZXR1cm4gZXh0cmFjdEd1YXJkcyhhY3RpdmF0ZWQsICdiZWZvcmVSb3V0ZUVudGVyJywgZnVuY3Rpb24gKGd1YXJkLCBfLCBtYXRjaCwga2V5KSB7XG4gICAgcmV0dXJuIGJpbmRFbnRlckd1YXJkKGd1YXJkLCBtYXRjaCwga2V5LCBjYnMsIGlzVmFsaWQpXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGJpbmRFbnRlckd1YXJkIChcbiAgZ3VhcmQsXG4gIG1hdGNoLFxuICBrZXksXG4gIGNicyxcbiAgaXNWYWxpZFxuKSB7XG4gIHJldHVybiBmdW5jdGlvbiByb3V0ZUVudGVyR3VhcmQgKHRvLCBmcm9tLCBuZXh0KSB7XG4gICAgcmV0dXJuIGd1YXJkKHRvLCBmcm9tLCBmdW5jdGlvbiAoY2IpIHtcbiAgICAgIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2JzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vICM3NTBcbiAgICAgICAgICAvLyBpZiBhIHJvdXRlci12aWV3IGlzIHdyYXBwZWQgd2l0aCBhbiBvdXQtaW4gdHJhbnNpdGlvbixcbiAgICAgICAgICAvLyB0aGUgaW5zdGFuY2UgbWF5IG5vdCBoYXZlIGJlZW4gcmVnaXN0ZXJlZCBhdCB0aGlzIHRpbWUuXG4gICAgICAgICAgLy8gd2Ugd2lsbCBuZWVkIHRvIHBvbGwgZm9yIHJlZ2lzdHJhdGlvbiB1bnRpbCBjdXJyZW50IHJvdXRlXG4gICAgICAgICAgLy8gaXMgbm8gbG9uZ2VyIHZhbGlkLlxuICAgICAgICAgIHBvbGwoY2IsIG1hdGNoLmluc3RhbmNlcywga2V5LCBpc1ZhbGlkKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBuZXh0KGNiKTtcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIHBvbGwgKFxuICBjYiwgLy8gc29tZWhvdyBmbG93IGNhbm5vdCBpbmZlciB0aGlzIGlzIGEgZnVuY3Rpb25cbiAgaW5zdGFuY2VzLFxuICBrZXksXG4gIGlzVmFsaWRcbikge1xuICBpZiAoXG4gICAgaW5zdGFuY2VzW2tleV0gJiZcbiAgICAhaW5zdGFuY2VzW2tleV0uX2lzQmVpbmdEZXN0cm95ZWQgLy8gZG8gbm90IHJldXNlIGJlaW5nIGRlc3Ryb3llZCBpbnN0YW5jZVxuICApIHtcbiAgICBjYihpbnN0YW5jZXNba2V5XSk7XG4gIH0gZWxzZSBpZiAoaXNWYWxpZCgpKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBwb2xsKGNiLCBpbnN0YW5jZXMsIGtleSwgaXNWYWxpZCk7XG4gICAgfSwgMTYpO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgSFRNTDVIaXN0b3J5ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoSGlzdG9yeSQkMSkge1xuICBmdW5jdGlvbiBIVE1MNUhpc3RvcnkgKHJvdXRlciwgYmFzZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgSGlzdG9yeSQkMS5jYWxsKHRoaXMsIHJvdXRlciwgYmFzZSk7XG5cbiAgICB2YXIgZXhwZWN0U2Nyb2xsID0gcm91dGVyLm9wdGlvbnMuc2Nyb2xsQmVoYXZpb3I7XG4gICAgdmFyIHN1cHBvcnRzU2Nyb2xsID0gc3VwcG9ydHNQdXNoU3RhdGUgJiYgZXhwZWN0U2Nyb2xsO1xuXG4gICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7XG4gICAgICBzZXR1cFNjcm9sbCgpO1xuICAgIH1cblxuICAgIHZhciBpbml0TG9jYXRpb24gPSBnZXRMb2NhdGlvbih0aGlzLmJhc2UpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgY3VycmVudCA9IHRoaXMkMS5jdXJyZW50O1xuXG4gICAgICAvLyBBdm9pZGluZyBmaXJzdCBgcG9wc3RhdGVgIGV2ZW50IGRpc3BhdGNoZWQgaW4gc29tZSBicm93c2VycyBidXQgZmlyc3RcbiAgICAgIC8vIGhpc3Rvcnkgcm91dGUgbm90IHVwZGF0ZWQgc2luY2UgYXN5bmMgZ3VhcmQgYXQgdGhlIHNhbWUgdGltZS5cbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldExvY2F0aW9uKHRoaXMkMS5iYXNlKTtcbiAgICAgIGlmICh0aGlzJDEuY3VycmVudCA9PT0gU1RBUlQgJiYgbG9jYXRpb24gPT09IGluaXRMb2NhdGlvbikge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdGhpcyQxLnRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIGlmIChzdXBwb3J0c1Njcm9sbCkge1xuICAgICAgICAgIGhhbmRsZVNjcm9sbChyb3V0ZXIsIHJvdXRlLCBjdXJyZW50LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIEhpc3RvcnkkJDEgKSBIVE1MNUhpc3RvcnkuX19wcm90b19fID0gSGlzdG9yeSQkMTtcbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEhpc3RvcnkkJDEgJiYgSGlzdG9yeSQkMS5wcm90b3R5cGUgKTtcbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEhUTUw1SGlzdG9yeTtcblxuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gZ28gKG4pIHtcbiAgICB3aW5kb3cuaGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGZyb21Sb3V0ZSA9IHJlZi5jdXJyZW50O1xuICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgIHB1c2hTdGF0ZShjbGVhblBhdGgodGhpcyQxLmJhc2UgKyByb3V0ZS5mdWxsUGF0aCkpO1xuICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMS5yb3V0ZXIsIHJvdXRlLCBmcm9tUm91dGUsIGZhbHNlKTtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgfSwgb25BYm9ydCk7XG4gIH07XG5cbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZSAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBmcm9tUm91dGUgPSByZWYuY3VycmVudDtcbiAgICB0aGlzLnRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICByZXBsYWNlU3RhdGUoY2xlYW5QYXRoKHRoaXMkMS5iYXNlICsgcm91dGUuZnVsbFBhdGgpKTtcbiAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgZnJvbVJvdXRlLCBmYWxzZSk7XG4gICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgIH0sIG9uQWJvcnQpO1xuICB9O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuZW5zdXJlVVJMID0gZnVuY3Rpb24gZW5zdXJlVVJMIChwdXNoKSB7XG4gICAgaWYgKGdldExvY2F0aW9uKHRoaXMuYmFzZSkgIT09IHRoaXMuY3VycmVudC5mdWxsUGF0aCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBjbGVhblBhdGgodGhpcy5iYXNlICsgdGhpcy5jdXJyZW50LmZ1bGxQYXRoKTtcbiAgICAgIHB1c2ggPyBwdXNoU3RhdGUoY3VycmVudCkgOiByZXBsYWNlU3RhdGUoY3VycmVudCk7XG4gICAgfVxuICB9O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuZ2V0Q3VycmVudExvY2F0aW9uID0gZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0TG9jYXRpb24odGhpcy5iYXNlKVxuICB9O1xuXG4gIHJldHVybiBIVE1MNUhpc3Rvcnk7XG59KEhpc3RvcnkpKTtcblxuZnVuY3Rpb24gZ2V0TG9jYXRpb24gKGJhc2UpIHtcbiAgdmFyIHBhdGggPSBkZWNvZGVVUkkod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgaWYgKGJhc2UgJiYgcGF0aC5pbmRleE9mKGJhc2UpID09PSAwKSB7XG4gICAgcGF0aCA9IHBhdGguc2xpY2UoYmFzZS5sZW5ndGgpO1xuICB9XG4gIHJldHVybiAocGF0aCB8fCAnLycpICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCArIHdpbmRvdy5sb2NhdGlvbi5oYXNoXG59XG5cbi8qICAqL1xuXG52YXIgSGFzaEhpc3RvcnkgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChIaXN0b3J5JCQxKSB7XG4gIGZ1bmN0aW9uIEhhc2hIaXN0b3J5IChyb3V0ZXIsIGJhc2UsIGZhbGxiYWNrKSB7XG4gICAgSGlzdG9yeSQkMS5jYWxsKHRoaXMsIHJvdXRlciwgYmFzZSk7XG4gICAgLy8gY2hlY2sgaGlzdG9yeSBmYWxsYmFjayBkZWVwbGlua2luZ1xuICAgIGlmIChmYWxsYmFjayAmJiBjaGVja0ZhbGxiYWNrKHRoaXMuYmFzZSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBlbnN1cmVTbGFzaCgpO1xuICB9XG5cbiAgaWYgKCBIaXN0b3J5JCQxICkgSGFzaEhpc3RvcnkuX19wcm90b19fID0gSGlzdG9yeSQkMTtcbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggSGlzdG9yeSQkMSAmJiBIaXN0b3J5JCQxLnByb3RvdHlwZSApO1xuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBIYXNoSGlzdG9yeTtcblxuICAvLyB0aGlzIGlzIGRlbGF5ZWQgdW50aWwgdGhlIGFwcCBtb3VudHNcbiAgLy8gdG8gYXZvaWQgdGhlIGhhc2hjaGFuZ2UgbGlzdGVuZXIgYmVpbmcgZmlyZWQgdG9vIGVhcmx5XG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5zZXR1cExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldHVwTGlzdGVuZXJzICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByb3V0ZXIgPSB0aGlzLnJvdXRlcjtcbiAgICB2YXIgZXhwZWN0U2Nyb2xsID0gcm91dGVyLm9wdGlvbnMuc2Nyb2xsQmVoYXZpb3I7XG4gICAgdmFyIHN1cHBvcnRzU2Nyb2xsID0gc3VwcG9ydHNQdXNoU3RhdGUgJiYgZXhwZWN0U2Nyb2xsO1xuXG4gICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7XG4gICAgICBzZXR1cFNjcm9sbCgpO1xuICAgIH1cblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKHN1cHBvcnRzUHVzaFN0YXRlID8gJ3BvcHN0YXRlJyA6ICdoYXNoY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzJDEuY3VycmVudDtcbiAgICAgIGlmICghZW5zdXJlU2xhc2goKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHRoaXMkMS50cmFuc2l0aW9uVG8oZ2V0SGFzaCgpLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7XG4gICAgICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMS5yb3V0ZXIsIHJvdXRlLCBjdXJyZW50LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXN1cHBvcnRzUHVzaFN0YXRlKSB7XG4gICAgICAgICAgcmVwbGFjZUhhc2gocm91dGUuZnVsbFBhdGgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgZnJvbVJvdXRlID0gcmVmLmN1cnJlbnQ7XG4gICAgdGhpcy50cmFuc2l0aW9uVG8obG9jYXRpb24sIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgcHVzaEhhc2gocm91dGUuZnVsbFBhdGgpO1xuICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMS5yb3V0ZXIsIHJvdXRlLCBmcm9tUm91dGUsIGZhbHNlKTtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgfSwgb25BYm9ydCk7XG4gIH07XG5cbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGZyb21Sb3V0ZSA9IHJlZi5jdXJyZW50O1xuICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgIHJlcGxhY2VIYXNoKHJvdXRlLmZ1bGxQYXRoKTtcbiAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgZnJvbVJvdXRlLCBmYWxzZSk7XG4gICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgIH0sIG9uQWJvcnQpO1xuICB9O1xuXG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uIGdvIChuKSB7XG4gICAgd2luZG93Lmhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLmVuc3VyZVVSTCA9IGZ1bmN0aW9uIGVuc3VyZVVSTCAocHVzaCkge1xuICAgIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50LmZ1bGxQYXRoO1xuICAgIGlmIChnZXRIYXNoKCkgIT09IGN1cnJlbnQpIHtcbiAgICAgIHB1c2ggPyBwdXNoSGFzaChjdXJyZW50KSA6IHJlcGxhY2VIYXNoKGN1cnJlbnQpO1xuICAgIH1cbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuZ2V0Q3VycmVudExvY2F0aW9uID0gZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SGFzaCgpXG4gIH07XG5cbiAgcmV0dXJuIEhhc2hIaXN0b3J5O1xufShIaXN0b3J5KSk7XG5cbmZ1bmN0aW9uIGNoZWNrRmFsbGJhY2sgKGJhc2UpIHtcbiAgdmFyIGxvY2F0aW9uID0gZ2V0TG9jYXRpb24oYmFzZSk7XG4gIGlmICghL15cXC8jLy50ZXN0KGxvY2F0aW9uKSkge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKFxuICAgICAgY2xlYW5QYXRoKGJhc2UgKyAnLyMnICsgbG9jYXRpb24pXG4gICAgKTtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59XG5cbmZ1bmN0aW9uIGVuc3VyZVNsYXNoICgpIHtcbiAgdmFyIHBhdGggPSBnZXRIYXNoKCk7XG4gIGlmIChwYXRoLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXBsYWNlSGFzaCgnLycgKyBwYXRoKTtcbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGdldEhhc2ggKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBpbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICAvLyBlbXB0eSBwYXRoXG4gIGlmIChpbmRleCA8IDApIHsgcmV0dXJuICcnIH1cblxuICBocmVmID0gaHJlZi5zbGljZShpbmRleCArIDEpO1xuICAvLyBkZWNvZGUgdGhlIGhhc2ggYnV0IG5vdCB0aGUgc2VhcmNoIG9yIGhhc2hcbiAgLy8gYXMgc2VhcmNoKHF1ZXJ5KSBpcyBhbHJlYWR5IGRlY29kZWRcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvaXNzdWVzLzI3MDhcbiAgdmFyIHNlYXJjaEluZGV4ID0gaHJlZi5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCA8IDApIHtcbiAgICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2hJbmRleCA+IC0xKSB7IGhyZWYgPSBkZWNvZGVVUkkoaHJlZi5zbGljZSgwLCBoYXNoSW5kZXgpKSArIGhyZWYuc2xpY2UoaGFzaEluZGV4KTsgfVxuICAgIGVsc2UgeyBocmVmID0gZGVjb2RlVVJJKGhyZWYpOyB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNlYXJjaEluZGV4ID4gLTEpIHsgaHJlZiA9IGRlY29kZVVSSShocmVmLnNsaWNlKDAsIHNlYXJjaEluZGV4KSkgKyBocmVmLnNsaWNlKHNlYXJjaEluZGV4KTsgfVxuICB9XG5cbiAgcmV0dXJuIGhyZWZcbn1cblxuZnVuY3Rpb24gZ2V0VXJsIChwYXRoKSB7XG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBpID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHZhciBiYXNlID0gaSA+PSAwID8gaHJlZi5zbGljZSgwLCBpKSA6IGhyZWY7XG4gIHJldHVybiAoYmFzZSArIFwiI1wiICsgcGF0aClcbn1cblxuZnVuY3Rpb24gcHVzaEhhc2ggKHBhdGgpIHtcbiAgaWYgKHN1cHBvcnRzUHVzaFN0YXRlKSB7XG4gICAgcHVzaFN0YXRlKGdldFVybChwYXRoKSk7XG4gIH0gZWxzZSB7XG4gICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoIChwYXRoKSB7XG4gIGlmIChzdXBwb3J0c1B1c2hTdGF0ZSkge1xuICAgIHJlcGxhY2VTdGF0ZShnZXRVcmwocGF0aCkpO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGdldFVybChwYXRoKSk7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBBYnN0cmFjdEhpc3RvcnkgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChIaXN0b3J5JCQxKSB7XG4gIGZ1bmN0aW9uIEFic3RyYWN0SGlzdG9yeSAocm91dGVyLCBiYXNlKSB7XG4gICAgSGlzdG9yeSQkMS5jYWxsKHRoaXMsIHJvdXRlciwgYmFzZSk7XG4gICAgdGhpcy5zdGFjayA9IFtdO1xuICAgIHRoaXMuaW5kZXggPSAtMTtcbiAgfVxuXG4gIGlmICggSGlzdG9yeSQkMSApIEFic3RyYWN0SGlzdG9yeS5fX3Byb3RvX18gPSBIaXN0b3J5JCQxO1xuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggSGlzdG9yeSQkMSAmJiBIaXN0b3J5JCQxLnByb3RvdHlwZSApO1xuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQWJzdHJhY3RIaXN0b3J5O1xuXG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLnRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICB0aGlzJDEuc3RhY2sgPSB0aGlzJDEuc3RhY2suc2xpY2UoMCwgdGhpcyQxLmluZGV4ICsgMSkuY29uY2F0KHJvdXRlKTtcbiAgICAgIHRoaXMkMS5pbmRleCsrO1xuICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICB9LCBvbkFib3J0KTtcbiAgfTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdGhpcy50cmFuc2l0aW9uVG8obG9jYXRpb24sIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgdGhpcyQxLnN0YWNrID0gdGhpcyQxLnN0YWNrLnNsaWNlKDAsIHRoaXMkMS5pbmRleCkuY29uY2F0KHJvdXRlKTtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgfSwgb25BYm9ydCk7XG4gIH07XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uIGdvIChuKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgdGFyZ2V0SW5kZXggPSB0aGlzLmluZGV4ICsgbjtcbiAgICBpZiAodGFyZ2V0SW5kZXggPCAwIHx8IHRhcmdldEluZGV4ID49IHRoaXMuc3RhY2subGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdmFyIHJvdXRlID0gdGhpcy5zdGFja1t0YXJnZXRJbmRleF07XG4gICAgdGhpcy5jb25maXJtVHJhbnNpdGlvbihyb3V0ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcyQxLmluZGV4ID0gdGFyZ2V0SW5kZXg7XG4gICAgICB0aGlzJDEudXBkYXRlUm91dGUocm91dGUpO1xuICAgIH0pO1xuICB9O1xuXG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUuZ2V0Q3VycmVudExvY2F0aW9uID0gZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uICgpIHtcbiAgICB2YXIgY3VycmVudCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gY3VycmVudCA/IGN1cnJlbnQuZnVsbFBhdGggOiAnLydcbiAgfTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLmVuc3VyZVVSTCA9IGZ1bmN0aW9uIGVuc3VyZVVSTCAoKSB7XG4gICAgLy8gbm9vcFxuICB9O1xuXG4gIHJldHVybiBBYnN0cmFjdEhpc3Rvcnk7XG59KEhpc3RvcnkpKTtcblxuLyogICovXG5cblxuXG52YXIgVnVlUm91dGVyID0gZnVuY3Rpb24gVnVlUm91dGVyIChvcHRpb25zKSB7XG4gIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIHRoaXMuYXBwID0gbnVsbDtcbiAgdGhpcy5hcHBzID0gW107XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIHRoaXMuYmVmb3JlSG9va3MgPSBbXTtcbiAgdGhpcy5yZXNvbHZlSG9va3MgPSBbXTtcbiAgdGhpcy5hZnRlckhvb2tzID0gW107XG4gIHRoaXMubWF0Y2hlciA9IGNyZWF0ZU1hdGNoZXIob3B0aW9ucy5yb3V0ZXMgfHwgW10sIHRoaXMpO1xuXG4gIHZhciBtb2RlID0gb3B0aW9ucy5tb2RlIHx8ICdoYXNoJztcbiAgdGhpcy5mYWxsYmFjayA9IG1vZGUgPT09ICdoaXN0b3J5JyAmJiAhc3VwcG9ydHNQdXNoU3RhdGUgJiYgb3B0aW9ucy5mYWxsYmFjayAhPT0gZmFsc2U7XG4gIGlmICh0aGlzLmZhbGxiYWNrKSB7XG4gICAgbW9kZSA9ICdoYXNoJztcbiAgfVxuICBpZiAoIWluQnJvd3Nlcikge1xuICAgIG1vZGUgPSAnYWJzdHJhY3QnO1xuICB9XG4gIHRoaXMubW9kZSA9IG1vZGU7XG5cbiAgc3dpdGNoIChtb2RlKSB7XG4gICAgY2FzZSAnaGlzdG9yeSc6XG4gICAgICB0aGlzLmhpc3RvcnkgPSBuZXcgSFRNTDVIaXN0b3J5KHRoaXMsIG9wdGlvbnMuYmFzZSk7XG4gICAgICBicmVha1xuICAgIGNhc2UgJ2hhc2gnOlxuICAgICAgdGhpcy5oaXN0b3J5ID0gbmV3IEhhc2hIaXN0b3J5KHRoaXMsIG9wdGlvbnMuYmFzZSwgdGhpcy5mYWxsYmFjayk7XG4gICAgICBicmVha1xuICAgIGNhc2UgJ2Fic3RyYWN0JzpcbiAgICAgIHRoaXMuaGlzdG9yeSA9IG5ldyBBYnN0cmFjdEhpc3RvcnkodGhpcywgb3B0aW9ucy5iYXNlKTtcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGFzc2VydChmYWxzZSwgKFwiaW52YWxpZCBtb2RlOiBcIiArIG1vZGUpKTtcbiAgICAgIH1cbiAgfVxufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgY3VycmVudFJvdXRlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUubWF0Y2ggPSBmdW5jdGlvbiBtYXRjaCAoXG4gIHJhdyxcbiAgY3VycmVudCxcbiAgcmVkaXJlY3RlZEZyb21cbikge1xuICByZXR1cm4gdGhpcy5tYXRjaGVyLm1hdGNoKHJhdywgY3VycmVudCwgcmVkaXJlY3RlZEZyb20pXG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMuY3VycmVudFJvdXRlLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuaGlzdG9yeSAmJiB0aGlzLmhpc3RvcnkuY3VycmVudFxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gaW5pdCAoYXBwIC8qIFZ1ZSBjb21wb25lbnQgaW5zdGFuY2UgKi8pIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFzc2VydChcbiAgICBpbnN0YWxsLmluc3RhbGxlZCxcbiAgICBcIm5vdCBpbnN0YWxsZWQuIE1ha2Ugc3VyZSB0byBjYWxsIGBWdWUudXNlKFZ1ZVJvdXRlcilgIFwiICtcbiAgICBcImJlZm9yZSBjcmVhdGluZyByb290IGluc3RhbmNlLlwiXG4gICk7XG5cbiAgdGhpcy5hcHBzLnB1c2goYXBwKTtcblxuICAvLyBzZXQgdXAgYXBwIGRlc3Ryb3llZCBoYW5kbGVyXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtcm91dGVyL2lzc3Vlcy8yNjM5XG4gIGFwcC4kb25jZSgnaG9vazpkZXN0cm95ZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgLy8gY2xlYW4gb3V0IGFwcCBmcm9tIHRoaXMuYXBwcyBhcnJheSBvbmNlIGRlc3Ryb3llZFxuICAgIHZhciBpbmRleCA9IHRoaXMkMS5hcHBzLmluZGV4T2YoYXBwKTtcbiAgICBpZiAoaW5kZXggPiAtMSkgeyB0aGlzJDEuYXBwcy5zcGxpY2UoaW5kZXgsIDEpOyB9XG4gICAgLy8gZW5zdXJlIHdlIHN0aWxsIGhhdmUgYSBtYWluIGFwcCBvciBudWxsIGlmIG5vIGFwcHNcbiAgICAvLyB3ZSBkbyBub3QgcmVsZWFzZSB0aGUgcm91dGVyIHNvIGl0IGNhbiBiZSByZXVzZWRcbiAgICBpZiAodGhpcyQxLmFwcCA9PT0gYXBwKSB7IHRoaXMkMS5hcHAgPSB0aGlzJDEuYXBwc1swXSB8fCBudWxsOyB9XG4gIH0pO1xuXG4gIC8vIG1haW4gYXBwIHByZXZpb3VzbHkgaW5pdGlhbGl6ZWRcbiAgLy8gcmV0dXJuIGFzIHdlIGRvbid0IG5lZWQgdG8gc2V0IHVwIG5ldyBoaXN0b3J5IGxpc3RlbmVyXG4gIGlmICh0aGlzLmFwcCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdGhpcy5hcHAgPSBhcHA7XG5cbiAgdmFyIGhpc3RvcnkgPSB0aGlzLmhpc3Rvcnk7XG5cbiAgaWYgKGhpc3RvcnkgaW5zdGFuY2VvZiBIVE1MNUhpc3RvcnkpIHtcbiAgICBoaXN0b3J5LnRyYW5zaXRpb25UbyhoaXN0b3J5LmdldEN1cnJlbnRMb2NhdGlvbigpKTtcbiAgfSBlbHNlIGlmIChoaXN0b3J5IGluc3RhbmNlb2YgSGFzaEhpc3RvcnkpIHtcbiAgICB2YXIgc2V0dXBIYXNoTGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBoaXN0b3J5LnNldHVwTGlzdGVuZXJzKCk7XG4gICAgfTtcbiAgICBoaXN0b3J5LnRyYW5zaXRpb25UbyhcbiAgICAgIGhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCksXG4gICAgICBzZXR1cEhhc2hMaXN0ZW5lcixcbiAgICAgIHNldHVwSGFzaExpc3RlbmVyXG4gICAgKTtcbiAgfVxuXG4gIGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgIHRoaXMkMS5hcHBzLmZvckVhY2goZnVuY3Rpb24gKGFwcCkge1xuICAgICAgYXBwLl9yb3V0ZSA9IHJvdXRlO1xuICAgIH0pO1xuICB9KTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYmVmb3JlRWFjaCA9IGZ1bmN0aW9uIGJlZm9yZUVhY2ggKGZuKSB7XG4gIHJldHVybiByZWdpc3Rlckhvb2sodGhpcy5iZWZvcmVIb29rcywgZm4pXG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmJlZm9yZVJlc29sdmUgPSBmdW5jdGlvbiBiZWZvcmVSZXNvbHZlIChmbikge1xuICByZXR1cm4gcmVnaXN0ZXJIb29rKHRoaXMucmVzb2x2ZUhvb2tzLCBmbilcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYWZ0ZXJFYWNoID0gZnVuY3Rpb24gYWZ0ZXJFYWNoIChmbikge1xuICByZXR1cm4gcmVnaXN0ZXJIb29rKHRoaXMuYWZ0ZXJIb29rcywgZm4pXG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLm9uUmVhZHkgPSBmdW5jdGlvbiBvblJlYWR5IChjYiwgZXJyb3JDYikge1xuICB0aGlzLmhpc3Rvcnkub25SZWFkeShjYiwgZXJyb3JDYik7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yIChlcnJvckNiKSB7XG4gIHRoaXMuaGlzdG9yeS5vbkVycm9yKGVycm9yQ2IpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgdGhpcy5oaXN0b3J5LnB1c2gobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZSAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgdGhpcy5oaXN0b3J5LnJlcGxhY2UobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uIGdvIChuKSB7XG4gIHRoaXMuaGlzdG9yeS5nbyhuKTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYmFjayA9IGZ1bmN0aW9uIGJhY2sgKCkge1xuICB0aGlzLmdvKC0xKTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuZm9yd2FyZCA9IGZ1bmN0aW9uIGZvcndhcmQgKCkge1xuICB0aGlzLmdvKDEpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5nZXRNYXRjaGVkQ29tcG9uZW50cyA9IGZ1bmN0aW9uIGdldE1hdGNoZWRDb21wb25lbnRzICh0bykge1xuICB2YXIgcm91dGUgPSB0b1xuICAgID8gdG8ubWF0Y2hlZFxuICAgICAgPyB0b1xuICAgICAgOiB0aGlzLnJlc29sdmUodG8pLnJvdXRlXG4gICAgOiB0aGlzLmN1cnJlbnRSb3V0ZTtcbiAgaWYgKCFyb3V0ZSkge1xuICAgIHJldHVybiBbXVxuICB9XG4gIHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIHJvdXRlLm1hdGNoZWQubWFwKGZ1bmN0aW9uIChtKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG0uY29tcG9uZW50cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBtLmNvbXBvbmVudHNba2V5XVxuICAgIH0pXG4gIH0pKVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSAoXG4gIHRvLFxuICBjdXJyZW50LFxuICBhcHBlbmRcbikge1xuICBjdXJyZW50ID0gY3VycmVudCB8fCB0aGlzLmhpc3RvcnkuY3VycmVudDtcbiAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplTG9jYXRpb24oXG4gICAgdG8sXG4gICAgY3VycmVudCxcbiAgICBhcHBlbmQsXG4gICAgdGhpc1xuICApO1xuICB2YXIgcm91dGUgPSB0aGlzLm1hdGNoKGxvY2F0aW9uLCBjdXJyZW50KTtcbiAgdmFyIGZ1bGxQYXRoID0gcm91dGUucmVkaXJlY3RlZEZyb20gfHwgcm91dGUuZnVsbFBhdGg7XG4gIHZhciBiYXNlID0gdGhpcy5oaXN0b3J5LmJhc2U7XG4gIHZhciBocmVmID0gY3JlYXRlSHJlZihiYXNlLCBmdWxsUGF0aCwgdGhpcy5tb2RlKTtcbiAgcmV0dXJuIHtcbiAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgcm91dGU6IHJvdXRlLFxuICAgIGhyZWY6IGhyZWYsXG4gICAgLy8gZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAgICBub3JtYWxpemVkVG86IGxvY2F0aW9uLFxuICAgIHJlc29sdmVkOiByb3V0ZVxuICB9XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmFkZFJvdXRlcyA9IGZ1bmN0aW9uIGFkZFJvdXRlcyAocm91dGVzKSB7XG4gIHRoaXMubWF0Y2hlci5hZGRSb3V0ZXMocm91dGVzKTtcbiAgaWYgKHRoaXMuaGlzdG9yeS5jdXJyZW50ICE9PSBTVEFSVCkge1xuICAgIHRoaXMuaGlzdG9yeS50cmFuc2l0aW9uVG8odGhpcy5oaXN0b3J5LmdldEN1cnJlbnRMb2NhdGlvbigpKTtcbiAgfVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZ1ZVJvdXRlci5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG5mdW5jdGlvbiByZWdpc3Rlckhvb2sgKGxpc3QsIGZuKSB7XG4gIGxpc3QucHVzaChmbik7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGkgPSBsaXN0LmluZGV4T2YoZm4pO1xuICAgIGlmIChpID4gLTEpIHsgbGlzdC5zcGxpY2UoaSwgMSk7IH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVIcmVmIChiYXNlLCBmdWxsUGF0aCwgbW9kZSkge1xuICB2YXIgcGF0aCA9IG1vZGUgPT09ICdoYXNoJyA/ICcjJyArIGZ1bGxQYXRoIDogZnVsbFBhdGg7XG4gIHJldHVybiBiYXNlID8gY2xlYW5QYXRoKGJhc2UgKyAnLycgKyBwYXRoKSA6IHBhdGhcbn1cblxuVnVlUm91dGVyLmluc3RhbGwgPSBpbnN0YWxsO1xuVnVlUm91dGVyLnZlcnNpb24gPSAnMy4wLjcnO1xuXG5pZiAoaW5Ccm93c2VyICYmIHdpbmRvdy5WdWUpIHtcbiAgd2luZG93LlZ1ZS51c2UoVnVlUm91dGVyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVnVlUm91dGVyO1xuIiwiaW1wb3J0IHN0YXRlIGZyb20gXCJAcHJvamVjdF9zcmMvc3RvcmUvbW9kdWxlcy9hdXRoL3N0YXRlXCI7XG5pbXBvcnQgZ2V0dGVycyBmcm9tIFwiQHByb2plY3Rfc3JjL3N0b3JlL21vZHVsZXMvYXV0aC9nZXR0ZXJzXCI7XG5pbXBvcnQgYWN0aW9ucyBmcm9tIFwiQHByb2plY3Rfc3JjL3N0b3JlL21vZHVsZXMvYXV0aC9hY3Rpb25zXCI7XG5pbXBvcnQgbXV0YXRpb25zIGZyb20gXCJAcHJvamVjdF9zcmMvc3RvcmUvbW9kdWxlcy9hdXRoL211dGF0aW9uc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWVzcGFjZWQ6IHRydWUsXG4gIHN0YXRlLFxuICBnZXR0ZXJzLFxuICBhY3Rpb25zLFxuICBtdXRhdGlvbnNcbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIHRva2VuOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInVzZXItdG9rZW5cIikgfHwgXCJcIixcbiAgdG9rZW5fZXhwaXJlczogbnVsbCxcbiAgc2Vzc2lvbjoge1xuICAgIGlkOiBudWxsLFxuICAgIHNlY3JldDogbnVsbCxcbiAgICBhY3RpdmU6IGZhbHNlLFxuICAgIGV4cGlyZXM6IG51bGwsXG4gICAgY3JlYXRlZDogbnVsbCxcbiAgICB1cGRhdGVkOiBudWxsXG4gIH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIGlzQXV0aGVudGljYXRlZDogc3RhdGUgPT4gISFzdGF0ZS50b2tlbixcbiAgdG9rZW46IHN0YXRlID0+IHN0YXRlLnRva2VuXG59O1xuIiwiaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGxvZ291dCh7IGNvbW1pdCB9KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgLy8gcmVtb3ZlIGZyb20gc3RvcmVcbiAgICAgIGNvbW1pdChcInJlbW92ZVRva2VuXCIpO1xuICAgICAgLy8gY2xlYXIgbG9jYWwgc3RvcmFnZVxuICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJ1c2VyLXRva2VuXCIpO1xuICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJ1c2VyLXNlc3Npb25cIik7XG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcInVzZXItc2Vzc2lvbi1zZWNyZXRcIik7XG4gICAgICAvLyBjbGVhciBoZWFkZXJcbiAgICAgIGRlbGV0ZSBheGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbltcIkF1dGhvcml6YXRpb25cIl07XG4gICAgICByZXNvbHZlKCk7XG4gICAgfSk7XG4gIH0sXG4gIGxvZ2luKHsgY29tbWl0IH0sIHsgdXNlcm5hbWUsIHBhc3N3b3JkIH0pIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgYXhpb3Moe1xuICAgICAgICB1cmw6IFwiL3YyL215LXNlc3Npb25cIixcbiAgICAgICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgIC8vIHBhcnNlIGRhdGFcbiAgICAgICAgICBjb25zdCB0b2tlbiA9IHJlc3BvbnNlLmhlYWRlcnNbXCJ4LWFjY2Vzcy10b2tlblwiXTtcbiAgICAgICAgICBjb25zdCBleHBpcmVzID0gcmVzcG9uc2UuaGVhZGVyc1tcIngtYWNjZXNzLWV4cGlyZXNcIl07XG4gICAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IHJlc3BvbnNlLmRhdGE7XG5cbiAgICAgICAgICAvLyBzYXZlIHRvIGxvY2FsU3RvcmFnZVxuICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidXNlci10b2tlblwiLCB0b2tlbik7XG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ1c2VyLXNlc3Npb25cIiwgc2Vzc2lvbi5pZCk7XG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ1c2VyLXNlc3Npb24tc2VjcmV0XCIsIHNlc3Npb24uc2VjcmV0KTtcbiAgICAgICAgICAvLyBhZGQgdG8gc3RvcmVcbiAgICAgICAgICBjb21taXQoXCJzZXRUb2tlblwiLCB7IHRva2VuLCBleHBpcmVzLCBzZXNzaW9uIH0pO1xuICAgICAgICAgIC8vIGFkZCBoZWFkZXJcbiAgICAgICAgICBheGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbltcIkF1dGhvcml6YXRpb25cIl0gPSBcIkJlYXJlciBcIiArIHRva2VuO1xuXG4gICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgLy8gcmVtb3ZlIGZyb20gc3RvcmVcbiAgICAgICAgICBjb21taXQoXCJyZW1vdmVUb2tlblwiKTtcbiAgICAgICAgICAvLyBjbGVhciBsb2NhbCBzdG9yYWdlXG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJ1c2VyLXRva2VuXCIpO1xuICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwidXNlci1zZXNzaW9uXCIpO1xuICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwidXNlci1zZXNzaW9uLXNlY3JldFwiKTtcbiAgICAgICAgICAvLyBjbGVhciBoZWFkZXJcbiAgICAgICAgICBkZWxldGUgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bXCJBdXRob3JpemF0aW9uXCJdO1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuICByZWZyZXNoVG9rZW4oeyBzdGF0ZSwgY29tbWl0IH0pIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgaWQgPSBzdGF0ZS5zZXNzaW9uLmlkIHx8IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidXNlci1zZXNzaW9uXCIpO1xuICAgICAgY29uc3Qgc2VjcmV0ID1cbiAgICAgICAgc3RhdGUuc2Vzc2lvbi5zZWNyZXQgfHwgbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ1c2VyLXNlc3Npb24tc2VjcmV0XCIpO1xuICAgICAgaWYgKGlkICYmIHNlY3JldCkge1xuICAgICAgICBheGlvcyh7XG4gICAgICAgICAgdXJsOiBcIi92Mi9teS1zZXNzaW9uL1wiICsgaWQgKyBcIi9yZWZyZXNoXCIsXG4gICAgICAgICAgbWV0aG9kOiBcInB1dFwiLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHNlY3JldDogc2VjcmV0XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIC8vIHBhcnNlIGRhdGFcbiAgICAgICAgICAgIGNvbnN0IHRva2VuID0gcmVzcG9uc2UuaGVhZGVyc1tcIngtYWNjZXNzLXRva2VuXCJdO1xuICAgICAgICAgICAgY29uc3QgZXhwaXJlcyA9IHJlc3BvbnNlLmhlYWRlcnNbXCJ4LWFjY2Vzcy1leHBpcmVzXCJdO1xuICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IHJlc3BvbnNlLmRhdGE7XG5cbiAgICAgICAgICAgIC8vIHNhdmUgdG8gbG9jYWxTdG9yYWdlXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInVzZXItdG9rZW5cIiwgdG9rZW4pO1xuICAgICAgICAgICAgLy8gYWRkIHRvIHN0b3JlXG4gICAgICAgICAgICBjb21taXQoXCJzZXRUb2tlblwiLCB7IHRva2VuLCBleHBpcmVzLCBzZXNzaW9uIH0pO1xuICAgICAgICAgICAgLy8gYWRkIGhlYWRlclxuICAgICAgICAgICAgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bXCJBdXRob3JpemF0aW9uXCJdID0gXCJCZWFyZXIgXCIgKyB0b2tlbjtcblxuICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIGZyb20gc3RvcmVcbiAgICAgICAgICAgIGNvbW1pdChcInJlbW92ZVRva2VuXCIpO1xuICAgICAgICAgICAgLy8gY2xlYXIgbG9jYWwgc3RvcmFnZVxuICAgICAgICAgICAgLy8gY2xlYXIgbG9jYWwgc3RvcmFnZVxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJ1c2VyLXRva2VuXCIpO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJ1c2VyLXNlc3Npb25cIik7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcInVzZXItc2Vzc2lvbi1zZWNyZXRcIik7XG4gICAgICAgICAgICAvLyBjbGVhciBoZWFkZXJcbiAgICAgICAgICAgIGRlbGV0ZSBheGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbltcIkF1dGhvcml6YXRpb25cIl07XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIHNldFRva2VuKHN0YXRlLCB7IHRva2VuLCBleHBpcmVzLCBzZXNzaW9uIH0pIHtcbiAgICBzdGF0ZS50b2tlbiA9IHRva2VuO1xuICAgIHN0YXRlLnRva2VuX2V4cGlyZXMgPSBleHBpcmVzO1xuICAgIHN0YXRlLnNlc3Npb24uaWQgPSBzZXNzaW9uLmlkO1xuICAgIHN0YXRlLnNlc3Npb24uc2VjcmV0ID0gc2Vzc2lvbi5zZWNyZXQ7XG4gICAgc3RhdGUuc2Vzc2lvbi5hY3RpdmUgPSAhIXNlc3Npb24uYWN0aXZlO1xuICAgIHN0YXRlLnNlc3Npb24uZXhwaXJlcyA9IHNlc3Npb24uZXhwaXJlcztcbiAgICBzdGF0ZS5zZXNzaW9uLmNyZWF0ZWQgPSBzZXNzaW9uLmNyZWF0ZWQ7XG4gICAgc3RhdGUuc2Vzc2lvbi51cGRhdGVkID0gc2Vzc2lvbi51cGRhdGVkO1xuICB9LFxuICByZW1vdmVUb2tlbihzdGF0ZSkge1xuICAgIHN0YXRlLnRva2VuID0gXCJcIjtcbiAgICBzdGF0ZS50b2tlbl9leHBpcmVzID0gbnVsbDtcbiAgICBzdGF0ZS5zZXNzaW9uLmlkID0gbnVsbDtcbiAgICBzdGF0ZS5zZXNzaW9uLnNlY3JldCA9IG51bGw7XG4gICAgc3RhdGUuc2Vzc2lvbi5hY3RpdmUgPSBmYWxzZTtcbiAgICBzdGF0ZS5zZXNzaW9uLmV4cGlyZXMgPSBudWxsO1xuICAgIHN0YXRlLnNlc3Npb24uY3JlYXRlZCA9IG51bGw7XG4gICAgc3RhdGUuc2Vzc2lvbi51cGRhdGVkID0gbnVsbDtcbiAgfVxufTtcbiIsImltcG9ydCBWdWUgZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IFZ1ZXggZnJvbSBcInZ1ZXhcIjtcbi8vIE1vZHVsZXNcbmltcG9ydCBBdXRoTW9kdWxlIGZyb20gXCJAcHJvamVjdF9zcmMvc3RvcmUvbW9kdWxlcy9hdXRoXCI7XG5cblZ1ZS51c2UoVnVleCk7XG5cbmNvbnN0IHN0YXRlID0ge1xuICBsb2NhbGU6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwibG9jYWxlXCIpIHx8IFwiZW5cIlxufTtcblxuY29uc3QgbXV0YXRpb25zID0ge1xuICBzZXRMb2NhbGU6IChzdGF0ZSwgeyBsb2NhbGUgfSkgPT4ge1xuICAgIHN0YXRlLmxvY2FsZSA9IGxvY2FsZTtcbiAgfVxufTtcblxuY29uc3QgYWN0aW9ucyA9IHtcbiAgY2hhbmdlTG9jYWxlOiAoeyBjb21taXQgfSwgeyBsb2NhbGUgfSkgPT4ge1xuICAgIGNvbW1pdChcInNldExvY2FsZVwiLCB7IGxvY2FsZSB9KTtcbiAgfVxufTtcblxuY29uc3QgZ2V0dGVycyA9IHtcbiAgZ2V0TG9jYWxlOiBzdGF0ZSA9PiBzdGF0ZS5sb2NhbGVcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBWdWV4LlN0b3JlKHtcbiAgc3RyaWN0OiBmYWxzZSxcbiAgc3RhdGUsXG4gIG11dGF0aW9ucyxcbiAgYWN0aW9ucyxcbiAgZ2V0dGVycyxcbiAgbW9kdWxlczoge1xuICAgIGF1dGg6IEF1dGhNb2R1bGVcbiAgfVxufSk7XG4iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwidHJhbnNsYXRpb25zXCIgfSwgW1xuICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwidHJhbnNsYXRpb25zX19oZWFkZXJcIiB9LCBbXG4gICAgICBfYyhcImgzXCIsIHsgc3RhdGljQ2xhc3M6IFwidHJhbnNsYXRpb25zX190aXRsZVwiIH0sIFtcbiAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uJHQoXCJ0YWJsZS5oZWFkXCIpKSlcbiAgICAgIF0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwidHJhbnNsYXRpb25zX19hY3Rpb25zXCIgfSwgW1xuICAgICAgICBfYyhcbiAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImJ1dHRvbiBhY3Rpb25fX2NyZWF0ZVwiLFxuICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY3JlYXRlSXRlbSgpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwiaVwiLCB7IHN0YXRpY0NsYXNzOiBcImZhcyBmYS1wbHVzXCIgfSksXG4gICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgIFwiXFxuICAgICAgICBcIiArIF92bS5fcyhfdm0uJHQoXCJ0YWJsZS5hY3Rpb25DcmVhdGVcIikpICsgXCJcXG4gICAgICBcIlxuICAgICAgICAgICAgKVxuICAgICAgICAgIF1cbiAgICAgICAgKVxuICAgICAgXSlcbiAgICBdKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF92bS50cmFuc2xhdGlvbnMubGVuZ3RoXG4gICAgICA/IF9jKFwidGFibGVcIiwgeyBzdGF0aWNDbGFzczogXCJ0cmFuc2xhdGlvbnNfX2xpc3RcIiB9LCBbXG4gICAgICAgICAgX2MoXCJ0aGVhZFwiLCBbXG4gICAgICAgICAgICBfYyhcInRyXCIsIFtcbiAgICAgICAgICAgICAgX2MoXCJ0aFwiLCBbX3ZtLl92KFwiSURcIildKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJ0aFwiLCBbX3ZtLl92KF92bS5fcyhfdm0uJHQoXCJ0YWJsZS5uYW1lXCIpKSldKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJ0aFwiLCBbX3ZtLl92KF92bS5fcyhfdm0uJHQoXCJ0YWJsZS5uYXRpdmVcIikpKV0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcInRoXCIsIFtfdm0uX3YoX3ZtLl9zKF92bS4kdChcInRhYmxlLmxleGljb25cIikpKV0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcInRoXCIsIFtfdm0uX3YoX3ZtLl9zKF92bS4kdChcInRhYmxlLmNyZWF0ZWRcIikpKV0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcInRoXCIsIFtfdm0uX3YoX3ZtLl9zKF92bS4kdChcInRhYmxlLnVwZGF0ZWRcIikpKV0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcInRoXCIsIFtfdm0uX3YoX3ZtLl9zKF92bS4kdChcInRhYmxlLmFjdGlvbnNcIikpKV0pXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX2MoXG4gICAgICAgICAgICBcInRib2R5XCIsXG4gICAgICAgICAgICBfdm0uX2woX3ZtLnRyYW5zbGF0aW9ucywgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgICByZXR1cm4gX2MoXCJ0clwiLCB7IGtleTogaXRlbS5pZCB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCBbX3ZtLl92KF92bS5fcyhpdGVtLmlkKSldKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgW192bS5fdihfdm0uX3MoaXRlbS5uYW1lKSldKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgW192bS5fdihfdm0uX3MoaXRlbS5uYXRpdmUpKV0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCBbX3ZtLl92KF92bS5fcyhpdGVtLmxleGljb24pKV0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCBbX3ZtLl92KF92bS5fcyhfdm0ucGFyc2VEYXRlKGl0ZW0uY3JlYXRlZCkpKV0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCBbX3ZtLl92KF92bS5fcyhfdm0ucGFyc2VEYXRlKGl0ZW0udXBkYXRlZCkpKV0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IHN0YXRpY0NsYXNzOiBcInRyYW5zbGF0aW9uX19hY3Rpb25cIiB9LCBbXG4gICAgICAgICAgICAgICAgICBfYyhcImlcIiwge1xuICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmYXIgZmEtZXllIGFjdGlvbl9fcmVhZFwiLFxuICAgICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ucmVhZEl0ZW0oaXRlbS5pZClcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFwiaVwiLCB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZhciBmYS1lZGl0IGFjdGlvbl9fZWRpdFwiLFxuICAgICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udXBkYXRlSXRlbShpdGVtLmlkKVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXCJpXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZmFyIGZhLWZpbGUtd29yZCBhY3Rpb25fX25hdGl2ZVwiLFxuICAgICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udXBkYXRlTmF0aXZlKGl0ZW0uaWQpXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIDBcbiAgICAgICAgICApXG4gICAgICAgIF0pXG4gICAgICA6IF92bS5fZSgpXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwidHJhbnNsYXRpb25zXCI+XG4gICAgPGRpdiBjbGFzcz1cInRyYW5zbGF0aW9uc19faGVhZGVyXCI+XG4gICAgICA8aDMgY2xhc3M9XCJ0cmFuc2xhdGlvbnNfX3RpdGxlXCI+e3sgJHQoXCJ0YWJsZS5oZWFkXCIpIH19PC9oMz5cbiAgICAgIDxkaXYgY2xhc3M9XCJ0cmFuc2xhdGlvbnNfX2FjdGlvbnNcIj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ1dHRvbiBhY3Rpb25fX2NyZWF0ZVwiIEBjbGljaz1cImNyZWF0ZUl0ZW0oKVwiPlxuICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXBsdXNcIj48L2k+XG4gICAgICAgICAge3sgJHQoXCJ0YWJsZS5hY3Rpb25DcmVhdGVcIikgfX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8dGFibGUgY2xhc3M9XCJ0cmFuc2xhdGlvbnNfX2xpc3RcIiB2LWlmPVwidHJhbnNsYXRpb25zLmxlbmd0aFwiPlxuICAgICAgPHRoZWFkPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRoPklEPC90aD5cbiAgICAgICAgICA8dGg+e3sgJHQoXCJ0YWJsZS5uYW1lXCIpIH19PC90aD5cbiAgICAgICAgICA8dGg+e3sgJHQoXCJ0YWJsZS5uYXRpdmVcIikgfX08L3RoPlxuICAgICAgICAgIDx0aD57eyAkdChcInRhYmxlLmxleGljb25cIikgfX08L3RoPlxuICAgICAgICAgIDx0aD57eyAkdChcInRhYmxlLmNyZWF0ZWRcIikgfX08L3RoPlxuICAgICAgICAgIDx0aD57eyAkdChcInRhYmxlLnVwZGF0ZWRcIikgfX08L3RoPlxuICAgICAgICAgIDx0aD57eyAkdChcInRhYmxlLmFjdGlvbnNcIikgfX08L3RoPlxuICAgICAgICA8L3RyPlxuICAgICAgPC90aGVhZD5cbiAgICAgIDx0Ym9keT5cbiAgICAgICAgPHRyIHYtZm9yPVwiaXRlbSBpbiB0cmFuc2xhdGlvbnNcIiA6a2V5PVwiaXRlbS5pZFwiPlxuICAgICAgICAgIDx0ZD57eyBpdGVtLmlkIH19PC90ZD5cbiAgICAgICAgICA8dGQ+e3sgaXRlbS5uYW1lIH19PC90ZD5cbiAgICAgICAgICA8dGQ+e3sgaXRlbS5uYXRpdmUgfX08L3RkPlxuICAgICAgICAgIDx0ZD57eyBpdGVtLmxleGljb24gfX08L3RkPlxuICAgICAgICAgIDx0ZD57eyBwYXJzZURhdGUoaXRlbS5jcmVhdGVkKSB9fTwvdGQ+XG4gICAgICAgICAgPHRkPnt7IHBhcnNlRGF0ZShpdGVtLnVwZGF0ZWQpIH19PC90ZD5cbiAgICAgICAgICA8dGQgY2xhc3M9XCJ0cmFuc2xhdGlvbl9fYWN0aW9uXCI+XG4gICAgICAgICAgICA8aSBjbGFzcz1cImZhciBmYS1leWUgYWN0aW9uX19yZWFkXCIgQGNsaWNrPVwicmVhZEl0ZW0oaXRlbS5pZClcIj48L2k+XG4gICAgICAgICAgICA8aVxuICAgICAgICAgICAgICBjbGFzcz1cImZhciBmYS1lZGl0IGFjdGlvbl9fZWRpdFwiXG4gICAgICAgICAgICAgIEBjbGljaz1cInVwZGF0ZUl0ZW0oaXRlbS5pZClcIlxuICAgICAgICAgICAgPjwvaT5cbiAgICAgICAgICAgIDxpXG4gICAgICAgICAgICAgIGNsYXNzPVwiZmFyIGZhLWZpbGUtd29yZCBhY3Rpb25fX25hdGl2ZVwiXG4gICAgICAgICAgICAgIEBjbGljaz1cInVwZGF0ZU5hdGl2ZShpdGVtLmlkKVwiXG4gICAgICAgICAgICA+PC9pPlxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgICA8L3Rib2R5PlxuICAgIDwvdGFibGU+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogXCJJbmRleFBhZ2VcIixcbiAgaTE4bjoge1xuICAgIG1lc3NhZ2VzOiB7XG4gICAgICBlbjoge1xuICAgICAgICB0YWJsZToge1xuICAgICAgICAgIGhlYWQ6IFwiVHJhbnNsYXRpb25zXCIsXG4gICAgICAgICAgYWN0aW9uQ3JlYXRlOiBcIkNyZWF0ZVwiLFxuICAgICAgICAgIG5hbWU6IFwiTmFtZVwiLFxuICAgICAgICAgIG5hdGl2ZTogXCJOYXRpdmVcIixcbiAgICAgICAgICBsZXhpY29uOiBcIkxleGljb25cIixcbiAgICAgICAgICBjcmVhdGVkOiBcIkNyZWF0ZWRcIixcbiAgICAgICAgICB1cGRhdGVkOiBcIlVwZGF0ZWRcIixcbiAgICAgICAgICBhY3Rpb25zOiBcIkFjdGlvbnNcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZXM6IHtcbiAgICAgICAgdGFibGU6IHtcbiAgICAgICAgICBoZWFkOiBcIlRyYWR1Y2Npb25lc1wiLFxuICAgICAgICAgIGFjdGlvbkNyZWF0ZTogXCJDcmVhclwiLFxuICAgICAgICAgIG5hbWU6IFwiTm9tYnJlXCIsXG4gICAgICAgICAgbmF0aXZlOiBcIk5hdGl2b1wiLFxuICAgICAgICAgIGxleGljb246IFwiTMOpeGljb1wiLFxuICAgICAgICAgIGNyZWF0ZWQ6IFwiQ3JlYWRvXCIsXG4gICAgICAgICAgdXBkYXRlZDogXCJBY3R1YWxpemFkb1wiLFxuICAgICAgICAgIGFjdGlvbnM6IFwiQ29tcG9ydGFtaWVudG9cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGU6IHtcbiAgICAgICAgdGFibGU6IHtcbiAgICAgICAgICBoZWFkOiBcIsOcYmVyc2V0enVuZ2VuXCIsXG4gICAgICAgICAgYWN0aW9uQ3JlYXRlOiBcIkVyc3RlbGxlblwiLFxuICAgICAgICAgIG5hbWU6IFwiTmFtZVwiLFxuICAgICAgICAgIG5hdGl2ZTogXCJFaW5nZWJvcmVuZXJcIixcbiAgICAgICAgICBsZXhpY29uOiBcIkxleGlrb25cIixcbiAgICAgICAgICBjcmVhdGVkOiBcIkVyc3RlbGx0XCIsXG4gICAgICAgICAgdXBkYXRlZDogXCJBa3R1YWxpc2llcnRlXCIsXG4gICAgICAgICAgYWN0aW9uczogXCJBa3Rpb25lblwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBmcjoge1xuICAgICAgICB0YWJsZToge1xuICAgICAgICAgIGhlYWQ6IFwiVHJhZHVjdGlvbnNcIixcbiAgICAgICAgICBhY3Rpb25DcmVhdGU6IFwiQ3LDqWVyXCIsXG4gICAgICAgICAgbmFtZTogXCJwcsOpbm9tXCIsXG4gICAgICAgICAgbmF0aXZlOiBcIk9yaWdpbmFpcmUgZGVcIixcbiAgICAgICAgICBsZXhpY29uOiBcIkxleGlxdWVcIixcbiAgICAgICAgICBjcmVhdGVkOiBcIkNyw6nDqVwiLFxuICAgICAgICAgIHVwZGF0ZWQ6IFwiTWlzIMOgIGpvdXJcIixcbiAgICAgICAgICBhY3Rpb25zOiBcImFjdGVzXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwicHQtYnJcIjoge1xuICAgICAgICB0YWJsZToge1xuICAgICAgICAgIGhlYWQ6IFwiVHJhZHXDp8O1ZXNcIixcbiAgICAgICAgICBhY3Rpb25DcmVhdGU6IFwiQ3Jpb1wiLFxuICAgICAgICAgIG5hbWU6IFwiTm9tZVwiLFxuICAgICAgICAgIG5hdGl2ZTogXCJOYXRpdm9cIixcbiAgICAgICAgICBsZXhpY29uOiBcIkzDqXhpY29cIixcbiAgICAgICAgICBjcmVhdGVkOiBcIkNyaWFkb1wiLFxuICAgICAgICAgIHVwZGF0ZWQ6IFwiQXR1YWxpemFkYVwiLFxuICAgICAgICAgIGFjdGlvbnM6IFwiQcOnw7Vlc1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpdDoge1xuICAgICAgICB0YWJsZToge1xuICAgICAgICAgIGhlYWQ6IFwiVHJhZHV6aW9uaVwiLFxuICAgICAgICAgIGFjdGlvbkNyZWF0ZTogXCJDcmVhcmVcIixcbiAgICAgICAgICBuYW1lOiBcIk5vbWVcIixcbiAgICAgICAgICBuYXRpdmU6IFwibmF0aXZvXCIsXG4gICAgICAgICAgbGV4aWNvbjogXCJMZXNzaWNvXCIsXG4gICAgICAgICAgY3JlYXRlZDogXCJDcmVhdG9cIixcbiAgICAgICAgICB1cGRhdGVkOiBcImFnZ2lvcm5hdG9cIixcbiAgICAgICAgICBhY3Rpb25zOiBcIkF6aW9uaVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBydToge1xuICAgICAgICB0YWJsZToge1xuICAgICAgICAgIGhlYWQ6IFwi0J/QtdGA0LXQstC+0LTRi1wiLFxuICAgICAgICAgIGFjdGlvbkNyZWF0ZTogXCLQodC+0LfQtNCw0YLRjFwiLFxuICAgICAgICAgIG5hbWU6IFwi0J3QsNC30LLQsNC90LjQtVwiLFxuICAgICAgICAgIG5hdGl2ZTogXCLQndCw0YLQuNCy0L3Ri9C5XCIsXG4gICAgICAgICAgbGV4aWNvbjogXCLQm9C10LrRgdC40LrQvtC9XCIsXG4gICAgICAgICAgY3JlYXRlZDogXCLQodC+0LfQtNCw0L1cIixcbiAgICAgICAgICB1cGRhdGVkOiBcItCe0LHQvdC+0LLQu9C10L1cIixcbiAgICAgICAgICBhY3Rpb25zOiBcItCU0LXQudGB0YLQstC40Y9cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdWs6IHtcbiAgICAgICAgdGFibGU6IHtcbiAgICAgICAgICBoZWFkOiBcItCf0LXRgNC10LrQu9Cw0LTQuFwiLFxuICAgICAgICAgIGFjdGlvbkNyZWF0ZTogXCLQodGC0LLQvtGA0LjRgtC4XCIsXG4gICAgICAgICAgbmFtZTogXCLQhtC8J9GPXCIsXG4gICAgICAgICAgbmF0aXZlOiBcItCg0ZbQtNC90LjQuVwiLFxuICAgICAgICAgIGxleGljb246IFwi0JvQtdC60YHQuNC60L7QvVwiLFxuICAgICAgICAgIGNyZWF0ZWQ6IFwi0KHRgtCy0L7RgNC10L3QvlwiLFxuICAgICAgICAgIHVwZGF0ZWQ6IFwi0J7QvdC+0LLQu9C10L3QvlwiLFxuICAgICAgICAgIGFjdGlvbnM6IFwi0JTRltGXXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRyOiB7XG4gICAgICAgIHRhYmxlOiB7XG4gICAgICAgICAgaGVhZDogXCLDh2V2aXJpbGVyXCIsXG4gICAgICAgICAgYWN0aW9uQ3JlYXRlOiBcInlhcmF0bWFrXCIsXG4gICAgICAgICAgbmFtZTogXCJpc2ltXCIsXG4gICAgICAgICAgbmF0aXZlOiBcInllcmxpXCIsXG4gICAgICAgICAgbGV4aWNvbjogXCJzw7Z6bMO8a1wiLFxuICAgICAgICAgIGNyZWF0ZWQ6IFwiZMO8emVubGVuZGlcIixcbiAgICAgICAgICB1cGRhdGVkOiBcIkfDvG5jZWxsZW5tacWfXCIsXG4gICAgICAgICAgYWN0aW9uczogXCJFeWxlbWxlclwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcInpoLXR3XCI6IHtcbiAgICAgICAgdGFibGU6IHtcbiAgICAgICAgICBoZWFkOiBcIue/u+itr1wiLFxuICAgICAgICAgIGFjdGlvbkNyZWF0ZTogXCLlibXlu7pcIixcbiAgICAgICAgICBuYW1lOiBcIuWQjeeosVwiLFxuICAgICAgICAgIG5hdGl2ZTogXCLmnKzlnLDkurpcIixcbiAgICAgICAgICBsZXhpY29uOiBcIuipnuW9mVwiLFxuICAgICAgICAgIGNyZWF0ZWQ6IFwi5Ym15bu6XCIsXG4gICAgICAgICAgdXBkYXRlZDogXCLmm7TmlrBcIixcbiAgICAgICAgICBhY3Rpb25zOiBcIuaTjeS9nFwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcInpoLWNuXCI6IHtcbiAgICAgICAgdGFibGU6IHtcbiAgICAgICAgICBoZWFkOiBcIue/u+ivkVwiLFxuICAgICAgICAgIGFjdGlvbkNyZWF0ZTogXCLliJvlu7pcIixcbiAgICAgICAgICBuYW1lOiBcIuWQjeensFwiLFxuICAgICAgICAgIG5hdGl2ZTogXCLmnKzlnLDkurpcIixcbiAgICAgICAgICBsZXhpY29uOiBcIuivjeaxh1wiLFxuICAgICAgICAgIGNyZWF0ZWQ6IFwi5Yib5bu6XCIsXG4gICAgICAgICAgdXBkYXRlZDogXCLmm7TmlrBcIixcbiAgICAgICAgICBhY3Rpb25zOiBcIuaTjeS9nFwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN1cnJlbnRMb2NhbGU6IFwiZW5cIixcbiAgICAgIHRyYW5zbGF0aW9uczogW10sXG4gICAgICB0aW1lcjogbnVsbFxuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgbG9jYWxlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnNbXCJnZXRMb2NhbGVcIl07XG4gICAgfVxuICB9LFxuICBtb3VudGVkKCkge1xuICAgIHRoaXMuZ2V0VHJhbnNsYXRpb25zKCk7XG4gICAgdGhpcy50aW1lciA9IHNldEludGVydmFsKCgpID0+IHRoaXMuZ2V0VHJhbnNsYXRpb25zKCksIDYwMDAwKTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHBhcnNlRGF0ZSh1bml4RGF0ZSkge1xuICAgICAgY29uc3QgdGhlRGF0ZSA9IG5ldyBEYXRlKHVuaXhEYXRlICogMTAwMCk7XG4gICAgICByZXR1cm4gdGhlRGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKSArIFwiIFwiICsgdGhlRGF0ZS50b0xvY2FsZVRpbWVTdHJpbmcoKTtcbiAgICB9LFxuICAgIGNyZWF0ZUl0ZW0oKSB7XG4gICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7IG5hbWU6IFwiY3JlYXRlXCIgfSk7XG4gICAgfSxcbiAgICByZWFkSXRlbShpZCkge1xuICAgICAgdGhpcy4kcm91dGVyLnB1c2goeyBuYW1lOiBcInJlYWRcIiwgcGFyYW1zOiB7IGlkIH0gfSk7XG4gICAgfSxcbiAgICB1cGRhdGVJdGVtKGlkKSB7XG4gICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7IG5hbWU6IFwidXBkYXRlXCIsIHBhcmFtczogeyBpZCB9IH0pO1xuICAgIH0sXG4gICAgdXBkYXRlTmF0aXZlKGlkKSB7XG4gICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7IG5hbWU6IFwibmF0aXZlXCIsIHBhcmFtczogeyBpZCB9IH0pO1xuICAgIH0sXG4gICAgZ2V0VHJhbnNsYXRpb25zKCkge1xuICAgICAgY29uc29sZS5sb2coXCJ1cGRhdGUgbGlzdFwiKTtcbiAgICAgIGF4aW9zXG4gICAgICAgIC5nZXQoXCIvdjIvdHJhbnNsYXRpb25zXCIpXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwICYmIHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNsYXRpb25zID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudExvY2FsZSA9IHJlc3BvbnNlLmhlYWRlcnNbXCJjb250ZW50LWxhbmd1YWdlXCJdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgbG9jYWxlKG5ld1ZhbCkge1xuICAgICAgaWYgKG5ld1ZhbCAhPT0gdGhpcy5jdXJyZW50TG9jYWxlKSB7XG4gICAgICAgIHRoaXMuZ2V0VHJhbnNsYXRpb25zKCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBiZWZvcmVEZXN0cm95KCkge1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7XG4gIH1cbn07XG48L3NjcmlwdD5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxuQGltcG9ydCBcIi4uL2NvbW1vbi9zdHlsZXMvY29uZmlnL3ZhcmlhYmxlc1wiO1xuXG4udHJhbnNsYXRpb25zX19oZWFkZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgLnRyYW5zbGF0aW9uc19fYWN0aW9ucyB7XG4gICAgZGlzcGxheTogZmxleDtcblxuICAgIC5idXR0b24ge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBoZWlnaHQ6IDM4cHg7XG4gICAgICBwYWRkaW5nOiAxMnB4IDE4cHg7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkcHJpbWFyeS1jb2xvcjtcbiAgICAgIGNvbG9yOiAkd2hpdGUtcHJpbWFyeS10ZXh0LWNvbG9yO1xuICAgICAgZm9udC13ZWlnaHQ6IG1hcF9nZXQoJHR5cG9ncmFwaHktZm9udC13ZWlnaHQtdmFsdWVzLCBtZWRpdW0pO1xuICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xuXG4gICAgICBpIHtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgICAgfVxuXG4gICAgICAmOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogZGFya2VuKCRwcmltYXJ5LWNvbG9yLCAxMCUpO1xuICAgICAgfVxuXG4gICAgICAmOmFjdGl2ZSB7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxcHgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG50YWJsZSB7XG4gIHdpZHRoOiAxMDAlO1xuICBjb2xvcjogJGRhcmstcHJpbWFyeS10ZXh0LWNvbG9yO1xuICBtYXJnaW4tYm90dG9tOiAycmVtO1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICBib3JkZXItc3BhY2luZzogMDtcblxuICB0aGVhZCB7XG4gICAgdHIge1xuICAgICAgaGVpZ2h0OiA1NnB4O1xuXG4gICAgICB0aCB7XG4gICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgIGJvcmRlci1ib3R0b20td2lkdGg6IDFweDtcbiAgICAgICAgYm9yZGVyLWJvdHRvbS1zdHlsZTogc29saWQ7XG4gICAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xMik7XG4gICAgICAgIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNTQpO1xuICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG5cbiAgICAgICAgJjpmaXJzdC1jaGlsZCB7XG4gICAgICAgICAgcGFkZGluZy1sZWZ0OiAyNHB4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGJvZHkge1xuICAgIHRyIHtcbiAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4zcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpIDBzLFxuICAgICAgICBmb250LXdlaWdodDtcbiAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTIpO1xuICAgICAgcGFkZGluZzogMCAxNXB4O1xuICAgICAgaGVpZ2h0OiA0OHB4O1xuXG4gICAgICAmOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjA4KTtcbiAgICAgIH1cblxuICAgICAgdGQge1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICBib3JkZXItYm90dG9tLXdpZHRoOiAxcHg7XG4gICAgICAgIGJvcmRlci1ib3R0b20tc3R5bGU6IHNvbGlkO1xuICAgICAgICBib3JkZXItYm90dG9tLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMTIpO1xuICAgICAgICBjb2xvcjogJGRhcmstcHJpbWFyeS10ZXh0LWNvbG9yO1xuICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG5cbiAgICAgICAgJjpmaXJzdC1jaGlsZCB7XG4gICAgICAgICAgcGFkZGluZy1sZWZ0OiAyNHB4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi50cmFuc2xhdGlvbl9fYWN0aW9uIHtcbiAgaSB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICBjb2xvcjogJGRhcmstaWNvbi1jb2xvcjtcblxuICAgIGkgKyBpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICAgIH1cblxuICAgICY6aG92ZXIge1xuICAgICAgY29sb3I6ICRwcmltYXJ5LWNvbG9yO1xuICAgIH1cbiAgfVxufVxuPC9zdHlsZT5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9JbmRleFBhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vSW5kZXhQYWdlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vSW5kZXhQYWdlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03ZTc2YWMwZCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9JbmRleFBhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9JbmRleFBhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0luZGV4UGFnZS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkQ6XFxcXFByb2plY3RzXFxcXFdob2VyX3Rlc3RcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzdlNzZhYzBkJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzdlNzZhYzBkJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9JbmRleFBhZ2UudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTdlNzZhYzBkJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzdlNzZhYzBkJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvcGFnZXMvSW5kZXhQYWdlLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJhY2NvdW50XCIgfSwgW1xuICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiYWNjb3VudF9fdGl0bGVcIiB9LCBbXG4gICAgICBfYyhcImgxXCIsIHsgc3RhdGljQ2xhc3M6IFwidGl0bGVfX2hlYWRsaW5lXCIgfSwgW1xuICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS4kdChcInRpdGxlLmhlYWRsaW5lXCIpKSlcbiAgICAgIF0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcInRpdGxlX19zdWJoZWFkbGluZVwiIH0sIFtcbiAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uJHQoXCJ0aXRsZS5zdWJIZWFkbGluZVwiKSkpXG4gICAgICBdKVxuICAgIF0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJhY2NvdW50X19ib3hcIiB9LCBbXG4gICAgICBfYyhcbiAgICAgICAgXCJmb3JtXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBzdGF0aWNDbGFzczogXCJhY2NvdW50X19mb3JtXCIsXG4gICAgICAgICAgYXR0cnM6IHsgYWN0aW9uOiBcIi9sb2dpblwiLCBpZDogXCJsb2dpbi1mb3JtXCIsIG1ldGhvZDogXCJwb3N0XCIgfSxcbiAgICAgICAgICBvbjogeyBzdWJtaXQ6IF92bS5jaGVja0Zvcm0gfVxuICAgICAgICB9LFxuICAgICAgICBbXG4gICAgICAgICAgX3ZtLmVycm9ycy5sZW5ndGhcbiAgICAgICAgICAgID8gX2MoXCJkaXZcIiwgeyBhdHRyczogeyBpZDogXCJmbGFzaFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgXCJ1bFwiLFxuICAgICAgICAgICAgICAgICAgX3ZtLl9sKF92bS5lcnJvcnMsIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfYyhcImxpXCIsIHsga2V5OiBlcnJvciB9LCBbX3ZtLl92KF92bS5fcyhlcnJvcikpXSlcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIDogX3ZtLl9lKCksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImZvcm1fX2l0ZW1cIiB9LCBbXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJsYWJlbFwiLFxuICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImZvcm1fX2xhYmVsXCIsIGF0dHJzOiB7IGZvcjogXCJ1c2VyLWxvZ2luXCIgfSB9LFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgXCJcXG4gICAgICAgICAgXCIgK1xuICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLiR0KFwiZm9ybS5sb2dpbkZpZWxkXCIpKSArXG4gICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICBcIlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5maWVsZHMudXNlcm5hbWUsXG4gICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBcImZpZWxkcy51c2VybmFtZVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmb3JtX19pbnB1dCByZXF1aXJlZFwiLFxuICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIGlkOiBcInVzZXItbG9naW5cIixcbiAgICAgICAgICAgICAgICBhdXRvZm9jdXM6IFwiYXV0b2ZvY3VzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJ1c2VyW2xvZ2luXVwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uZmllbGRzLnVzZXJuYW1lIH0sXG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmZpZWxkcywgXCJ1c2VybmFtZVwiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9ybV9faXRlbVwiIH0sIFtcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImxhYmVsXCIsXG4gICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiZm9ybV9fbGFiZWxcIiwgYXR0cnM6IHsgZm9yOiBcInVzZXItcGFzc3dvcmRcIiB9IH0sXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICBcIlxcbiAgICAgICAgICBcIiArXG4gICAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uJHQoXCJmb3JtLnBhc3N3b3JkRmllbGRcIikpICtcbiAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgICAgIFwiXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmZpZWxkcy5wYXNzd29yZCxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiZmllbGRzLnBhc3N3b3JkXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm1fX2lucHV0IHJlcXVpcmVkXCIsXG4gICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJwYXNzd29yZFwiLFxuICAgICAgICAgICAgICAgIGlkOiBcInVzZXItcGFzc3dvcmRcIixcbiAgICAgICAgICAgICAgICBhdXRvZm9jdXM6IFwiYXV0b2ZvY3VzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJ1c2VyW3Bhc3N3b3JkXVwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uZmllbGRzLnBhc3N3b3JkIH0sXG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmZpZWxkcywgXCJwYXNzd29yZFwiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZm9ybV9fc3VibWl0XCIsXG4gICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcInN1Ym1pdFwiLCBuYW1lOiBcImNvbW1pdFwiIH0sXG4gICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLiR0KFwiZm9ybS5zdWJtaXRcIikgfVxuICAgICAgICAgIH0pXG4gICAgICAgIF1cbiAgICAgIClcbiAgICBdKVxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImFjY291bnRcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYWNjb3VudF9fdGl0bGVcIj5cbiAgICAgIDxoMSBjbGFzcz1cInRpdGxlX19oZWFkbGluZVwiPnt7ICR0KFwidGl0bGUuaGVhZGxpbmVcIikgfX08L2gxPlxuICAgICAgPHNwYW4gY2xhc3M9XCJ0aXRsZV9fc3ViaGVhZGxpbmVcIj57eyAkdChcInRpdGxlLnN1YkhlYWRsaW5lXCIpIH19PC9zcGFuPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJhY2NvdW50X19ib3hcIj5cbiAgICAgIDxmb3JtXG4gICAgICAgIGFjdGlvbj1cIi9sb2dpblwiXG4gICAgICAgIGNsYXNzPVwiYWNjb3VudF9fZm9ybVwiXG4gICAgICAgIGlkPVwibG9naW4tZm9ybVwiXG4gICAgICAgIG1ldGhvZD1cInBvc3RcIlxuICAgICAgICBAc3VibWl0PVwiY2hlY2tGb3JtXCJcbiAgICAgID5cbiAgICAgICAgPGRpdiBpZD1cImZsYXNoXCIgdi1pZj1cImVycm9ycy5sZW5ndGhcIj5cbiAgICAgICAgICA8dWw+XG4gICAgICAgICAgICA8bGkgdi1mb3I9XCJlcnJvciBpbiBlcnJvcnNcIiA6a2V5PVwiZXJyb3JcIj57eyBlcnJvciB9fTwvbGk+XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtX19pdGVtXCI+XG4gICAgICAgICAgPGxhYmVsIGZvcj1cInVzZXItbG9naW5cIiBjbGFzcz1cImZvcm1fX2xhYmVsXCI+XG4gICAgICAgICAgICB7eyAkdChcImZvcm0ubG9naW5GaWVsZFwiKSB9fVxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICBpZD1cInVzZXItbG9naW5cIlxuICAgICAgICAgICAgY2xhc3M9XCJmb3JtX19pbnB1dCByZXF1aXJlZFwiXG4gICAgICAgICAgICBhdXRvZm9jdXM9XCJhdXRvZm9jdXNcIlxuICAgICAgICAgICAgbmFtZT1cInVzZXJbbG9naW5dXCJcbiAgICAgICAgICAgIHYtbW9kZWw9XCJmaWVsZHMudXNlcm5hbWVcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybV9faXRlbVwiPlxuICAgICAgICAgIDxsYWJlbCBmb3I9XCJ1c2VyLXBhc3N3b3JkXCIgY2xhc3M9XCJmb3JtX19sYWJlbFwiPlxuICAgICAgICAgICAge3sgJHQoXCJmb3JtLnBhc3N3b3JkRmllbGRcIikgfX1cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgIGlkPVwidXNlci1wYXNzd29yZFwiXG4gICAgICAgICAgICBjbGFzcz1cImZvcm1fX2lucHV0IHJlcXVpcmVkXCJcbiAgICAgICAgICAgIGF1dG9mb2N1cz1cImF1dG9mb2N1c1wiXG4gICAgICAgICAgICBuYW1lPVwidXNlcltwYXNzd29yZF1cIlxuICAgICAgICAgICAgdi1tb2RlbD1cImZpZWxkcy5wYXNzd29yZFwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgIG5hbWU9XCJjb21taXRcIlxuICAgICAgICAgIDp2YWx1ZT1cIiR0KCdmb3JtLnN1Ym1pdCcpXCJcbiAgICAgICAgICBjbGFzcz1cImZvcm1fX3N1Ym1pdFwiXG4gICAgICAgIC8+XG4gICAgICA8L2Zvcm0+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6IFwiTG9naW5QYWdlXCIsXG4gIGkxOG46IHtcbiAgICBtZXNzYWdlczoge1xuICAgICAgZW46IHtcbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICBoZWFkbGluZTogXCJXZWxjb21lIGJhY2tcIixcbiAgICAgICAgICBzdWJIZWFkbGluZTogXCJMb2cgaW4gdG8geW91ciBhY2NvdW50XCJcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGxvZ2luRmllbGQ6IFwiTG9naW5cIixcbiAgICAgICAgICBwYXNzd29yZEZpZWxkOiBcIlBhc3N3b3JkXCIsXG4gICAgICAgICAgc3VibWl0OiBcIkxvZyBpblwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBlczoge1xuICAgICAgICB0aXRsZToge1xuICAgICAgICAgIGhlYWRsaW5lOiBcIkRhciB1bmEgYnVlbmEgYWNvZ2lkYVwiLFxuICAgICAgICAgIHN1YkhlYWRsaW5lOiBcIkluZ3Jlc2UgYSBzdSBjdWVudGFcIlxuICAgICAgICB9LFxuICAgICAgICBmb3JtOiB7XG4gICAgICAgICAgbG9naW5GaWVsZDogXCJJbmljaWFyIHNlc2nDs25cIixcbiAgICAgICAgICBwYXNzd29yZEZpZWxkOiBcIkNvbnRyYXNlw7FhXCIsXG4gICAgICAgICAgc3VibWl0OiBcIkluaWNpYXIgc2VzacOzblwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZToge1xuICAgICAgICB0aXRsZToge1xuICAgICAgICAgIGhlYWRsaW5lOiBcIldpbGxrb21tZW4genVyw7xja1wiLFxuICAgICAgICAgIHN1YkhlYWRsaW5lOiBcIklucyBLb250byBlaW5sb2dnZW5cIlxuICAgICAgICB9LFxuICAgICAgICBmb3JtOiB7XG4gICAgICAgICAgbG9naW5GaWVsZDogXCJBbm1lbGR1bmdcIixcbiAgICAgICAgICBwYXNzd29yZEZpZWxkOiBcIlBhc3N3b3J0XCIsXG4gICAgICAgICAgc3VibWl0OiBcIkVpbmxvZ2dlblwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBmcjoge1xuICAgICAgICB0aXRsZToge1xuICAgICAgICAgIGhlYWRsaW5lOiBcIk5vdXMgc2FsdW9ucyBsZSByZXRvdXJcIixcbiAgICAgICAgICBzdWJIZWFkbGluZTogXCJDb25uZWN0ZXotdm91cyDDoCB2b3RyZSBjb21wdGVcIlxuICAgICAgICB9LFxuICAgICAgICBmb3JtOiB7XG4gICAgICAgICAgbG9naW5GaWVsZDogXCJTJ2lkZW50aWZpZXJcIixcbiAgICAgICAgICBwYXNzd29yZEZpZWxkOiBcIk1vdCBkZSBwYXNzZVwiLFxuICAgICAgICAgIHN1Ym1pdDogXCJTJ2lkZW50aWZpZXJcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJwdC1iclwiOiB7XG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgaGVhZGxpbmU6IFwiQmVtIHZpbmRvIGRlIHZvbHRhXCIsXG4gICAgICAgICAgc3ViSGVhZGxpbmU6IFwiRmHDp2EgbG9naW4gbmEgc3VhIGNvbnRhXCJcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGxvZ2luRmllbGQ6IFwiRW50cmFyXCIsXG4gICAgICAgICAgcGFzc3dvcmRGaWVsZDogXCJTZW5oYVwiLFxuICAgICAgICAgIHN1Ym1pdDogXCJFbnRyYXJcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaXQ6IHtcbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICBoZWFkbGluZTogXCJCZW4gdG9ybmF0b1wiLFxuICAgICAgICAgIHN1YkhlYWRsaW5lOiBcIkFjY2VkaSBhbCB0dW8gYWNjb3VudFwiXG4gICAgICAgIH0sXG4gICAgICAgIGZvcm06IHtcbiAgICAgICAgICBsb2dpbkZpZWxkOiBcIkFjY2Vzc29cIixcbiAgICAgICAgICBwYXNzd29yZEZpZWxkOiBcIlBhcm9sYSBkJ29yZGluZVwiLFxuICAgICAgICAgIHN1Ym1pdDogXCJBY2Nlc3NvXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJ1OiB7XG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgaGVhZGxpbmU6IFwi0KEg0LLQvtC30LLRgNCw0YnQtdC90LjQtdC8XCIsXG4gICAgICAgICAgc3ViSGVhZGxpbmU6IFwi0JLQvtC50LTQuNGC0LUg0LIg0YHQstC+0Y4g0YPRh9C10YLQvdGD0Y4g0LfQsNC/0LjRgdGMXCJcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGxvZ2luRmllbGQ6IFwi0JjQvNGPINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRj1wiLFxuICAgICAgICAgIHBhc3N3b3JkRmllbGQ6IFwi0J/QsNGA0L7Qu9GMXCIsXG4gICAgICAgICAgc3VibWl0OiBcItCS0L7QudGC0LhcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdWs6IHtcbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICBoZWFkbGluZTogXCLQlyDQv9C+0LLQtdGA0L3QtdC90L3Rj9C8XCIsXG4gICAgICAgICAgc3ViSGVhZGxpbmU6IFwi0KPQstGW0LnQtNGW0YLRjCDQtNC+INGB0LLQvtCz0L4g0L7QsdC70ZbQutC+0LLQvtCz0L4g0LfQsNC/0LjRgdGDXCJcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGxvZ2luRmllbGQ6IFwi0IbQvCfRjyDQutC+0YDQuNGB0YLRg9Cy0LDRh9CwXCIsXG4gICAgICAgICAgcGFzc3dvcmRGaWVsZDogXCLQn9Cw0YDQvtC70YxcIixcbiAgICAgICAgICBzdWJtaXQ6IFwi0KPQstGW0LnRgtC4XCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRyOiB7XG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgaGVhZGxpbmU6IFwiVGVrcmFyIGhvxZ9nZWxkaW5pelwiLFxuICAgICAgICAgIHN1YkhlYWRsaW5lOiBcIkhlc2FixLFuxLF6YSBnaXJpxZ8geWFwxLFuXCJcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGxvZ2luRmllbGQ6IFwiS3VsbGFuxLFjxLEgYWTEsVwiLFxuICAgICAgICAgIHBhc3N3b3JkRmllbGQ6IFwiUGFyb2xhXCIsXG4gICAgICAgICAgc3VibWl0OiBcIk90dXJ1bSBhw6dcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJ6aC10d1wiOiB7XG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgaGVhZGxpbmU6IFwi5q2h6L+O5Zue5L6GXCIsXG4gICAgICAgICAgc3ViSGVhZGxpbmU6IFwi55m76YyE5Yiw5oKo55qE5biz5oi2XCJcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGxvZ2luRmllbGQ6IFwi55So5oi25ZCNXCIsXG4gICAgICAgICAgcGFzc3dvcmRGaWVsZDogXCLlr4bnorxcIixcbiAgICAgICAgICBzdWJtaXQ6IFwi55m76YyEXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiemgtY25cIjoge1xuICAgICAgICB0aXRsZToge1xuICAgICAgICAgIGhlYWRsaW5lOiBcIuasoui/juWbnuadpVwiLFxuICAgICAgICAgIHN1YkhlYWRsaW5lOiBcIueZu+W9leWIsOaCqOeahOW4kOaIt1wiXG4gICAgICAgIH0sXG4gICAgICAgIGZvcm06IHtcbiAgICAgICAgICBsb2dpbkZpZWxkOiBcIueUqOaIt+WQjVwiLFxuICAgICAgICAgIHBhc3N3b3JkRmllbGQ6IFwi5a+G56CBXCIsXG4gICAgICAgICAgc3VibWl0OiBcIueZu+W9lVwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yczogW10sXG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgdXNlcm5hbWU6IG51bGwsXG4gICAgICAgIHBhc3N3b3JkOiBudWxsXG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGNoZWNrRm9ybShlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIHRoaXMuZXJyb3JzID0gW107XG5cbiAgICAgIGlmICh0aGlzLmZpZWxkcy51c2VybmFtZSAmJiB0aGlzLmZpZWxkcy5wYXNzd29yZCkge1xuICAgICAgICB0aGlzLiRzdG9yZVxuICAgICAgICAgIC5kaXNwYXRjaChcImF1dGgvbG9naW5cIiwge1xuICAgICAgICAgICAgdXNlcm5hbWU6IHRoaXMuZmllbGRzLnVzZXJuYW1lLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IHRoaXMuZmllbGRzLnBhc3N3b3JkXG4gICAgICAgICAgfSlcbiAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaChcIi9cIik7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgdGhpcy5lcnJvcnMucHVzaChlcnJvci5yZXNwb25zZS5oZWFkZXJzW1wieC1tZXNzYWdlXCJdKTtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRPRE86IGkxOG4gZXJyb3IgbWVzc2FnZXNcbiAgICAgIGlmICghdGhpcy5maWVsZHMudXNlcm5hbWUpIHtcbiAgICAgICAgdGhpcy5lcnJvcnMucHVzaCh0aGlzLiR0KFwiZm9ybS5sb2dpbkZpZWxkXCIpICsgXCIgZmllbGQgaXMgcmVxdWlyZWRcIik7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuZmllbGRzLnBhc3N3b3JkKSB7XG4gICAgICAgIHRoaXMuZXJyb3JzLnB1c2godGhpcy4kdChcImZvcm0ucGFzc3dvcmRGaWVsZFwiKSArIFwiIGZpZWxkIGlzIHJlcXVpcmVkXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbjwvc2NyaXB0PlxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG5AaW1wb3J0IFwiLi4vY29tbW9uL3N0eWxlcy9jb25maWcvdmFyaWFibGVzXCI7XG5cbi5hY2NvdW50IHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIC5hY2NvdW50X190aXRsZSB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDYwcHg7XG4gICAgLnRpdGxlX19oZWFkbGluZSB7XG4gICAgICBmb250LXNpemU6IDNyZW07IC8vIDQ4c3BcbiAgICAgIGxpbmUtaGVpZ2h0OiAzcmVtO1xuICAgICAgZm9udC13ZWlnaHQ6IG1hcF9nZXQoJHR5cG9ncmFwaHktZm9udC13ZWlnaHQtdmFsdWVzLCByZWd1bGFyKTtcbiAgICAgIGxldHRlci1zcGFjaW5nOiBub3JtYWw7XG4gICAgICBjb2xvcjogJGRhcmstcHJpbWFyeS10ZXh0LWNvbG9yO1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICB9XG4gICAgLnRpdGxlX19zdWJoZWFkbGluZSB7XG4gICAgICBmb250LXNpemU6IDFyZW07IC8vIDE2IHNwXG4gICAgICBsaW5lLWhlaWdodDogMS43NXJlbTsgLy8yOCBzcFxuICAgICAgZm9udC13ZWlnaHQ6IG1hcF9nZXQoJHR5cG9ncmFwaHktZm9udC13ZWlnaHQtdmFsdWVzLCByZWd1bGFyKTtcbiAgICAgIGxldHRlci1zcGFjaW5nOiB0eXBvZ3JhcGh5LWdldC1sZXR0ZXItc3BhY2luZygwLjE1LCAxKTtcbiAgICAgIGNvbG9yOiAkZGFyay1zZWNvbmRhcnktdGV4dC1jb2xvcjtcbiAgICB9XG4gIH1cbiAgLmFjY291bnRfX2JveCB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHdpZHRoOiA1MCU7XG4gICAgcGFkZGluZzogMCAxNXB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgICBib3gtc2hhZG93OiAwIDFweCAycHggMCByZ2JhKDAsIDAsIDAsIDAuMDgpLCBpbnNldCAwIDAgMCAxcHggI2RiZTNlNztcbiAgICB0cmFuc2l0aW9uOiAwLjRzO1xuICAgIC5hY2NvdW50X19mb3JtIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBwYWRkaW5nOiA0MHB4IDQwcHggMzBweDtcbiAgICAgICNmbGFzaCB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZjZjhlMztcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2ZhZWJjYztcbiAgICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xuICAgICAgICBjb2xvcjogIzc2Njc0ZTtcbiAgICAgICAgZm9udC1zaXplOiAxcmVtO1xuICAgICAgICBsaW5lLWhlaWdodDogMS4ycmVtO1xuICAgICAgICBwYWRkaW5nOiA4cHggMTBweDtcbiAgICAgIH1cbiAgICAgIC5mb3JtX19pdGVtIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAuZm9ybV9fbGFiZWwge1xuICAgICAgICAgIGNvbG9yOiAkZGFyay1wcmltYXJ5LXRleHQtY29sb3I7XG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgZm9udC13ZWlnaHQ6IG1hcF9nZXQoJHR5cG9ncmFwaHktZm9udC13ZWlnaHQtdmFsdWVzLCByZWd1bGFyKTtcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgIH1cbiAgICAgICAgLmZvcm1fX2lucHV0IHtcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgaGVpZ2h0OiAzOHB4O1xuICAgICAgICAgIHBhZGRpbmc6IDAgMTBweDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRiYWNrZ3JvdW5kLXByaW1hcnktY29sb3I7XG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2RiZTNlNztcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgICAgICAgY29sb3I6ICRkYXJrLXByaW1hcnktdGV4dC1jb2xvcjtcbiAgICAgICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICAgICAgdHJhbnNpdGlvbjogYWxsIGVhc2UtaW4tb3V0IDAuMXM7XG4gICAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgICAmOmFjdGl2ZSxcbiAgICAgICAgICAmOmZvY3VzIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlZWYyZjQ7XG4gICAgICAgICAgICBib3JkZXItY29sb3I6ICRwcmltYXJ5LWNvbG9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLmZvcm1fX3N1Ym1pdCB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBoZWlnaHQ6IDM4cHg7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBwYWRkaW5nOiAxMnB4IDE4cHg7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRwcmltYXJ5LWNvbG9yO1xuICAgICAgICBjb2xvcjogJHdoaXRlLXByaW1hcnktdGV4dC1jb2xvcjtcbiAgICAgICAgZm9udC13ZWlnaHQ6IG1hcF9nZXQoJHR5cG9ncmFwaHktZm9udC13ZWlnaHQtdmFsdWVzLCBtZWRpdW0pO1xuICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZW4oJHByaW1hcnktY29sb3IsIDEwJSk7XG4gICAgICAgIH1cbiAgICAgICAgJjphY3RpdmUge1xuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxcHgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG48L3N0eWxlPlxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0xvZ2luUGFnZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Mb2dpblBhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9Mb2dpblBhZ2UudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTE2ZDhlYmE0JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0xvZ2luUGFnZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0xvZ2luUGFnZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vTG9naW5QYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcUHJvamVjdHNcXFxcV2hvZXJfdGVzdFxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMTZkOGViYTQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMTZkOGViYTQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0xvZ2luUGFnZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MTZkOGViYTQmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMTZkOGViYTQnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9wYWdlcy9Mb2dpblBhZ2UudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInRyYW5zbGF0aW9uLWNyZWF0ZVwiIH0sIFtcbiAgICBfYyhcImgxXCIsIFtfdm0uX3YoX3ZtLl9zKF92bS4kdChcImZvcm0uaGVhZFwiKSkpXSksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInRyYW5zbGF0aW9uX19ib3hcIiB9LCBbXG4gICAgICBfdm0ubm90aWNlcy5sZW5ndGhcbiAgICAgICAgPyBfYyhcImRpdlwiLCB7IGF0dHJzOiB7IGlkOiBcImZsYXNoXCIgfSB9LCBbXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJ1bFwiLFxuICAgICAgICAgICAgICBfdm0uX2woX3ZtLm5vdGljZXMsIGZ1bmN0aW9uKG5vdGljZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfYyhcImxpXCIsIHsga2V5OiBub3RpY2UgfSwgW192bS5fdihfdm0uX3Mobm90aWNlKSldKVxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgKVxuICAgICAgICAgIF0pXG4gICAgICAgIDogX3ZtLl9lKCksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXG4gICAgICAgIFwiZm9ybVwiLFxuICAgICAgICB7XG4gICAgICAgICAgc3RhdGljQ2xhc3M6IFwidHJhbnNsYXRpb25fX2Zvcm1cIixcbiAgICAgICAgICBhdHRyczogeyBhY3Rpb246IFwiL3RyYW5zbGF0aW9uXCIsIG1ldGhvZDogXCJwb3N0XCIgfSxcbiAgICAgICAgICBvbjogeyBzdWJtaXQ6IF92bS5jcmVhdGVUcmFuc2xhdGlvbiB9XG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImZvcm1fX2l0ZW1cIiB9LCBbXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJsYWJlbFwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZm9ybV9fbGFiZWxcIixcbiAgICAgICAgICAgICAgICBhdHRyczogeyBmb3I6IFwidHJhbnNsYXRpb24tbmFtZVwiIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICAgIFwiICsgX3ZtLl9zKF92bS4kdChcImZvcm0ubmFtZVwiKSkgKyBcIlxcbiAgICAgICAgXCJcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBuYW1lOiBcIm1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtbW9kZWxcIixcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZmllbGRzLm5hbWUsXG4gICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBcImZpZWxkcy5uYW1lXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm1fX2lucHV0IHJlcXVpcmVkXCIsXG4gICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwidHJhbnNsYXRpb24tbmFtZVwiLFxuICAgICAgICAgICAgICAgIGF1dG9mb2N1czogXCJhdXRvZm9jdXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInRyYW5zbGF0aW9uW25hbWVdXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5maWVsZHMubmFtZSB9LFxuICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5maWVsZHMsIFwibmFtZVwiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9ybV9faXRlbVwiIH0sIFtcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImxhYmVsXCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmb3JtX19sYWJlbFwiLFxuICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZvcjogXCJ0cmFuc2xhdGlvbi1sZXhpY29uXCIgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgXCJcXG4gICAgICAgICAgXCIgKyBfdm0uX3MoX3ZtLiR0KFwiZm9ybS5sZXhpY29uXCIpKSArIFwiXFxuICAgICAgICBcIlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5maWVsZHMubGV4aWNvbixcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiZmllbGRzLmxleGljb25cIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZm9ybV9faW5wdXQgcmVxdWlyZWRcIixcbiAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwidHJhbnNsYXRpb24tbGV4aWNvblwiLFxuICAgICAgICAgICAgICAgIGF1dG9mb2N1czogXCJhdXRvZm9jdXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInRyYW5zbGF0aW9uW2xleGljb25dXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHtcbiAgICAgICAgICAgICAgICBjaGVja2VkOiBBcnJheS5pc0FycmF5KF92bS5maWVsZHMubGV4aWNvbilcbiAgICAgICAgICAgICAgICAgID8gX3ZtLl9pKF92bS5maWVsZHMubGV4aWNvbiwgbnVsbCkgPiAtMVxuICAgICAgICAgICAgICAgICAgOiBfdm0uZmllbGRzLmxleGljb25cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgdmFyICQkYSA9IF92bS5maWVsZHMubGV4aWNvbixcbiAgICAgICAgICAgICAgICAgICAgJCRlbCA9ICRldmVudC50YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICQkYyA9ICQkZWwuY2hlY2tlZCA/IHRydWUgOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoJCRhKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJCR2ID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAkJGkgPSBfdm0uX2koJCRhLCAkJHYpXG4gICAgICAgICAgICAgICAgICAgIGlmICgkJGVsLmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAkJGkgPCAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0uZmllbGRzLCBcImxleGljb25cIiwgJCRhLmNvbmNhdChbJCR2XSkpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgJCRpID4gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZmllbGRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImxleGljb25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJCRhLnNsaWNlKDAsICQkaSkuY29uY2F0KCQkYS5zbGljZSgkJGkgKyAxKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmZpZWxkcywgXCJsZXhpY29uXCIsICQkYylcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm1fX3N1Ym1pdFwiLFxuICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJzdWJtaXRcIiwgbmFtZTogXCJjb21taXRcIiB9LFxuICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS4kdChcImZvcm0uYWN0aW9uXCIpIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdXG4gICAgICApXG4gICAgXSlcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJ0cmFuc2xhdGlvbi1jcmVhdGVcIj5cbiAgICA8aDE+e3sgJHQoXCJmb3JtLmhlYWRcIikgfX08L2gxPlxuICAgIDxkaXYgY2xhc3M9XCJ0cmFuc2xhdGlvbl9fYm94XCI+XG4gICAgICA8ZGl2IGlkPVwiZmxhc2hcIiB2LWlmPVwibm90aWNlcy5sZW5ndGhcIj5cbiAgICAgICAgPHVsPlxuICAgICAgICAgIDxsaSB2LWZvcj1cIm5vdGljZSBpbiBub3RpY2VzXCIgOmtleT1cIm5vdGljZVwiPnt7IG5vdGljZSB9fTwvbGk+XG4gICAgICAgIDwvdWw+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxmb3JtXG4gICAgICAgIGFjdGlvbj1cIi90cmFuc2xhdGlvblwiXG4gICAgICAgIGNsYXNzPVwidHJhbnNsYXRpb25fX2Zvcm1cIlxuICAgICAgICBtZXRob2Q9XCJwb3N0XCJcbiAgICAgICAgQHN1Ym1pdD1cImNyZWF0ZVRyYW5zbGF0aW9uXCJcbiAgICAgID5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm1fX2l0ZW1cIj5cbiAgICAgICAgICA8bGFiZWwgZm9yPVwidHJhbnNsYXRpb24tbmFtZVwiIGNsYXNzPVwiZm9ybV9fbGFiZWxcIj5cbiAgICAgICAgICAgIHt7ICR0KFwiZm9ybS5uYW1lXCIpIH19XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIGlkPVwidHJhbnNsYXRpb24tbmFtZVwiXG4gICAgICAgICAgICBjbGFzcz1cImZvcm1fX2lucHV0IHJlcXVpcmVkXCJcbiAgICAgICAgICAgIGF1dG9mb2N1cz1cImF1dG9mb2N1c1wiXG4gICAgICAgICAgICBuYW1lPVwidHJhbnNsYXRpb25bbmFtZV1cIlxuICAgICAgICAgICAgdi1tb2RlbD1cImZpZWxkcy5uYW1lXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm1fX2l0ZW1cIj5cbiAgICAgICAgICA8bGFiZWwgZm9yPVwidHJhbnNsYXRpb24tbGV4aWNvblwiIGNsYXNzPVwiZm9ybV9fbGFiZWxcIj5cbiAgICAgICAgICAgIHt7ICR0KFwiZm9ybS5sZXhpY29uXCIpIH19XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICBpZD1cInRyYW5zbGF0aW9uLWxleGljb25cIlxuICAgICAgICAgICAgY2xhc3M9XCJmb3JtX19pbnB1dCByZXF1aXJlZFwiXG4gICAgICAgICAgICBhdXRvZm9jdXM9XCJhdXRvZm9jdXNcIlxuICAgICAgICAgICAgbmFtZT1cInRyYW5zbGF0aW9uW2xleGljb25dXCJcbiAgICAgICAgICAgIHYtbW9kZWw9XCJmaWVsZHMubGV4aWNvblwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgIG5hbWU9XCJjb21taXRcIlxuICAgICAgICAgIDp2YWx1ZT1cIiR0KCdmb3JtLmFjdGlvbicpXCJcbiAgICAgICAgICBjbGFzcz1cImZvcm1fX3N1Ym1pdFwiXG4gICAgICAgIC8+XG4gICAgICA8L2Zvcm0+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogXCJDcmVhdGVUcmFuc2xhdGlvblBhZ2VcIixcbiAgaTE4bjoge1xuICAgIG1lc3NhZ2VzOiB7XG4gICAgICBlbjoge1xuICAgICAgICBmb3JtOiB7XG4gICAgICAgICAgaGVhZDogXCJDcmVhdGUgdHJhbnNsYXRpb25cIixcbiAgICAgICAgICBhY3Rpb246IFwiQ3JlYXRlXCIsXG4gICAgICAgICAgbmFtZTogXCJOYW1lXCIsXG4gICAgICAgICAgbGV4aWNvbjogXCJMZXhpY29uXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVzOiB7XG4gICAgICAgIGZvcm06IHtcbiAgICAgICAgICBoZWFkOiBcIkNyZWFyIHRyYWR1Y2Npw7NuXCIsXG4gICAgICAgICAgYWN0aW9uOiBcIkNyZWFyXCIsXG4gICAgICAgICAgbmFtZTogXCJOb21icmVcIixcbiAgICAgICAgICBsZXhpY29uOiBcIkzDqXhpY29cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGU6IHtcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGhlYWQ6IFwiw5xiZXJzZXR6dW5nIGVyc3RlbGxlblwiLFxuICAgICAgICAgIGFjdGlvbjogXCJFcnN0ZWxsZW5cIixcbiAgICAgICAgICBuYW1lOiBcIk5hbWVcIixcbiAgICAgICAgICBsZXhpY29uOiBcIkxleGlrb25cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZnI6IHtcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGhlYWQ6IFwiQ3LDqWVyIHVuZSB0cmFkdWN0aW9uXCIsXG4gICAgICAgICAgYWN0aW9uOiBcIkNyw6llclwiLFxuICAgICAgICAgIG5hbWU6IFwiUHLDqW5vbVwiLFxuICAgICAgICAgIGxleGljb246IFwiTGV4aXF1ZVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcInB0LWJyXCI6IHtcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGhlYWQ6IFwiQ3JpYXIgdHJhZHXDp8Ojb1wiLFxuICAgICAgICAgIGFjdGlvbjogXCJDcmlvXCIsXG4gICAgICAgICAgbmFtZTogXCJOb21lXCIsXG4gICAgICAgICAgbGV4aWNvbjogXCJMw6l4aWNvXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGl0OiB7XG4gICAgICAgIGZvcm06IHtcbiAgICAgICAgICBoZWFkOiBcIkNyZWEgdHJhZHV6aW9uZVwiLFxuICAgICAgICAgIGFjdGlvbjogXCJDcmVhcmVcIixcbiAgICAgICAgICBuYW1lOiBcIk5vbWVcIixcbiAgICAgICAgICBsZXhpY29uOiBcIkxlc3NpY29cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcnU6IHtcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGhlYWQ6IFwi0KHQvtC30LTQsNGC0Ywg0L/QtdGA0LXQstC+0LRcIixcbiAgICAgICAgICBhY3Rpb246IFwi0KHQvtC30LTQsNGC0YxcIixcbiAgICAgICAgICBuYW1lOiBcItCd0LDQt9Cy0LDQvdC40LVcIixcbiAgICAgICAgICBsZXhpY29uOiBcItCb0LXQutGB0LjQutC+0L1cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdWs6IHtcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGhlYWQ6IFwi0KHRgtCy0L7RgNC40YLQuCDQv9C10YDQtdC60LvQsNC0XCIsXG4gICAgICAgICAgYWN0aW9uOiBcItCh0YLQstC+0YDQuNGC0LhcIixcbiAgICAgICAgICBuYW1lOiBcItCG0Lwn0Y9cIixcbiAgICAgICAgICBsZXhpY29uOiBcItCb0LXQutGB0LjQutC+0L1cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdHI6IHtcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGhlYWQ6IFwiw4dldmlyaSBvbHXFn3R1clwiLFxuICAgICAgICAgIGFjdGlvbjogXCJZYXJhdG1ha1wiLFxuICAgICAgICAgIG5hbWU6IFwiSXNpbVwiLFxuICAgICAgICAgIGxleGljb246IFwiU8O2emzDvGtcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJ6aC10d1wiOiB7XG4gICAgICAgIGZvcm06IHtcbiAgICAgICAgICBoZWFkOiBcIuWJteW7uue/u+itr1wiLFxuICAgICAgICAgIGFjdGlvbjogXCLlibXlu7pcIixcbiAgICAgICAgICBuYW1lOiBcIuWQjeeosVwiLFxuICAgICAgICAgIGxleGljb246IFwi6Kme5b2ZXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiemgtY25cIjoge1xuICAgICAgICBmb3JtOiB7XG4gICAgICAgICAgaGVhZDogXCLliJvlu7rnv7vor5FcIixcbiAgICAgICAgICBhY3Rpb246IFwi5Yib5bu6XCIsXG4gICAgICAgICAgbmFtZTogXCLlkI3np7BcIixcbiAgICAgICAgICBsZXhpY29uOiBcIuivjeaxh1wiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBuYW1lOiBudWxsLFxuICAgICAgICBsZXhpY29uOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIG5vdGljZXM6IFtdXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGNyZWF0ZVRyYW5zbGF0aW9uKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgaWYgKCF0aGlzLmZpZWxkcy5uYW1lKSB7XG4gICAgICAgIHRoaXMubm90aWNlcy5wdXNoKFwiRmllbGQgTmFtZSBpZiByZXF1aXJlZCFcIik7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF4aW9zKHtcbiAgICAgICAgICB1cmw6IFwiL3YyL3RyYW5zbGF0aW9uXCIsXG4gICAgICAgICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLmZpZWxkcy5uYW1lLFxuICAgICAgICAgICAgbGV4aWNvbjogdGhpcy5maWVsZHMubGV4aWNvbiA/IDEgOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMSAmJiByZXNwb25zZS5kYXRhKSB7XG4gICAgICAgICAgICAgIHRoaXMubm90aWNlcy5wdXNoKFxuICAgICAgICAgICAgICAgIFwiU3VjY2Vzcy4gQ3JlYXRlZCB0cmFuc2xhdGlvbiBcIiArIHJlc3BvbnNlLmRhdGEuaWRcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goe1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJyZWFkXCIsXG4gICAgICAgICAgICAgICAgICBwYXJhbXM6IHsgaWQ6IHJlc3BvbnNlLmRhdGEuaWQgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIHRoaXMubm90aWNlcy5wdXNoKGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuPC9zY3JpcHQ+XG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbkBpbXBvcnQgXCIuLi8uLi9jb21tb24vc3R5bGVzL2NvbmZpZy92YXJpYWJsZXNcIjtcblxuLnRyYW5zbGF0aW9uLWNyZWF0ZSB7XG4gIC50cmFuc2xhdGlvbl9fYm94IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgd2lkdGg6IDUwJTtcbiAgICBwYWRkaW5nOiAxNXB4IDA7XG4gICAgI2ZsYXNoIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZjZjhlMztcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNmYWViY2M7XG4gICAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgICBjb2xvcjogIzc2Njc0ZTtcbiAgICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgICAgIGxpbmUtaGVpZ2h0OiAxLjJyZW07XG4gICAgICBwYWRkaW5nOiA4cHggMTBweDtcbiAgICB9XG4gICAgLnRyYW5zbGF0aW9uX19mb3JtIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICAgIHBhZGRpbmc6IDQwcHggMCAzMHB4O1xuICAgICAgLmZvcm1fX2l0ZW0ge1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIC5mb3JtX19sYWJlbCB7XG4gICAgICAgICAgY29sb3I6ICRkYXJrLXByaW1hcnktdGV4dC1jb2xvcjtcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICBmb250LXdlaWdodDogbWFwX2dldCgkdHlwb2dyYXBoeS1mb250LXdlaWdodC12YWx1ZXMsIHJlZ3VsYXIpO1xuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICBoZWlnaHQ6IDIwcHg7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgICAgfVxuICAgICAgICAuZm9ybV9faW5wdXQge1xuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBoZWlnaHQ6IDM4cHg7XG4gICAgICAgICAgcGFkZGluZzogMCAxMHB4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQtcHJpbWFyeS1jb2xvcjtcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZGJlM2U3O1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgICAgICAgICBjb2xvcjogJGRhcmstcHJpbWFyeS10ZXh0LWNvbG9yO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgZWFzZS1pbi1vdXQgMC4xcztcbiAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICAgICY6YWN0aXZlLFxuICAgICAgICAgICY6Zm9jdXMge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2VlZjJmNDtcbiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJHByaW1hcnktY29sb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAuZm9ybV9fc3VibWl0IHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIGhlaWdodDogMzhweDtcbiAgICAgICAgcGFkZGluZzogMTJweCAxOHB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkcHJpbWFyeS1jb2xvcjtcbiAgICAgICAgY29sb3I6ICR3aGl0ZS1wcmltYXJ5LXRleHQtY29sb3I7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiBtYXBfZ2V0KCR0eXBvZ3JhcGh5LWZvbnQtd2VpZ2h0LXZhbHVlcywgbWVkaXVtKTtcbiAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogZGFya2VuKCRwcmltYXJ5LWNvbG9yLCAxMCUpO1xuICAgICAgICB9XG4gICAgICAgICY6YWN0aXZlIHtcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMXB4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuPC9zdHlsZT5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9DcmVhdGVUcmFuc2xhdGlvblBhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ3JlYXRlVHJhbnNsYXRpb25QYWdlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQ3JlYXRlVHJhbnNsYXRpb25QYWdlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xZDg3NTI3MiZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9DcmVhdGVUcmFuc2xhdGlvblBhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9DcmVhdGVUcmFuc2xhdGlvblBhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0NyZWF0ZVRyYW5zbGF0aW9uUGFnZS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkQ6XFxcXFByb2plY3RzXFxcXFdob2VyX3Rlc3RcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzFkODc1MjcyJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzFkODc1MjcyJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9DcmVhdGVUcmFuc2xhdGlvblBhZ2UudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTFkODc1MjcyJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzFkODc1MjcyJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvcGFnZXMvdHJhbnNsYXRpb24vQ3JlYXRlVHJhbnNsYXRpb25QYWdlLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJ0cmFuc2xhdGlvblwiIH0sIFtcbiAgICBfYyhcImgzXCIsIFtcbiAgICAgIF92bS5fdihfdm0uX3MoX3ZtLiR0KFwiZm9ybS5oZWFkXCIpKSArIFwiIFwiICsgX3ZtLl9zKF92bS4kcm91dGUucGFyYW1zLmlkKSlcbiAgICBdKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF92bS50cmFuc2xhdGlvblxuICAgICAgPyBfYyhcInRhYmxlXCIsIHsgc3RhdGljQ2xhc3M6IFwidHJhbnNsYXRpb25fX2RhdGFcIiB9LCBbXG4gICAgICAgICAgX2MoXCJ0Ym9keVwiLCBbXG4gICAgICAgICAgICBfYyhcInRyXCIsIFtcbiAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCBbX3ZtLl92KFwiSURcIildKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCBbX3ZtLl92KF92bS5fcyhfdm0udHJhbnNsYXRpb24uaWQpKV0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcInRyXCIsIFtcbiAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCBbX3ZtLl92KF92bS5fcyhfdm0uJHQoXCJmb3JtLm5hbWVcIikpKV0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcInRkXCIsIFtfdm0uX3YoX3ZtLl9zKF92bS50cmFuc2xhdGlvbi5uYW1lKSldKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJ0clwiLCBbXG4gICAgICAgICAgICAgIF9jKFwidGRcIiwgW192bS5fdihfdm0uX3MoX3ZtLiR0KFwiZm9ybS5uYXRpdmVcIikpKV0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcInRkXCIsIFtfdm0uX3YoX3ZtLl9zKF92bS50cmFuc2xhdGlvbi5uYXRpdmUpKV0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcInRyXCIsIFtcbiAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCBbX3ZtLl92KF92bS5fcyhfdm0uJHQoXCJmb3JtLmxleGljb25cIikpKV0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcInRkXCIsIFtfdm0uX3YoX3ZtLl9zKF92bS50cmFuc2xhdGlvbi5sZXhpY29uKSldKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJ0clwiLCBbXG4gICAgICAgICAgICAgIF9jKFwidGRcIiwgW192bS5fdihfdm0uX3MoX3ZtLiR0KFwiZm9ybS5jcmVhdGVkXCIpKSldKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCBbX3ZtLl92KF92bS5fcyhfdm0ucGFyc2VEYXRlKF92bS50cmFuc2xhdGlvbi5jcmVhdGVkKSkpXSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwidHJcIiwgW1xuICAgICAgICAgICAgICBfYyhcInRkXCIsIFtfdm0uX3YoX3ZtLl9zKF92bS4kdChcImZvcm0udXBkYXRlZFwiKSkpXSksXG4gICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgIF9jKFwidGRcIiwgW192bS5fdihfdm0uX3MoX3ZtLnBhcnNlRGF0ZShfdm0udHJhbnNsYXRpb24udXBkYXRlZCkpKV0pXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICA6IF9jKFwiZGl2XCIsIHsgYXR0cnM6IHsgaWQ6IFwiZmxhc2hcIiB9IH0sIFtcbiAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS4kdChcImZvcm0ubm90QXZhaWxhYmxlXCIpKSlcbiAgICAgICAgXSksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcImFjdGlvbnNcIiB9LFxuICAgICAgW1xuICAgICAgICBfYyhcInJvdXRlci1saW5rXCIsIHsgc3RhdGljQ2xhc3M6IFwiYnV0dG9uXCIsIGF0dHJzOiB7IHRvOiBcIi9cIiB9IH0sIFtcbiAgICAgICAgICBfYyhcImlcIiwgeyBzdGF0aWNDbGFzczogXCJmYXMgZmEtYmFja3dhcmQgYWN0aW9uX19iYWNrXCIgfSksXG4gICAgICAgICAgX3ZtLl92KFwiXFxuICAgICAgXCIgKyBfdm0uX3MoX3ZtLiR0KFwiZm9ybS5iYWNrXCIpKSArIFwiXFxuICAgIFwiKVxuICAgICAgICBdKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJyb3V0ZXItbGlua1wiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImJ1dHRvblwiLFxuICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgdG86IHsgbmFtZTogXCJ1cGRhdGVcIiwgcGFyYW1zOiB7IGlkOiBfdm0uJHJvdXRlLnBhcmFtcy5pZCB9IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwiaVwiLCB7IHN0YXRpY0NsYXNzOiBcImZhciBmYS1lZGl0IGFjdGlvbl9fZWRpdFwiIH0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiXFxuICAgICAgXCIgKyBfdm0uX3MoX3ZtLiR0KFwiZm9ybS5hY3Rpb25cIikpICsgXCJcXG4gICAgXCIpXG4gICAgICAgICAgXVxuICAgICAgICApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcInJvdXRlci1saW5rXCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICB0bzogeyBuYW1lOiBcIm5hdGl2ZVwiLCBwYXJhbXM6IHsgaWQ6IF92bS4kcm91dGUucGFyYW1zLmlkIH0gfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXCJpXCIsIHsgc3RhdGljQ2xhc3M6IFwiZmFyIGZhLWZpbGUtd29yZCBhY3Rpb25fX25hdGl2ZVwiIH0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiXFxuICAgICAgXCIgKyBfdm0uX3MoX3ZtLiR0KFwiZm9ybS5hY3Rpb25Nb3JlXCIpKSArIFwiXFxuICAgIFwiKVxuICAgICAgICAgIF1cbiAgICAgICAgKVxuICAgICAgXSxcbiAgICAgIDFcbiAgICApXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwidHJhbnNsYXRpb25cIj5cbiAgICA8aDM+e3sgJHQoXCJmb3JtLmhlYWRcIikgfX0ge3sgJHJvdXRlLnBhcmFtcy5pZCB9fTwvaDM+XG4gICAgPHRhYmxlIGNsYXNzPVwidHJhbnNsYXRpb25fX2RhdGFcIiB2LWlmPVwidHJhbnNsYXRpb25cIj5cbiAgICAgIDx0Ym9keT5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0ZD5JRDwvdGQ+XG4gICAgICAgICAgPHRkPnt7IHRyYW5zbGF0aW9uLmlkIH19PC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0ZD57eyAkdChcImZvcm0ubmFtZVwiKSB9fTwvdGQ+XG4gICAgICAgICAgPHRkPnt7IHRyYW5zbGF0aW9uLm5hbWUgfX08L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRkPnt7ICR0KFwiZm9ybS5uYXRpdmVcIikgfX08L3RkPlxuICAgICAgICAgIDx0ZD57eyB0cmFuc2xhdGlvbi5uYXRpdmUgfX08L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRkPnt7ICR0KFwiZm9ybS5sZXhpY29uXCIpIH19PC90ZD5cbiAgICAgICAgICA8dGQ+e3sgdHJhbnNsYXRpb24ubGV4aWNvbiB9fTwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGQ+e3sgJHQoXCJmb3JtLmNyZWF0ZWRcIikgfX08L3RkPlxuICAgICAgICAgIDx0ZD57eyBwYXJzZURhdGUodHJhbnNsYXRpb24uY3JlYXRlZCkgfX08L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRkPnt7ICR0KFwiZm9ybS51cGRhdGVkXCIpIH19PC90ZD5cbiAgICAgICAgICA8dGQ+e3sgcGFyc2VEYXRlKHRyYW5zbGF0aW9uLnVwZGF0ZWQpIH19PC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgIDwvdGJvZHk+XG4gICAgPC90YWJsZT5cbiAgICA8ZGl2IGlkPVwiZmxhc2hcIiB2LWVsc2U+e3sgJHQoXCJmb3JtLm5vdEF2YWlsYWJsZVwiKSB9fTwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJhY3Rpb25zXCI+XG4gICAgICA8cm91dGVyLWxpbmsgdG89XCIvXCIgY2xhc3M9XCJidXR0b25cIj5cbiAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtYmFja3dhcmQgYWN0aW9uX19iYWNrXCI+PC9pPlxuICAgICAgICB7eyAkdChcImZvcm0uYmFja1wiKSB9fVxuICAgICAgPC9yb3V0ZXItbGluaz5cbiAgICAgIDxyb3V0ZXItbGlua1xuICAgICAgICA6dG89XCJ7IG5hbWU6ICd1cGRhdGUnLCBwYXJhbXM6IHsgaWQ6ICRyb3V0ZS5wYXJhbXMuaWQgfSB9XCJcbiAgICAgICAgY2xhc3M9XCJidXR0b25cIlxuICAgICAgPlxuICAgICAgICA8aSBjbGFzcz1cImZhciBmYS1lZGl0IGFjdGlvbl9fZWRpdFwiPjwvaT5cbiAgICAgICAge3sgJHQoXCJmb3JtLmFjdGlvblwiKSB9fVxuICAgICAgPC9yb3V0ZXItbGluaz5cbiAgICAgIDxyb3V0ZXItbGlua1xuICAgICAgICA6dG89XCJ7IG5hbWU6ICduYXRpdmUnLCBwYXJhbXM6IHsgaWQ6ICRyb3V0ZS5wYXJhbXMuaWQgfSB9XCJcbiAgICAgICAgY2xhc3M9XCJidXR0b25cIlxuICAgICAgPlxuICAgICAgICA8aSBjbGFzcz1cImZhciBmYS1maWxlLXdvcmQgYWN0aW9uX19uYXRpdmVcIj48L2k+XG4gICAgICAgIHt7ICR0KFwiZm9ybS5hY3Rpb25Nb3JlXCIpIH19XG4gICAgICA8L3JvdXRlci1saW5rPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6IFwiUmVhZFRyYW5zbGF0aW9uUGFnZVwiLFxuICBpMThuOiB7XG4gICAgbWVzc2FnZXM6IHtcbiAgICAgIGVuOiB7XG4gICAgICAgIGZvcm06IHtcbiAgICAgICAgICBoZWFkOiBcIlRyYW5zbGF0aW9uXCIsXG4gICAgICAgICAgYWN0aW9uOiBcIkVkaXRcIixcbiAgICAgICAgICBuYW1lOiBcIk5hbWVcIixcbiAgICAgICAgICBuYXRpdmU6IFwiTmF0aXZlXCIsXG4gICAgICAgICAgbGV4aWNvbjogXCJMZXhpY29uXCIsXG4gICAgICAgICAgY3JlYXRlZDogXCJDcmVhdGVkXCIsXG4gICAgICAgICAgdXBkYXRlZDogXCJVcGRhdGVkXCIsXG4gICAgICAgICAgbm90QXZhaWxhYmxlOiBcIk5vdCBBdmFpbGFibGVcIixcbiAgICAgICAgICBiYWNrOiBcIkJhY2tcIixcbiAgICAgICAgICBhY3Rpb25Nb3JlOiBcIkVkaXQgbmF0aXZlXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVzOiB7XG4gICAgICAgIGZvcm06IHtcbiAgICAgICAgICBoZWFkOiBcIlRyYWR1Y2Npw7NuXCIsXG4gICAgICAgICAgYWN0aW9uOiBcIkVkaXRhclwiLFxuICAgICAgICAgIG5hbWU6IFwiTm9tYnJlXCIsXG4gICAgICAgICAgbmF0aXZlOiBcIk5hdGl2b1wiLFxuICAgICAgICAgIGxleGljb246IFwiTMOpeGljb1wiLFxuICAgICAgICAgIGNyZWF0ZWQ6IFwiQ3JlYWRvXCIsXG4gICAgICAgICAgdXBkYXRlZDogXCJBY3R1YWxpemFkb1wiLFxuICAgICAgICAgIG5vdEF2YWlsYWJsZTogXCJObyBkaXNwb25pYmxlXCIsXG4gICAgICAgICAgYmFjazogXCJFc3BhbGRhXCIsXG4gICAgICAgICAgYWN0aW9uTW9yZTogXCJFZGl0YXIgbmF0aXZvXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlOiB7XG4gICAgICAgIGZvcm06IHtcbiAgICAgICAgICBoZWFkOiBcIsOcYmVyc2V0enVuZ1wiLFxuICAgICAgICAgIGFjdGlvbjogXCJCZWFyYmVpdGVuXCIsXG4gICAgICAgICAgbmFtZTogXCJOYW1lXCIsXG4gICAgICAgICAgbmF0aXZlOiBcIkVpbmdlYm9yZW5lclwiLFxuICAgICAgICAgIGxleGljb246IFwiTGV4aWtvblwiLFxuICAgICAgICAgIGNyZWF0ZWQ6IFwiRXJzdGVsbHRcIixcbiAgICAgICAgICB1cGRhdGVkOiBcIkFrdHVhbGlzaWVydGVcIixcbiAgICAgICAgICBub3RBdmFpbGFibGU6IFwiTmljaHQgdmVyZsO8Z2JhclwiLFxuICAgICAgICAgIGJhY2s6IFwiWnVyw7xja1wiLFxuICAgICAgICAgIGFjdGlvbk1vcmU6IFwiTmF0aXZlIGJlYXJiZWl0ZW5cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZnI6IHtcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGhlYWQ6IFwiVHJhZHVjdGlvblwiLFxuICAgICAgICAgIGFjdGlvbjogXCJtb2RpZmllclwiLFxuICAgICAgICAgIG5hbWU6IFwicHLDqW5vbVwiLFxuICAgICAgICAgIG5hdGl2ZTogXCJPcmlnaW5haXJlIGRlXCIsXG4gICAgICAgICAgbGV4aWNvbjogXCJMZXhpcXVlXCIsXG4gICAgICAgICAgY3JlYXRlZDogXCJDcsOpw6lcIixcbiAgICAgICAgICB1cGRhdGVkOiBcIk1pcyDDoCBqb3VyXCIsXG4gICAgICAgICAgbm90QXZhaWxhYmxlOiBcIkluZGlzcG9uaWJsZVwiLFxuICAgICAgICAgIGJhY2s6IFwiUmV0b3VyXCIsXG4gICAgICAgICAgYWN0aW9uTW9yZTogXCJNb2RpZmllciBuYXRpZlwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcInB0LWJyXCI6IHtcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGhlYWQ6IFwiVHJhZHXDp8Ojb1wiLFxuICAgICAgICAgIGFjdGlvbjogXCJFZGl0YXJcIixcbiAgICAgICAgICBuYW1lOiBcIk5vbWVcIixcbiAgICAgICAgICBuYXRpdmU6IFwiTmF0aXZvXCIsXG4gICAgICAgICAgbGV4aWNvbjogXCJMw6l4aWNvXCIsXG4gICAgICAgICAgY3JlYXRlZDogXCJDcmlhZG9cIixcbiAgICAgICAgICB1cGRhdGVkOiBcIkF0dWFsaXphZGFcIixcbiAgICAgICAgICBub3RBdmFpbGFibGU6IFwiTsOjbyBkaXNwb27DrXZlbFwiLFxuICAgICAgICAgIGJhY2s6IFwiRGUgdm9sdGFcIixcbiAgICAgICAgICBhY3Rpb25Nb3JlOiBcIkVkaXRhciBuYXRpdm9cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaXQ6IHtcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGhlYWQ6IFwiVHJhZHV6aW9uZVwiLFxuICAgICAgICAgIGFjdGlvbjogXCJtb2RpZmljYXJlXCIsXG4gICAgICAgICAgbmFtZTogXCJOb21lXCIsXG4gICAgICAgICAgbmF0aXZlOiBcIm5hdGl2b1wiLFxuICAgICAgICAgIGxleGljb246IFwiTGVzc2ljb1wiLFxuICAgICAgICAgIGNyZWF0ZWQ6IFwiQ3JlYXRvXCIsXG4gICAgICAgICAgdXBkYXRlZDogXCJhZ2dpb3JuYXRvXCIsXG4gICAgICAgICAgbm90QXZhaWxhYmxlOiBcIk5vbiBkaXNwb25pYmlsZVwiLFxuICAgICAgICAgIGJhY2s6IFwiSW5kaWV0cm9cIixcbiAgICAgICAgICBhY3Rpb25Nb3JlOiBcIk1vZGlmaWNhIG5hdGl2b1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBydToge1xuICAgICAgICBmb3JtOiB7XG4gICAgICAgICAgaGVhZDogXCLQn9C10YDQtdCy0L7QtFwiLFxuICAgICAgICAgIGFjdGlvbjogXCLQoNC10LTQsNC60YLQuNGA0L7QstCw0YLRjFwiLFxuICAgICAgICAgIG5hbWU6IFwi0J3QsNC30LLQsNC90LjRj1wiLFxuICAgICAgICAgIG5hdGl2ZTogXCLQndCw0YLQuNCy0L3QvlwiLFxuICAgICAgICAgIGxleGljb246IFwi0JvQtdC60YHQuNC60L7QvVwiLFxuICAgICAgICAgIGNyZWF0ZWQ6IFwi0KHQvtC30LTQsNC9XCIsXG4gICAgICAgICAgdXBkYXRlZDogXCLQntCx0L3QvtCy0LvQtdC9XCIsXG4gICAgICAgICAgbm90QXZhaWxhYmxlOiBcItCd0LUg0LTQvtGB0YLRg9C/0L3QvlwiLFxuICAgICAgICAgIGJhY2s6IFwi0J3QsNC30LDQtFwiLFxuICAgICAgICAgIGFjdGlvbk1vcmU6IFwi0KDQtdC00LDQutGC0LjRgNC+0LLQsNGC0Ywg0L3QsNGC0LjQstC90YvQuVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB1azoge1xuICAgICAgICBmb3JtOiB7XG4gICAgICAgICAgaGVhZDogXCLQn9C10YDQtdC60LvQsNC0XCIsXG4gICAgICAgICAgYWN0aW9uOiBcItCg0LXQtNCw0LPRg9Cy0LDRgtC4XCIsXG4gICAgICAgICAgbmFtZTogXCLQhtC8J9GPXCIsXG4gICAgICAgICAgbmF0aXZlOiBcItCg0ZbQtNC90LjQuVwiLFxuICAgICAgICAgIGxleGljb246IFwi0JvQtdC60YHQuNC60L7QvVwiLFxuICAgICAgICAgIGNyZWF0ZWQ6IFwi0KHRgtCy0L7RgNC10L3QvlwiLFxuICAgICAgICAgIHVwZGF0ZWQ6IFwi0J7QvdC+0LLQu9C10L3QvlwiLFxuICAgICAgICAgIG5vdEF2YWlsYWJsZTogXCLQndC10LTQvtGB0YLRg9C/0L3QuNC5XCIsXG4gICAgICAgICAgYmFjazogXCLQndCw0LfQsNC0XCIsXG4gICAgICAgICAgYWN0aW9uTW9yZTogXCLQoNC10LTQsNCz0YPQstCw0YLQuCDRgNGW0LTQvdC40LlcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdHI6IHtcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGhlYWQ6IFwiw4dldmlyaVwiLFxuICAgICAgICAgIGFjdGlvbjogXCJEw7x6ZW5sZVwiLFxuICAgICAgICAgIG5hbWU6IFwiaXNpbVwiLFxuICAgICAgICAgIG5hdGl2ZTogXCJ5ZXJsaVwiLFxuICAgICAgICAgIGxleGljb246IFwic8O2emzDvGtcIixcbiAgICAgICAgICBjcmVhdGVkOiBcImTDvHplbmxlbmRpXCIsXG4gICAgICAgICAgdXBkYXRlZDogXCJHw7xuY2VsbGVubWnFn1wiLFxuICAgICAgICAgIG5vdEF2YWlsYWJsZTogXCJNw7xzYWl0IGRlxJ9pbFwiLFxuICAgICAgICAgIGJhY2s6IFwiR2VyaVwiLFxuICAgICAgICAgIGFjdGlvbk1vcmU6IFwiWWVybGlsZXJpIGTDvHplbmxlXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiemgtdHdcIjoge1xuICAgICAgICBmb3JtOiB7XG4gICAgICAgICAgaGVhZDogXCLnv7vora9cIixcbiAgICAgICAgICBhY3Rpb246IFwi57eo6LyvXCIsXG4gICAgICAgICAgbmFtZTogXCLlkI3nqLFcIixcbiAgICAgICAgICBuYXRpdmU6IFwi5pys5Zyw5Lq6XCIsXG4gICAgICAgICAgbGV4aWNvbjogXCLoqZ7lvZlcIixcbiAgICAgICAgICBjcmVhdGVkOiBcIuWJteW7ulwiLFxuICAgICAgICAgIHVwZGF0ZWQ6IFwi5pu05pawXCIsXG4gICAgICAgICAgbm90QXZhaWxhYmxlOiBcIueEoeazleS9v+eUqFwiLFxuICAgICAgICAgIGJhY2s6IFwi6IOM6YOoXCIsXG4gICAgICAgICAgYWN0aW9uTW9yZTogXCLnt6jovK/ljp/nlJ9cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJ6aC1jblwiOiB7XG4gICAgICAgIGZvcm06IHtcbiAgICAgICAgICBoZWFkOiBcIue/u+ivkVwiLFxuICAgICAgICAgIGFjdGlvbjogXCLnvJbovpFcIixcbiAgICAgICAgICBuYW1lOiBcIuWQjeensFwiLFxuICAgICAgICAgIG5hdGl2ZTogXCLmnKzlnLDkurpcIixcbiAgICAgICAgICBsZXhpY29uOiBcIuivjeaxh1wiLFxuICAgICAgICAgIGNyZWF0ZWQ6IFwi5Yib5bu6XCIsXG4gICAgICAgICAgdXBkYXRlZDogXCLmm7TmlrBcIixcbiAgICAgICAgICBub3RBdmFpbGFibGU6IFwi5peg5rOV5L2/55SoXCIsXG4gICAgICAgICAgYmFjazogXCLog4zpg6hcIixcbiAgICAgICAgICBhY3Rpb25Nb3JlOiBcIue8lui+keWOn+eUn1wiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zbGF0aW9uOiBudWxsXG4gICAgfTtcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICBheGlvc1xuICAgICAgLmdldChcIi92Mi90cmFuc2xhdGlvbi9cIiArIHRoaXMuJHJvdXRlLnBhcmFtcy5pZClcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwICYmIHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgICB0aGlzLnRyYW5zbGF0aW9uID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICB9KTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHBhcnNlRGF0ZSh1bml4RGF0ZSkge1xuICAgICAgY29uc3QgdGhlRGF0ZSA9IG5ldyBEYXRlKHVuaXhEYXRlICogMTAwMCk7XG4gICAgICByZXR1cm4gdGhlRGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKSArIFwiIFwiICsgdGhlRGF0ZS50b0xvY2FsZVRpbWVTdHJpbmcoKTtcbiAgICB9XG4gIH1cbn07XG48L3NjcmlwdD5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxuQGltcG9ydCBcIi4uLy4uL2NvbW1vbi9zdHlsZXMvY29uZmlnL3ZhcmlhYmxlc1wiO1xuXG4uYWN0aW9ucyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIC5idXR0b24ge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGhlaWdodDogMzhweDtcbiAgICBwYWRkaW5nOiAxMnB4IDE4cHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHByaW1hcnktY29sb3I7XG4gICAgY29sb3I6ICR3aGl0ZS1wcmltYXJ5LXRleHQtY29sb3I7XG4gICAgZm9udC13ZWlnaHQ6IG1hcF9nZXQoJHR5cG9ncmFwaHktZm9udC13ZWlnaHQtdmFsdWVzLCBtZWRpdW0pO1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIG1hcmdpbi1yaWdodDogMTVweDtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgaSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgfVxuICAgICY6aG92ZXIge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogZGFya2VuKCRwcmltYXJ5LWNvbG9yLCAxMCUpO1xuICAgIH1cbiAgICAmOmFjdGl2ZSB7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMXB4KTtcbiAgICB9XG4gIH1cbn1cblxuI2ZsYXNoIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHdpZHRoOiAxMDAlO1xuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmNmOGUzO1xuICBib3JkZXI6IDFweCBzb2xpZCAjZmFlYmNjO1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIGNvbG9yOiAjNzY2NzRlO1xuICBmb250LXNpemU6IDFyZW07XG4gIGxpbmUtaGVpZ2h0OiAxLjJyZW07XG4gIHBhZGRpbmc6IDhweCAxMHB4O1xufVxuPC9zdHlsZT5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9SZWFkVHJhbnNsYXRpb25QYWdlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1JlYWRUcmFuc2xhdGlvblBhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9SZWFkVHJhbnNsYXRpb25QYWdlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zZTdjZmQxOCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9SZWFkVHJhbnNsYXRpb25QYWdlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vUmVhZFRyYW5zbGF0aW9uUGFnZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vUmVhZFRyYW5zbGF0aW9uUGFnZS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkQ6XFxcXFByb2plY3RzXFxcXFdob2VyX3Rlc3RcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzNlN2NmZDE4JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzNlN2NmZDE4JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9SZWFkVHJhbnNsYXRpb25QYWdlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zZTdjZmQxOCZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCczZTdjZmQxOCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL3BhZ2VzL3RyYW5zbGF0aW9uL1JlYWRUcmFuc2xhdGlvblBhZ2UudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInRyYW5zbGF0aW9uLXVwZGF0ZVwiIH0sIFtcbiAgICBfYyhcImgxXCIsIFtcbiAgICAgIF92bS5fdihfdm0uX3MoX3ZtLiR0KFwiZm9ybS5oZWFkXCIpKSArIFwiIFwiICsgX3ZtLl9zKF92bS4kcm91dGUucGFyYW1zLmlkKSlcbiAgICBdKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwidHJhbnNsYXRpb25fX2JveFwiIH0sIFtcbiAgICAgIF92bS5ub3RpY2VzLmxlbmd0aFxuICAgICAgICA/IF9jKFwiZGl2XCIsIHsgYXR0cnM6IHsgaWQ6IFwiZmxhc2hcIiB9IH0sIFtcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcInVsXCIsXG4gICAgICAgICAgICAgIF92bS5fbChfdm0ubm90aWNlcywgZnVuY3Rpb24obm90aWNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jKFwibGlcIiwgeyBrZXk6IG5vdGljZSB9LCBbX3ZtLl92KF92bS5fcyhub3RpY2UpKV0pXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAwXG4gICAgICAgICAgICApXG4gICAgICAgICAgXSlcbiAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcbiAgICAgICAgXCJmb3JtXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBzdGF0aWNDbGFzczogXCJ0cmFuc2xhdGlvbl9fZm9ybVwiLFxuICAgICAgICAgIGF0dHJzOiB7IGFjdGlvbjogXCIvdHJhbnNsYXRpb25cIiwgbWV0aG9kOiBcInBvc3RcIiB9LFxuICAgICAgICAgIG9uOiB7IHN1Ym1pdDogX3ZtLnVwZGF0ZVRyYW5zbGF0aW9uIH1cbiAgICAgICAgfSxcbiAgICAgICAgW1xuICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9ybV9faXRlbVwiIH0sIFtcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImxhYmVsXCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmb3JtX19sYWJlbFwiLFxuICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZvcjogXCJ0cmFuc2xhdGlvbi1uYW1lXCIgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgXCJcXG4gICAgICAgICAgXCIgKyBfdm0uX3MoX3ZtLiR0KFwiZm9ybS5uYW1lXCIpKSArIFwiXFxuICAgICAgICBcIlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5maWVsZHMubmFtZSxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiZmllbGRzLm5hbWVcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZm9ybV9faW5wdXQgcmVxdWlyZWRcIixcbiAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBpZDogXCJ0cmFuc2xhdGlvbi1uYW1lXCIsXG4gICAgICAgICAgICAgICAgYXV0b2ZvY3VzOiBcImF1dG9mb2N1c1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwidHJhbnNsYXRpb25bbmFtZV1cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmZpZWxkcy5uYW1lIH0sXG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmZpZWxkcywgXCJuYW1lXCIsICRldmVudC50YXJnZXQudmFsdWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJmb3JtX19pdGVtXCIgfSwgW1xuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwibGFiZWxcIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm1fX2xhYmVsXCIsXG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgZm9yOiBcInRyYW5zbGF0aW9uLWxleGljb25cIiB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICBcIlxcbiAgICAgICAgICBcIiArIF92bS5fcyhfdm0uJHQoXCJmb3JtLmxleGljb25cIikpICsgXCJcXG4gICAgICAgIFwiXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmZpZWxkcy5sZXhpY29uLFxuICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJmaWVsZHMubGV4aWNvblwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmb3JtX19pbnB1dCByZXF1aXJlZFwiLFxuICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiY2hlY2tib3hcIixcbiAgICAgICAgICAgICAgICBpZDogXCJ0cmFuc2xhdGlvbi1sZXhpY29uXCIsXG4gICAgICAgICAgICAgICAgYXV0b2ZvY3VzOiBcImF1dG9mb2N1c1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwidHJhbnNsYXRpb25bbGV4aWNvbl1cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBkb21Qcm9wczoge1xuICAgICAgICAgICAgICAgIGNoZWNrZWQ6IEFycmF5LmlzQXJyYXkoX3ZtLmZpZWxkcy5sZXhpY29uKVxuICAgICAgICAgICAgICAgICAgPyBfdm0uX2koX3ZtLmZpZWxkcy5sZXhpY29uLCBudWxsKSA+IC0xXG4gICAgICAgICAgICAgICAgICA6IF92bS5maWVsZHMubGV4aWNvblxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgJCRhID0gX3ZtLmZpZWxkcy5sZXhpY29uLFxuICAgICAgICAgICAgICAgICAgICAkJGVsID0gJGV2ZW50LnRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgJCRjID0gJCRlbC5jaGVja2VkID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSgkJGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkJHYgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICQkaSA9IF92bS5faSgkJGEsICQkdilcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQkZWwuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICQkaSA8IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5maWVsZHMsIFwibGV4aWNvblwiLCAkJGEuY29uY2F0KFskJHZdKSlcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAkJGkgPiAtMSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5maWVsZHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwibGV4aWNvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAkJGEuc2xpY2UoMCwgJCRpKS5jb25jYXQoJCRhLnNsaWNlKCQkaSArIDEpKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0uZmllbGRzLCBcImxleGljb25cIiwgJCRjKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFxuICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiYWN0aW9uc1wiIH0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIF9jKFwicm91dGVyLWxpbmtcIiwgeyBzdGF0aWNDbGFzczogXCJidXR0b25cIiwgYXR0cnM6IHsgdG86IFwiL1wiIH0gfSwgW1xuICAgICAgICAgICAgICAgIF9jKFwiaVwiLCB7IHN0YXRpY0NsYXNzOiBcImZhcyBmYS1iYWNrd2FyZCBhY3Rpb25fX2JhY2tcIiB9KSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICBcIlxcbiAgICAgICAgICBcIiArIF92bS5fcyhfdm0uJHQoXCJmb3JtLmJhY2tcIikpICsgXCJcXG4gICAgICAgIFwiXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJzdWJtaXRcIiwgbmFtZTogXCJjb21taXRcIiB9LFxuICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uJHQoXCJmb3JtLmFjdGlvblwiKSB9XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICBcInJvdXRlci1saW5rXCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICB0bzogeyBuYW1lOiBcIm5hdGl2ZVwiLCBwYXJhbXM6IHsgaWQ6IF92bS4kcm91dGUucGFyYW1zLmlkIH0gfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgX2MoXCJpXCIsIHsgc3RhdGljQ2xhc3M6IFwiZmFyIGZhLWZpbGUtd29yZCBhY3Rpb25fX21vcmVcIiB9KSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgICAgICAgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uJHQoXCJmb3JtLmFjdGlvbk1vcmVcIikpICtcbiAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAxXG4gICAgICAgICAgKVxuICAgICAgICBdXG4gICAgICApXG4gICAgXSlcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJ0cmFuc2xhdGlvbi11cGRhdGVcIj5cbiAgICA8aDE+e3sgJHQoXCJmb3JtLmhlYWRcIikgfX0ge3sgJHJvdXRlLnBhcmFtcy5pZCB9fTwvaDE+XG4gICAgPGRpdiBjbGFzcz1cInRyYW5zbGF0aW9uX19ib3hcIj5cbiAgICAgIDxkaXYgaWQ9XCJmbGFzaFwiIHYtaWY9XCJub3RpY2VzLmxlbmd0aFwiPlxuICAgICAgICA8dWw+XG4gICAgICAgICAgPGxpIHYtZm9yPVwibm90aWNlIGluIG5vdGljZXNcIiA6a2V5PVwibm90aWNlXCI+e3sgbm90aWNlIH19PC9saT5cbiAgICAgICAgPC91bD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGZvcm1cbiAgICAgICAgYWN0aW9uPVwiL3RyYW5zbGF0aW9uXCJcbiAgICAgICAgY2xhc3M9XCJ0cmFuc2xhdGlvbl9fZm9ybVwiXG4gICAgICAgIG1ldGhvZD1cInBvc3RcIlxuICAgICAgICBAc3VibWl0PVwidXBkYXRlVHJhbnNsYXRpb25cIlxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybV9faXRlbVwiPlxuICAgICAgICAgIDxsYWJlbCBmb3I9XCJ0cmFuc2xhdGlvbi1uYW1lXCIgY2xhc3M9XCJmb3JtX19sYWJlbFwiPlxuICAgICAgICAgICAge3sgJHQoXCJmb3JtLm5hbWVcIikgfX1cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgaWQ9XCJ0cmFuc2xhdGlvbi1uYW1lXCJcbiAgICAgICAgICAgIGNsYXNzPVwiZm9ybV9faW5wdXQgcmVxdWlyZWRcIlxuICAgICAgICAgICAgYXV0b2ZvY3VzPVwiYXV0b2ZvY3VzXCJcbiAgICAgICAgICAgIG5hbWU9XCJ0cmFuc2xhdGlvbltuYW1lXVwiXG4gICAgICAgICAgICB2LW1vZGVsPVwiZmllbGRzLm5hbWVcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybV9faXRlbVwiPlxuICAgICAgICAgIDxsYWJlbCBmb3I9XCJ0cmFuc2xhdGlvbi1sZXhpY29uXCIgY2xhc3M9XCJmb3JtX19sYWJlbFwiPlxuICAgICAgICAgICAge3sgJHQoXCJmb3JtLmxleGljb25cIikgfX1cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgIGlkPVwidHJhbnNsYXRpb24tbGV4aWNvblwiXG4gICAgICAgICAgICBjbGFzcz1cImZvcm1fX2lucHV0IHJlcXVpcmVkXCJcbiAgICAgICAgICAgIGF1dG9mb2N1cz1cImF1dG9mb2N1c1wiXG4gICAgICAgICAgICBuYW1lPVwidHJhbnNsYXRpb25bbGV4aWNvbl1cIlxuICAgICAgICAgICAgdi1tb2RlbD1cImZpZWxkcy5sZXhpY29uXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFjdGlvbnNcIj5cbiAgICAgICAgICA8cm91dGVyLWxpbmsgdG89XCIvXCIgY2xhc3M9XCJidXR0b25cIj5cbiAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWJhY2t3YXJkIGFjdGlvbl9fYmFja1wiPjwvaT5cbiAgICAgICAgICAgIHt7ICR0KFwiZm9ybS5iYWNrXCIpIH19XG4gICAgICAgICAgPC9yb3V0ZXItbGluaz5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgbmFtZT1cImNvbW1pdFwiXG4gICAgICAgICAgICA6dmFsdWU9XCIkdCgnZm9ybS5hY3Rpb24nKVwiXG4gICAgICAgICAgICBjbGFzcz1cImJ1dHRvblwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8cm91dGVyLWxpbmtcbiAgICAgICAgICAgIDp0bz1cInsgbmFtZTogJ25hdGl2ZScsIHBhcmFtczogeyBpZDogJHJvdXRlLnBhcmFtcy5pZCB9IH1cIlxuICAgICAgICAgICAgY2xhc3M9XCJidXR0b25cIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFyIGZhLWZpbGUtd29yZCBhY3Rpb25fX21vcmVcIj48L2k+XG4gICAgICAgICAgICB7eyAkdChcImZvcm0uYWN0aW9uTW9yZVwiKSB9fVxuICAgICAgICAgIDwvcm91dGVyLWxpbms+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9mb3JtPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6IFwiVXBkYXRlVHJhbnNsYXRpb25QYWdlXCIsXG4gIGkxOG46IHtcbiAgICBtZXNzYWdlczoge1xuICAgICAgZW46IHtcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGhlYWQ6IFwiVHJhbnNsYXRpb25cIixcbiAgICAgICAgICBhY3Rpb246IFwiRWRpdFwiLFxuICAgICAgICAgIG5hbWU6IFwiTmFtZVwiLFxuICAgICAgICAgIGxleGljb246IFwiTGV4aWNvblwiLFxuICAgICAgICAgIG5vdEF2YWlsYWJsZTogXCJOb3QgQXZhaWxhYmxlXCIsXG4gICAgICAgICAgYmFjazogXCJCYWNrXCIsXG4gICAgICAgICAgYWN0aW9uTW9yZTogXCJFZGl0IG5hdGl2ZVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBlczoge1xuICAgICAgICBmb3JtOiB7XG4gICAgICAgICAgaGVhZDogXCJUcmFkdWNjacOzblwiLFxuICAgICAgICAgIGFjdGlvbjogXCJFZGl0YXJcIixcbiAgICAgICAgICBuYW1lOiBcIk5vbWJyZVwiLFxuICAgICAgICAgIGxleGljb246IFwiTMOpeGljb1wiLFxuICAgICAgICAgIG5vdEF2YWlsYWJsZTogXCJObyBkaXNwb25pYmxlXCIsXG4gICAgICAgICAgYmFjazogXCJFc3BhbGRhXCIsXG4gICAgICAgICAgYWN0aW9uTW9yZTogXCJFZGl0YXIgbmF0aXZvXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlOiB7XG4gICAgICAgIGZvcm06IHtcbiAgICAgICAgICBoZWFkOiBcIsOcYmVyc2V0enVuZ1wiLFxuICAgICAgICAgIGFjdGlvbjogXCJCZWFyYmVpdGVuXCIsXG4gICAgICAgICAgbmFtZTogXCJOYW1lXCIsXG4gICAgICAgICAgbGV4aWNvbjogXCJMZXhpa29uXCIsXG4gICAgICAgICAgbm90QXZhaWxhYmxlOiBcIk5pY2h0IHZlcmbDvGdiYXJcIixcbiAgICAgICAgICBiYWNrOiBcIlp1csO8Y2tcIixcbiAgICAgICAgICBhY3Rpb25Nb3JlOiBcIk5hdGl2ZSBiZWFyYmVpdGVuXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGZyOiB7XG4gICAgICAgIGZvcm06IHtcbiAgICAgICAgICBoZWFkOiBcIlRyYWR1Y3Rpb25cIixcbiAgICAgICAgICBhY3Rpb246IFwibW9kaWZpZXJcIixcbiAgICAgICAgICBuYW1lOiBcIlByw6lub21cIixcbiAgICAgICAgICBsZXhpY29uOiBcIkxleGlxdWVcIixcbiAgICAgICAgICBub3RBdmFpbGFibGU6IFwiSW5kaXNwb25pYmxlXCIsXG4gICAgICAgICAgYmFjazogXCJSZXRvdXJcIixcbiAgICAgICAgICBhY3Rpb25Nb3JlOiBcIk1vZGlmaWVyIG5hdGlmXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwicHQtYnJcIjoge1xuICAgICAgICBmb3JtOiB7XG4gICAgICAgICAgaGVhZDogXCJUcmFkdcOnw6NvXCIsXG4gICAgICAgICAgYWN0aW9uOiBcIkVkaXRhclwiLFxuICAgICAgICAgIG5hbWU6IFwiTm9tZVwiLFxuICAgICAgICAgIGxleGljb246IFwiTMOpeGljb1wiLFxuICAgICAgICAgIG5vdEF2YWlsYWJsZTogXCJOw6NvIGRpc3BvbsOtdmVsXCIsXG4gICAgICAgICAgYmFjazogXCJEZSB2b2x0YVwiLFxuICAgICAgICAgIGFjdGlvbk1vcmU6IFwiRWRpdGFyIG5hdGl2b1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpdDoge1xuICAgICAgICBmb3JtOiB7XG4gICAgICAgICAgaGVhZDogXCJUcmFkdXppb25lXCIsXG4gICAgICAgICAgYWN0aW9uOiBcIm1vZGlmaWNhcmVcIixcbiAgICAgICAgICBuYW1lOiBcIk5vbWVcIixcbiAgICAgICAgICBsZXhpY29uOiBcIkxlc3NpY29cIixcbiAgICAgICAgICBub3RBdmFpbGFibGU6IFwiTm9uIGRpc3BvbmliaWxlXCIsXG4gICAgICAgICAgYmFjazogXCJJbmRpZXRyb1wiLFxuICAgICAgICAgIGFjdGlvbk1vcmU6IFwiTW9kaWZpY2EgbmF0aXZvXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJ1OiB7XG4gICAgICAgIGZvcm06IHtcbiAgICAgICAgICBoZWFkOiBcItCf0LXRgNC10LLQvtC0XCIsXG4gICAgICAgICAgYWN0aW9uOiBcItCg0LXQtNCw0LrRgtC40YDQvtCy0LDRgtGMXCIsXG4gICAgICAgICAgbmFtZTogXCLQndCw0LfQstCw0L3QuNC1XCIsXG4gICAgICAgICAgbGV4aWNvbjogXCLQm9C10LrRgdC40LrQvtC9XCIsXG4gICAgICAgICAgbm90QXZhaWxhYmxlOiBcItCd0LUg0LTQvtGB0YLRg9C/0L3QvlwiLFxuICAgICAgICAgIGJhY2s6IFwi0J3QsNC30LDQtFwiLFxuICAgICAgICAgIGFjdGlvbk1vcmU6IFwi0KDQtdC00LDQutGC0LjRgNC+0LLQsNGC0Ywg0L3QsNGC0LjQstC90YvQuVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB1azoge1xuICAgICAgICBmb3JtOiB7XG4gICAgICAgICAgaGVhZDogXCLQn9C10YDQtdC60LvQsNC0XCIsXG4gICAgICAgICAgYWN0aW9uOiBcItCg0LXQtNCw0LPRg9Cy0LDRgtC4XCIsXG4gICAgICAgICAgbmFtZTogXCLQhtC8J9GPXCIsXG4gICAgICAgICAgbGV4aWNvbjogXCLQm9C10LrRgdC40LrQvtC9XCIsXG4gICAgICAgICAgbm90QXZhaWxhYmxlOiBcItCd0LXQtNC+0YHRgtGD0L/QvdC40LlcIixcbiAgICAgICAgICBiYWNrOiBcItCd0LDQt9Cw0LRcIixcbiAgICAgICAgICBhY3Rpb25Nb3JlOiBcItCg0LXQtNCw0LPRg9Cy0LDRgtC4INGA0ZbQtNC90LjQuVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0cjoge1xuICAgICAgICBmb3JtOiB7XG4gICAgICAgICAgaGVhZDogXCLDh2V2aXJpXCIsXG4gICAgICAgICAgYWN0aW9uOiBcIkTDvHplbmxlXCIsXG4gICAgICAgICAgbmFtZTogXCJJc2ltXCIsXG4gICAgICAgICAgbGV4aWNvbjogXCJTw7Z6bMO8a1wiLFxuICAgICAgICAgIG5vdEF2YWlsYWJsZTogXCJNw7xzYWl0IGRlxJ9pbFwiLFxuICAgICAgICAgIGJhY2s6IFwiR2VyaVwiLFxuICAgICAgICAgIGFjdGlvbk1vcmU6IFwiWWVybGlsZXJpIGTDvHplbmxlXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiemgtdHdcIjoge1xuICAgICAgICBmb3JtOiB7XG4gICAgICAgICAgaGVhZDogXCLnv7vora9cIixcbiAgICAgICAgICBhY3Rpb246IFwi57eo6LyvXCIsXG4gICAgICAgICAgbmFtZTogXCLlkI3nqLFcIixcbiAgICAgICAgICBsZXhpY29uOiBcIuipnuW9mVwiLFxuICAgICAgICAgIG5vdEF2YWlsYWJsZTogXCLnhKHms5Xkvb/nlKhcIixcbiAgICAgICAgICBiYWNrOiBcIuiDjOmDqFwiLFxuICAgICAgICAgIGFjdGlvbk1vcmU6IFwi57eo6Lyv5Y6f55SfXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiemgtY25cIjoge1xuICAgICAgICBmb3JtOiB7XG4gICAgICAgICAgaGVhZDogXCLliJvlu7rnv7vor5FcIixcbiAgICAgICAgICBhY3Rpb246IFwi5Yib5bu6XCIsXG4gICAgICAgICAgbmFtZTogXCLlkI3np7BcIixcbiAgICAgICAgICBsZXhpY29uOiBcIuivjeaxh1wiLFxuICAgICAgICAgIG5vdEF2YWlsYWJsZTogXCLml6Dms5Xkvb/nlKhcIixcbiAgICAgICAgICBiYWNrOiBcIuiDjOmDqFwiLFxuICAgICAgICAgIGFjdGlvbk1vcmU6IFwi57yW6L6R5Y6f55SfXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgIGxleGljb246IGZhbHNlXG4gICAgICB9LFxuICAgICAgbm90aWNlczogW11cbiAgICB9O1xuICB9LFxuICBtb3VudGVkKCkge1xuICAgIGF4aW9zXG4gICAgICAuZ2V0KFwiL3YyL3RyYW5zbGF0aW9uL1wiICsgdGhpcy4kcm91dGUucGFyYW1zLmlkKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDAgJiYgcmVzcG9uc2UuZGF0YSkge1xuICAgICAgICAgIHRoaXMuZmllbGRzLm5hbWUgPSByZXNwb25zZS5kYXRhLm5hbWU7XG4gICAgICAgICAgdGhpcy5maWVsZHMubGV4aWNvbiA9ICEhcmVzcG9uc2UuZGF0YS5sZXhpY29uO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgICAgIH0pO1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgdXBkYXRlVHJhbnNsYXRpb24oZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAoIXRoaXMuZmllbGRzLm5hbWUpIHtcbiAgICAgICAgdGhpcy5ub3RpY2VzLnB1c2goXCJOYW1lIGZpZWxkIGlzIHJlcXVpcmVkXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXhpb3Moe1xuICAgICAgICAgIHVybDogXCIvdjIvdHJhbnNsYXRpb24vXCIgKyB0aGlzLiRyb3V0ZS5wYXJhbXMuaWQsXG4gICAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuZmllbGRzLm5hbWUsXG4gICAgICAgICAgICBsZXhpY29uOiB0aGlzLmZpZWxkcy5sZXhpY29uID8gMSA6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgdGhpcy5ub3RpY2VzLnB1c2goXG4gICAgICAgICAgICAgIFwiU3VjY2Vzcy4gVXBkYXRlZCB0cmFuc2xhdGlvbiBcIiArIHJlc3BvbnNlLmRhdGEuaWRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goe1xuICAgICAgICAgICAgICAgIG5hbWU6IFwicmVhZFwiLFxuICAgICAgICAgICAgICAgIHBhcmFtczogeyBpZDogcmVzcG9uc2UuZGF0YS5pZCB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICB0aGlzLm5vdGljZXMucHVzaChlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbkBpbXBvcnQgXCIuLi8uLi9jb21tb24vc3R5bGVzL2NvbmZpZy92YXJpYWJsZXNcIjtcblxuLnRyYW5zbGF0aW9uLXVwZGF0ZSB7XG4gIC50cmFuc2xhdGlvbl9fYm94IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgd2lkdGg6IDUwJTtcbiAgICBwYWRkaW5nOiAxNXB4IDA7XG4gICAgI2ZsYXNoIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZjZjhlMztcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNmYWViY2M7XG4gICAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgICBjb2xvcjogIzc2Njc0ZTtcbiAgICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgICAgIGxpbmUtaGVpZ2h0OiAxLjJyZW07XG4gICAgICBwYWRkaW5nOiA4cHggMTBweDtcbiAgICB9XG4gICAgLnRyYW5zbGF0aW9uX19mb3JtIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICAgIHBhZGRpbmc6IDQwcHggMCAzMHB4O1xuICAgICAgLmZvcm1fX2l0ZW0ge1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIC5mb3JtX19sYWJlbCB7XG4gICAgICAgICAgY29sb3I6ICRkYXJrLXByaW1hcnktdGV4dC1jb2xvcjtcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICBmb250LXdlaWdodDogbWFwX2dldCgkdHlwb2dyYXBoeS1mb250LXdlaWdodC12YWx1ZXMsIHJlZ3VsYXIpO1xuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICBoZWlnaHQ6IDIwcHg7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgICAgfVxuICAgICAgICAuZm9ybV9faW5wdXQge1xuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBoZWlnaHQ6IDM4cHg7XG4gICAgICAgICAgcGFkZGluZzogMCAxMHB4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQtcHJpbWFyeS1jb2xvcjtcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZGJlM2U3O1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgICAgICAgICBjb2xvcjogJGRhcmstcHJpbWFyeS10ZXh0LWNvbG9yO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgZWFzZS1pbi1vdXQgMC4xcztcbiAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICAgICY6YWN0aXZlLFxuICAgICAgICAgICY6Zm9jdXMge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2VlZjJmNDtcbiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJHByaW1hcnktY29sb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC5hY3Rpb25zIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAuYnV0dG9uIHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIGhlaWdodDogMzhweDtcbiAgICAgICAgcGFkZGluZzogMTJweCAxOHB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkcHJpbWFyeS1jb2xvcjtcbiAgICAgICAgY29sb3I6ICR3aGl0ZS1wcmltYXJ5LXRleHQtY29sb3I7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiBtYXBfZ2V0KCR0eXBvZ3JhcGh5LWZvbnQtd2VpZ2h0LXZhbHVlcywgbWVkaXVtKTtcbiAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG5cbiAgICAgICAgaSB7XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgICAgICB9XG5cbiAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogZGFya2VuKCRwcmltYXJ5LWNvbG9yLCAxMCUpO1xuICAgICAgICB9XG5cbiAgICAgICAgJjphY3RpdmUge1xuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxcHgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG48L3N0eWxlPlxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1VwZGF0ZVRyYW5zbGF0aW9uUGFnZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9VcGRhdGVUcmFuc2xhdGlvblBhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9VcGRhdGVUcmFuc2xhdGlvblBhZ2UudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTI2YjgwNTg1JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1VwZGF0ZVRyYW5zbGF0aW9uUGFnZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL1VwZGF0ZVRyYW5zbGF0aW9uUGFnZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vVXBkYXRlVHJhbnNsYXRpb25QYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcUHJvamVjdHNcXFxcV2hvZXJfdGVzdFxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMjZiODA1ODUnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMjZiODA1ODUnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL1VwZGF0ZVRyYW5zbGF0aW9uUGFnZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MjZiODA1ODUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMjZiODA1ODUnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9wYWdlcy90cmFuc2xhdGlvbi9VcGRhdGVUcmFuc2xhdGlvblBhZ2UudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInRyYW5zbGF0aW9uLXVwZGF0ZVwiIH0sIFtcbiAgICBfYyhcImgxXCIsIFtcbiAgICAgIF92bS5fdihfdm0uX3MoX3ZtLiR0KFwiZm9ybS5oZWFkXCIpKSArIFwiIFwiICsgX3ZtLl9zKF92bS4kcm91dGUucGFyYW1zLmlkKSlcbiAgICBdKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF92bS50cmFuc2xhdGlvblxuICAgICAgPyBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInRyYW5zbGF0aW9uX19ib3hcIiB9LCBbXG4gICAgICAgICAgX3ZtLm5vdGljZXMubGVuZ3RoXG4gICAgICAgICAgICA/IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZmxhc2hcIiB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICBcInVsXCIsXG4gICAgICAgICAgICAgICAgICBfdm0uX2woX3ZtLm5vdGljZXMsIGZ1bmN0aW9uKG5vdGljZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoXCJsaVwiLCB7IGtleTogbm90aWNlIH0sIFtfdm0uX3YoX3ZtLl9zKG5vdGljZSkpXSlcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIDogX3ZtLl9lKCksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfYyhcInRhYmxlXCIsIHsgc3RhdGljQ2xhc3M6IFwidHJhbnNsYXRpb25fX2RhdGFcIiB9LCBbXG4gICAgICAgICAgICBfYyhcInRib2R5XCIsIFtcbiAgICAgICAgICAgICAgX2MoXCJ0clwiLCBbXG4gICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCBbX3ZtLl92KFwiSURcIildKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgW192bS5fdihfdm0uX3MoX3ZtLnRyYW5zbGF0aW9uLmlkKSldKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJ0clwiLCBbXG4gICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCBbX3ZtLl92KF92bS5fcyhfdm0uJHQoXCJmb3JtLm5hbWVcIikpKV0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCBbX3ZtLl92KF92bS5fcyhfdm0udHJhbnNsYXRpb24ubmFtZSkpXSlcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgIF9jKFwidHJcIiwgW1xuICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgW192bS5fdihfdm0uX3MoX3ZtLiR0KFwiZm9ybS5sZXhpY29uXCIpKSldKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgW192bS5fdihfdm0uX3MoX3ZtLnRyYW5zbGF0aW9uLmxleGljb24pKV0pXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcInRyXCIsIFtcbiAgICAgICAgICAgICAgICBfYyhcInRkXCIsIFtfdm0uX3YoX3ZtLl9zKF92bS4kdChcImZvcm0uY3JlYXRlZFwiKSkpXSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfYyhcInRkXCIsIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLnBhcnNlRGF0ZShfdm0udHJhbnNsYXRpb24uY3JlYXRlZCkpKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcInRyXCIsIFtcbiAgICAgICAgICAgICAgICBfYyhcInRkXCIsIFtfdm0uX3YoX3ZtLl9zKF92bS4kdChcImZvcm0udXBkYXRlZFwiKSkpXSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfYyhcInRkXCIsIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLnBhcnNlRGF0ZShfdm0udHJhbnNsYXRpb24udXBkYXRlZCkpKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX3ZtLnRyYW5zbGF0aW9uXG4gICAgICAgICAgICA/IF9jKFxuICAgICAgICAgICAgICAgIFwiZm9ybVwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcInRyYW5zbGF0aW9uX19mb3JtXCIsXG4gICAgICAgICAgICAgICAgICBhdHRyczogeyBhY3Rpb246IFwiL3RyYW5zbGF0aW9uXCIsIG1ldGhvZDogXCJwb3N0XCIgfSxcbiAgICAgICAgICAgICAgICAgIG9uOiB7IHN1Ym1pdDogX3ZtLnVwZGF0ZU5hdGl2ZSB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImZvcm1fX2l0ZW1cIiB9LCBbXG4gICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIixcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmb3JtX19sYWJlbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgZm9yOiBcInRyYW5zbGF0aW9uLW5hdGl2ZVwiIH1cbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgICAgICAgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uJHQoXCJmb3JtLm5hdGl2ZVwiKSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmZpZWxkcy5uYXRpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiZmllbGRzLm5hdGl2ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmb3JtX19pbnB1dCByZXF1aXJlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBcInRyYW5zbGF0aW9uLW5hdGl2ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b2ZvY3VzOiBcImF1dG9mb2N1c1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJ0cmFuc2xhdGlvbltuYW1lXVwiXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmZpZWxkcy5uYXRpdmUgfSxcbiAgICAgICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0uZmllbGRzLCBcIm5hdGl2ZVwiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImFjdGlvbnNcIiB9LFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICBcInJvdXRlci1saW5rXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImJ1dHRvblwiLCBhdHRyczogeyB0bzogXCIvXCIgfSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfYyhcImlcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZhcyBmYS1iYWNrd2FyZCBhY3Rpb25fX2JhY2tcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICAgIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uJHQoXCJmb3JtLmJhY2tcIikpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcInN1Ym1pdFwiLCBuYW1lOiBcImNvbW1pdFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLiR0KFwiZm9ybS5hY3Rpb25cIikgfVxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIDogX3ZtLl9lKClcbiAgICAgICAgXSlcbiAgICAgIDogX2MoXCJkaXZcIiwgeyBhdHRyczogeyBpZDogXCJmbGFzaFwiIH0gfSwgW1xuICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLiR0KFwiZm9ybS5ub3RBdmFpbGFibGVcIikpKVxuICAgICAgICBdKVxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInRyYW5zbGF0aW9uLXVwZGF0ZVwiPlxuICAgIDxoMT57eyAkdChcImZvcm0uaGVhZFwiKSB9fSB7eyAkcm91dGUucGFyYW1zLmlkIH19PC9oMT5cbiAgICA8ZGl2IGNsYXNzPVwidHJhbnNsYXRpb25fX2JveFwiIHYtaWY9XCJ0cmFuc2xhdGlvblwiPlxuICAgICAgPGRpdiBjbGFzcz1cImZsYXNoXCIgdi1pZj1cIm5vdGljZXMubGVuZ3RoXCI+XG4gICAgICAgIDx1bD5cbiAgICAgICAgICA8bGkgdi1mb3I9XCJub3RpY2UgaW4gbm90aWNlc1wiIDprZXk9XCJub3RpY2VcIj57eyBub3RpY2UgfX08L2xpPlxuICAgICAgICA8L3VsPlxuICAgICAgPC9kaXY+XG4gICAgICA8dGFibGUgY2xhc3M9XCJ0cmFuc2xhdGlvbl9fZGF0YVwiPlxuICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRkPklEPC90ZD5cbiAgICAgICAgICAgIDx0ZD57eyB0cmFuc2xhdGlvbi5pZCB9fTwvdGQ+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGQ+e3sgJHQoXCJmb3JtLm5hbWVcIikgfX08L3RkPlxuICAgICAgICAgICAgPHRkPnt7IHRyYW5zbGF0aW9uLm5hbWUgfX08L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRkPnt7ICR0KFwiZm9ybS5sZXhpY29uXCIpIH19PC90ZD5cbiAgICAgICAgICAgIDx0ZD57eyB0cmFuc2xhdGlvbi5sZXhpY29uIH19PC90ZD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0ZD57eyAkdChcImZvcm0uY3JlYXRlZFwiKSB9fTwvdGQ+XG4gICAgICAgICAgICA8dGQ+e3sgcGFyc2VEYXRlKHRyYW5zbGF0aW9uLmNyZWF0ZWQpIH19PC90ZD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0ZD57eyAkdChcImZvcm0udXBkYXRlZFwiKSB9fTwvdGQ+XG4gICAgICAgICAgICA8dGQ+e3sgcGFyc2VEYXRlKHRyYW5zbGF0aW9uLnVwZGF0ZWQpIH19PC90ZD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICA8L3Rib2R5PlxuICAgICAgPC90YWJsZT5cbiAgICAgIDxmb3JtXG4gICAgICAgIGFjdGlvbj1cIi90cmFuc2xhdGlvblwiXG4gICAgICAgIGNsYXNzPVwidHJhbnNsYXRpb25fX2Zvcm1cIlxuICAgICAgICBtZXRob2Q9XCJwb3N0XCJcbiAgICAgICAgQHN1Ym1pdD1cInVwZGF0ZU5hdGl2ZVwiXG4gICAgICAgIHYtaWY9XCJ0cmFuc2xhdGlvblwiXG4gICAgICA+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtX19pdGVtXCI+XG4gICAgICAgICAgPGxhYmVsIGZvcj1cInRyYW5zbGF0aW9uLW5hdGl2ZVwiIGNsYXNzPVwiZm9ybV9fbGFiZWxcIj5cbiAgICAgICAgICAgIHt7ICR0KFwiZm9ybS5uYXRpdmVcIikgfX1cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgaWQ9XCJ0cmFuc2xhdGlvbi1uYXRpdmVcIlxuICAgICAgICAgICAgY2xhc3M9XCJmb3JtX19pbnB1dCByZXF1aXJlZFwiXG4gICAgICAgICAgICBhdXRvZm9jdXM9XCJhdXRvZm9jdXNcIlxuICAgICAgICAgICAgbmFtZT1cInRyYW5zbGF0aW9uW25hbWVdXCJcbiAgICAgICAgICAgIHYtbW9kZWw9XCJmaWVsZHMubmF0aXZlXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFjdGlvbnNcIj5cbiAgICAgICAgICA8cm91dGVyLWxpbmsgdG89XCIvXCIgY2xhc3M9XCJidXR0b25cIj5cbiAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWJhY2t3YXJkIGFjdGlvbl9fYmFja1wiPjwvaT5cbiAgICAgICAgICAgIHt7ICR0KFwiZm9ybS5iYWNrXCIpIH19XG4gICAgICAgICAgPC9yb3V0ZXItbGluaz5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgbmFtZT1cImNvbW1pdFwiXG4gICAgICAgICAgICA6dmFsdWU9XCIkdCgnZm9ybS5hY3Rpb24nKVwiXG4gICAgICAgICAgICBjbGFzcz1cImJ1dHRvblwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Zvcm0+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBpZD1cImZsYXNoXCIgdi1lbHNlPnt7ICR0KFwiZm9ybS5ub3RBdmFpbGFibGVcIikgfX08L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiBcIlVwZGF0ZVRyYW5zbGF0aW9uUGFnZVwiLFxuICBpMThuOiB7XG4gICAgbWVzc2FnZXM6IHtcbiAgICAgIGVuOiB7XG4gICAgICAgIGZvcm06IHtcbiAgICAgICAgICBoZWFkOiBcIlRyYW5zbGF0aW9uXCIsXG4gICAgICAgICAgYWN0aW9uOiBcIkVkaXRcIixcbiAgICAgICAgICBuYW1lOiBcIk5hbWVcIixcbiAgICAgICAgICBuYXRpdmU6IFwiTmF0aXZlXCIsXG4gICAgICAgICAgbGV4aWNvbjogXCJMZXhpY29uXCIsXG4gICAgICAgICAgY3JlYXRlZDogXCJDcmVhdGVkXCIsXG4gICAgICAgICAgdXBkYXRlZDogXCJVcGRhdGVkXCIsXG4gICAgICAgICAgbm90QXZhaWxhYmxlOiBcIk5vdCBBdmFpbGFibGVcIixcbiAgICAgICAgICBiYWNrOiBcIkJhY2tcIixcbiAgICAgICAgICBhY3Rpb25Nb3JlOiBcIkVkaXQgbmF0aXZlXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVzOiB7XG4gICAgICAgIGZvcm06IHtcbiAgICAgICAgICBoZWFkOiBcIlRyYWR1Y2Npw7NuXCIsXG4gICAgICAgICAgYWN0aW9uOiBcIkVkaXRhclwiLFxuICAgICAgICAgIG5hbWU6IFwiTm9tYnJlXCIsXG4gICAgICAgICAgbmF0aXZlOiBcIk5hdGl2b1wiLFxuICAgICAgICAgIGxleGljb246IFwiTMOpeGljb1wiLFxuICAgICAgICAgIGNyZWF0ZWQ6IFwiQ3JlYWRvXCIsXG4gICAgICAgICAgdXBkYXRlZDogXCJBY3R1YWxpemFkb1wiLFxuICAgICAgICAgIG5vdEF2YWlsYWJsZTogXCJObyBkaXNwb25pYmxlXCIsXG4gICAgICAgICAgYmFjazogXCJFc3BhbGRhXCIsXG4gICAgICAgICAgYWN0aW9uTW9yZTogXCJFZGl0YXIgbmF0aXZvXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlOiB7XG4gICAgICAgIGZvcm06IHtcbiAgICAgICAgICBoZWFkOiBcIsOcYmVyc2V0enVuZ1wiLFxuICAgICAgICAgIGFjdGlvbjogXCJCZWFyYmVpdGVuXCIsXG4gICAgICAgICAgbmFtZTogXCJOYW1lXCIsXG4gICAgICAgICAgbmF0aXZlOiBcIkVpbmdlYm9yZW5lclwiLFxuICAgICAgICAgIGxleGljb246IFwiTGV4aWtvblwiLFxuICAgICAgICAgIGNyZWF0ZWQ6IFwiRXJzdGVsbHRcIixcbiAgICAgICAgICB1cGRhdGVkOiBcIkFrdHVhbGlzaWVydGVcIixcbiAgICAgICAgICBub3RBdmFpbGFibGU6IFwiTmljaHQgdmVyZsO8Z2JhclwiLFxuICAgICAgICAgIGJhY2s6IFwiWnVyw7xja1wiLFxuICAgICAgICAgIGFjdGlvbk1vcmU6IFwiTmF0aXZlIGJlYXJiZWl0ZW5cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZnI6IHtcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGhlYWQ6IFwiVHJhZHVjdGlvblwiLFxuICAgICAgICAgIGFjdGlvbjogXCJtb2RpZmllclwiLFxuICAgICAgICAgIG5hbWU6IFwicHLDqW5vbVwiLFxuICAgICAgICAgIG5hdGl2ZTogXCJPcmlnaW5haXJlIGRlXCIsXG4gICAgICAgICAgbGV4aWNvbjogXCJMZXhpcXVlXCIsXG4gICAgICAgICAgY3JlYXRlZDogXCJDcsOpw6lcIixcbiAgICAgICAgICB1cGRhdGVkOiBcIk1pcyDDoCBqb3VyXCIsXG4gICAgICAgICAgbm90QXZhaWxhYmxlOiBcIkluZGlzcG9uaWJsZVwiLFxuICAgICAgICAgIGJhY2s6IFwiUmV0b3VyXCIsXG4gICAgICAgICAgYWN0aW9uTW9yZTogXCJNb2RpZmllciBuYXRpZlwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcInB0LWJyXCI6IHtcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGhlYWQ6IFwiVHJhZHXDp8Ojb1wiLFxuICAgICAgICAgIGFjdGlvbjogXCJFZGl0YXJcIixcbiAgICAgICAgICBuYW1lOiBcIk5vbWVcIixcbiAgICAgICAgICBuYXRpdmU6IFwiTmF0aXZvXCIsXG4gICAgICAgICAgbGV4aWNvbjogXCJMw6l4aWNvXCIsXG4gICAgICAgICAgY3JlYXRlZDogXCJDcmlhZG9cIixcbiAgICAgICAgICB1cGRhdGVkOiBcIkF0dWFsaXphZGFcIixcbiAgICAgICAgICBub3RBdmFpbGFibGU6IFwiTsOjbyBkaXNwb27DrXZlbFwiLFxuICAgICAgICAgIGJhY2s6IFwiRGUgdm9sdGFcIixcbiAgICAgICAgICBhY3Rpb25Nb3JlOiBcIkVkaXRhciBuYXRpdm9cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaXQ6IHtcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGhlYWQ6IFwiVHJhZHV6aW9uZVwiLFxuICAgICAgICAgIGFjdGlvbjogXCJtb2RpZmljYXJlXCIsXG4gICAgICAgICAgbmFtZTogXCJOb21lXCIsXG4gICAgICAgICAgbmF0aXZlOiBcIm5hdGl2b1wiLFxuICAgICAgICAgIGxleGljb246IFwiTGVzc2ljb1wiLFxuICAgICAgICAgIGNyZWF0ZWQ6IFwiQ3JlYXRvXCIsXG4gICAgICAgICAgdXBkYXRlZDogXCJhZ2dpb3JuYXRvXCIsXG4gICAgICAgICAgbm90QXZhaWxhYmxlOiBcIk5vbiBkaXNwb25pYmlsZVwiLFxuICAgICAgICAgIGJhY2s6IFwiSW5kaWV0cm9cIixcbiAgICAgICAgICBhY3Rpb25Nb3JlOiBcIk1vZGlmaWNhIG5hdGl2b1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBydToge1xuICAgICAgICBmb3JtOiB7XG4gICAgICAgICAgaGVhZDogXCLQn9C10YDQtdCy0L7QtFwiLFxuICAgICAgICAgIGFjdGlvbjogXCLQoNC10LTQsNC60YLQuNGA0L7QstCw0YLRjFwiLFxuICAgICAgICAgIG5hbWU6IFwi0J3QsNC30LLQsNC90LjRj1wiLFxuICAgICAgICAgIG5hdGl2ZTogXCLQndCw0YLQuNCy0L3QvlwiLFxuICAgICAgICAgIGxleGljb246IFwi0JvQtdC60YHQuNC60L7QvVwiLFxuICAgICAgICAgIGNyZWF0ZWQ6IFwi0KHQvtC30LTQsNC9XCIsXG4gICAgICAgICAgdXBkYXRlZDogXCLQntCx0L3QvtCy0LvQtdC9XCIsXG4gICAgICAgICAgbm90QXZhaWxhYmxlOiBcItCd0LUg0LTQvtGB0YLRg9C/0L3QvlwiLFxuICAgICAgICAgIGJhY2s6IFwi0J3QsNC30LDQtFwiLFxuICAgICAgICAgIGFjdGlvbk1vcmU6IFwi0KDQtdC00LDQutGC0LjRgNC+0LLQsNGC0Ywg0L3QsNGC0LjQstC90YvQuVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB1azoge1xuICAgICAgICBmb3JtOiB7XG4gICAgICAgICAgaGVhZDogXCLQn9C10YDQtdC60LvQsNC0XCIsXG4gICAgICAgICAgYWN0aW9uOiBcItCg0LXQtNCw0LPRg9Cy0LDRgtC4XCIsXG4gICAgICAgICAgbmFtZTogXCLQhtC8J9GPXCIsXG4gICAgICAgICAgbmF0aXZlOiBcItCg0ZbQtNC90LjQuVwiLFxuICAgICAgICAgIGxleGljb246IFwi0JvQtdC60YHQuNC60L7QvVwiLFxuICAgICAgICAgIGNyZWF0ZWQ6IFwi0KHRgtCy0L7RgNC10L3QvlwiLFxuICAgICAgICAgIHVwZGF0ZWQ6IFwi0J7QvdC+0LLQu9C10L3QvlwiLFxuICAgICAgICAgIG5vdEF2YWlsYWJsZTogXCLQndC10LTQvtGB0YLRg9C/0L3QuNC5XCIsXG4gICAgICAgICAgYmFjazogXCLQndCw0LfQsNC0XCIsXG4gICAgICAgICAgYWN0aW9uTW9yZTogXCLQoNC10LTQsNCz0YPQstCw0YLQuCDRgNGW0LTQvdC40LlcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdHI6IHtcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGhlYWQ6IFwiw4dldmlyaVwiLFxuICAgICAgICAgIGFjdGlvbjogXCJEw7x6ZW5sZVwiLFxuICAgICAgICAgIG5hbWU6IFwiaXNpbVwiLFxuICAgICAgICAgIG5hdGl2ZTogXCJ5ZXJsaVwiLFxuICAgICAgICAgIGxleGljb246IFwic8O2emzDvGtcIixcbiAgICAgICAgICBjcmVhdGVkOiBcImTDvHplbmxlbmRpXCIsXG4gICAgICAgICAgdXBkYXRlZDogXCJHw7xuY2VsbGVubWnFn1wiLFxuICAgICAgICAgIG5vdEF2YWlsYWJsZTogXCJNw7xzYWl0IGRlxJ9pbFwiLFxuICAgICAgICAgIGJhY2s6IFwiR2VyaVwiLFxuICAgICAgICAgIGFjdGlvbk1vcmU6IFwiWWVybGlsZXJpIGTDvHplbmxlXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiemgtdHdcIjoge1xuICAgICAgICBmb3JtOiB7XG4gICAgICAgICAgaGVhZDogXCLnv7vora9cIixcbiAgICAgICAgICBhY3Rpb246IFwi57eo6LyvXCIsXG4gICAgICAgICAgbmFtZTogXCLlkI3nqLFcIixcbiAgICAgICAgICBuYXRpdmU6IFwi5pys5Zyw5Lq6XCIsXG4gICAgICAgICAgbGV4aWNvbjogXCLoqZ7lvZlcIixcbiAgICAgICAgICBjcmVhdGVkOiBcIuWJteW7ulwiLFxuICAgICAgICAgIHVwZGF0ZWQ6IFwi5pu05pawXCIsXG4gICAgICAgICAgbm90QXZhaWxhYmxlOiBcIueEoeazleS9v+eUqFwiLFxuICAgICAgICAgIGJhY2s6IFwi6IOM6YOoXCIsXG4gICAgICAgICAgYWN0aW9uTW9yZTogXCLnt6jovK/ljp/nlJ9cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJ6aC1jblwiOiB7XG4gICAgICAgIGZvcm06IHtcbiAgICAgICAgICBoZWFkOiBcIue/u+ivkVwiLFxuICAgICAgICAgIGFjdGlvbjogXCLnvJbovpFcIixcbiAgICAgICAgICBuYW1lOiBcIuWQjeensFwiLFxuICAgICAgICAgIG5hdGl2ZTogXCLmnKzlnLDkurpcIixcbiAgICAgICAgICBsZXhpY29uOiBcIuivjeaxh1wiLFxuICAgICAgICAgIGNyZWF0ZWQ6IFwi5Yib5bu6XCIsXG4gICAgICAgICAgdXBkYXRlZDogXCLmm7TmlrBcIixcbiAgICAgICAgICBub3RBdmFpbGFibGU6IFwi5peg5rOV5L2/55SoXCIsXG4gICAgICAgICAgYmFjazogXCLog4zpg6hcIixcbiAgICAgICAgICBhY3Rpb25Nb3JlOiBcIue8lui+keWOn+eUn1wiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zbGF0aW9uOiBudWxsLFxuICAgICAgZmllbGRzOiB7XG4gICAgICAgIG5hdGl2ZTogbnVsbFxuICAgICAgfSxcbiAgICAgIG5vdGljZXM6IFtdXG4gICAgfTtcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICBheGlvc1xuICAgICAgLmdldChcIi92Mi90cmFuc2xhdGlvbi9cIiArIHRoaXMuJHJvdXRlLnBhcmFtcy5pZClcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwICYmIHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgICB0aGlzLnRyYW5zbGF0aW9uID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICB0aGlzLmZpZWxkcy5uYXRpdmUgPSB0aGlzLnRyYW5zbGF0aW9uLm5hdGl2ZTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICB9KTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHBhcnNlRGF0ZSh1bml4RGF0ZSkge1xuICAgICAgY29uc3QgdGhlRGF0ZSA9IG5ldyBEYXRlKHVuaXhEYXRlICogMTAwMCk7XG4gICAgICByZXR1cm4gdGhlRGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKSArIFwiIFwiICsgdGhlRGF0ZS50b0xvY2FsZVRpbWVTdHJpbmcoKTtcbiAgICB9LFxuICAgIHVwZGF0ZU5hdGl2ZShlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGF4aW9zKHtcbiAgICAgICAgdXJsOiBcIi92Mi90cmFuc2xhdGlvbi9cIiArIHRoaXMuJHJvdXRlLnBhcmFtcy5pZCArIFwiL25hdGl2ZVwiLFxuICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBuYXRpdmU6IHRoaXMuZmllbGRzLm5hdGl2ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgdGhpcy5ub3RpY2VzLnB1c2goXCJTdWNjZXNzLiBVcGRhdGVkIG5hdGl2ZSBmb3IgXCIgKyByZXNwb25zZS5kYXRhLmlkKTtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHtcbiAgICAgICAgICAgICAgbmFtZTogXCJyZWFkXCIsXG4gICAgICAgICAgICAgIHBhcmFtczogeyBpZDogcmVzcG9uc2UuZGF0YS5pZCB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCA1MDApO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgIHRoaXMubm90aWNlcy5wdXNoKGVycm9yKTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH1cbn07XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG5AaW1wb3J0IFwiLi4vLi4vY29tbW9uL3N0eWxlcy9jb25maWcvdmFyaWFibGVzXCI7XG5cbi50cmFuc2xhdGlvbi11cGRhdGUge1xuICAudHJhbnNsYXRpb25fX2JveCB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHdpZHRoOiA1MCU7XG4gICAgcGFkZGluZzogMTVweCAwO1xuICAgIC5mbGFzaCB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmY2Y4ZTM7XG4gICAgICBib3JkZXI6IDFweCBzb2xpZCAjZmFlYmNjO1xuICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xuICAgICAgY29sb3I6ICM3NjY3NGU7XG4gICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICBsaW5lLWhlaWdodDogMS4ycmVtO1xuICAgICAgcGFkZGluZzogOHB4IDEwcHg7XG4gICAgfVxuICAgIC50cmFuc2xhdGlvbl9fZm9ybSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gICAgICBwYWRkaW5nOiA0MHB4IDAgMzBweDtcbiAgICAgIC5mb3JtX19pdGVtIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAuZm9ybV9fbGFiZWwge1xuICAgICAgICAgIGNvbG9yOiAkZGFyay1wcmltYXJ5LXRleHQtY29sb3I7XG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgZm9udC13ZWlnaHQ6IG1hcF9nZXQoJHR5cG9ncmFwaHktZm9udC13ZWlnaHQtdmFsdWVzLCByZWd1bGFyKTtcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgIH1cbiAgICAgICAgLmZvcm1fX2lucHV0IHtcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgaGVpZ2h0OiAzOHB4O1xuICAgICAgICAgIHBhZGRpbmc6IDAgMTBweDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRiYWNrZ3JvdW5kLXByaW1hcnktY29sb3I7XG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2RiZTNlNztcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgICAgICAgY29sb3I6ICRkYXJrLXByaW1hcnktdGV4dC1jb2xvcjtcbiAgICAgICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICAgICAgdHJhbnNpdGlvbjogYWxsIGVhc2UtaW4tb3V0IDAuMXM7XG4gICAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgICAmOmFjdGl2ZSxcbiAgICAgICAgICAmOmZvY3VzIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlZWYyZjQ7XG4gICAgICAgICAgICBib3JkZXItY29sb3I6ICRwcmltYXJ5LWNvbG9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAuYWN0aW9ucyB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgLmJ1dHRvbiB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBoZWlnaHQ6IDM4cHg7XG4gICAgICAgIHBhZGRpbmc6IDEycHggMThweDtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHByaW1hcnktY29sb3I7XG4gICAgICAgIGNvbG9yOiAkd2hpdGUtcHJpbWFyeS10ZXh0LWNvbG9yO1xuICAgICAgICBmb250LXdlaWdodDogbWFwX2dldCgkdHlwb2dyYXBoeS1mb250LXdlaWdodC12YWx1ZXMsIG1lZGl1bSk7XG4gICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMTVweDtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuXG4gICAgICAgIGkge1xuICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICAgICAgfVxuXG4gICAgICAgICY6aG92ZXIge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtlbigkcHJpbWFyeS1jb2xvciwgMTAlKTtcbiAgICAgICAgfVxuXG4gICAgICAgICY6YWN0aXZlIHtcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMXB4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuPC9zdHlsZT5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9VcGRhdGVOYXRpdmVQYWdlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1VwZGF0ZU5hdGl2ZVBhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9VcGRhdGVOYXRpdmVQYWdlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD05ZDg1NTY5ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9VcGRhdGVOYXRpdmVQYWdlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vVXBkYXRlTmF0aXZlUGFnZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vVXBkYXRlTmF0aXZlUGFnZS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkQ6XFxcXFByb2plY3RzXFxcXFdob2VyX3Rlc3RcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzlkODU1NjllJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzlkODU1NjllJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9VcGRhdGVOYXRpdmVQYWdlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD05ZDg1NTY5ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc5ZDg1NTY5ZScsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL3BhZ2VzL3RyYW5zbGF0aW9uL1VwZGF0ZU5hdGl2ZVBhZ2UudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IFZ1ZSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCJ2dWUtcm91dGVyXCI7XG5pbXBvcnQgc3RvcmUgZnJvbSBcIkBwcm9qZWN0X3NyYy9zdG9yZVwiO1xuLy8gKiBQYWdlc1xuaW1wb3J0IEluZGV4UGFnZSBmcm9tIFwiQHByb2plY3Rfc3JjL3BhZ2VzL0luZGV4UGFnZS52dWVcIjtcbmltcG9ydCBMb2dpblBhZ2UgZnJvbSBcIkBwcm9qZWN0X3NyYy9wYWdlcy9Mb2dpblBhZ2UudnVlXCI7XG5pbXBvcnQgQ3JlYXRlIGZyb20gXCJAcHJvamVjdF9zcmMvcGFnZXMvdHJhbnNsYXRpb24vQ3JlYXRlVHJhbnNsYXRpb25QYWdlLnZ1ZVwiO1xuaW1wb3J0IFJlYWQgZnJvbSBcIkBwcm9qZWN0X3NyYy9wYWdlcy90cmFuc2xhdGlvbi9SZWFkVHJhbnNsYXRpb25QYWdlLnZ1ZVwiO1xuaW1wb3J0IFVwZGF0ZSBmcm9tIFwiQHByb2plY3Rfc3JjL3BhZ2VzL3RyYW5zbGF0aW9uL1VwZGF0ZVRyYW5zbGF0aW9uUGFnZS52dWVcIjtcbmltcG9ydCBOYXRpdmUgZnJvbSBcIkBwcm9qZWN0X3NyYy9wYWdlcy90cmFuc2xhdGlvbi9VcGRhdGVOYXRpdmVQYWdlLnZ1ZVwiO1xuXG5WdWUudXNlKFJvdXRlcik7XG5cbmNvbnN0IGlmTm90QXV0aGVudGljYXRlZCA9ICh0bywgZnJvbSwgbmV4dCkgPT4ge1xuICBpZiAoIXN0b3JlLmdldHRlcnNbXCJhdXRoL2lzQXV0aGVudGljYXRlZFwiXSkge1xuICAgIG5leHQoKTtcbiAgICByZXR1cm47XG4gIH1cbiAgbmV4dChcIi9cIik7XG59O1xuXG5jb25zdCBpZkF1dGhlbnRpY2F0ZWQgPSAodG8sIGZyb20sIG5leHQpID0+IHtcbiAgaWYgKHN0b3JlLmdldHRlcnNbXCJhdXRoL2lzQXV0aGVudGljYXRlZFwiXSkge1xuICAgIG5leHQoKTtcbiAgICByZXR1cm47XG4gIH1cbiAgbmV4dChcIi9sb2dpblwiKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBSb3V0ZXIoe1xuICBtb2RlOiBcImhpc3RvcnlcIixcbiAgYmFzZTogXCIvd2hvZXJfdGVzdC9cIixcbiAgcm91dGVzOiBbXG4gICAge1xuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICBuYW1lOiBcImluZGV4XCIsXG4gICAgICBtZXRhOiB7IGxheW91dDogXCJtYWluXCIsIHJlcXVpcmVzQXV0aDogdHJ1ZSB9LFxuICAgICAgY29tcG9uZW50OiBJbmRleFBhZ2UsXG4gICAgICBiZWZvcmVFbnRlcjogaWZBdXRoZW50aWNhdGVkXG4gICAgfSxcbiAgICB7XG4gICAgICBwYXRoOiBcIi9sb2dpblwiLFxuICAgICAgbmFtZTogXCJsb2dpblwiLFxuICAgICAgbWV0YTogeyBsYXlvdXQ6IFwibWFpblwiLCByZXF1aXJlc0F1dGg6IGZhbHNlIH0sXG4gICAgICBjb21wb25lbnQ6IExvZ2luUGFnZSxcbiAgICAgIGJlZm9yZUVudGVyOiBpZk5vdEF1dGhlbnRpY2F0ZWRcbiAgICB9LFxuICAgIHtcbiAgICAgIHBhdGg6IFwiL3RyYW5zbGF0aW9uXCIsXG4gICAgICBuYW1lOiBcImNyZWF0ZVwiLFxuICAgICAgbWV0YTogeyBsYXlvdXQ6IFwibWFpblwiLCByZXF1aXJlc0F1dGg6IHRydWUgfSxcbiAgICAgIGNvbXBvbmVudDogQ3JlYXRlLFxuICAgICAgYmVmb3JlRW50ZXI6IGlmQXV0aGVudGljYXRlZFxuICAgIH0sXG4gICAge1xuICAgICAgcGF0aDogXCIvdHJhbnNsYXRpb24vOmlkL3JlYWRcIixcbiAgICAgIG5hbWU6IFwicmVhZFwiLFxuICAgICAgbWV0YTogeyBsYXlvdXQ6IFwibWFpblwiLCByZXF1aXJlc0F1dGg6IHRydWUgfSxcbiAgICAgIGNvbXBvbmVudDogUmVhZCxcbiAgICAgIGJlZm9yZUVudGVyOiBpZkF1dGhlbnRpY2F0ZWQsXG4gICAgICBwcm9wczogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgcGF0aDogXCIvdHJhbnNsYXRpb24vOmlkL3VwZGF0ZVwiLFxuICAgICAgbmFtZTogXCJ1cGRhdGVcIixcbiAgICAgIG1ldGE6IHsgbGF5b3V0OiBcIm1haW5cIiwgcmVxdWlyZXNBdXRoOiB0cnVlIH0sXG4gICAgICBjb21wb25lbnQ6IFVwZGF0ZSxcbiAgICAgIGJlZm9yZUVudGVyOiBpZkF1dGhlbnRpY2F0ZWQsXG4gICAgICBwcm9wczogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgcGF0aDogXCIvdHJhbnNsYXRpb24vOmlkL25hdGl2ZVwiLFxuICAgICAgbmFtZTogXCJuYXRpdmVcIixcbiAgICAgIG1ldGE6IHsgbGF5b3V0OiBcIm1haW5cIiwgcmVxdWlyZXNBdXRoOiB0cnVlIH0sXG4gICAgICBjb21wb25lbnQ6IE5hdGl2ZSxcbiAgICAgIGJlZm9yZUVudGVyOiBpZkF1dGhlbnRpY2F0ZWQsXG4gICAgICBwcm9wczogdHJ1ZVxuICAgIH1cbiAgXVxufSk7XG4iLCIvKiFcbiAqIHZ1ZS1pMThuIHY4LjEyLjAgXG4gKiAoYykgMjAxOSBrYXp1eWEga2F3YWd1Y2hpXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbi8qICAqL1xuXG4vKipcbiAqIGNvbnN0YW50c1xuICovXG5cbnZhciBudW1iZXJGb3JtYXRLZXlzID0gW1xuICAnc3R5bGUnLFxuICAnY3VycmVuY3knLFxuICAnY3VycmVuY3lEaXNwbGF5JyxcbiAgJ3VzZUdyb3VwaW5nJyxcbiAgJ21pbmltdW1JbnRlZ2VyRGlnaXRzJyxcbiAgJ21pbmltdW1GcmFjdGlvbkRpZ2l0cycsXG4gICdtYXhpbXVtRnJhY3Rpb25EaWdpdHMnLFxuICAnbWluaW11bVNpZ25pZmljYW50RGlnaXRzJyxcbiAgJ21heGltdW1TaWduaWZpY2FudERpZ2l0cycsXG4gICdsb2NhbGVNYXRjaGVyJyxcbiAgJ2Zvcm1hdE1hdGNoZXInXG5dO1xuXG4vKipcbiAqIHV0aWxpdGllc1xuICovXG5cbmZ1bmN0aW9uIHdhcm4gKG1zZywgZXJyKSB7XG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLndhcm4oJ1t2dWUtaTE4bl0gJyArIG1zZyk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGVycikge1xuICAgICAgY29uc29sZS53YXJuKGVyci5zdGFjayk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGVycm9yIChtc2csIGVycikge1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5lcnJvcignW3Z1ZS1pMThuXSAnICsgbXNnKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVyci5zdGFjayk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIE9CSkVDVF9TVFJJTkcgPSAnW29iamVjdCBPYmplY3RdJztcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSBPQkpFQ1RfU1RSSU5HXG59XG5cbmZ1bmN0aW9uIGlzTnVsbCAodmFsKSB7XG4gIHJldHVybiB2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gcGFyc2VBcmdzICgpIHtcbiAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICB2YXIgbG9jYWxlID0gbnVsbDtcbiAgdmFyIHBhcmFtcyA9IG51bGw7XG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmIChpc09iamVjdChhcmdzWzBdKSB8fCBBcnJheS5pc0FycmF5KGFyZ3NbMF0pKSB7XG4gICAgICBwYXJhbXMgPSBhcmdzWzBdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICBsb2NhbGUgPSBhcmdzWzBdO1xuICAgIH1cbiAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxvY2FsZSA9IGFyZ3NbMF07XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc09iamVjdChhcmdzWzFdKSB8fCBBcnJheS5pc0FycmF5KGFyZ3NbMV0pKSB7XG4gICAgICBwYXJhbXMgPSBhcmdzWzFdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7IGxvY2FsZTogbG9jYWxlLCBwYXJhbXM6IHBhcmFtcyB9XG59XG5cbmZ1bmN0aW9uIGxvb3NlQ2xvbmUgKG9iaikge1xuICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKVxufVxuXG5mdW5jdGlvbiByZW1vdmUgKGFyciwgaXRlbSkge1xuICBpZiAoYXJyLmxlbmd0aCkge1xuICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICByZXR1cm4gYXJyLnNwbGljZShpbmRleCwgMSlcbiAgICB9XG4gIH1cbn1cblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbmZ1bmN0aW9uIG1lcmdlICh0YXJnZXQpIHtcbiAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gIHZhciBvdXRwdXQgPSBPYmplY3QodGFyZ2V0KTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzJDFbaV07XG4gICAgaWYgKHNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIHNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgdmFyIGtleSA9ICh2b2lkIDApO1xuICAgICAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNPd24oc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHNvdXJjZVtrZXldKSkge1xuICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBtZXJnZShvdXRwdXRba2V5XSwgc291cmNlW2tleV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRwdXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0cHV0XG59XG5cbmZ1bmN0aW9uIGxvb3NlRXF1YWwgKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaXNPYmplY3RBID0gaXNPYmplY3QoYSk7XG4gIHZhciBpc09iamVjdEIgPSBpc09iamVjdChiKTtcbiAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGlzQXJyYXlBID0gQXJyYXkuaXNBcnJheShhKTtcbiAgICAgIHZhciBpc0FycmF5QiA9IEFycmF5LmlzQXJyYXkoYik7XG4gICAgICBpZiAoaXNBcnJheUEgJiYgaXNBcnJheUIpIHtcbiAgICAgICAgcmV0dXJuIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoZSwgYltpXSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRlbmQgKFZ1ZSkge1xuICBpZiAoIVZ1ZS5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoJyRpMThuJykpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckaTE4bicsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHsgcmV0dXJuIHRoaXMuX2kxOG4gfVxuICAgIH0pO1xuICB9XG5cbiAgVnVlLnByb3RvdHlwZS4kdCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgdmFsdWVzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgIHdoaWxlICggbGVuLS0gPiAwICkgdmFsdWVzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gICAgdmFyIGkxOG4gPSB0aGlzLiRpMThuO1xuICAgIHJldHVybiBpMThuLl90LmFwcGx5KGkxOG4sIFsga2V5LCBpMThuLmxvY2FsZSwgaTE4bi5fZ2V0TWVzc2FnZXMoKSwgdGhpcyBdLmNvbmNhdCggdmFsdWVzICkpXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kdGMgPSBmdW5jdGlvbiAoa2V5LCBjaG9pY2UpIHtcbiAgICB2YXIgdmFsdWVzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICAgIHdoaWxlICggbGVuLS0gPiAwICkgdmFsdWVzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMiBdO1xuXG4gICAgdmFyIGkxOG4gPSB0aGlzLiRpMThuO1xuICAgIHJldHVybiBpMThuLl90Yy5hcHBseShpMThuLCBbIGtleSwgaTE4bi5sb2NhbGUsIGkxOG4uX2dldE1lc3NhZ2VzKCksIHRoaXMsIGNob2ljZSBdLmNvbmNhdCggdmFsdWVzICkpXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kdGUgPSBmdW5jdGlvbiAoa2V5LCBsb2NhbGUpIHtcbiAgICB2YXIgaTE4biA9IHRoaXMuJGkxOG47XG4gICAgcmV0dXJuIGkxOG4uX3RlKGtleSwgaTE4bi5sb2NhbGUsIGkxOG4uX2dldE1lc3NhZ2VzKCksIGxvY2FsZSlcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIHJlZjtcblxuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgIHdoaWxlICggbGVuLS0gPiAwICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcbiAgICByZXR1cm4gKHJlZiA9IHRoaXMuJGkxOG4pLmQuYXBwbHkocmVmLCBbIHZhbHVlIF0uY29uY2F0KCBhcmdzICkpXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciByZWY7XG5cbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgICB3aGlsZSAoIGxlbi0tID4gMCApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG4gICAgcmV0dXJuIChyZWYgPSB0aGlzLiRpMThuKS5uLmFwcGx5KHJlZiwgWyB2YWx1ZSBdLmNvbmNhdCggYXJncyApKVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIG1peGluID0ge1xuICBiZWZvcmVDcmVhdGU6IGZ1bmN0aW9uIGJlZm9yZUNyZWF0ZSAoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLiRvcHRpb25zO1xuICAgIG9wdGlvbnMuaTE4biA9IG9wdGlvbnMuaTE4biB8fCAob3B0aW9ucy5fX2kxOG4gPyB7fSA6IG51bGwpO1xuXG4gICAgaWYgKG9wdGlvbnMuaTE4bikge1xuICAgICAgaWYgKG9wdGlvbnMuaTE4biBpbnN0YW5jZW9mIFZ1ZUkxOG4pIHtcbiAgICAgICAgLy8gaW5pdCBsb2NhbGUgbWVzc2FnZXMgdmlhIGN1c3RvbSBibG9ja3NcbiAgICAgICAgaWYgKG9wdGlvbnMuX19pMThuKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBsb2NhbGVNZXNzYWdlcyA9IHt9O1xuICAgICAgICAgICAgb3B0aW9ucy5fX2kxOG4uZm9yRWFjaChmdW5jdGlvbiAocmVzb3VyY2UpIHtcbiAgICAgICAgICAgICAgbG9jYWxlTWVzc2FnZXMgPSBtZXJnZShsb2NhbGVNZXNzYWdlcywgSlNPTi5wYXJzZShyZXNvdXJjZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhsb2NhbGVNZXNzYWdlcykuZm9yRWFjaChmdW5jdGlvbiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgIG9wdGlvbnMuaTE4bi5tZXJnZUxvY2FsZU1lc3NhZ2UobG9jYWxlLCBsb2NhbGVNZXNzYWdlc1tsb2NhbGVdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIHdhcm4oXCJDYW5ub3QgcGFyc2UgbG9jYWxlIG1lc3NhZ2VzIHZpYSBjdXN0b20gYmxvY2tzLlwiLCBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faTE4biA9IG9wdGlvbnMuaTE4bjtcbiAgICAgICAgdGhpcy5faTE4bldhdGNoZXIgPSB0aGlzLl9pMThuLndhdGNoSTE4bkRhdGEoKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChvcHRpb25zLmkxOG4pKSB7XG4gICAgICAgIC8vIGNvbXBvbmVudCBsb2NhbCBpMThuXG4gICAgICAgIGlmICh0aGlzLiRyb290ICYmIHRoaXMuJHJvb3QuJGkxOG4gJiYgdGhpcy4kcm9vdC4kaTE4biBpbnN0YW5jZW9mIFZ1ZUkxOG4pIHtcbiAgICAgICAgICBvcHRpb25zLmkxOG4ucm9vdCA9IHRoaXMuJHJvb3Q7XG4gICAgICAgICAgb3B0aW9ucy5pMThuLmZvcm1hdHRlciA9IHRoaXMuJHJvb3QuJGkxOG4uZm9ybWF0dGVyO1xuICAgICAgICAgIG9wdGlvbnMuaTE4bi5mYWxsYmFja0xvY2FsZSA9IHRoaXMuJHJvb3QuJGkxOG4uZmFsbGJhY2tMb2NhbGU7XG4gICAgICAgICAgb3B0aW9ucy5pMThuLnNpbGVudFRyYW5zbGF0aW9uV2FybiA9IHRoaXMuJHJvb3QuJGkxOG4uc2lsZW50VHJhbnNsYXRpb25XYXJuO1xuICAgICAgICAgIG9wdGlvbnMuaTE4bi5zaWxlbnRGYWxsYmFja1dhcm4gPSB0aGlzLiRyb290LiRpMThuLnNpbGVudEZhbGxiYWNrV2FybjtcbiAgICAgICAgICBvcHRpb25zLmkxOG4ucGx1cmFsaXphdGlvblJ1bGVzID0gdGhpcy4kcm9vdC4kaTE4bi5wbHVyYWxpemF0aW9uUnVsZXM7XG4gICAgICAgICAgb3B0aW9ucy5pMThuLnByZXNlcnZlRGlyZWN0aXZlQ29udGVudCA9IHRoaXMuJHJvb3QuJGkxOG4ucHJlc2VydmVEaXJlY3RpdmVDb250ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaW5pdCBsb2NhbGUgbWVzc2FnZXMgdmlhIGN1c3RvbSBibG9ja3NcbiAgICAgICAgaWYgKG9wdGlvbnMuX19pMThuKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBsb2NhbGVNZXNzYWdlcyQxID0ge307XG4gICAgICAgICAgICBvcHRpb25zLl9faTE4bi5mb3JFYWNoKGZ1bmN0aW9uIChyZXNvdXJjZSkge1xuICAgICAgICAgICAgICBsb2NhbGVNZXNzYWdlcyQxID0gbWVyZ2UobG9jYWxlTWVzc2FnZXMkMSwgSlNPTi5wYXJzZShyZXNvdXJjZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBvcHRpb25zLmkxOG4ubWVzc2FnZXMgPSBsb2NhbGVNZXNzYWdlcyQxO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIHdhcm4oXCJDYW5ub3QgcGFyc2UgbG9jYWxlIG1lc3NhZ2VzIHZpYSBjdXN0b20gYmxvY2tzLlwiLCBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVmID0gb3B0aW9ucy5pMThuO1xuICAgICAgICB2YXIgc2hhcmVkTWVzc2FnZXMgPSByZWYuc2hhcmVkTWVzc2FnZXM7XG4gICAgICAgIGlmIChzaGFyZWRNZXNzYWdlcyAmJiBpc1BsYWluT2JqZWN0KHNoYXJlZE1lc3NhZ2VzKSkge1xuICAgICAgICAgIG9wdGlvbnMuaTE4bi5tZXNzYWdlcyA9IG1lcmdlKG9wdGlvbnMuaTE4bi5tZXNzYWdlcywgc2hhcmVkTWVzc2FnZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faTE4biA9IG5ldyBWdWVJMThuKG9wdGlvbnMuaTE4bik7XG4gICAgICAgIHRoaXMuX2kxOG5XYXRjaGVyID0gdGhpcy5faTE4bi53YXRjaEkxOG5EYXRhKCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaTE4bi5zeW5jID09PSB1bmRlZmluZWQgfHwgISFvcHRpb25zLmkxOG4uc3luYykge1xuICAgICAgICAgIHRoaXMuX2xvY2FsZVdhdGNoZXIgPSB0aGlzLiRpMThuLndhdGNoTG9jYWxlKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybihcIkNhbm5vdCBiZSBpbnRlcnByZXRlZCAnaTE4bicgb3B0aW9uLlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy4kcm9vdCAmJiB0aGlzLiRyb290LiRpMThuICYmIHRoaXMuJHJvb3QuJGkxOG4gaW5zdGFuY2VvZiBWdWVJMThuKSB7XG4gICAgICAvLyByb290IGkxOG5cbiAgICAgIHRoaXMuX2kxOG4gPSB0aGlzLiRyb290LiRpMThuO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5wYXJlbnQgJiYgb3B0aW9ucy5wYXJlbnQuJGkxOG4gJiYgb3B0aW9ucy5wYXJlbnQuJGkxOG4gaW5zdGFuY2VvZiBWdWVJMThuKSB7XG4gICAgICAvLyBwYXJlbnQgaTE4blxuICAgICAgdGhpcy5faTE4biA9IG9wdGlvbnMucGFyZW50LiRpMThuO1xuICAgIH1cbiAgfSxcblxuICBiZWZvcmVNb3VudDogZnVuY3Rpb24gYmVmb3JlTW91bnQgKCkge1xuICAgIHZhciBvcHRpb25zID0gdGhpcy4kb3B0aW9ucztcbiAgICBvcHRpb25zLmkxOG4gPSBvcHRpb25zLmkxOG4gfHwgKG9wdGlvbnMuX19pMThuID8ge30gOiBudWxsKTtcblxuICAgIGlmIChvcHRpb25zLmkxOG4pIHtcbiAgICAgIGlmIChvcHRpb25zLmkxOG4gaW5zdGFuY2VvZiBWdWVJMThuKSB7XG4gICAgICAgIC8vIGluaXQgbG9jYWxlIG1lc3NhZ2VzIHZpYSBjdXN0b20gYmxvY2tzXG4gICAgICAgIHRoaXMuX2kxOG4uc3Vic2NyaWJlRGF0YUNoYW5naW5nKHRoaXMpO1xuICAgICAgICB0aGlzLl9zdWJzY3JpYmluZyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qob3B0aW9ucy5pMThuKSkge1xuICAgICAgICB0aGlzLl9pMThuLnN1YnNjcmliZURhdGFDaGFuZ2luZyh0aGlzKTtcbiAgICAgICAgdGhpcy5fc3Vic2NyaWJpbmcgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKFwiQ2Fubm90IGJlIGludGVycHJldGVkICdpMThuJyBvcHRpb24uXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLiRyb290ICYmIHRoaXMuJHJvb3QuJGkxOG4gJiYgdGhpcy4kcm9vdC4kaTE4biBpbnN0YW5jZW9mIFZ1ZUkxOG4pIHtcbiAgICAgIHRoaXMuX2kxOG4uc3Vic2NyaWJlRGF0YUNoYW5naW5nKHRoaXMpO1xuICAgICAgdGhpcy5fc3Vic2NyaWJpbmcgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5wYXJlbnQgJiYgb3B0aW9ucy5wYXJlbnQuJGkxOG4gJiYgb3B0aW9ucy5wYXJlbnQuJGkxOG4gaW5zdGFuY2VvZiBWdWVJMThuKSB7XG4gICAgICB0aGlzLl9pMThuLnN1YnNjcmliZURhdGFDaGFuZ2luZyh0aGlzKTtcbiAgICAgIHRoaXMuX3N1YnNjcmliaW5nID0gdHJ1ZTtcbiAgICB9XG4gIH0sXG5cbiAgYmVmb3JlRGVzdHJveTogZnVuY3Rpb24gYmVmb3JlRGVzdHJveSAoKSB7XG4gICAgaWYgKCF0aGlzLl9pMThuKSB7IHJldHVybiB9XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuX3N1YnNjcmliaW5nKSB7XG4gICAgICAgIHNlbGYuX2kxOG4udW5zdWJzY3JpYmVEYXRhQ2hhbmdpbmcoc2VsZik7XG4gICAgICAgIGRlbGV0ZSBzZWxmLl9zdWJzY3JpYmluZztcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGYuX2kxOG5XYXRjaGVyKSB7XG4gICAgICAgIHNlbGYuX2kxOG5XYXRjaGVyKCk7XG4gICAgICAgIHNlbGYuX2kxOG4uZGVzdHJveVZNKCk7XG4gICAgICAgIGRlbGV0ZSBzZWxmLl9pMThuV2F0Y2hlcjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGYuX2xvY2FsZVdhdGNoZXIpIHtcbiAgICAgICAgc2VsZi5fbG9jYWxlV2F0Y2hlcigpO1xuICAgICAgICBkZWxldGUgc2VsZi5fbG9jYWxlV2F0Y2hlcjtcbiAgICAgIH1cblxuICAgICAgc2VsZi5faTE4biA9IG51bGw7XG4gICAgfSk7XG4gIH1cbn07XG5cbi8qICAqL1xuXG52YXIgaW50ZXJwb2xhdGlvbkNvbXBvbmVudCA9IHtcbiAgbmFtZTogJ2kxOG4nLFxuICBmdW5jdGlvbmFsOiB0cnVlLFxuICBwcm9wczoge1xuICAgIHRhZzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3NwYW4nXG4gICAgfSxcbiAgICBwYXRoOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgbG9jYWxlOiB7XG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9LFxuICAgIHBsYWNlczoge1xuICAgICAgdHlwZTogW0FycmF5LCBPYmplY3RdXG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCwgcmVmKSB7XG4gICAgdmFyIHByb3BzID0gcmVmLnByb3BzO1xuICAgIHZhciBkYXRhID0gcmVmLmRhdGE7XG4gICAgdmFyIGNoaWxkcmVuID0gcmVmLmNoaWxkcmVuO1xuICAgIHZhciBwYXJlbnQgPSByZWYucGFyZW50O1xuXG4gICAgdmFyIGkxOG4gPSBwYXJlbnQuJGkxOG47XG5cbiAgICBjaGlsZHJlbiA9IChjaGlsZHJlbiB8fCBbXSkuZmlsdGVyKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIGNoaWxkLnRhZyB8fCAoY2hpbGQudGV4dCA9IGNoaWxkLnRleHQudHJpbSgpKVxuICAgIH0pO1xuXG4gICAgaWYgKCFpMThuKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKCdDYW5ub3QgZmluZCBWdWVJMThuIGluc3RhbmNlIScpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNoaWxkcmVuXG4gICAgfVxuXG4gICAgdmFyIHBhdGggPSBwcm9wcy5wYXRoO1xuICAgIHZhciBsb2NhbGUgPSBwcm9wcy5sb2NhbGU7XG5cbiAgICB2YXIgcGFyYW1zID0ge307XG4gICAgdmFyIHBsYWNlcyA9IHByb3BzLnBsYWNlcyB8fCB7fTtcblxuICAgIHZhciBoYXNQbGFjZXMgPSBBcnJheS5pc0FycmF5KHBsYWNlcylcbiAgICAgID8gcGxhY2VzLmxlbmd0aCA+IDBcbiAgICAgIDogT2JqZWN0LmtleXMocGxhY2VzKS5sZW5ndGggPiAwO1xuXG4gICAgdmFyIGV2ZXJ5UGxhY2UgPSBjaGlsZHJlbi5ldmVyeShmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5kYXRhICYmIGNoaWxkLmRhdGEuYXR0cnMpIHtcbiAgICAgICAgdmFyIHBsYWNlID0gY2hpbGQuZGF0YS5hdHRycy5wbGFjZTtcbiAgICAgICAgcmV0dXJuICh0eXBlb2YgcGxhY2UgIT09ICd1bmRlZmluZWQnKSAmJiBwbGFjZSAhPT0gJydcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGhhc1BsYWNlcyAmJiBjaGlsZHJlbi5sZW5ndGggPiAwICYmICFldmVyeVBsYWNlKSB7XG4gICAgICB3YXJuKCdJZiBwbGFjZXMgcHJvcCBpcyBzZXQsIGFsbCBjaGlsZCBlbGVtZW50cyBtdXN0IGhhdmUgcGxhY2UgcHJvcCBzZXQuJyk7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocGxhY2VzKSkge1xuICAgICAgcGxhY2VzLmZvckVhY2goZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICAgIHBhcmFtc1tpXSA9IGVsO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9iamVjdC5rZXlzKHBsYWNlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHBhcmFtc1trZXldID0gcGxhY2VzW2tleV07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCwgaSkge1xuICAgICAgdmFyIGtleSA9IGV2ZXJ5UGxhY2VcbiAgICAgICAgPyAoXCJcIiArIChjaGlsZC5kYXRhLmF0dHJzLnBsYWNlKSlcbiAgICAgICAgOiAoXCJcIiArIGkpO1xuICAgICAgcGFyYW1zW2tleV0gPSBjaGlsZDtcbiAgICB9KTtcblxuICAgIHJldHVybiBoKHByb3BzLnRhZywgZGF0YSwgaTE4bi5pKHBhdGgsIGxvY2FsZSwgcGFyYW1zKSlcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBudW1iZXJDb21wb25lbnQgPSB7XG4gIG5hbWU6ICdpMThuLW4nLFxuICBmdW5jdGlvbmFsOiB0cnVlLFxuICBwcm9wczoge1xuICAgIHRhZzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3NwYW4nXG4gICAgfSxcbiAgICB2YWx1ZToge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIGZvcm1hdDoge1xuICAgICAgdHlwZTogW1N0cmluZywgT2JqZWN0XVxuICAgIH0sXG4gICAgbG9jYWxlOiB7XG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoLCByZWYpIHtcbiAgICB2YXIgcHJvcHMgPSByZWYucHJvcHM7XG4gICAgdmFyIHBhcmVudCA9IHJlZi5wYXJlbnQ7XG4gICAgdmFyIGRhdGEgPSByZWYuZGF0YTtcblxuICAgIHZhciBpMThuID0gcGFyZW50LiRpMThuO1xuXG4gICAgaWYgKCFpMThuKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKCdDYW5ub3QgZmluZCBWdWVJMThuIGluc3RhbmNlIScpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICB2YXIga2V5ID0gbnVsbDtcbiAgICB2YXIgb3B0aW9ucyA9IG51bGw7XG5cbiAgICBpZiAodHlwZW9mIHByb3BzLmZvcm1hdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGtleSA9IHByb3BzLmZvcm1hdDtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHByb3BzLmZvcm1hdCkpIHtcbiAgICAgIGlmIChwcm9wcy5mb3JtYXQua2V5KSB7XG4gICAgICAgIGtleSA9IHByb3BzLmZvcm1hdC5rZXk7XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbHRlciBvdXQgbnVtYmVyIGZvcm1hdCBvcHRpb25zIG9ubHlcbiAgICAgIG9wdGlvbnMgPSBPYmplY3Qua2V5cyhwcm9wcy5mb3JtYXQpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwcm9wKSB7XG4gICAgICAgIHZhciBvYmo7XG5cbiAgICAgICAgaWYgKG51bWJlckZvcm1hdEtleXMuaW5jbHVkZXMocHJvcCkpIHtcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgYWNjLCAoIG9iaiA9IHt9LCBvYmpbcHJvcF0gPSBwcm9wcy5mb3JtYXRbcHJvcF0sIG9iaiApKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2NcbiAgICAgIH0sIG51bGwpO1xuICAgIH1cblxuICAgIHZhciBsb2NhbGUgPSBwcm9wcy5sb2NhbGUgfHwgaTE4bi5sb2NhbGU7XG4gICAgdmFyIHBhcnRzID0gaTE4bi5fbnRwKHByb3BzLnZhbHVlLCBsb2NhbGUsIGtleSwgb3B0aW9ucyk7XG5cbiAgICB2YXIgdmFsdWVzID0gcGFydHMubWFwKGZ1bmN0aW9uIChwYXJ0LCBpbmRleCkge1xuICAgICAgdmFyIG9iajtcblxuICAgICAgdmFyIHNsb3QgPSBkYXRhLnNjb3BlZFNsb3RzICYmIGRhdGEuc2NvcGVkU2xvdHNbcGFydC50eXBlXTtcbiAgICAgIHJldHVybiBzbG90ID8gc2xvdCgoIG9iaiA9IHt9LCBvYmpbcGFydC50eXBlXSA9IHBhcnQudmFsdWUsIG9iai5pbmRleCA9IGluZGV4LCBvYmoucGFydHMgPSBwYXJ0cywgb2JqICkpIDogcGFydC52YWx1ZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGgocHJvcHMudGFnLCB7XG4gICAgICBhdHRyczogZGF0YS5hdHRycyxcbiAgICAgICdjbGFzcyc6IGRhdGFbJ2NsYXNzJ10sXG4gICAgICBzdGF0aWNDbGFzczogZGF0YS5zdGF0aWNDbGFzc1xuICAgIH0sIHZhbHVlcylcbiAgfVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmQgKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICBpZiAoIWFzc2VydChlbCwgdm5vZGUpKSB7IHJldHVybiB9XG5cbiAgdChlbCwgYmluZGluZywgdm5vZGUpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGUgKGVsLCBiaW5kaW5nLCB2bm9kZSwgb2xkVk5vZGUpIHtcbiAgaWYgKCFhc3NlcnQoZWwsIHZub2RlKSkgeyByZXR1cm4gfVxuXG4gIHZhciBpMThuID0gdm5vZGUuY29udGV4dC4kaTE4bjtcbiAgaWYgKGxvY2FsZUVxdWFsKGVsLCB2bm9kZSkgJiZcbiAgICAobG9vc2VFcXVhbChiaW5kaW5nLnZhbHVlLCBiaW5kaW5nLm9sZFZhbHVlKSAmJlxuICAgICBsb29zZUVxdWFsKGVsLl9sb2NhbGVNZXNzYWdlLCBpMThuLmdldExvY2FsZU1lc3NhZ2UoaTE4bi5sb2NhbGUpKSkpIHsgcmV0dXJuIH1cblxuICB0KGVsLCBiaW5kaW5nLCB2bm9kZSk7XG59XG5cbmZ1bmN0aW9uIHVuYmluZCAoZWwsIGJpbmRpbmcsIHZub2RlLCBvbGRWTm9kZSkge1xuICB2YXIgdm0gPSB2bm9kZS5jb250ZXh0O1xuICBpZiAoIXZtKSB7XG4gICAgd2FybignVnVlIGluc3RhbmNlIGRvZXMgbm90IGV4aXN0cyBpbiBWTm9kZSBjb250ZXh0Jyk7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgaTE4biA9IHZub2RlLmNvbnRleHQuJGkxOG4gfHwge307XG4gIGlmICghYmluZGluZy5tb2RpZmllcnMucHJlc2VydmUgJiYgIWkxOG4ucHJlc2VydmVEaXJlY3RpdmVDb250ZW50KSB7XG4gICAgZWwudGV4dENvbnRlbnQgPSAnJztcbiAgfVxuICBlbC5fdnQgPSB1bmRlZmluZWQ7XG4gIGRlbGV0ZSBlbFsnX3Z0J107XG4gIGVsLl9sb2NhbGUgPSB1bmRlZmluZWQ7XG4gIGRlbGV0ZSBlbFsnX2xvY2FsZSddO1xuICBlbC5fbG9jYWxlTWVzc2FnZSA9IHVuZGVmaW5lZDtcbiAgZGVsZXRlIGVsWydfbG9jYWxlTWVzc2FnZSddO1xufVxuXG5mdW5jdGlvbiBhc3NlcnQgKGVsLCB2bm9kZSkge1xuICB2YXIgdm0gPSB2bm9kZS5jb250ZXh0O1xuICBpZiAoIXZtKSB7XG4gICAgd2FybignVnVlIGluc3RhbmNlIGRvZXMgbm90IGV4aXN0cyBpbiBWTm9kZSBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBpZiAoIXZtLiRpMThuKSB7XG4gICAgd2FybignVnVlSTE4biBpbnN0YW5jZSBkb2VzIG5vdCBleGlzdHMgaW4gVnVlIGluc3RhbmNlJyk7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBsb2NhbGVFcXVhbCAoZWwsIHZub2RlKSB7XG4gIHZhciB2bSA9IHZub2RlLmNvbnRleHQ7XG4gIHJldHVybiBlbC5fbG9jYWxlID09PSB2bS4kaTE4bi5sb2NhbGVcbn1cblxuZnVuY3Rpb24gdCAoZWwsIGJpbmRpbmcsIHZub2RlKSB7XG4gIHZhciByZWYkMSwgcmVmJDI7XG5cbiAgdmFyIHZhbHVlID0gYmluZGluZy52YWx1ZTtcblxuICB2YXIgcmVmID0gcGFyc2VWYWx1ZSh2YWx1ZSk7XG4gIHZhciBwYXRoID0gcmVmLnBhdGg7XG4gIHZhciBsb2NhbGUgPSByZWYubG9jYWxlO1xuICB2YXIgYXJncyA9IHJlZi5hcmdzO1xuICB2YXIgY2hvaWNlID0gcmVmLmNob2ljZTtcbiAgaWYgKCFwYXRoICYmICFsb2NhbGUgJiYgIWFyZ3MpIHtcbiAgICB3YXJuKCd2YWx1ZSB0eXBlIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmICghcGF0aCkge1xuICAgIHdhcm4oJ2BwYXRoYCBpcyByZXF1aXJlZCBpbiB2LXQgZGlyZWN0aXZlJyk7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgdm0gPSB2bm9kZS5jb250ZXh0O1xuICBpZiAoY2hvaWNlKSB7XG4gICAgZWwuX3Z0ID0gZWwudGV4dENvbnRlbnQgPSAocmVmJDEgPSB2bS4kaTE4bikudGMuYXBwbHkocmVmJDEsIFsgcGF0aCwgY2hvaWNlIF0uY29uY2F0KCBtYWtlUGFyYW1zKGxvY2FsZSwgYXJncykgKSk7XG4gIH0gZWxzZSB7XG4gICAgZWwuX3Z0ID0gZWwudGV4dENvbnRlbnQgPSAocmVmJDIgPSB2bS4kaTE4bikudC5hcHBseShyZWYkMiwgWyBwYXRoIF0uY29uY2F0KCBtYWtlUGFyYW1zKGxvY2FsZSwgYXJncykgKSk7XG4gIH1cbiAgZWwuX2xvY2FsZSA9IHZtLiRpMThuLmxvY2FsZTtcbiAgZWwuX2xvY2FsZU1lc3NhZ2UgPSB2bS4kaTE4bi5nZXRMb2NhbGVNZXNzYWdlKHZtLiRpMThuLmxvY2FsZSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVmFsdWUgKHZhbHVlKSB7XG4gIHZhciBwYXRoO1xuICB2YXIgbG9jYWxlO1xuICB2YXIgYXJncztcbiAgdmFyIGNob2ljZTtcblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHBhdGggPSB2YWx1ZTtcbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgIHBhdGggPSB2YWx1ZS5wYXRoO1xuICAgIGxvY2FsZSA9IHZhbHVlLmxvY2FsZTtcbiAgICBhcmdzID0gdmFsdWUuYXJncztcbiAgICBjaG9pY2UgPSB2YWx1ZS5jaG9pY2U7XG4gIH1cblxuICByZXR1cm4geyBwYXRoOiBwYXRoLCBsb2NhbGU6IGxvY2FsZSwgYXJnczogYXJncywgY2hvaWNlOiBjaG9pY2UgfVxufVxuXG5mdW5jdGlvbiBtYWtlUGFyYW1zIChsb2NhbGUsIGFyZ3MpIHtcbiAgdmFyIHBhcmFtcyA9IFtdO1xuXG4gIGxvY2FsZSAmJiBwYXJhbXMucHVzaChsb2NhbGUpO1xuICBpZiAoYXJncyAmJiAoQXJyYXkuaXNBcnJheShhcmdzKSB8fCBpc1BsYWluT2JqZWN0KGFyZ3MpKSkge1xuICAgIHBhcmFtcy5wdXNoKGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHBhcmFtc1xufVxuXG52YXIgVnVlO1xuXG5mdW5jdGlvbiBpbnN0YWxsIChfVnVlKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpbnN0YWxsLmluc3RhbGxlZCAmJiBfVnVlID09PSBWdWUpIHtcbiAgICB3YXJuKCdhbHJlYWR5IGluc3RhbGxlZC4nKTtcbiAgICByZXR1cm5cbiAgfVxuICBpbnN0YWxsLmluc3RhbGxlZCA9IHRydWU7XG5cbiAgVnVlID0gX1Z1ZTtcblxuICB2YXIgdmVyc2lvbiA9IChWdWUudmVyc2lvbiAmJiBOdW1iZXIoVnVlLnZlcnNpb24uc3BsaXQoJy4nKVswXSkpIHx8IC0xO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdmVyc2lvbiA8IDIpIHtcbiAgICB3YXJuKChcInZ1ZS1pMThuIChcIiArIChpbnN0YWxsLnZlcnNpb24pICsgXCIpIG5lZWQgdG8gdXNlIFZ1ZSAyLjAgb3IgbGF0ZXIgKFZ1ZTogXCIgKyAoVnVlLnZlcnNpb24pICsgXCIpLlwiKSk7XG4gICAgcmV0dXJuXG4gIH1cblxuICBleHRlbmQoVnVlKTtcbiAgVnVlLm1peGluKG1peGluKTtcbiAgVnVlLmRpcmVjdGl2ZSgndCcsIHsgYmluZDogYmluZCwgdXBkYXRlOiB1cGRhdGUsIHVuYmluZDogdW5iaW5kIH0pO1xuICBWdWUuY29tcG9uZW50KGludGVycG9sYXRpb25Db21wb25lbnQubmFtZSwgaW50ZXJwb2xhdGlvbkNvbXBvbmVudCk7XG4gIFZ1ZS5jb21wb25lbnQobnVtYmVyQ29tcG9uZW50Lm5hbWUsIG51bWJlckNvbXBvbmVudCk7XG5cbiAgLy8gdXNlIHNpbXBsZSBtZXJnZVN0cmF0ZWdpZXMgdG8gcHJldmVudCBpMThuIGluc3RhbmNlIGxvc2UgJ19fcHJvdG9fXydcbiAgdmFyIHN0cmF0cyA9IFZ1ZS5jb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuICBzdHJhdHMuaTE4biA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gICAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcbiAgICAgID8gcGFyZW50VmFsXG4gICAgICA6IGNoaWxkVmFsXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgQmFzZUZvcm1hdHRlciA9IGZ1bmN0aW9uIEJhc2VGb3JtYXR0ZXIgKCkge1xuICB0aGlzLl9jYWNoZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xufTtcblxuQmFzZUZvcm1hdHRlci5wcm90b3R5cGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiBpbnRlcnBvbGF0ZSAobWVzc2FnZSwgdmFsdWVzKSB7XG4gIGlmICghdmFsdWVzKSB7XG4gICAgcmV0dXJuIFttZXNzYWdlXVxuICB9XG4gIHZhciB0b2tlbnMgPSB0aGlzLl9jYWNoZXNbbWVzc2FnZV07XG4gIGlmICghdG9rZW5zKSB7XG4gICAgdG9rZW5zID0gcGFyc2UobWVzc2FnZSk7XG4gICAgdGhpcy5fY2FjaGVzW21lc3NhZ2VdID0gdG9rZW5zO1xuICB9XG4gIHJldHVybiBjb21waWxlKHRva2VucywgdmFsdWVzKVxufTtcblxuXG5cbnZhciBSRV9UT0tFTl9MSVNUX1ZBTFVFID0gL14oPzpcXGQpKy87XG52YXIgUkVfVE9LRU5fTkFNRURfVkFMVUUgPSAvXig/OlxcdykrLztcblxuZnVuY3Rpb24gcGFyc2UgKGZvcm1hdCkge1xuICB2YXIgdG9rZW5zID0gW107XG4gIHZhciBwb3NpdGlvbiA9IDA7XG5cbiAgdmFyIHRleHQgPSAnJztcbiAgd2hpbGUgKHBvc2l0aW9uIDwgZm9ybWF0Lmxlbmd0aCkge1xuICAgIHZhciBjaGFyID0gZm9ybWF0W3Bvc2l0aW9uKytdO1xuICAgIGlmIChjaGFyID09PSAneycpIHtcbiAgICAgIGlmICh0ZXh0KSB7XG4gICAgICAgIHRva2Vucy5wdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogdGV4dCB9KTtcbiAgICAgIH1cblxuICAgICAgdGV4dCA9ICcnO1xuICAgICAgdmFyIHN1YiA9ICcnO1xuICAgICAgY2hhciA9IGZvcm1hdFtwb3NpdGlvbisrXTtcbiAgICAgIHdoaWxlIChjaGFyICE9PSB1bmRlZmluZWQgJiYgY2hhciAhPT0gJ30nKSB7XG4gICAgICAgIHN1YiArPSBjaGFyO1xuICAgICAgICBjaGFyID0gZm9ybWF0W3Bvc2l0aW9uKytdO1xuICAgICAgfVxuICAgICAgdmFyIGlzQ2xvc2VkID0gY2hhciA9PT0gJ30nO1xuXG4gICAgICB2YXIgdHlwZSA9IFJFX1RPS0VOX0xJU1RfVkFMVUUudGVzdChzdWIpXG4gICAgICAgID8gJ2xpc3QnXG4gICAgICAgIDogaXNDbG9zZWQgJiYgUkVfVE9LRU5fTkFNRURfVkFMVUUudGVzdChzdWIpXG4gICAgICAgICAgPyAnbmFtZWQnXG4gICAgICAgICAgOiAndW5rbm93bic7XG4gICAgICB0b2tlbnMucHVzaCh7IHZhbHVlOiBzdWIsIHR5cGU6IHR5cGUgfSk7XG4gICAgfSBlbHNlIGlmIChjaGFyID09PSAnJScpIHtcbiAgICAgIC8vIHdoZW4gZm91bmQgcmFpbHMgaTE4biBzeW50YXgsIHNraXAgdGV4dCBjYXB0dXJlXG4gICAgICBpZiAoZm9ybWF0Wyhwb3NpdGlvbildICE9PSAneycpIHtcbiAgICAgICAgdGV4dCArPSBjaGFyO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0ZXh0ICs9IGNoYXI7XG4gICAgfVxuICB9XG5cbiAgdGV4dCAmJiB0b2tlbnMucHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWU6IHRleHQgfSk7XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG5mdW5jdGlvbiBjb21waWxlICh0b2tlbnMsIHZhbHVlcykge1xuICB2YXIgY29tcGlsZWQgPSBbXTtcbiAgdmFyIGluZGV4ID0gMDtcblxuICB2YXIgbW9kZSA9IEFycmF5LmlzQXJyYXkodmFsdWVzKVxuICAgID8gJ2xpc3QnXG4gICAgOiBpc09iamVjdCh2YWx1ZXMpXG4gICAgICA/ICduYW1lZCdcbiAgICAgIDogJ3Vua25vd24nO1xuICBpZiAobW9kZSA9PT0gJ3Vua25vd24nKSB7IHJldHVybiBjb21waWxlZCB9XG5cbiAgd2hpbGUgKGluZGV4IDwgdG9rZW5zLmxlbmd0aCkge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpbmRleF07XG4gICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICBjYXNlICd0ZXh0JzpcbiAgICAgICAgY29tcGlsZWQucHVzaCh0b2tlbi52YWx1ZSk7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdsaXN0JzpcbiAgICAgICAgY29tcGlsZWQucHVzaCh2YWx1ZXNbcGFyc2VJbnQodG9rZW4udmFsdWUsIDEwKV0pO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnbmFtZWQnOlxuICAgICAgICBpZiAobW9kZSA9PT0gJ25hbWVkJykge1xuICAgICAgICAgIGNvbXBpbGVkLnB1c2goKHZhbHVlcylbdG9rZW4udmFsdWVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybigoXCJUeXBlIG9mIHRva2VuICdcIiArICh0b2tlbi50eXBlKSArIFwiJyBhbmQgZm9ybWF0IG9mIHZhbHVlICdcIiArIG1vZGUgKyBcIicgZG9uJ3QgbWF0Y2ghXCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3Vua25vd24nOlxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm4oXCJEZXRlY3QgJ3Vua25vd24nIHR5cGUgb2YgdG9rZW4hXCIpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIGluZGV4Kys7XG4gIH1cblxuICByZXR1cm4gY29tcGlsZWRcbn1cblxuLyogICovXG5cbi8qKlxuICogIFBhdGggcGFyc2VyXG4gKiAgLSBJbnNwaXJlZDpcbiAqICAgIFZ1ZS5qcyBQYXRoIHBhcnNlclxuICovXG5cbi8vIGFjdGlvbnNcbnZhciBBUFBFTkQgPSAwO1xudmFyIFBVU0ggPSAxO1xudmFyIElOQ19TVUJfUEFUSF9ERVBUSCA9IDI7XG52YXIgUFVTSF9TVUJfUEFUSCA9IDM7XG5cbi8vIHN0YXRlc1xudmFyIEJFRk9SRV9QQVRIID0gMDtcbnZhciBJTl9QQVRIID0gMTtcbnZhciBCRUZPUkVfSURFTlQgPSAyO1xudmFyIElOX0lERU5UID0gMztcbnZhciBJTl9TVUJfUEFUSCA9IDQ7XG52YXIgSU5fU0lOR0xFX1FVT1RFID0gNTtcbnZhciBJTl9ET1VCTEVfUVVPVEUgPSA2O1xudmFyIEFGVEVSX1BBVEggPSA3O1xudmFyIEVSUk9SID0gODtcblxudmFyIHBhdGhTdGF0ZU1hY2hpbmUgPSBbXTtcblxucGF0aFN0YXRlTWFjaGluZVtCRUZPUkVfUEFUSF0gPSB7XG4gICd3cyc6IFtCRUZPUkVfUEFUSF0sXG4gICdpZGVudCc6IFtJTl9JREVOVCwgQVBQRU5EXSxcbiAgJ1snOiBbSU5fU1VCX1BBVEhdLFxuICAnZW9mJzogW0FGVEVSX1BBVEhdXG59O1xuXG5wYXRoU3RhdGVNYWNoaW5lW0lOX1BBVEhdID0ge1xuICAnd3MnOiBbSU5fUEFUSF0sXG4gICcuJzogW0JFRk9SRV9JREVOVF0sXG4gICdbJzogW0lOX1NVQl9QQVRIXSxcbiAgJ2VvZic6IFtBRlRFUl9QQVRIXVxufTtcblxucGF0aFN0YXRlTWFjaGluZVtCRUZPUkVfSURFTlRdID0ge1xuICAnd3MnOiBbQkVGT1JFX0lERU5UXSxcbiAgJ2lkZW50JzogW0lOX0lERU5ULCBBUFBFTkRdLFxuICAnMCc6IFtJTl9JREVOVCwgQVBQRU5EXSxcbiAgJ251bWJlcic6IFtJTl9JREVOVCwgQVBQRU5EXVxufTtcblxucGF0aFN0YXRlTWFjaGluZVtJTl9JREVOVF0gPSB7XG4gICdpZGVudCc6IFtJTl9JREVOVCwgQVBQRU5EXSxcbiAgJzAnOiBbSU5fSURFTlQsIEFQUEVORF0sXG4gICdudW1iZXInOiBbSU5fSURFTlQsIEFQUEVORF0sXG4gICd3cyc6IFtJTl9QQVRILCBQVVNIXSxcbiAgJy4nOiBbQkVGT1JFX0lERU5ULCBQVVNIXSxcbiAgJ1snOiBbSU5fU1VCX1BBVEgsIFBVU0hdLFxuICAnZW9mJzogW0FGVEVSX1BBVEgsIFBVU0hdXG59O1xuXG5wYXRoU3RhdGVNYWNoaW5lW0lOX1NVQl9QQVRIXSA9IHtcbiAgXCInXCI6IFtJTl9TSU5HTEVfUVVPVEUsIEFQUEVORF0sXG4gICdcIic6IFtJTl9ET1VCTEVfUVVPVEUsIEFQUEVORF0sXG4gICdbJzogW0lOX1NVQl9QQVRILCBJTkNfU1VCX1BBVEhfREVQVEhdLFxuICAnXSc6IFtJTl9QQVRILCBQVVNIX1NVQl9QQVRIXSxcbiAgJ2VvZic6IEVSUk9SLFxuICAnZWxzZSc6IFtJTl9TVUJfUEFUSCwgQVBQRU5EXVxufTtcblxucGF0aFN0YXRlTWFjaGluZVtJTl9TSU5HTEVfUVVPVEVdID0ge1xuICBcIidcIjogW0lOX1NVQl9QQVRILCBBUFBFTkRdLFxuICAnZW9mJzogRVJST1IsXG4gICdlbHNlJzogW0lOX1NJTkdMRV9RVU9URSwgQVBQRU5EXVxufTtcblxucGF0aFN0YXRlTWFjaGluZVtJTl9ET1VCTEVfUVVPVEVdID0ge1xuICAnXCInOiBbSU5fU1VCX1BBVEgsIEFQUEVORF0sXG4gICdlb2YnOiBFUlJPUixcbiAgJ2Vsc2UnOiBbSU5fRE9VQkxFX1FVT1RFLCBBUFBFTkRdXG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGFuIGV4cHJlc3Npb24gaXMgYSBsaXRlcmFsIHZhbHVlLlxuICovXG5cbnZhciBsaXRlcmFsVmFsdWVSRSA9IC9eXFxzPyg/OnRydWV8ZmFsc2V8LT9bXFxkLl0rfCdbXiddKid8XCJbXlwiXSpcIilcXHM/JC87XG5mdW5jdGlvbiBpc0xpdGVyYWwgKGV4cCkge1xuICByZXR1cm4gbGl0ZXJhbFZhbHVlUkUudGVzdChleHApXG59XG5cbi8qKlxuICogU3RyaXAgcXVvdGVzIGZyb20gYSBzdHJpbmdcbiAqL1xuXG5mdW5jdGlvbiBzdHJpcFF1b3RlcyAoc3RyKSB7XG4gIHZhciBhID0gc3RyLmNoYXJDb2RlQXQoMCk7XG4gIHZhciBiID0gc3RyLmNoYXJDb2RlQXQoc3RyLmxlbmd0aCAtIDEpO1xuICByZXR1cm4gYSA9PT0gYiAmJiAoYSA9PT0gMHgyMiB8fCBhID09PSAweDI3KVxuICAgID8gc3RyLnNsaWNlKDEsIC0xKVxuICAgIDogc3RyXG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIHRoZSB0eXBlIG9mIGEgY2hhcmFjdGVyIGluIGEga2V5cGF0aC5cbiAqL1xuXG5mdW5jdGlvbiBnZXRQYXRoQ2hhclR5cGUgKGNoKSB7XG4gIGlmIChjaCA9PT0gdW5kZWZpbmVkIHx8IGNoID09PSBudWxsKSB7IHJldHVybiAnZW9mJyB9XG5cbiAgdmFyIGNvZGUgPSBjaC5jaGFyQ29kZUF0KDApO1xuXG4gIHN3aXRjaCAoY29kZSkge1xuICAgIGNhc2UgMHg1QjogLy8gW1xuICAgIGNhc2UgMHg1RDogLy8gXVxuICAgIGNhc2UgMHgyRTogLy8gLlxuICAgIGNhc2UgMHgyMjogLy8gXCJcbiAgICBjYXNlIDB4Mjc6IC8vICdcbiAgICAgIHJldHVybiBjaFxuXG4gICAgY2FzZSAweDVGOiAvLyBfXG4gICAgY2FzZSAweDI0OiAvLyAkXG4gICAgY2FzZSAweDJEOiAvLyAtXG4gICAgICByZXR1cm4gJ2lkZW50J1xuXG4gICAgY2FzZSAweDA5OiAvLyBUYWJcbiAgICBjYXNlIDB4MEE6IC8vIE5ld2xpbmVcbiAgICBjYXNlIDB4MEQ6IC8vIFJldHVyblxuICAgIGNhc2UgMHhBMDogIC8vIE5vLWJyZWFrIHNwYWNlXG4gICAgY2FzZSAweEZFRkY6ICAvLyBCeXRlIE9yZGVyIE1hcmtcbiAgICBjYXNlIDB4MjAyODogIC8vIExpbmUgU2VwYXJhdG9yXG4gICAgY2FzZSAweDIwMjk6ICAvLyBQYXJhZ3JhcGggU2VwYXJhdG9yXG4gICAgICByZXR1cm4gJ3dzJ1xuICB9XG5cbiAgcmV0dXJuICdpZGVudCdcbn1cblxuLyoqXG4gKiBGb3JtYXQgYSBzdWJQYXRoLCByZXR1cm4gaXRzIHBsYWluIGZvcm0gaWYgaXQgaXNcbiAqIGEgbGl0ZXJhbCBzdHJpbmcgb3IgbnVtYmVyLiBPdGhlcndpc2UgcHJlcGVuZCB0aGVcbiAqIGR5bmFtaWMgaW5kaWNhdG9yICgqKS5cbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRTdWJQYXRoIChwYXRoKSB7XG4gIHZhciB0cmltbWVkID0gcGF0aC50cmltKCk7XG4gIC8vIGludmFsaWQgbGVhZGluZyAwXG4gIGlmIChwYXRoLmNoYXJBdCgwKSA9PT0gJzAnICYmIGlzTmFOKHBhdGgpKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgcmV0dXJuIGlzTGl0ZXJhbCh0cmltbWVkKSA/IHN0cmlwUXVvdGVzKHRyaW1tZWQpIDogJyonICsgdHJpbW1lZFxufVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIHBhdGggaW50byBhbiBhcnJheSBvZiBzZWdtZW50c1xuICovXG5cbmZ1bmN0aW9uIHBhcnNlJDEgKHBhdGgpIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBtb2RlID0gQkVGT1JFX1BBVEg7XG4gIHZhciBzdWJQYXRoRGVwdGggPSAwO1xuICB2YXIgYztcbiAgdmFyIGtleTtcbiAgdmFyIG5ld0NoYXI7XG4gIHZhciB0eXBlO1xuICB2YXIgdHJhbnNpdGlvbjtcbiAgdmFyIGFjdGlvbjtcbiAgdmFyIHR5cGVNYXA7XG4gIHZhciBhY3Rpb25zID0gW107XG5cbiAgYWN0aW9uc1tQVVNIXSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoa2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAga2V5ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcblxuICBhY3Rpb25zW0FQUEVORF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBrZXkgPSBuZXdDaGFyO1xuICAgIH0gZWxzZSB7XG4gICAgICBrZXkgKz0gbmV3Q2hhcjtcbiAgICB9XG4gIH07XG5cbiAgYWN0aW9uc1tJTkNfU1VCX1BBVEhfREVQVEhdID0gZnVuY3Rpb24gKCkge1xuICAgIGFjdGlvbnNbQVBQRU5EXSgpO1xuICAgIHN1YlBhdGhEZXB0aCsrO1xuICB9O1xuXG4gIGFjdGlvbnNbUFVTSF9TVUJfUEFUSF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHN1YlBhdGhEZXB0aCA+IDApIHtcbiAgICAgIHN1YlBhdGhEZXB0aC0tO1xuICAgICAgbW9kZSA9IElOX1NVQl9QQVRIO1xuICAgICAgYWN0aW9uc1tBUFBFTkRdKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1YlBhdGhEZXB0aCA9IDA7XG4gICAgICBrZXkgPSBmb3JtYXRTdWJQYXRoKGtleSk7XG4gICAgICBpZiAoa2V5ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGlvbnNbUFVTSF0oKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gbWF5YmVVbmVzY2FwZVF1b3RlICgpIHtcbiAgICB2YXIgbmV4dENoYXIgPSBwYXRoW2luZGV4ICsgMV07XG4gICAgaWYgKChtb2RlID09PSBJTl9TSU5HTEVfUVVPVEUgJiYgbmV4dENoYXIgPT09IFwiJ1wiKSB8fFxuICAgICAgKG1vZGUgPT09IElOX0RPVUJMRV9RVU9URSAmJiBuZXh0Q2hhciA9PT0gJ1wiJykpIHtcbiAgICAgIGluZGV4Kys7XG4gICAgICBuZXdDaGFyID0gJ1xcXFwnICsgbmV4dENoYXI7XG4gICAgICBhY3Rpb25zW0FQUEVORF0oKTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgd2hpbGUgKG1vZGUgIT09IG51bGwpIHtcbiAgICBpbmRleCsrO1xuICAgIGMgPSBwYXRoW2luZGV4XTtcblxuICAgIGlmIChjID09PSAnXFxcXCcgJiYgbWF5YmVVbmVzY2FwZVF1b3RlKCkpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdHlwZSA9IGdldFBhdGhDaGFyVHlwZShjKTtcbiAgICB0eXBlTWFwID0gcGF0aFN0YXRlTWFjaGluZVttb2RlXTtcbiAgICB0cmFuc2l0aW9uID0gdHlwZU1hcFt0eXBlXSB8fCB0eXBlTWFwWydlbHNlJ10gfHwgRVJST1I7XG5cbiAgICBpZiAodHJhbnNpdGlvbiA9PT0gRVJST1IpIHtcbiAgICAgIHJldHVybiAvLyBwYXJzZSBlcnJvclxuICAgIH1cblxuICAgIG1vZGUgPSB0cmFuc2l0aW9uWzBdO1xuICAgIGFjdGlvbiA9IGFjdGlvbnNbdHJhbnNpdGlvblsxXV07XG4gICAgaWYgKGFjdGlvbikge1xuICAgICAgbmV3Q2hhciA9IHRyYW5zaXRpb25bMl07XG4gICAgICBuZXdDaGFyID0gbmV3Q2hhciA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gY1xuICAgICAgICA6IG5ld0NoYXI7XG4gICAgICBpZiAoYWN0aW9uKCkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb2RlID09PSBBRlRFUl9QQVRIKSB7XG4gICAgICByZXR1cm4ga2V5c1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cbnZhciBJMThuUGF0aCA9IGZ1bmN0aW9uIEkxOG5QYXRoICgpIHtcbiAgdGhpcy5fY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xufTtcblxuLyoqXG4gKiBFeHRlcm5hbCBwYXJzZSB0aGF0IGNoZWNrIGZvciBhIGNhY2hlIGhpdCBmaXJzdFxuICovXG5JMThuUGF0aC5wcm90b3R5cGUucGFyc2VQYXRoID0gZnVuY3Rpb24gcGFyc2VQYXRoIChwYXRoKSB7XG4gIHZhciBoaXQgPSB0aGlzLl9jYWNoZVtwYXRoXTtcbiAgaWYgKCFoaXQpIHtcbiAgICBoaXQgPSBwYXJzZSQxKHBhdGgpO1xuICAgIGlmIChoaXQpIHtcbiAgICAgIHRoaXMuX2NhY2hlW3BhdGhdID0gaGl0O1xuICAgIH1cbiAgfVxuICByZXR1cm4gaGl0IHx8IFtdXG59O1xuXG4vKipcbiAqIEdldCBwYXRoIHZhbHVlIGZyb20gcGF0aCBzdHJpbmdcbiAqL1xuSTE4blBhdGgucHJvdG90eXBlLmdldFBhdGhWYWx1ZSA9IGZ1bmN0aW9uIGdldFBhdGhWYWx1ZSAob2JqLCBwYXRoKSB7XG4gIGlmICghaXNPYmplY3Qob2JqKSkgeyByZXR1cm4gbnVsbCB9XG5cbiAgdmFyIHBhdGhzID0gdGhpcy5wYXJzZVBhdGgocGF0aCk7XG4gIGlmIChwYXRocy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbnVsbFxuICB9IGVsc2Uge1xuICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGg7XG4gICAgdmFyIGxhc3QgPSBvYmo7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBsYXN0W3BhdGhzW2ldXTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG4gICAgICBsYXN0ID0gdmFsdWU7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxhc3RcbiAgfVxufTtcblxuLyogICovXG5cblxuXG52YXIgaHRtbFRhZ01hdGNoZXIgPSAvPFxcLz9bXFx3XFxzPVwiLy4nOjsjLVxcL10rPi87XG52YXIgbGlua0tleU1hdGNoZXIgPSAvKD86QCg/OlxcLlthLXpdKyk/Oig/OltcXHdcXC1ffC5dK3xcXChbXFx3XFwtX3wuXStcXCkpKS9nO1xudmFyIGxpbmtLZXlQcmVmaXhNYXRjaGVyID0gL15AKD86XFwuKFthLXpdKykpPzovO1xudmFyIGJyYWNrZXRzTWF0Y2hlciA9IC9bKCldL2c7XG52YXIgZm9ybWF0dGVycyA9IHtcbiAgJ3VwcGVyJzogZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gc3RyLnRvTG9jYWxlVXBwZXJDYXNlKCk7IH0sXG4gICdsb3dlcic6IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0ci50b0xvY2FsZUxvd2VyQ2FzZSgpOyB9XG59O1xuXG52YXIgZGVmYXVsdEZvcm1hdHRlciA9IG5ldyBCYXNlRm9ybWF0dGVyKCk7XG5cbnZhciBWdWVJMThuID0gZnVuY3Rpb24gVnVlSTE4biAob3B0aW9ucykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcbiAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgLy8gQXV0byBpbnN0YWxsIGlmIGl0IGlzIG5vdCBkb25lIHlldCBhbmQgYHdpbmRvd2AgaGFzIGBWdWVgLlxuICAvLyBUbyBhbGxvdyB1c2VycyB0byBhdm9pZCBhdXRvLWluc3RhbGxhdGlvbiBpbiBzb21lIGNhc2VzLFxuICAvLyB0aGlzIGNvZGUgc2hvdWxkIGJlIHBsYWNlZCBoZXJlLiBTZWUgIzI5MFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFWdWUgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LlZ1ZSkge1xuICAgIGluc3RhbGwod2luZG93LlZ1ZSk7XG4gIH1cblxuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUgfHwgJ2VuLVVTJztcbiAgdmFyIGZhbGxiYWNrTG9jYWxlID0gb3B0aW9ucy5mYWxsYmFja0xvY2FsZSB8fCAnZW4tVVMnO1xuICB2YXIgbWVzc2FnZXMgPSBvcHRpb25zLm1lc3NhZ2VzIHx8IHt9O1xuICB2YXIgZGF0ZVRpbWVGb3JtYXRzID0gb3B0aW9ucy5kYXRlVGltZUZvcm1hdHMgfHwge307XG4gIHZhciBudW1iZXJGb3JtYXRzID0gb3B0aW9ucy5udW1iZXJGb3JtYXRzIHx8IHt9O1xuXG4gIHRoaXMuX3ZtID0gbnVsbDtcbiAgdGhpcy5fZm9ybWF0dGVyID0gb3B0aW9ucy5mb3JtYXR0ZXIgfHwgZGVmYXVsdEZvcm1hdHRlcjtcbiAgdGhpcy5fbWlzc2luZyA9IG9wdGlvbnMubWlzc2luZyB8fCBudWxsO1xuICB0aGlzLl9yb290ID0gb3B0aW9ucy5yb290IHx8IG51bGw7XG4gIHRoaXMuX3N5bmMgPSBvcHRpb25zLnN5bmMgPT09IHVuZGVmaW5lZCA/IHRydWUgOiAhIW9wdGlvbnMuc3luYztcbiAgdGhpcy5fZmFsbGJhY2tSb290ID0gb3B0aW9ucy5mYWxsYmFja1Jvb3QgPT09IHVuZGVmaW5lZFxuICAgID8gdHJ1ZVxuICAgIDogISFvcHRpb25zLmZhbGxiYWNrUm9vdDtcbiAgdGhpcy5fc2lsZW50VHJhbnNsYXRpb25XYXJuID0gb3B0aW9ucy5zaWxlbnRUcmFuc2xhdGlvbldhcm4gPT09IHVuZGVmaW5lZFxuICAgID8gZmFsc2VcbiAgICA6ICEhb3B0aW9ucy5zaWxlbnRUcmFuc2xhdGlvbldhcm47XG4gIHRoaXMuX3NpbGVudEZhbGxiYWNrV2FybiA9IG9wdGlvbnMuc2lsZW50RmFsbGJhY2tXYXJuID09PSB1bmRlZmluZWRcbiAgICA/IGZhbHNlXG4gICAgOiAhIW9wdGlvbnMuc2lsZW50RmFsbGJhY2tXYXJuO1xuICB0aGlzLl9kYXRlVGltZUZvcm1hdHRlcnMgPSB7fTtcbiAgdGhpcy5fbnVtYmVyRm9ybWF0dGVycyA9IHt9O1xuICB0aGlzLl9wYXRoID0gbmV3IEkxOG5QYXRoKCk7XG4gIHRoaXMuX2RhdGFMaXN0ZW5lcnMgPSBbXTtcbiAgdGhpcy5fcHJlc2VydmVEaXJlY3RpdmVDb250ZW50ID0gb3B0aW9ucy5wcmVzZXJ2ZURpcmVjdGl2ZUNvbnRlbnQgPT09IHVuZGVmaW5lZFxuICAgID8gZmFsc2VcbiAgICA6ICEhb3B0aW9ucy5wcmVzZXJ2ZURpcmVjdGl2ZUNvbnRlbnQ7XG4gIHRoaXMucGx1cmFsaXphdGlvblJ1bGVzID0gb3B0aW9ucy5wbHVyYWxpemF0aW9uUnVsZXMgfHwge307XG4gIHRoaXMuX3dhcm5IdG1sSW5NZXNzYWdlID0gb3B0aW9ucy53YXJuSHRtbEluTWVzc2FnZSB8fCAnb2ZmJztcblxuICB0aGlzLl9leGlzdCA9IGZ1bmN0aW9uIChtZXNzYWdlLCBrZXkpIHtcbiAgICBpZiAoIW1lc3NhZ2UgfHwgIWtleSkgeyByZXR1cm4gZmFsc2UgfVxuICAgIGlmICghaXNOdWxsKHRoaXMkMS5fcGF0aC5nZXRQYXRoVmFsdWUobWVzc2FnZSwga2V5KSkpIHsgcmV0dXJuIHRydWUgfVxuICAgIC8vIGZhbGxiYWNrIGZvciBmbGF0IGtleVxuICAgIGlmIChtZXNzYWdlW2tleV0pIHsgcmV0dXJuIHRydWUgfVxuICAgIHJldHVybiBmYWxzZVxuICB9O1xuXG4gIGlmICh0aGlzLl93YXJuSHRtbEluTWVzc2FnZSA9PT0gJ3dhcm4nIHx8IHRoaXMuX3dhcm5IdG1sSW5NZXNzYWdlID09PSAnZXJyb3InKSB7XG4gICAgT2JqZWN0LmtleXMobWVzc2FnZXMpLmZvckVhY2goZnVuY3Rpb24gKGxvY2FsZSkge1xuICAgICAgdGhpcyQxLl9jaGVja0xvY2FsZU1lc3NhZ2UobG9jYWxlLCB0aGlzJDEuX3dhcm5IdG1sSW5NZXNzYWdlLCBtZXNzYWdlc1tsb2NhbGVdKTtcbiAgICB9KTtcbiAgfVxuXG4gIHRoaXMuX2luaXRWTSh7XG4gICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgZmFsbGJhY2tMb2NhbGU6IGZhbGxiYWNrTG9jYWxlLFxuICAgIG1lc3NhZ2VzOiBtZXNzYWdlcyxcbiAgICBkYXRlVGltZUZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBudW1iZXJGb3JtYXRzOiBudW1iZXJGb3JtYXRzXG4gIH0pO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgdm06IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sbWVzc2FnZXM6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sZGF0ZVRpbWVGb3JtYXRzOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LG51bWJlckZvcm1hdHM6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sYXZhaWxhYmxlTG9jYWxlczogeyBjb25maWd1cmFibGU6IHRydWUgfSxsb2NhbGU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sZmFsbGJhY2tMb2NhbGU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sbWlzc2luZzogeyBjb25maWd1cmFibGU6IHRydWUgfSxmb3JtYXR0ZXI6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sc2lsZW50VHJhbnNsYXRpb25XYXJuOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHNpbGVudEZhbGxiYWNrV2FybjogeyBjb25maWd1cmFibGU6IHRydWUgfSxwcmVzZXJ2ZURpcmVjdGl2ZUNvbnRlbnQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sd2Fybkh0bWxJbk1lc3NhZ2U6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX2NoZWNrTG9jYWxlTWVzc2FnZSA9IGZ1bmN0aW9uIF9jaGVja0xvY2FsZU1lc3NhZ2UgKGxvY2FsZSwgbGV2ZWwsIG1lc3NhZ2UpIHtcbiAgdmFyIHBhdGhzID0gW107XG5cbiAgdmFyIGZuID0gZnVuY3Rpb24gKGxldmVsLCBsb2NhbGUsIG1lc3NhZ2UsIHBhdGhzKSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QobWVzc2FnZSkpIHtcbiAgICAgIE9iamVjdC5rZXlzKG1lc3NhZ2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdmFsID0gbWVzc2FnZVtrZXldO1xuICAgICAgICBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICAgICAgcGF0aHMucHVzaChrZXkpO1xuICAgICAgICAgIHBhdGhzLnB1c2goJy4nKTtcbiAgICAgICAgICBmbihsZXZlbCwgbG9jYWxlLCB2YWwsIHBhdGhzKTtcbiAgICAgICAgICBwYXRocy5wb3AoKTtcbiAgICAgICAgICBwYXRocy5wb3AoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXRocy5wdXNoKGtleSk7XG4gICAgICAgICAgZm4obGV2ZWwsIGxvY2FsZSwgdmFsLCBwYXRocyk7XG4gICAgICAgICAgcGF0aHMucG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShtZXNzYWdlKSkge1xuICAgICAgbWVzc2FnZS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChpdGVtKSkge1xuICAgICAgICAgIHBhdGhzLnB1c2goKFwiW1wiICsgaW5kZXggKyBcIl1cIikpO1xuICAgICAgICAgIHBhdGhzLnB1c2goJy4nKTtcbiAgICAgICAgICBmbihsZXZlbCwgbG9jYWxlLCBpdGVtLCBwYXRocyk7XG4gICAgICAgICAgcGF0aHMucG9wKCk7XG4gICAgICAgICAgcGF0aHMucG9wKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGF0aHMucHVzaCgoXCJbXCIgKyBpbmRleCArIFwiXVwiKSk7XG4gICAgICAgICAgZm4obGV2ZWwsIGxvY2FsZSwgaXRlbSwgcGF0aHMpO1xuICAgICAgICAgIHBhdGhzLnBvcCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHJldCA9IGh0bWxUYWdNYXRjaGVyLnRlc3QobWVzc2FnZSk7XG4gICAgICBpZiAocmV0KSB7XG4gICAgICAgIHZhciBtc2cgPSBcIkRldGVjdGVkIEhUTUwgaW4gbWVzc2FnZSAnXCIgKyBtZXNzYWdlICsgXCInIG9mIGtleXBhdGggJ1wiICsgKHBhdGhzLmpvaW4oJycpKSArIFwiJyBhdCAnXCIgKyBsb2NhbGUgKyBcIicuIENvbnNpZGVyIGNvbXBvbmVudCBpbnRlcnBvbGF0aW9uIHdpdGggJzxpMThuPicgdG8gYXZvaWQgWFNTLiBTZWUgaHR0cHM6Ly9iaXQubHkvMlpxSnprcFwiO1xuICAgICAgICBpZiAobGV2ZWwgPT09ICd3YXJuJykge1xuICAgICAgICAgIHdhcm4obXNnKTtcbiAgICAgICAgfSBlbHNlIGlmIChsZXZlbCA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgIGVycm9yKG1zZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZm4obGV2ZWwsIGxvY2FsZSwgbWVzc2FnZSwgcGF0aHMpO1xufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX2luaXRWTSA9IGZ1bmN0aW9uIF9pbml0Vk0gKGRhdGEpIHtcbiAgdmFyIHNpbGVudCA9IFZ1ZS5jb25maWcuc2lsZW50O1xuICBWdWUuY29uZmlnLnNpbGVudCA9IHRydWU7XG4gIHRoaXMuX3ZtID0gbmV3IFZ1ZSh7IGRhdGE6IGRhdGEgfSk7XG4gIFZ1ZS5jb25maWcuc2lsZW50ID0gc2lsZW50O1xufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuZGVzdHJveVZNID0gZnVuY3Rpb24gZGVzdHJveVZNICgpIHtcbiAgdGhpcy5fdm0uJGRlc3Ryb3koKTtcbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLnN1YnNjcmliZURhdGFDaGFuZ2luZyA9IGZ1bmN0aW9uIHN1YnNjcmliZURhdGFDaGFuZ2luZyAodm0pIHtcbiAgdGhpcy5fZGF0YUxpc3RlbmVycy5wdXNoKHZtKTtcbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLnVuc3Vic2NyaWJlRGF0YUNoYW5naW5nID0gZnVuY3Rpb24gdW5zdWJzY3JpYmVEYXRhQ2hhbmdpbmcgKHZtKSB7XG4gIHJlbW92ZSh0aGlzLl9kYXRhTGlzdGVuZXJzLCB2bSk7XG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS53YXRjaEkxOG5EYXRhID0gZnVuY3Rpb24gd2F0Y2hJMThuRGF0YSAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmV0dXJuIHRoaXMuX3ZtLiR3YXRjaCgnJGRhdGEnLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGkgPSBzZWxmLl9kYXRhTGlzdGVuZXJzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBWdWUubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLl9kYXRhTGlzdGVuZXJzW2ldICYmIHNlbGYuX2RhdGFMaXN0ZW5lcnNbaV0uJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHsgZGVlcDogdHJ1ZSB9KVxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUud2F0Y2hMb2NhbGUgPSBmdW5jdGlvbiB3YXRjaExvY2FsZSAoKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIXRoaXMuX3N5bmMgfHwgIXRoaXMuX3Jvb3QpIHsgcmV0dXJuIG51bGwgfVxuICB2YXIgdGFyZ2V0ID0gdGhpcy5fdm07XG4gIHJldHVybiB0aGlzLl9yb290LiRpMThuLnZtLiR3YXRjaCgnbG9jYWxlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgIHRhcmdldC4kc2V0KHRhcmdldCwgJ2xvY2FsZScsIHZhbCk7XG4gICAgdGFyZ2V0LiRmb3JjZVVwZGF0ZSgpO1xuICB9LCB7IGltbWVkaWF0ZTogdHJ1ZSB9KVxufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLnZtLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3ZtIH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5tZXNzYWdlcy5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBsb29zZUNsb25lKHRoaXMuX2dldE1lc3NhZ2VzKCkpIH07XG5wcm90b3R5cGVBY2Nlc3NvcnMuZGF0ZVRpbWVGb3JtYXRzLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxvb3NlQ2xvbmUodGhpcy5fZ2V0RGF0ZVRpbWVGb3JtYXRzKCkpIH07XG5wcm90b3R5cGVBY2Nlc3NvcnMubnVtYmVyRm9ybWF0cy5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBsb29zZUNsb25lKHRoaXMuX2dldE51bWJlckZvcm1hdHMoKSkgfTtcbnByb3RvdHlwZUFjY2Vzc29ycy5hdmFpbGFibGVMb2NhbGVzLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMubWVzc2FnZXMpLnNvcnQoKSB9O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMubG9jYWxlLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3ZtLmxvY2FsZSB9O1xucHJvdG90eXBlQWNjZXNzb3JzLmxvY2FsZS5zZXQgPSBmdW5jdGlvbiAobG9jYWxlKSB7XG4gIHRoaXMuX3ZtLiRzZXQodGhpcy5fdm0sICdsb2NhbGUnLCBsb2NhbGUpO1xufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLmZhbGxiYWNrTG9jYWxlLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3ZtLmZhbGxiYWNrTG9jYWxlIH07XG5wcm90b3R5cGVBY2Nlc3NvcnMuZmFsbGJhY2tMb2NhbGUuc2V0ID0gZnVuY3Rpb24gKGxvY2FsZSkge1xuICB0aGlzLl92bS4kc2V0KHRoaXMuX3ZtLCAnZmFsbGJhY2tMb2NhbGUnLCBsb2NhbGUpO1xufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLm1pc3NpbmcuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fbWlzc2luZyB9O1xucHJvdG90eXBlQWNjZXNzb3JzLm1pc3Npbmcuc2V0ID0gZnVuY3Rpb24gKGhhbmRsZXIpIHsgdGhpcy5fbWlzc2luZyA9IGhhbmRsZXI7IH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5mb3JtYXR0ZXIuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZm9ybWF0dGVyIH07XG5wcm90b3R5cGVBY2Nlc3NvcnMuZm9ybWF0dGVyLnNldCA9IGZ1bmN0aW9uIChmb3JtYXR0ZXIpIHsgdGhpcy5fZm9ybWF0dGVyID0gZm9ybWF0dGVyOyB9O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMuc2lsZW50VHJhbnNsYXRpb25XYXJuLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3NpbGVudFRyYW5zbGF0aW9uV2FybiB9O1xucHJvdG90eXBlQWNjZXNzb3JzLnNpbGVudFRyYW5zbGF0aW9uV2Fybi5zZXQgPSBmdW5jdGlvbiAoc2lsZW50KSB7IHRoaXMuX3NpbGVudFRyYW5zbGF0aW9uV2FybiA9IHNpbGVudDsgfTtcblxucHJvdG90eXBlQWNjZXNzb3JzLnNpbGVudEZhbGxiYWNrV2Fybi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9zaWxlbnRGYWxsYmFja1dhcm4gfTtcbnByb3RvdHlwZUFjY2Vzc29ycy5zaWxlbnRGYWxsYmFja1dhcm4uc2V0ID0gZnVuY3Rpb24gKHNpbGVudCkgeyB0aGlzLl9zaWxlbnRGYWxsYmFja1dhcm4gPSBzaWxlbnQ7IH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5wcmVzZXJ2ZURpcmVjdGl2ZUNvbnRlbnQuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcHJlc2VydmVEaXJlY3RpdmVDb250ZW50IH07XG5wcm90b3R5cGVBY2Nlc3NvcnMucHJlc2VydmVEaXJlY3RpdmVDb250ZW50LnNldCA9IGZ1bmN0aW9uIChwcmVzZXJ2ZSkgeyB0aGlzLl9wcmVzZXJ2ZURpcmVjdGl2ZUNvbnRlbnQgPSBwcmVzZXJ2ZTsgfTtcblxucHJvdG90eXBlQWNjZXNzb3JzLndhcm5IdG1sSW5NZXNzYWdlLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3dhcm5IdG1sSW5NZXNzYWdlIH07XG5wcm90b3R5cGVBY2Nlc3NvcnMud2Fybkh0bWxJbk1lc3NhZ2Uuc2V0ID0gZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIG9yZ0xldmVsID0gdGhpcy5fd2Fybkh0bWxJbk1lc3NhZ2U7XG4gIHRoaXMuX3dhcm5IdG1sSW5NZXNzYWdlID0gbGV2ZWw7XG4gIGlmIChvcmdMZXZlbCAhPT0gbGV2ZWwgJiYgKGxldmVsID09PSAnd2FybicgfHwgbGV2ZWwgPT09ICdlcnJvcicpKSB7XG4gICAgdmFyIG1lc3NhZ2VzID0gdGhpcy5fZ2V0TWVzc2FnZXMoKTtcbiAgICBPYmplY3Qua2V5cyhtZXNzYWdlcykuZm9yRWFjaChmdW5jdGlvbiAobG9jYWxlKSB7XG4gICAgICB0aGlzJDEuX2NoZWNrTG9jYWxlTWVzc2FnZShsb2NhbGUsIHRoaXMkMS5fd2Fybkh0bWxJbk1lc3NhZ2UsIG1lc3NhZ2VzW2xvY2FsZV0pO1xuICAgIH0pO1xuICB9XG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5fZ2V0TWVzc2FnZXMgPSBmdW5jdGlvbiBfZ2V0TWVzc2FnZXMgKCkgeyByZXR1cm4gdGhpcy5fdm0ubWVzc2FnZXMgfTtcblZ1ZUkxOG4ucHJvdG90eXBlLl9nZXREYXRlVGltZUZvcm1hdHMgPSBmdW5jdGlvbiBfZ2V0RGF0ZVRpbWVGb3JtYXRzICgpIHsgcmV0dXJuIHRoaXMuX3ZtLmRhdGVUaW1lRm9ybWF0cyB9O1xuVnVlSTE4bi5wcm90b3R5cGUuX2dldE51bWJlckZvcm1hdHMgPSBmdW5jdGlvbiBfZ2V0TnVtYmVyRm9ybWF0cyAoKSB7IHJldHVybiB0aGlzLl92bS5udW1iZXJGb3JtYXRzIH07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLl93YXJuRGVmYXVsdCA9IGZ1bmN0aW9uIF93YXJuRGVmYXVsdCAobG9jYWxlLCBrZXksIHJlc3VsdCwgdm0sIHZhbHVlcykge1xuICBpZiAoIWlzTnVsbChyZXN1bHQpKSB7IHJldHVybiByZXN1bHQgfVxuICBpZiAodGhpcy5fbWlzc2luZykge1xuICAgIHZhciBtaXNzaW5nUmV0ID0gdGhpcy5fbWlzc2luZy5hcHBseShudWxsLCBbbG9jYWxlLCBrZXksIHZtLCB2YWx1ZXNdKTtcbiAgICBpZiAodHlwZW9mIG1pc3NpbmdSZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gbWlzc2luZ1JldFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhdGhpcy5fc2lsZW50VHJhbnNsYXRpb25XYXJuKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIkNhbm5vdCB0cmFuc2xhdGUgdGhlIHZhbHVlIG9mIGtleXBhdGggJ1wiICsga2V5ICsgXCInLiBcIiArXG4gICAgICAgICdVc2UgdGhlIHZhbHVlIG9mIGtleXBhdGggYXMgZGVmYXVsdC4nXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4ga2V5XG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5faXNGYWxsYmFja1Jvb3QgPSBmdW5jdGlvbiBfaXNGYWxsYmFja1Jvb3QgKHZhbCkge1xuICByZXR1cm4gIXZhbCAmJiAhaXNOdWxsKHRoaXMuX3Jvb3QpICYmIHRoaXMuX2ZhbGxiYWNrUm9vdFxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX2lzU2lsZW50RmFsbGJhY2sgPSBmdW5jdGlvbiBfaXNTaWxlbnRGYWxsYmFjayAobG9jYWxlKSB7XG4gIHJldHVybiB0aGlzLl9zaWxlbnRGYWxsYmFja1dhcm4gJiYgKHRoaXMuX2lzRmFsbGJhY2tSb290KCkgfHwgbG9jYWxlICE9PSB0aGlzLmZhbGxiYWNrTG9jYWxlKVxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX2ludGVycG9sYXRlID0gZnVuY3Rpb24gX2ludGVycG9sYXRlIChcbiAgbG9jYWxlLFxuICBtZXNzYWdlLFxuICBrZXksXG4gIGhvc3QsXG4gIGludGVycG9sYXRlTW9kZSxcbiAgdmFsdWVzLFxuICB2aXNpdGVkTGlua1N0YWNrXG4pIHtcbiAgaWYgKCFtZXNzYWdlKSB7IHJldHVybiBudWxsIH1cblxuICB2YXIgcGF0aFJldCA9IHRoaXMuX3BhdGguZ2V0UGF0aFZhbHVlKG1lc3NhZ2UsIGtleSk7XG4gIGlmIChBcnJheS5pc0FycmF5KHBhdGhSZXQpIHx8IGlzUGxhaW5PYmplY3QocGF0aFJldCkpIHsgcmV0dXJuIHBhdGhSZXQgfVxuXG4gIHZhciByZXQ7XG4gIGlmIChpc051bGwocGF0aFJldCkpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChpc1BsYWluT2JqZWN0KG1lc3NhZ2UpKSB7XG4gICAgICByZXQgPSBtZXNzYWdlW2tleV07XG4gICAgICBpZiAodHlwZW9mIHJldCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXRoaXMuX3NpbGVudFRyYW5zbGF0aW9uV2FybiAmJiAhdGhpcy5faXNTaWxlbnRGYWxsYmFjayhsb2NhbGUpKSB7XG4gICAgICAgICAgd2FybigoXCJWYWx1ZSBvZiBrZXkgJ1wiICsga2V5ICsgXCInIGlzIG5vdCBhIHN0cmluZyFcIikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHR5cGVvZiBwYXRoUmV0ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0ID0gcGF0aFJldDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXRoaXMuX3NpbGVudFRyYW5zbGF0aW9uV2FybiAmJiAhdGhpcy5faXNTaWxlbnRGYWxsYmFjayhsb2NhbGUpKSB7XG4gICAgICAgIHdhcm4oKFwiVmFsdWUgb2Yga2V5ICdcIiArIGtleSArIFwiJyBpcyBub3QgYSBzdHJpbmchXCIpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG5cbiAgLy8gQ2hlY2sgZm9yIHRoZSBleGlzdGVuY2Ugb2YgbGlua3Mgd2l0aGluIHRoZSB0cmFuc2xhdGVkIHN0cmluZ1xuICBpZiAocmV0LmluZGV4T2YoJ0A6JykgPj0gMCB8fCByZXQuaW5kZXhPZignQC4nKSA+PSAwKSB7XG4gICAgcmV0ID0gdGhpcy5fbGluayhsb2NhbGUsIG1lc3NhZ2UsIHJldCwgaG9zdCwgJ3JhdycsIHZhbHVlcywgdmlzaXRlZExpbmtTdGFjayk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fcmVuZGVyKHJldCwgaW50ZXJwb2xhdGVNb2RlLCB2YWx1ZXMsIGtleSlcbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLl9saW5rID0gZnVuY3Rpb24gX2xpbmsgKFxuICBsb2NhbGUsXG4gIG1lc3NhZ2UsXG4gIHN0cixcbiAgaG9zdCxcbiAgaW50ZXJwb2xhdGVNb2RlLFxuICB2YWx1ZXMsXG4gIHZpc2l0ZWRMaW5rU3RhY2tcbikge1xuICB2YXIgcmV0ID0gc3RyO1xuXG4gIC8vIE1hdGNoIGFsbCB0aGUgbGlua3Mgd2l0aGluIHRoZSBsb2NhbFxuICAvLyBXZSBhcmUgZ29pbmcgdG8gcmVwbGFjZSBlYWNoIG9mXG4gIC8vIHRoZW0gd2l0aCBpdHMgdHJhbnNsYXRpb25cbiAgdmFyIG1hdGNoZXMgPSByZXQubWF0Y2gobGlua0tleU1hdGNoZXIpO1xuICBmb3IgKHZhciBpZHggaW4gbWF0Y2hlcykge1xuICAgIC8vIGllIGNvbXBhdGlibGU6IGZpbHRlciBjdXN0b20gYXJyYXlcbiAgICAvLyBwcm90b3R5cGUgbWV0aG9kXG4gICAgaWYgKCFtYXRjaGVzLmhhc093blByb3BlcnR5KGlkeCkpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIHZhciBsaW5rID0gbWF0Y2hlc1tpZHhdO1xuICAgIHZhciBsaW5rS2V5UHJlZml4TWF0Y2hlcyA9IGxpbmsubWF0Y2gobGlua0tleVByZWZpeE1hdGNoZXIpO1xuICAgIHZhciBsaW5rUHJlZml4ID0gbGlua0tleVByZWZpeE1hdGNoZXNbMF07XG4gICAgICB2YXIgZm9ybWF0dGVyTmFtZSA9IGxpbmtLZXlQcmVmaXhNYXRjaGVzWzFdO1xuXG4gICAgLy8gUmVtb3ZlIHRoZSBsZWFkaW5nIEA6LCBALmNhc2U6IGFuZCB0aGUgYnJhY2tldHNcbiAgICB2YXIgbGlua1BsYWNlaG9sZGVyID0gbGluay5yZXBsYWNlKGxpbmtQcmVmaXgsICcnKS5yZXBsYWNlKGJyYWNrZXRzTWF0Y2hlciwgJycpO1xuXG4gICAgaWYgKHZpc2l0ZWRMaW5rU3RhY2suaW5jbHVkZXMobGlua1BsYWNlaG9sZGVyKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybigoXCJDaXJjdWxhciByZWZlcmVuY2UgZm91bmQuIFxcXCJcIiArIGxpbmsgKyBcIlxcXCIgaXMgYWxyZWFkeSB2aXNpdGVkIGluIHRoZSBjaGFpbiBvZiBcIiArICh2aXNpdGVkTGlua1N0YWNrLnJldmVyc2UoKS5qb2luKCcgPC0gJykpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0XG4gICAgfVxuICAgIHZpc2l0ZWRMaW5rU3RhY2sucHVzaChsaW5rUGxhY2Vob2xkZXIpO1xuXG4gICAgLy8gVHJhbnNsYXRlIHRoZSBsaW5rXG4gICAgdmFyIHRyYW5zbGF0ZWQgPSB0aGlzLl9pbnRlcnBvbGF0ZShcbiAgICAgIGxvY2FsZSwgbWVzc2FnZSwgbGlua1BsYWNlaG9sZGVyLCBob3N0LFxuICAgICAgaW50ZXJwb2xhdGVNb2RlID09PSAncmF3JyA/ICdzdHJpbmcnIDogaW50ZXJwb2xhdGVNb2RlLFxuICAgICAgaW50ZXJwb2xhdGVNb2RlID09PSAncmF3JyA/IHVuZGVmaW5lZCA6IHZhbHVlcyxcbiAgICAgIHZpc2l0ZWRMaW5rU3RhY2tcbiAgICApO1xuXG4gICAgaWYgKHRoaXMuX2lzRmFsbGJhY2tSb290KHRyYW5zbGF0ZWQpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhdGhpcy5fc2lsZW50VHJhbnNsYXRpb25XYXJuKSB7XG4gICAgICAgIHdhcm4oKFwiRmFsbCBiYWNrIHRvIHRyYW5zbGF0ZSB0aGUgbGluayBwbGFjZWhvbGRlciAnXCIgKyBsaW5rUGxhY2Vob2xkZXIgKyBcIicgd2l0aCByb290IGxvY2FsZS5cIikpO1xuICAgICAgfVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoIXRoaXMuX3Jvb3QpIHsgdGhyb3cgRXJyb3IoJ3VuZXhwZWN0ZWQgZXJyb3InKSB9XG4gICAgICB2YXIgcm9vdCA9IHRoaXMuX3Jvb3QuJGkxOG47XG4gICAgICB0cmFuc2xhdGVkID0gcm9vdC5fdHJhbnNsYXRlKFxuICAgICAgICByb290Ll9nZXRNZXNzYWdlcygpLCByb290LmxvY2FsZSwgcm9vdC5mYWxsYmFja0xvY2FsZSxcbiAgICAgICAgbGlua1BsYWNlaG9sZGVyLCBob3N0LCBpbnRlcnBvbGF0ZU1vZGUsIHZhbHVlc1xuICAgICAgKTtcbiAgICB9XG4gICAgdHJhbnNsYXRlZCA9IHRoaXMuX3dhcm5EZWZhdWx0KFxuICAgICAgbG9jYWxlLCBsaW5rUGxhY2Vob2xkZXIsIHRyYW5zbGF0ZWQsIGhvc3QsXG4gICAgICBBcnJheS5pc0FycmF5KHZhbHVlcykgPyB2YWx1ZXMgOiBbdmFsdWVzXVxuICAgICk7XG4gICAgaWYgKGZvcm1hdHRlcnMuaGFzT3duUHJvcGVydHkoZm9ybWF0dGVyTmFtZSkpIHtcbiAgICAgIHRyYW5zbGF0ZWQgPSBmb3JtYXR0ZXJzW2Zvcm1hdHRlck5hbWVdKHRyYW5zbGF0ZWQpO1xuICAgIH1cblxuICAgIHZpc2l0ZWRMaW5rU3RhY2sucG9wKCk7XG5cbiAgICAvLyBSZXBsYWNlIHRoZSBsaW5rIHdpdGggdGhlIHRyYW5zbGF0ZWRcbiAgICByZXQgPSAhdHJhbnNsYXRlZCA/IHJldCA6IHJldC5yZXBsYWNlKGxpbmssIHRyYW5zbGF0ZWQpO1xuICB9XG5cbiAgcmV0dXJuIHJldFxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uIF9yZW5kZXIgKG1lc3NhZ2UsIGludGVycG9sYXRlTW9kZSwgdmFsdWVzLCBwYXRoKSB7XG4gIHZhciByZXQgPSB0aGlzLl9mb3JtYXR0ZXIuaW50ZXJwb2xhdGUobWVzc2FnZSwgdmFsdWVzLCBwYXRoKTtcblxuICAvLyBJZiB0aGUgY3VzdG9tIGZvcm1hdHRlciByZWZ1c2VzIHRvIHdvcmsgLSBhcHBseSB0aGUgZGVmYXVsdCBvbmVcbiAgaWYgKCFyZXQpIHtcbiAgICByZXQgPSBkZWZhdWx0Rm9ybWF0dGVyLmludGVycG9sYXRlKG1lc3NhZ2UsIHZhbHVlcywgcGF0aCk7XG4gIH1cblxuICAvLyBpZiBpbnRlcnBvbGF0ZU1vZGUgaXMgKipub3QqKiAnc3RyaW5nJyAoJ3JvdycpLFxuICAvLyByZXR1cm4gdGhlIGNvbXBpbGVkIGRhdGEgKGUuZy4gWydmb28nLCBWTm9kZSwgJ2JhciddKSB3aXRoIGZvcm1hdHRlclxuICByZXR1cm4gaW50ZXJwb2xhdGVNb2RlID09PSAnc3RyaW5nJyA/IHJldC5qb2luKCcnKSA6IHJldFxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX3RyYW5zbGF0ZSA9IGZ1bmN0aW9uIF90cmFuc2xhdGUgKFxuICBtZXNzYWdlcyxcbiAgbG9jYWxlLFxuICBmYWxsYmFjayxcbiAga2V5LFxuICBob3N0LFxuICBpbnRlcnBvbGF0ZU1vZGUsXG4gIGFyZ3Ncbikge1xuICB2YXIgcmVzID1cbiAgICB0aGlzLl9pbnRlcnBvbGF0ZShsb2NhbGUsIG1lc3NhZ2VzW2xvY2FsZV0sIGtleSwgaG9zdCwgaW50ZXJwb2xhdGVNb2RlLCBhcmdzLCBba2V5XSk7XG4gIGlmICghaXNOdWxsKHJlcykpIHsgcmV0dXJuIHJlcyB9XG5cbiAgcmVzID0gdGhpcy5faW50ZXJwb2xhdGUoZmFsbGJhY2ssIG1lc3NhZ2VzW2ZhbGxiYWNrXSwga2V5LCBob3N0LCBpbnRlcnBvbGF0ZU1vZGUsIGFyZ3MsIFtrZXldKTtcbiAgaWYgKCFpc051bGwocmVzKSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0aGlzLl9zaWxlbnRUcmFuc2xhdGlvbldhcm4gJiYgIXRoaXMuX3NpbGVudEZhbGxiYWNrV2Fybikge1xuICAgICAgd2FybigoXCJGYWxsIGJhY2sgdG8gdHJhbnNsYXRlIHRoZSBrZXlwYXRoICdcIiArIGtleSArIFwiJyB3aXRoICdcIiArIGZhbGxiYWNrICsgXCInIGxvY2FsZS5cIikpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX3QgPSBmdW5jdGlvbiBfdCAoa2V5LCBfbG9jYWxlLCBtZXNzYWdlcywgaG9zdCkge1xuICAgIHZhciByZWY7XG5cbiAgICB2YXIgdmFsdWVzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSA0O1xuICAgIHdoaWxlICggbGVuLS0gPiAwICkgdmFsdWVzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgNCBdO1xuICBpZiAoIWtleSkgeyByZXR1cm4gJycgfVxuXG4gIHZhciBwYXJzZWRBcmdzID0gcGFyc2VBcmdzLmFwcGx5KHZvaWQgMCwgdmFsdWVzKTtcbiAgdmFyIGxvY2FsZSA9IHBhcnNlZEFyZ3MubG9jYWxlIHx8IF9sb2NhbGU7XG5cbiAgdmFyIHJldCA9IHRoaXMuX3RyYW5zbGF0ZShcbiAgICBtZXNzYWdlcywgbG9jYWxlLCB0aGlzLmZhbGxiYWNrTG9jYWxlLCBrZXksXG4gICAgaG9zdCwgJ3N0cmluZycsIHBhcnNlZEFyZ3MucGFyYW1zXG4gICk7XG4gIGlmICh0aGlzLl9pc0ZhbGxiYWNrUm9vdChyZXQpKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXRoaXMuX3NpbGVudFRyYW5zbGF0aW9uV2FybiAmJiAhdGhpcy5fc2lsZW50RmFsbGJhY2tXYXJuKSB7XG4gICAgICB3YXJuKChcIkZhbGwgYmFjayB0byB0cmFuc2xhdGUgdGhlIGtleXBhdGggJ1wiICsga2V5ICsgXCInIHdpdGggcm9vdCBsb2NhbGUuXCIpKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCF0aGlzLl9yb290KSB7IHRocm93IEVycm9yKCd1bmV4cGVjdGVkIGVycm9yJykgfVxuICAgIHJldHVybiAocmVmID0gdGhpcy5fcm9vdCkuJHQuYXBwbHkocmVmLCBbIGtleSBdLmNvbmNhdCggdmFsdWVzICkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRoaXMuX3dhcm5EZWZhdWx0KGxvY2FsZSwga2V5LCByZXQsIGhvc3QsIHZhbHVlcylcbiAgfVxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUudCA9IGZ1bmN0aW9uIHQgKGtleSkge1xuICAgIHZhciByZWY7XG5cbiAgICB2YXIgdmFsdWVzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgIHdoaWxlICggbGVuLS0gPiAwICkgdmFsdWVzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuICByZXR1cm4gKHJlZiA9IHRoaXMpLl90LmFwcGx5KHJlZiwgWyBrZXksIHRoaXMubG9jYWxlLCB0aGlzLl9nZXRNZXNzYWdlcygpLCBudWxsIF0uY29uY2F0KCB2YWx1ZXMgKSlcbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLl9pID0gZnVuY3Rpb24gX2kgKGtleSwgbG9jYWxlLCBtZXNzYWdlcywgaG9zdCwgdmFsdWVzKSB7XG4gIHZhciByZXQgPVxuICAgIHRoaXMuX3RyYW5zbGF0ZShtZXNzYWdlcywgbG9jYWxlLCB0aGlzLmZhbGxiYWNrTG9jYWxlLCBrZXksIGhvc3QsICdyYXcnLCB2YWx1ZXMpO1xuICBpZiAodGhpcy5faXNGYWxsYmFja1Jvb3QocmV0KSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0aGlzLl9zaWxlbnRUcmFuc2xhdGlvbldhcm4pIHtcbiAgICAgIHdhcm4oKFwiRmFsbCBiYWNrIHRvIGludGVycG9sYXRlIHRoZSBrZXlwYXRoICdcIiArIGtleSArIFwiJyB3aXRoIHJvb3QgbG9jYWxlLlwiKSk7XG4gICAgfVxuICAgIGlmICghdGhpcy5fcm9vdCkgeyB0aHJvdyBFcnJvcigndW5leHBlY3RlZCBlcnJvcicpIH1cbiAgICByZXR1cm4gdGhpcy5fcm9vdC4kaTE4bi5pKGtleSwgbG9jYWxlLCB2YWx1ZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRoaXMuX3dhcm5EZWZhdWx0KGxvY2FsZSwga2V5LCByZXQsIGhvc3QsIFt2YWx1ZXNdKVxuICB9XG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5pID0gZnVuY3Rpb24gaSAoa2V5LCBsb2NhbGUsIHZhbHVlcykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFrZXkpIHsgcmV0dXJuICcnIH1cblxuICBpZiAodHlwZW9mIGxvY2FsZSAhPT0gJ3N0cmluZycpIHtcbiAgICBsb2NhbGUgPSB0aGlzLmxvY2FsZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9pKGtleSwgbG9jYWxlLCB0aGlzLl9nZXRNZXNzYWdlcygpLCBudWxsLCB2YWx1ZXMpXG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5fdGMgPSBmdW5jdGlvbiBfdGMgKFxuICBrZXksXG4gIF9sb2NhbGUsXG4gIG1lc3NhZ2VzLFxuICBob3N0LFxuICBjaG9pY2Vcbikge1xuICAgIHZhciByZWY7XG5cbiAgICB2YXIgdmFsdWVzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSA1O1xuICAgIHdoaWxlICggbGVuLS0gPiAwICkgdmFsdWVzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgNSBdO1xuICBpZiAoIWtleSkgeyByZXR1cm4gJycgfVxuICBpZiAoY2hvaWNlID09PSB1bmRlZmluZWQpIHtcbiAgICBjaG9pY2UgPSAxO1xuICB9XG5cbiAgdmFyIHByZWRlZmluZWQgPSB7ICdjb3VudCc6IGNob2ljZSwgJ24nOiBjaG9pY2UgfTtcbiAgdmFyIHBhcnNlZEFyZ3MgPSBwYXJzZUFyZ3MuYXBwbHkodm9pZCAwLCB2YWx1ZXMpO1xuICBwYXJzZWRBcmdzLnBhcmFtcyA9IE9iamVjdC5hc3NpZ24ocHJlZGVmaW5lZCwgcGFyc2VkQXJncy5wYXJhbXMpO1xuICB2YWx1ZXMgPSBwYXJzZWRBcmdzLmxvY2FsZSA9PT0gbnVsbCA/IFtwYXJzZWRBcmdzLnBhcmFtc10gOiBbcGFyc2VkQXJncy5sb2NhbGUsIHBhcnNlZEFyZ3MucGFyYW1zXTtcbiAgcmV0dXJuIHRoaXMuZmV0Y2hDaG9pY2UoKHJlZiA9IHRoaXMpLl90LmFwcGx5KHJlZiwgWyBrZXksIF9sb2NhbGUsIG1lc3NhZ2VzLCBob3N0IF0uY29uY2F0KCB2YWx1ZXMgKSksIGNob2ljZSlcbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLmZldGNoQ2hvaWNlID0gZnVuY3Rpb24gZmV0Y2hDaG9pY2UgKG1lc3NhZ2UsIGNob2ljZSkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFtZXNzYWdlICYmIHR5cGVvZiBtZXNzYWdlICE9PSAnc3RyaW5nJykgeyByZXR1cm4gbnVsbCB9XG4gIHZhciBjaG9pY2VzID0gbWVzc2FnZS5zcGxpdCgnfCcpO1xuXG4gIGNob2ljZSA9IHRoaXMuZ2V0Q2hvaWNlSW5kZXgoY2hvaWNlLCBjaG9pY2VzLmxlbmd0aCk7XG4gIGlmICghY2hvaWNlc1tjaG9pY2VdKSB7IHJldHVybiBtZXNzYWdlIH1cbiAgcmV0dXJuIGNob2ljZXNbY2hvaWNlXS50cmltKClcbn07XG5cbi8qKlxuICogQHBhcmFtIGNob2ljZSB7bnVtYmVyfSBhIGNob2ljZSBpbmRleCBnaXZlbiBieSB0aGUgaW5wdXQgdG8gJHRjOiBgJHRjKCdwYXRoLnRvLnJ1bGUnLCBjaG9pY2VJbmRleClgXG4gKiBAcGFyYW0gY2hvaWNlc0xlbmd0aCB7bnVtYmVyfSBhbiBvdmVyYWxsIGFtb3VudCBvZiBhdmFpbGFibGUgY2hvaWNlc1xuICogQHJldHVybnMgYSBmaW5hbCBjaG9pY2UgaW5kZXhcbiovXG5WdWVJMThuLnByb3RvdHlwZS5nZXRDaG9pY2VJbmRleCA9IGZ1bmN0aW9uIGdldENob2ljZUluZGV4IChjaG9pY2UsIGNob2ljZXNMZW5ndGgpIHtcbiAgLy8gRGVmYXVsdCAob2xkKSBnZXRDaG9pY2VJbmRleCBpbXBsZW1lbnRhdGlvbiAtIGVuZ2xpc2gtY29tcGF0aWJsZVxuICB2YXIgZGVmYXVsdEltcGwgPSBmdW5jdGlvbiAoX2Nob2ljZSwgX2Nob2ljZXNMZW5ndGgpIHtcbiAgICBfY2hvaWNlID0gTWF0aC5hYnMoX2Nob2ljZSk7XG5cbiAgICBpZiAoX2Nob2ljZXNMZW5ndGggPT09IDIpIHtcbiAgICAgIHJldHVybiBfY2hvaWNlXG4gICAgICAgID8gX2Nob2ljZSA+IDFcbiAgICAgICAgICA/IDFcbiAgICAgICAgICA6IDBcbiAgICAgICAgOiAxXG4gICAgfVxuXG4gICAgcmV0dXJuIF9jaG9pY2UgPyBNYXRoLm1pbihfY2hvaWNlLCAyKSA6IDBcbiAgfTtcblxuICBpZiAodGhpcy5sb2NhbGUgaW4gdGhpcy5wbHVyYWxpemF0aW9uUnVsZXMpIHtcbiAgICByZXR1cm4gdGhpcy5wbHVyYWxpemF0aW9uUnVsZXNbdGhpcy5sb2NhbGVdLmFwcGx5KHRoaXMsIFtjaG9pY2UsIGNob2ljZXNMZW5ndGhdKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBkZWZhdWx0SW1wbChjaG9pY2UsIGNob2ljZXNMZW5ndGgpXG4gIH1cbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLnRjID0gZnVuY3Rpb24gdGMgKGtleSwgY2hvaWNlKSB7XG4gICAgdmFyIHJlZjtcblxuICAgIHZhciB2YWx1ZXMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gICAgd2hpbGUgKCBsZW4tLSA+IDAgKSB2YWx1ZXNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAyIF07XG4gIHJldHVybiAocmVmID0gdGhpcykuX3RjLmFwcGx5KHJlZiwgWyBrZXksIHRoaXMubG9jYWxlLCB0aGlzLl9nZXRNZXNzYWdlcygpLCBudWxsLCBjaG9pY2UgXS5jb25jYXQoIHZhbHVlcyApKVxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX3RlID0gZnVuY3Rpb24gX3RlIChrZXksIGxvY2FsZSwgbWVzc2FnZXMpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMztcbiAgICB3aGlsZSAoIGxlbi0tID4gMCApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAzIF07XG5cbiAgdmFyIF9sb2NhbGUgPSBwYXJzZUFyZ3MuYXBwbHkodm9pZCAwLCBhcmdzKS5sb2NhbGUgfHwgbG9jYWxlO1xuICByZXR1cm4gdGhpcy5fZXhpc3QobWVzc2FnZXNbX2xvY2FsZV0sIGtleSlcbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLnRlID0gZnVuY3Rpb24gdGUgKGtleSwgbG9jYWxlKSB7XG4gIHJldHVybiB0aGlzLl90ZShrZXksIHRoaXMubG9jYWxlLCB0aGlzLl9nZXRNZXNzYWdlcygpLCBsb2NhbGUpXG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5nZXRMb2NhbGVNZXNzYWdlID0gZnVuY3Rpb24gZ2V0TG9jYWxlTWVzc2FnZSAobG9jYWxlKSB7XG4gIHJldHVybiBsb29zZUNsb25lKHRoaXMuX3ZtLm1lc3NhZ2VzW2xvY2FsZV0gfHwge30pXG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5zZXRMb2NhbGVNZXNzYWdlID0gZnVuY3Rpb24gc2V0TG9jYWxlTWVzc2FnZSAobG9jYWxlLCBtZXNzYWdlKSB7XG4gIGlmICh0aGlzLl93YXJuSHRtbEluTWVzc2FnZSA9PT0gJ3dhcm4nIHx8IHRoaXMuX3dhcm5IdG1sSW5NZXNzYWdlID09PSAnZXJyb3InKSB7XG4gICAgdGhpcy5fY2hlY2tMb2NhbGVNZXNzYWdlKGxvY2FsZSwgdGhpcy5fd2Fybkh0bWxJbk1lc3NhZ2UsIG1lc3NhZ2UpO1xuICAgIGlmICh0aGlzLl93YXJuSHRtbEluTWVzc2FnZSA9PT0gJ2Vycm9yJykgeyByZXR1cm4gfVxuICB9XG4gIHRoaXMuX3ZtLiRzZXQodGhpcy5fdm0ubWVzc2FnZXMsIGxvY2FsZSwgbWVzc2FnZSk7XG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5tZXJnZUxvY2FsZU1lc3NhZ2UgPSBmdW5jdGlvbiBtZXJnZUxvY2FsZU1lc3NhZ2UgKGxvY2FsZSwgbWVzc2FnZSkge1xuICBpZiAodGhpcy5fd2Fybkh0bWxJbk1lc3NhZ2UgPT09ICd3YXJuJyB8fCB0aGlzLl93YXJuSHRtbEluTWVzc2FnZSA9PT0gJ2Vycm9yJykge1xuICAgIHRoaXMuX2NoZWNrTG9jYWxlTWVzc2FnZShsb2NhbGUsIHRoaXMuX3dhcm5IdG1sSW5NZXNzYWdlLCBtZXNzYWdlKTtcbiAgICBpZiAodGhpcy5fd2Fybkh0bWxJbk1lc3NhZ2UgPT09ICdlcnJvcicpIHsgcmV0dXJuIH1cbiAgfVxuICB0aGlzLl92bS4kc2V0KHRoaXMuX3ZtLm1lc3NhZ2VzLCBsb2NhbGUsIG1lcmdlKHRoaXMuX3ZtLm1lc3NhZ2VzW2xvY2FsZV0gfHwge30sIG1lc3NhZ2UpKTtcbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLmdldERhdGVUaW1lRm9ybWF0ID0gZnVuY3Rpb24gZ2V0RGF0ZVRpbWVGb3JtYXQgKGxvY2FsZSkge1xuICByZXR1cm4gbG9vc2VDbG9uZSh0aGlzLl92bS5kYXRlVGltZUZvcm1hdHNbbG9jYWxlXSB8fCB7fSlcbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLnNldERhdGVUaW1lRm9ybWF0ID0gZnVuY3Rpb24gc2V0RGF0ZVRpbWVGb3JtYXQgKGxvY2FsZSwgZm9ybWF0KSB7XG4gIHRoaXMuX3ZtLiRzZXQodGhpcy5fdm0uZGF0ZVRpbWVGb3JtYXRzLCBsb2NhbGUsIGZvcm1hdCk7XG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5tZXJnZURhdGVUaW1lRm9ybWF0ID0gZnVuY3Rpb24gbWVyZ2VEYXRlVGltZUZvcm1hdCAobG9jYWxlLCBmb3JtYXQpIHtcbiAgdGhpcy5fdm0uJHNldCh0aGlzLl92bS5kYXRlVGltZUZvcm1hdHMsIGxvY2FsZSwgbWVyZ2UodGhpcy5fdm0uZGF0ZVRpbWVGb3JtYXRzW2xvY2FsZV0gfHwge30sIGZvcm1hdCkpO1xufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX2xvY2FsaXplRGF0ZVRpbWUgPSBmdW5jdGlvbiBfbG9jYWxpemVEYXRlVGltZSAoXG4gIHZhbHVlLFxuICBsb2NhbGUsXG4gIGZhbGxiYWNrLFxuICBkYXRlVGltZUZvcm1hdHMsXG4gIGtleVxuKSB7XG4gIHZhciBfbG9jYWxlID0gbG9jYWxlO1xuICB2YXIgZm9ybWF0cyA9IGRhdGVUaW1lRm9ybWF0c1tfbG9jYWxlXTtcblxuICAvLyBmYWxsYmFjayBsb2NhbGVcbiAgaWYgKGlzTnVsbChmb3JtYXRzKSB8fCBpc051bGwoZm9ybWF0c1trZXldKSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0aGlzLl9zaWxlbnRUcmFuc2xhdGlvbldhcm4pIHtcbiAgICAgIHdhcm4oKFwiRmFsbCBiYWNrIHRvICdcIiArIGZhbGxiYWNrICsgXCInIGRhdGV0aW1lIGZvcm1hdHMgZnJvbSAnXCIgKyBsb2NhbGUgKyBcIiBkYXRldGltZSBmb3JtYXRzLlwiKSk7XG4gICAgfVxuICAgIF9sb2NhbGUgPSBmYWxsYmFjaztcbiAgICBmb3JtYXRzID0gZGF0ZVRpbWVGb3JtYXRzW19sb2NhbGVdO1xuICB9XG5cbiAgaWYgKGlzTnVsbChmb3JtYXRzKSB8fCBpc051bGwoZm9ybWF0c1trZXldKSkge1xuICAgIHJldHVybiBudWxsXG4gIH0gZWxzZSB7XG4gICAgdmFyIGZvcm1hdCA9IGZvcm1hdHNba2V5XTtcbiAgICB2YXIgaWQgPSBfbG9jYWxlICsgXCJfX1wiICsga2V5O1xuICAgIHZhciBmb3JtYXR0ZXIgPSB0aGlzLl9kYXRlVGltZUZvcm1hdHRlcnNbaWRdO1xuICAgIGlmICghZm9ybWF0dGVyKSB7XG4gICAgICBmb3JtYXR0ZXIgPSB0aGlzLl9kYXRlVGltZUZvcm1hdHRlcnNbaWRdID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoX2xvY2FsZSwgZm9ybWF0KTtcbiAgICB9XG4gICAgcmV0dXJuIGZvcm1hdHRlci5mb3JtYXQodmFsdWUpXG4gIH1cbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLl9kID0gZnVuY3Rpb24gX2QgKHZhbHVlLCBsb2NhbGUsIGtleSkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIVZ1ZUkxOG4uYXZhaWxhYmlsaXRpZXMuZGF0ZVRpbWVGb3JtYXQpIHtcbiAgICB3YXJuKCdDYW5ub3QgZm9ybWF0IGEgRGF0ZSB2YWx1ZSBkdWUgdG8gbm90IHN1cHBvcnRlZCBJbnRsLkRhdGVUaW1lRm9ybWF0LicpO1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFrZXkpIHtcbiAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlKS5mb3JtYXQodmFsdWUpXG4gIH1cblxuICB2YXIgcmV0ID1cbiAgICB0aGlzLl9sb2NhbGl6ZURhdGVUaW1lKHZhbHVlLCBsb2NhbGUsIHRoaXMuZmFsbGJhY2tMb2NhbGUsIHRoaXMuX2dldERhdGVUaW1lRm9ybWF0cygpLCBrZXkpO1xuICBpZiAodGhpcy5faXNGYWxsYmFja1Jvb3QocmV0KSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0aGlzLl9zaWxlbnRUcmFuc2xhdGlvbldhcm4pIHtcbiAgICAgIHdhcm4oKFwiRmFsbCBiYWNrIHRvIGRhdGV0aW1lIGxvY2FsaXphdGlvbiBvZiByb290OiBrZXkgJ1wiICsga2V5ICsgXCInIC5cIikpO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXRoaXMuX3Jvb3QpIHsgdGhyb3cgRXJyb3IoJ3VuZXhwZWN0ZWQgZXJyb3InKSB9XG4gICAgcmV0dXJuIHRoaXMuX3Jvb3QuJGkxOG4uZCh2YWx1ZSwga2V5LCBsb2NhbGUpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJldCB8fCAnJ1xuICB9XG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5kID0gZnVuY3Rpb24gZCAodmFsdWUpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgICB3aGlsZSAoIGxlbi0tID4gMCApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cbiAgdmFyIGxvY2FsZSA9IHRoaXMubG9jYWxlO1xuICB2YXIga2V5ID0gbnVsbDtcblxuICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICBrZXkgPSBhcmdzWzBdO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoYXJnc1swXSkpIHtcbiAgICAgIGlmIChhcmdzWzBdLmxvY2FsZSkge1xuICAgICAgICBsb2NhbGUgPSBhcmdzWzBdLmxvY2FsZTtcbiAgICAgIH1cbiAgICAgIGlmIChhcmdzWzBdLmtleSkge1xuICAgICAgICBrZXkgPSBhcmdzWzBdLmtleTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT09IDIpIHtcbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICBrZXkgPSBhcmdzWzBdO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICBsb2NhbGUgPSBhcmdzWzFdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzLl9kKHZhbHVlLCBsb2NhbGUsIGtleSlcbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLmdldE51bWJlckZvcm1hdCA9IGZ1bmN0aW9uIGdldE51bWJlckZvcm1hdCAobG9jYWxlKSB7XG4gIHJldHVybiBsb29zZUNsb25lKHRoaXMuX3ZtLm51bWJlckZvcm1hdHNbbG9jYWxlXSB8fCB7fSlcbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLnNldE51bWJlckZvcm1hdCA9IGZ1bmN0aW9uIHNldE51bWJlckZvcm1hdCAobG9jYWxlLCBmb3JtYXQpIHtcbiAgdGhpcy5fdm0uJHNldCh0aGlzLl92bS5udW1iZXJGb3JtYXRzLCBsb2NhbGUsIGZvcm1hdCk7XG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5tZXJnZU51bWJlckZvcm1hdCA9IGZ1bmN0aW9uIG1lcmdlTnVtYmVyRm9ybWF0IChsb2NhbGUsIGZvcm1hdCkge1xuICB0aGlzLl92bS4kc2V0KHRoaXMuX3ZtLm51bWJlckZvcm1hdHMsIGxvY2FsZSwgbWVyZ2UodGhpcy5fdm0ubnVtYmVyRm9ybWF0c1tsb2NhbGVdIHx8IHt9LCBmb3JtYXQpKTtcbn07XG5cblZ1ZUkxOG4ucHJvdG90eXBlLl9nZXROdW1iZXJGb3JtYXR0ZXIgPSBmdW5jdGlvbiBfZ2V0TnVtYmVyRm9ybWF0dGVyIChcbiAgdmFsdWUsXG4gIGxvY2FsZSxcbiAgZmFsbGJhY2ssXG4gIG51bWJlckZvcm1hdHMsXG4gIGtleSxcbiAgb3B0aW9uc1xuKSB7XG4gIHZhciBfbG9jYWxlID0gbG9jYWxlO1xuICB2YXIgZm9ybWF0cyA9IG51bWJlckZvcm1hdHNbX2xvY2FsZV07XG5cbiAgLy8gZmFsbGJhY2sgbG9jYWxlXG4gIGlmIChpc051bGwoZm9ybWF0cykgfHwgaXNOdWxsKGZvcm1hdHNba2V5XSkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhdGhpcy5fc2lsZW50VHJhbnNsYXRpb25XYXJuKSB7XG4gICAgICB3YXJuKChcIkZhbGwgYmFjayB0byAnXCIgKyBmYWxsYmFjayArIFwiJyBudW1iZXIgZm9ybWF0cyBmcm9tICdcIiArIGxvY2FsZSArIFwiIG51bWJlciBmb3JtYXRzLlwiKSk7XG4gICAgfVxuICAgIF9sb2NhbGUgPSBmYWxsYmFjaztcbiAgICBmb3JtYXRzID0gbnVtYmVyRm9ybWF0c1tfbG9jYWxlXTtcbiAgfVxuXG4gIGlmIChpc051bGwoZm9ybWF0cykgfHwgaXNOdWxsKGZvcm1hdHNba2V5XSkpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9IGVsc2Uge1xuICAgIHZhciBmb3JtYXQgPSBmb3JtYXRzW2tleV07XG5cbiAgICB2YXIgZm9ybWF0dGVyO1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAvLyBJZiBvcHRpb25zIHNwZWNpZmllZCAtIGNyZWF0ZSBvbmUgdGltZSBudW1iZXIgZm9ybWF0dGVyXG4gICAgICBmb3JtYXR0ZXIgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQoX2xvY2FsZSwgT2JqZWN0LmFzc2lnbih7fSwgZm9ybWF0LCBvcHRpb25zKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpZCA9IF9sb2NhbGUgKyBcIl9fXCIgKyBrZXk7XG4gICAgICBmb3JtYXR0ZXIgPSB0aGlzLl9udW1iZXJGb3JtYXR0ZXJzW2lkXTtcbiAgICAgIGlmICghZm9ybWF0dGVyKSB7XG4gICAgICAgIGZvcm1hdHRlciA9IHRoaXMuX251bWJlckZvcm1hdHRlcnNbaWRdID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KF9sb2NhbGUsIGZvcm1hdCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmb3JtYXR0ZXJcbiAgfVxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUuX24gPSBmdW5jdGlvbiBfbiAodmFsdWUsIGxvY2FsZSwga2V5LCBvcHRpb25zKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIVZ1ZUkxOG4uYXZhaWxhYmlsaXRpZXMubnVtYmVyRm9ybWF0KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oJ0Nhbm5vdCBmb3JtYXQgYSBOdW1iZXIgdmFsdWUgZHVlIHRvIG5vdCBzdXBwb3J0ZWQgSW50bC5OdW1iZXJGb3JtYXQuJyk7XG4gICAgfVxuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFrZXkpIHtcbiAgICB2YXIgbmYgPSAhb3B0aW9ucyA/IG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUpIDogbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIG5mLmZvcm1hdCh2YWx1ZSlcbiAgfVxuXG4gIHZhciBmb3JtYXR0ZXIgPSB0aGlzLl9nZXROdW1iZXJGb3JtYXR0ZXIodmFsdWUsIGxvY2FsZSwgdGhpcy5mYWxsYmFja0xvY2FsZSwgdGhpcy5fZ2V0TnVtYmVyRm9ybWF0cygpLCBrZXksIG9wdGlvbnMpO1xuICB2YXIgcmV0ID0gZm9ybWF0dGVyICYmIGZvcm1hdHRlci5mb3JtYXQodmFsdWUpO1xuICBpZiAodGhpcy5faXNGYWxsYmFja1Jvb3QocmV0KSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF0aGlzLl9zaWxlbnRUcmFuc2xhdGlvbldhcm4pIHtcbiAgICAgIHdhcm4oKFwiRmFsbCBiYWNrIHRvIG51bWJlciBsb2NhbGl6YXRpb24gb2Ygcm9vdDoga2V5ICdcIiArIGtleSArIFwiJyAuXCIpKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCF0aGlzLl9yb290KSB7IHRocm93IEVycm9yKCd1bmV4cGVjdGVkIGVycm9yJykgfVxuICAgIHJldHVybiB0aGlzLl9yb290LiRpMThuLm4odmFsdWUsIE9iamVjdC5hc3NpZ24oe30sIHsga2V5OiBrZXksIGxvY2FsZTogbG9jYWxlIH0sIG9wdGlvbnMpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXQgfHwgJydcbiAgfVxufTtcblxuVnVlSTE4bi5wcm90b3R5cGUubiA9IGZ1bmN0aW9uIG4gKHZhbHVlKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKCBsZW4tLSA+IDAgKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gIHZhciBsb2NhbGUgPSB0aGlzLmxvY2FsZTtcbiAgdmFyIGtleSA9IG51bGw7XG4gIHZhciBvcHRpb25zID0gbnVsbDtcblxuICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICBrZXkgPSBhcmdzWzBdO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoYXJnc1swXSkpIHtcbiAgICAgIGlmIChhcmdzWzBdLmxvY2FsZSkge1xuICAgICAgICBsb2NhbGUgPSBhcmdzWzBdLmxvY2FsZTtcbiAgICAgIH1cbiAgICAgIGlmIChhcmdzWzBdLmtleSkge1xuICAgICAgICBrZXkgPSBhcmdzWzBdLmtleTtcbiAgICAgIH1cblxuICAgICAgLy8gRmlsdGVyIG91dCBudW1iZXIgZm9ybWF0IG9wdGlvbnMgb25seVxuICAgICAgb3B0aW9ucyA9IE9iamVjdC5rZXlzKGFyZ3NbMF0pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgICAgICB2YXIgb2JqO1xuXG4gICAgICAgIGlmIChudW1iZXJGb3JtYXRLZXlzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgYWNjLCAoIG9iaiA9IHt9LCBvYmpba2V5XSA9IGFyZ3NbMF1ba2V5XSwgb2JqICkpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgfSwgbnVsbCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAyKSB7XG4gICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJykge1xuICAgICAga2V5ID0gYXJnc1swXTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnc3RyaW5nJykge1xuICAgICAgbG9jYWxlID0gYXJnc1sxXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcy5fbih2YWx1ZSwgbG9jYWxlLCBrZXksIG9wdGlvbnMpXG59O1xuXG5WdWVJMThuLnByb3RvdHlwZS5fbnRwID0gZnVuY3Rpb24gX250cCAodmFsdWUsIGxvY2FsZSwga2V5LCBvcHRpb25zKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIVZ1ZUkxOG4uYXZhaWxhYmlsaXRpZXMubnVtYmVyRm9ybWF0KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oJ0Nhbm5vdCBmb3JtYXQgdG8gcGFydHMgYSBOdW1iZXIgdmFsdWUgZHVlIHRvIG5vdCBzdXBwb3J0ZWQgSW50bC5OdW1iZXJGb3JtYXQuJyk7XG4gICAgfVxuICAgIHJldHVybiBbXVxuICB9XG5cbiAgaWYgKCFrZXkpIHtcbiAgICB2YXIgbmYgPSAhb3B0aW9ucyA/IG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUpIDogbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIG5mLmZvcm1hdFRvUGFydHModmFsdWUpXG4gIH1cblxuICB2YXIgZm9ybWF0dGVyID0gdGhpcy5fZ2V0TnVtYmVyRm9ybWF0dGVyKHZhbHVlLCBsb2NhbGUsIHRoaXMuZmFsbGJhY2tMb2NhbGUsIHRoaXMuX2dldE51bWJlckZvcm1hdHMoKSwga2V5LCBvcHRpb25zKTtcbiAgdmFyIHJldCA9IGZvcm1hdHRlciAmJiBmb3JtYXR0ZXIuZm9ybWF0VG9QYXJ0cyh2YWx1ZSk7XG4gIGlmICh0aGlzLl9pc0ZhbGxiYWNrUm9vdChyZXQpKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXRoaXMuX3NpbGVudFRyYW5zbGF0aW9uV2Fybikge1xuICAgICAgd2FybigoXCJGYWxsIGJhY2sgdG8gZm9ybWF0IG51bWJlciB0byBwYXJ0cyBvZiByb290OiBrZXkgJ1wiICsga2V5ICsgXCInIC5cIikpO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXRoaXMuX3Jvb3QpIHsgdGhyb3cgRXJyb3IoJ3VuZXhwZWN0ZWQgZXJyb3InKSB9XG4gICAgcmV0dXJuIHRoaXMuX3Jvb3QuJGkxOG4uX250cCh2YWx1ZSwgbG9jYWxlLCBrZXksIG9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJldCB8fCBbXVxuICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVnVlSTE4bi5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgYXZhaWxhYmlsaXRpZXM7XG4vLyAkRmxvd0ZpeE1lXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlSTE4biwgJ2F2YWlsYWJpbGl0aWVzJywge1xuICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgaWYgKCFhdmFpbGFiaWxpdGllcykge1xuICAgICAgdmFyIGludGxEZWZpbmVkID0gdHlwZW9mIEludGwgIT09ICd1bmRlZmluZWQnO1xuICAgICAgYXZhaWxhYmlsaXRpZXMgPSB7XG4gICAgICAgIGRhdGVUaW1lRm9ybWF0OiBpbnRsRGVmaW5lZCAmJiB0eXBlb2YgSW50bC5EYXRlVGltZUZvcm1hdCAhPT0gJ3VuZGVmaW5lZCcsXG4gICAgICAgIG51bWJlckZvcm1hdDogaW50bERlZmluZWQgJiYgdHlwZW9mIEludGwuTnVtYmVyRm9ybWF0ICE9PSAndW5kZWZpbmVkJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXZhaWxhYmlsaXRpZXNcbiAgfVxufSk7XG5cblZ1ZUkxOG4uaW5zdGFsbCA9IGluc3RhbGw7XG5WdWVJMThuLnZlcnNpb24gPSAnOC4xMi4wJztcblxuZXhwb3J0IGRlZmF1bHQgVnVlSTE4bjtcbiIsImltcG9ydCBWdWUgZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IFZ1ZUkxOG4gZnJvbSBcInZ1ZS1pMThuXCI7XG5cbi8vIFJlZ2lzdGVyIGkxOG5cblZ1ZS51c2UoVnVlSTE4bik7XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBWdWVJMThuKHtcbiAgbG9jYWxlOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImxvY2FsZVwiKSB8fCBcImVuXCIsXG4gIGZhbGxiYWNrTG9jYWxlOiBcImVuXCJcbn0pO1xuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImRpdlwiLFxuICAgIHsgc3RhdGljQ2xhc3M6IFwibWFpbi1sYXlvdXRcIiB9LFxuICAgIFtcbiAgICAgIF9jKFwiYXBwLWhlYWRlclwiKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbnRlbnRcIiB9LCBbX2MoXCJyb3V0ZXItdmlld1wiKV0sIDEpXG4gICAgXSxcbiAgICAxXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiaGVhZGVyXCIsIHsgc3RhdGljQ2xhc3M6IFwiaGVhZGVyXCIgfSwgW1xuICAgIF92bS5fbSgwKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFxuICAgICAgXCJkaXZcIixcbiAgICAgIHsgc3RhdGljQ2xhc3M6IFwiaGVhZGVyX19uYXZcIiB9LFxuICAgICAgW1xuICAgICAgICBfYyhcImxhbmctY29udHJvbFwiLCB7IHN0YXRpY0NsYXNzOiBcImhlYWRlcl9fbGFuZ1wiIH0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfdm0uaXNBdXRoXG4gICAgICAgICAgPyBfYyhcbiAgICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJoZWFkZXJfX2xvZ291dFwiLCBvbjogeyBjbGljazogX3ZtLmxvZ091dCB9IH0sXG4gICAgICAgICAgICAgIFtfYyhcImlcIiwgeyBzdGF0aWNDbGFzczogXCJmYXMgZmEtc2lnbi1vdXQtYWx0XCIgfSldXG4gICAgICAgICAgICApXG4gICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgXSxcbiAgICAgIDFcbiAgICApXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW1xuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImFcIiwgeyBzdGF0aWNDbGFzczogXCJoZWFkZXJfX2xvZ29cIiwgYXR0cnM6IHsgaHJlZjogXCIvXCIgfSB9LCBbXG4gICAgICBfYyhcImltZ1wiLCB7XG4gICAgICAgIHN0YXRpY0NsYXNzOiBcImxvZ29fX2ltZ1wiLFxuICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoXCIuLi9jb21tb24vaW1hZ2VzL2xvZ28ucG5nXCIpLCBhbHQ6IFwiTG9nb1wiIH1cbiAgICAgIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcImxvZ29fX3RpdGxlXCIgfSwgW192bS5fdihcIlRlc3QgVGFza1wiKV0pXG4gICAgXSlcbiAgfVxuXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF92bS5oYXNMYW5ndWFnZXNcbiAgICA/IF9jKFxuICAgICAgICBcInNlbGVjdFwiLFxuICAgICAgICB7XG4gICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiBcIm1vZGVsXCIsXG4gICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmxvY2FsZSxcbiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJsb2NhbGVcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgb246IHtcbiAgICAgICAgICAgIGNoYW5nZTogW1xuICAgICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgJCRzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgICAgICAgICAgICAgICAgIC5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucywgZnVuY3Rpb24obykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24obykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gXCJfdmFsdWVcIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWxcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgX3ZtLmxvY2FsZSA9ICRldmVudC50YXJnZXQubXVsdGlwbGVcbiAgICAgICAgICAgICAgICAgID8gJCRzZWxlY3RlZFZhbFxuICAgICAgICAgICAgICAgICAgOiAkJHNlbGVjdGVkVmFsWzBdXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF92bS5oYW5kbGVTZWxlY3RMYW5nXG4gICAgICAgICAgICBdXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfdm0uX2woX3ZtLmxhbmd1YWdlcywgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgIHJldHVybiBfYyhcbiAgICAgICAgICAgIFwib3B0aW9uXCIsXG4gICAgICAgICAgICB7IGtleTogaXRlbS5jb2RlLCBkb21Qcm9wczogeyB2YWx1ZTogaXRlbS5jb2RlIH0gfSxcbiAgICAgICAgICAgIFtfdm0uX3YoXCJcXG4gICAgXCIgKyBfdm0uX3MoaXRlbS5uYXRpdmUpICsgXCJcXG4gIFwiKV1cbiAgICAgICAgICApXG4gICAgICAgIH0pLFxuICAgICAgICAwXG4gICAgICApXG4gICAgOiBfdm0uX2UoKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cbiAgPHNlbGVjdCB2LWlmPVwiaGFzTGFuZ3VhZ2VzXCIgdi1tb2RlbD1cImxvY2FsZVwiIHYtb246Y2hhbmdlPVwiaGFuZGxlU2VsZWN0TGFuZ1wiPlxuICAgIDxvcHRpb24gdi1mb3I9XCJpdGVtIGluIGxhbmd1YWdlc1wiIHYtYmluZDprZXk9XCJpdGVtLmNvZGVcIiA6dmFsdWU9XCJpdGVtLmNvZGVcIj5cbiAgICAgIHt7IGl0ZW0ubmF0aXZlIH19XG4gICAgPC9vcHRpb24+XG4gIDwvc2VsZWN0PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogXCJMYW5ndWFnZUNvbnRyb2xcIixcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGFuZ3VhZ2VzOiBbXSxcbiAgICAgIGxvY2FsZTogXCJlblwiXG4gICAgfTtcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBoYXNMYW5ndWFnZXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5sYW5ndWFnZXMubGVuZ3RoID4gMDtcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBoYW5kbGVTZWxlY3RMYW5nKCkge1xuICAgICAgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bXCJBY2NlcHQtTGFuZ3VhZ2VcIl0gPSB0aGlzLmxvY2FsZTtcbiAgICAgIHRoaXMuJGkxOG4ubG9jYWxlID0gdGhpcy5sb2NhbGU7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImxvY2FsZVwiLCB0aGlzLmxvY2FsZSk7XG4gICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaChcImNoYW5nZUxvY2FsZVwiLCB7IGxvY2FsZTogdGhpcy5sb2NhbGUgfSk7XG4gICAgfVxuICB9LFxuICBtb3VudGVkKCkge1xuICAgIGF4aW9zXG4gICAgICAuZ2V0KFwiL3YyL2xhbmd1YWdlc1wiKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDAgJiYgcmVzcG9uc2UuZGF0YSkge1xuICAgICAgICAgIHRoaXMubGFuZ3VhZ2VzID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICBjb25zdCBjdXJyZW50TGFuZyA9IHRoaXMubGFuZ3VhZ2VzLmZpbmQoXG4gICAgICAgICAgICBpdGVtID0+IGl0ZW0uY29kZSA9PT0gdGhpcy4kaTE4bi5sb2NhbGVcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChjdXJyZW50TGFuZykge1xuICAgICAgICAgICAgdGhpcy5sb2NhbGUgPSBjdXJyZW50TGFuZy5jb2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICB9KTtcbiAgfSxcbiAgYmVmb3JlRGVzdHJveSgpIHtcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcImxvY2FsZVwiKTtcbiAgfVxufTtcbjwvc2NyaXB0PlxuIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9MYW5ndWFnZUNvbnRyb2wudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTQzZGNjNjY1JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0xhbmd1YWdlQ29udHJvbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0xhbmd1YWdlQ29udHJvbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkQ6XFxcXFByb2plY3RzXFxcXFdob2VyX3Rlc3RcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzQzZGNjNjY1JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzQzZGNjNjY1JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9MYW5ndWFnZUNvbnRyb2wudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTQzZGNjNjY1JlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzQzZGNjNjY1Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvY29tcG9uZW50cy9MYW5ndWFnZUNvbnRyb2wudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcEhlYWRlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHBIZWFkZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiPHRlbXBsYXRlPlxuICA8aGVhZGVyIGNsYXNzPVwiaGVhZGVyXCI+XG4gICAgPGEgaHJlZj1cIi9cIiBjbGFzcz1cImhlYWRlcl9fbG9nb1wiPlxuICAgICAgPGltZyBzcmM9XCIuLi9jb21tb24vaW1hZ2VzL2xvZ28ucG5nXCIgYWx0PVwiTG9nb1wiIGNsYXNzPVwibG9nb19faW1nXCIgLz5cbiAgICAgIDxzcGFuIGNsYXNzPVwibG9nb19fdGl0bGVcIj5UZXN0IFRhc2s8L3NwYW4+XG4gICAgPC9hPlxuICAgIDxkaXYgY2xhc3M9XCJoZWFkZXJfX25hdlwiPlxuICAgICAgPGxhbmctY29udHJvbCBjbGFzcz1cImhlYWRlcl9fbGFuZ1wiIC8+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwiaGVhZGVyX19sb2dvdXRcIiB2LWlmPVwiaXNBdXRoXCIgQGNsaWNrPVwibG9nT3V0XCI+XG4gICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXNpZ24tb3V0LWFsdFwiPjwvaT5cbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICA8L2hlYWRlcj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0IExhbmdDb250cm9sIGZyb20gXCJAcHJvamVjdF9zcmMvY29tcG9uZW50cy9MYW5ndWFnZUNvbnRyb2wudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogXCJBcHBIZWFkZXJcIixcbiAgY29tcG9uZW50czoge1xuICAgIGxhbmdDb250cm9sOiBMYW5nQ29udHJvbFxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIGlzQXV0aCgpIHtcbiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzW1wiYXV0aC9pc0F1dGhlbnRpY2F0ZWRcIl07XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgbG9nT3V0KCkge1xuICAgICAgdGhpcy4kc3RvcmVcbiAgICAgICAgLmRpc3BhdGNoKFwiYXV0aC9sb2dvdXRcIilcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKFwiL2xvZ2luXCIpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxufTtcbjwvc2NyaXB0PlxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG5AaW1wb3J0IFwiLi4vY29tbW9uL3N0eWxlcy9jb25maWcvdmFyaWFibGVzXCI7XG5AaW1wb3J0IFwiLi4vY29tbW9uL3N0eWxlcy9jb25maWcvZnVuY3Rpb25zXCI7XG5cbi5oZWFkZXIge1xuICBtYXgtd2lkdGg6IDEwODBweDtcbiAgbWFyZ2luOiAwIGF1dG8gODBweDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAuaGVhZGVyX19sb2dvIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIGNvbG9yOiAkZGFyay1wcmltYXJ5LXRleHQtY29sb3I7XG4gICAgLmxvZ29fX2ltZyB7XG4gICAgICBtYXgtaGVpZ2h0OiAzMnB4O1xuICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgIH1cbiAgICAubG9nb19fdGl0bGUge1xuICAgICAgZm9udC1zaXplOiAxLjVyZW07IC8vIDI0IHNwXG4gICAgICBsaW5lLWhlaWdodDogMnJlbTsgLy8gMzIgc3BcbiAgICAgIGZvbnQtd2VpZ2h0OiBtYXBfZ2V0KCR0eXBvZ3JhcGh5LWZvbnQtd2VpZ2h0LXZhbHVlcywgcmVndWxhcik7XG4gICAgICBsZXR0ZXItc3BhY2luZzogbm9ybWFsO1xuICAgIH1cbiAgfVxuICAuaGVhZGVyX19uYXYge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgLmhlYWRlcl9fbG9nb3V0IHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBoZWlnaHQ6IDMycHg7XG4gICAgICB3aWR0aDogMzJweDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgIG1hcmdpbi1sZWZ0OiAxNXB4O1xuICAgICAgY29sb3I6ICRkYXJrLWljb24tY29sb3I7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAmOmhvdmVyLFxuICAgICAgJjphY3RpdmUge1xuICAgICAgICBjb2xvcjogJHByaW1hcnktY29sb3I7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG48L3N0eWxlPlxuIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9BcHBIZWFkZXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWJiNTBhNWU0JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0FwcEhlYWRlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0FwcEhlYWRlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vQXBwSGVhZGVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcUHJvamVjdHNcXFxcV2hvZXJfdGVzdFxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnYmI1MGE1ZTQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnYmI1MGE1ZTQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0FwcEhlYWRlci52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9YmI1MGE1ZTQmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignYmI1MGE1ZTQnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9jb21wb25lbnRzL0FwcEhlYWRlci52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTWFpbkxheW91dC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9NYWluTGF5b3V0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cIm1haW4tbGF5b3V0XCI+XG4gICAgPGFwcC1oZWFkZXIgLz5cbiAgICA8ZGl2IGNsYXNzPVwiY29udGVudFwiPlxuICAgICAgPHJvdXRlci12aWV3IC8+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgSGVhZGVyIGZyb20gXCJAcHJvamVjdF9zcmMvY29tcG9uZW50cy9BcHBIZWFkZXIudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogXCJNYWluTGF5b3V0XCIsXG4gIGNvbXBvbmVudHM6IHtcbiAgICBhcHBIZWFkZXI6IEhlYWRlclxuICB9XG59O1xuPC9zY3JpcHQ+XG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbi5tYWluLWxheW91dCB7XG4gIHBhZGRpbmc6IDQwcHggMDtcbiAgLmNvbnRlbnQge1xuICAgIG1heC13aWR0aDogMTA4MHB4O1xuICAgIG1hcmdpbjogMCBhdXRvO1xuICB9XG59XG48L3N0eWxlPlxuIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9NYWluTGF5b3V0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xOGNhMjBjMiZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9NYWluTGF5b3V0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vTWFpbkxheW91dC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vTWFpbkxheW91dC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkQ6XFxcXFByb2plY3RzXFxcXFdob2VyX3Rlc3RcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzE4Y2EyMGMyJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzE4Y2EyMGMyJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9NYWluTGF5b3V0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xOGNhMjBjMiZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCcxOGNhMjBjMicsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL2xheW91dHMvTWFpbkxheW91dC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCIvLyAqIEdsb2JhbFxuaW1wb3J0IFZ1ZSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgQXBwIGZyb20gXCJAcHJvamVjdF9zcmMvQXBwLnZ1ZVwiO1xuaW1wb3J0IHJvdXRlciBmcm9tIFwiQHByb2plY3Rfc3JjL3JvdXRlc1wiO1xuaW1wb3J0IHN0b3JlIGZyb20gXCJAcHJvamVjdF9zcmMvc3RvcmVcIjtcbmltcG9ydCBpMThuIGZyb20gXCJAcHJvamVjdF9zcmMvbG9jYWxlXCI7XG4vLyAqIFN0eWxlc1xuaW1wb3J0IFwiQHByb2plY3Rfc3JjL2NvbW1vbi9zdHlsZXMvdGhlbWUuc2Nzc1wiO1xuLy8gKiBMYXlvdXRcbmltcG9ydCBNYWluTGF5b3V0IGZyb20gXCJAcHJvamVjdF9zcmMvbGF5b3V0cy9NYWluTGF5b3V0LnZ1ZVwiO1xuXG4vLyByZWdpc3RlciBsYXlvdXRcblZ1ZS5jb21wb25lbnQoXCJtYWluLWxheW91dFwiLCBNYWluTGF5b3V0KTtcblxuLy8gcmVnaXN0ZXIgYXBpXG5heGlvcy5kZWZhdWx0cy5iYXNlVVJMID0gXCJodHRwczovL3Rlc3Qud2h0ZWFtLm5ldFwiO1xuY29uc3QgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInVzZXItdG9rZW5cIik7XG5pZiAodG9rZW4pIHtcbiAgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bXCJBdXRob3JpemF0aW9uXCJdID0gXCJCZWFyZXIgXCIgKyB0b2tlbjtcbn1cblxuLy8gTmF2aWdhdGUgaG9va3NcbnJvdXRlci5iZWZvcmVFYWNoKCh0bywgZnJvbSwgbmV4dCkgPT4ge1xuICBpZiAodG8ubWF0Y2hlZC5zb21lKHJlY29yZCA9PiByZWNvcmQubWV0YS5yZXF1aXJlc0F1dGgpKSB7XG4gICAgaWYgKCFzdG9yZS5nZXR0ZXJzW1wiYXV0aC9pc0F1dGhlbnRpY2F0ZWRcIl0pIHtcbiAgICAgIG5leHQoe1xuICAgICAgICBwYXRoOiBcIi9sb2dpblwiLFxuICAgICAgICBxdWVyeTogeyByZWRpcmVjdDogdG8uZnVsbFBhdGggfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHQoKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbmV4dCgpO1xuICB9XG59KTtcblxubmV3IFZ1ZSh7XG4gIHJvdXRlcixcbiAgc3RvcmUsXG4gIGkxOG4sXG4gIHJlbmRlcjogaCA9PiBoKEFwcClcbn0pLiRtb3VudChcIiNhcHBcIik7XG4iXSwic291cmNlUm9vdCI6IiJ9